"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var commander_1 = __importDefault(require("commander"));
var Gzipper_1 = require("../src/Gzipper");
var pack = __importStar(require("../package.json"));
var Index = /** @class */ (function () {
    function Index() {
        this.argv = process.argv;
        this.env = process.env;
    }
    Index.prototype.getOptions = function () {
        commander_1.default
            .version(pack.version)
            .usage('[options] <path> [outputPath]')
            .option('-v, --verbose', 'detailed level of logs')
            .option('-e, --exclude <extensions>', 'exclude file extensions from compression, example: jpeg,jpg...', this.optionToArray.bind(this))
            .option('-i, --include <extensions>', 'include file extensions for compression, example: js,css,html...', this.optionToArray.bind(this))
            .option('-t, --threshold <number>', 'exclude assets smaller than this byte size. 0 (default)', function (value) { return parseInt(value); })
            // TODO: Remove @deprecated --gzip-level
            .option('--gzip-level <number> (deprecated)', 'gzip compression level 6 (default), 0 (no compression) - 9 (best compression)', function (value) { return parseInt(value); })
            .option('--level <number>', 'compression level 6 (default), 0 (no compression) - 9 (best compression)', function (value) { return parseInt(value); })
            // TODO: Remove @deprecated --gzip-memory-level
            .option('--gzip-memory-level <number> (deprecated)', 'amount of memory which will be allocated for compression 8 (default), 1 (minimum memory) - 9 (maximum memory)', function (value) { return parseInt(value); })
            .option('--memory-level <number>', 'amount of memory which will be allocated for compression 8 (default), 1 (minimum memory) - 9 (maximum memory)', function (value) { return parseInt(value); })
            // TODO: Remove @deprecated --gzip-strategy
            .option('--gzip-strategy <number> (deprecated)', 'compression strategy 0 (default), 1 (filtered), 2 (huffman only), 3 (RLE), 4 (fixed)', function (value) { return parseInt(value); })
            .option('--strategy <number>', 'compression strategy 0 (default), 1 (filtered), 2 (huffman only), 3 (RLE), 4 (fixed)', function (value) { return parseInt(value); })
            .option('--deflate', 'enable deflate compression')
            .option('--brotli', 'enable brotli compression, Node.js >= v11.7.0')
            .option('--brotli-param-mode <value>', 'default, text (for UTF-8 text), font (for WOFF 2.0 fonts)')
            .option('--brotli-quality <number>', 'brotli compression quality 11 (default), 0 - 11', function (value) { return parseInt(value); })
            .option('--brotli-size-hint <number>', 'expected input size 0 (default)', function (value) { return parseInt(value); })
            .option('--output-file-format <value>', 'output file format with default artifacts [filename].[ext].[compressExt]')
            .option('', 'where:')
            .option('', 'filename -> file name')
            .option('', 'ext -> file extension')
            .option('', 'compressExt -> compress extension (.gz, .br, etc)')
            .option('', 'hash -> uniq uuid/v4 hash')
            .option('', 'samples:')
            .option('', '[filename].[compressExt].[ext]')
            .option('', 'test-[filename]-[hash].[compressExt].[ext]')
            .option('', '[filename]-[hash]-[filename]-tmp.[ext].[compressExt]')
            .parse(this.argv)
            .removeAllListeners();
        var _a = commander_1.default.args, target = _a[0], outputPath = _a[1];
        var options = {
            verbose: this.env.GZIPPER_VERBOSE
                ? !!parseInt(this.env.GZIPPER_VERBOSE)
                : commander_1.default.verbose,
            exclude: this.optionToArray(this.env.GZIPPER_EXCLUDE) ||
                commander_1.default.exclude,
            include: this.optionToArray(this.env.GZIPPER_INCLUDE) ||
                commander_1.default.include,
            threshold: parseInt(this.env.GZIPPER_THRESHOLD) ||
                commander_1.default.threshold ||
                0,
            // TODO: Remove @deprecated GZIPPER_GZIP_LEVEL, gzipLevel
            level: parseInt(this.env.GZIPPER_LEVEL) ||
                commander_1.default.level ||
                parseInt(this.env.GZIPPER_GZIP_LEVEL) ||
                commander_1.default.gzipLevel,
            // TODO: Remove @deprecated GZIPPER_GZIP_MEMORY_LEVEL, gzipMemoryLevel
            memoryLevel: parseInt(this.env.GZIPPER_MEMORY_LEVEL) ||
                commander_1.default.memoryLevel ||
                parseInt(this.env.GZIPPER_GZIP_MEMORY_LEVEL) ||
                commander_1.default.gzipMemoryLevel,
            // TODO: Remove @deprecated GZIPPER_GZIP_STRATEGY, gzipStrategy
            strategy: parseInt(this.env.GZIPPER_STRATEGY) ||
                commander_1.default.strategy ||
                parseInt(this.env.GZIPPER_GZIP_STRATEGY) ||
                commander_1.default.gzipStrategy,
            brotli: this.env.GZIPPER_BROTLI
                ? !!parseInt(this.env.GZIPPER_BROTLI)
                : commander_1.default.brotli,
            deflate: this.env.GZIPPER_DEFLATE
                ? !!parseInt(this.env.GZIPPER_DEFLATE)
                : commander_1.default.deflate,
            brotliParamMode: this.env.GZIPPER_BROTLI_PARAM_MODE || commander_1.default.brotliParamMode,
            brotliQuality: parseInt(this.env.GZIPPER_BROTLI_QUALITY) ||
                commander_1.default.brotliQuality,
            brotliSizeHint: parseInt(this.env.GZIPPER_BROTLI_SIZE_HINT) ||
                commander_1.default.brotliSizeHint,
            outputFileFormat: this.env.GZIPPER_OUTPUT_FILE_FORMAT || commander_1.default.outputFileFormat,
        };
        this.target = target;
        this.outputPath = outputPath;
        this.options = options;
        return this;
    };
    // Delete undefined and NaN options.
    Index.prototype.filterOptions = function () {
        var _this = this;
        Object.keys(this.options).forEach(function (key) {
            if (_this.options[key] === undefined ||
                _this.options[key] !==
                    _this.options[key]) {
                delete _this.options[key];
            }
        });
        return this;
    };
    Index.prototype.start = function () {
        var gzipper = new Gzipper_1.Gzipper(this.target, this.outputPath, this.options || {});
        gzipper.compress().catch(function (err) { return console.error(err); });
    };
    Index.prototype.optionToArray = function (value) {
        if (value) {
            return value.split(',').map(function (item) { return item.trim(); });
        }
        return value;
    };
    return Index;
}());
exports.Index = Index;
if (process.env.NODE_ENV !== 'testing') {
    new Index()
        .getOptions()
        .filterOptions()
        .start();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmluLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2Jpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQSx3REFBZ0M7QUFFaEMsMENBQXlDO0FBRXpDLG9EQUF3QztBQUV4QztJQUFBO1FBSW1CLFNBQUksR0FBYSxPQUFPLENBQUMsSUFBSSxDQUFDO1FBQzlCLFFBQUcsR0FBc0IsT0FBTyxDQUFDLEdBQUcsQ0FBQztJQStLeEQsQ0FBQztJQTdLUSwwQkFBVSxHQUFqQjtRQUNFLG1CQUFPO2FBQ0osT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7YUFDckIsS0FBSyxDQUFDLCtCQUErQixDQUFDO2FBQ3RDLE1BQU0sQ0FBQyxlQUFlLEVBQUUsd0JBQXdCLENBQUM7YUFDakQsTUFBTSxDQUNMLDRCQUE0QixFQUM1QixnRUFBZ0UsRUFDaEUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQzlCO2FBQ0EsTUFBTSxDQUNMLDRCQUE0QixFQUM1QixrRUFBa0UsRUFDbEUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQzlCO2FBQ0EsTUFBTSxDQUNMLDBCQUEwQixFQUMxQix5REFBeUQsRUFDekQsVUFBQSxLQUFLLElBQUksT0FBQSxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQWYsQ0FBZSxDQUN6QjtZQUNELHdDQUF3QzthQUN2QyxNQUFNLENBQ0wsb0NBQW9DLEVBQ3BDLCtFQUErRSxFQUMvRSxVQUFBLEtBQUssSUFBSSxPQUFBLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBZixDQUFlLENBQ3pCO2FBQ0EsTUFBTSxDQUNMLGtCQUFrQixFQUNsQiwwRUFBMEUsRUFDMUUsVUFBQSxLQUFLLElBQUksT0FBQSxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQWYsQ0FBZSxDQUN6QjtZQUNELCtDQUErQzthQUM5QyxNQUFNLENBQ0wsMkNBQTJDLEVBQzNDLCtHQUEr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