{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJEKTY\\\\APKI\\\\DjTruck\\\\djtruck\\\\src\\\\components\\\\Deck\\\\Deck.js\";\nimport React, { useEffect, useRef } from \"react\";\nimport { connect } from \"react-redux\"; //import WaveSurfer from \"wavesurfer\";\n\nimport WaveSurfer from \"./WaveSurfer/WaveSurfer\";\nimport { analyze } from 'web-audio-beat-detector';\n\nclass Deck extends React.Component {\n  constructor() {\n    super();\n    this.mainWave = React.createRef();\n    this.smallWave = React.createRef();\n    this.state = {};\n    this.state.join = {\n      peaks: [],\n      position: 0\n    };\n  }\n\n  componentDidMount() {\n    /* if(!this.props.active) return;\r\n     this.bigWaveSurfer = WaveSurfer.create({\r\n         container: this.mainWave.current,\r\n         waveColor: 'violet',\r\n         progressColor: 'purple',\r\n         autoCenter : true,\r\n         scrollParent: true,\r\n         hideScrollbar:true,\r\n         fillParent: false,\r\n         height: 130,\r\n         minPxPerSec : 150\r\n     });\r\n       this.smallWaveSurfer = WaveSurfer.create({\r\n         container: this.smallWave.current,\r\n         fillParent: true,\r\n         scrollParent : false,\r\n         hideScrollbar: true,\r\n         scrollParent : false,\r\n         height: 50,\r\n     })\r\n       let duration = 0;\r\n     this.bigWaveSurfer.on('ready', () => {\r\n        // this.bigWaveSurfer.play();\r\n         duration = this.bigWaveSurfer.getDuration();\r\n         let resolution = 430;\r\n         let peaks = this.bigWaveSurfer.backend.getPeaks(resolution, 0, resolution);\r\n         this.smallWaveSurfer.load(null, peaks);\r\n         startSync();\r\n         //this.calcBmp();\r\n     });\r\n       this.smallWaveSurfer.on('seek', (progress) => {\r\n         this.bigWaveSurfer.seekTo(progress);\r\n         if(!this.bigWaveSurfer.isPlaying()){\r\n             this.bigWaveSurfer.play();\r\n         }\r\n     })\r\n       let syncHandle = null;\r\n     let startSync = () => {\r\n         syncHandle = setInterval(() => {\r\n             let progress = this.bigWaveSurfer.getCurrentTime() / duration;\r\n             this.smallWaveSurfer.drawer.progress(progress);\r\n         }, 100);\r\n     }\r\n       let url = \"https://ciagnik-yt-downloader.herokuapp.com/download?url=https://www.youtube.com/watch?v=hVv331iLMXM\";\r\n     this.bigWaveSurfer.load(url);\r\n       this.calcBmp = () => {\r\n         fetch(url)\r\n         .then( response => response.arrayBuffer())\r\n         .then( buffer => {\r\n             const audioContext = new AudioContext();\r\n             return audioContext.decodeAudioData(buffer);\r\n         }).then( audioBuffer => analyze(audioBuffer))\r\n         .then(tempo => console.log(tempo))\r\n       }\r\n     //analyze()*/\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      style: {\n        height: 250 + 'px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(WaveSurfer, {\n      type: \"master\",\n      height: \"130\",\n      url: \"\",\n      name: this.props.name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }), React.createElement(WaveSurfer, {\n      type: \"slave\",\n      height: \"50\",\n      peaks: [],\n      name: this.props.name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapStateToProps = (state, ownProps) => ({\n  state: state.console.deck[ownProps.name]\n});\n\nconst mapDispachToProps = dispach => ({});\n\nexport default connect(mapStateToProps)(Deck);","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/components/Deck/Deck.js"],"names":["React","useEffect","useRef","connect","WaveSurfer","analyze","Deck","Component","constructor","mainWave","createRef","smallWave","state","join","peaks","position","componentDidMount","render","height","props","name","mapStateToProps","ownProps","console","deck","mapDispachToProps","dispach"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA4BC,MAA5B,QAAyC,OAAzC;AACA,SAASC,OAAT,QAAwB,aAAxB,C,CACA;;AAEA,OAAOC,UAAP,MAAuB,yBAAvB;AAEA,SAASC,OAAT,QAAwB,yBAAxB;;AAGA,MAAMC,IAAN,SAAmBN,KAAK,CAACO,SAAzB,CAAmC;AAC/BC,EAAAA,WAAW,GAAE;AACT;AACA,SAAKC,QAAL,GAAgBT,KAAK,CAACU,SAAN,EAAhB;AACA,SAAKC,SAAL,GAAiBX,KAAK,CAACU,SAAN,EAAjB;AACA,SAAKE,KAAL,GAAa,EAAb;AACA,SAAKA,KAAL,CAAWC,IAAX,GAAkB;AACdC,MAAAA,KAAK,EAAE,EADO;AAEdC,MAAAA,QAAQ,EAAE;AAFI,KAAlB;AAIH;;AAGDC,EAAAA,iBAAiB,GAAE;AAChB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8DF;;AAEDC,EAAAA,MAAM,GAAG;AAEL,WACI;AAAK,MAAA,KAAK,EAAE;AAACC,QAAAA,MAAM,EAAE,MAAM;AAAf,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEI,oBAAC,UAAD;AAAY,MAAA,IAAI,EAAC,QAAjB;AAA0B,MAAA,MAAM,EAAC,KAAjC;AAAuC,MAAA,GAAG,EAAC,EAA3C;AAA8C,MAAA,IAAI,EAAG,KAAKC,KAAL,CAAWC,IAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,EAGI,oBAAC,UAAD;AAAY,MAAA,IAAI,EAAC,OAAjB;AAAyB,MAAA,MAAM,EAAC,IAAhC;AAAqC,MAAA,KAAK,EAAE,EAA5C;AAAgD,MAAA,IAAI,EAAG,KAAKD,KAAL,CAAWC,IAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ,CADJ;AAUC;;AA1F0B;;AA8FnC,MAAMC,eAAe,GAAG,CAACT,KAAD,EAAQU,QAAR,MAAsB;AAC1CV,EAAAA,KAAK,EAAGA,KAAK,CAACW,OAAN,CAAcC,IAAd,CAAmBF,QAAQ,CAACF,IAA5B;AADkC,CAAtB,CAAxB;;AAIA,MAAMK,iBAAiB,GAAGC,OAAO,KAAK,EAAL,CAAjC;;AAIA,eAAevB,OAAO,CAACkB,eAAD,CAAP,CAAyBf,IAAzB,CAAf","sourcesContent":["import React, { useEffect , useRef} from \"react\";\r\nimport { connect } from \"react-redux\";\r\n//import WaveSurfer from \"wavesurfer\";\r\n\r\nimport WaveSurfer from \"./WaveSurfer/WaveSurfer\";\r\n\r\nimport { analyze } from 'web-audio-beat-detector';\r\n\r\n\r\nclass Deck extends React.Component {\r\n    constructor(){\r\n        super();\r\n        this.mainWave = React.createRef();\r\n        this.smallWave = React.createRef();\r\n        this.state = {}\r\n        this.state.join = {\r\n            peaks: [],\r\n            position: 0,\r\n        }\r\n    }\r\n\r\n\r\n    componentDidMount(){\r\n       /* if(!this.props.active) return;\r\n        this.bigWaveSurfer = WaveSurfer.create({\r\n            container: this.mainWave.current,\r\n            waveColor: 'violet',\r\n            progressColor: 'purple',\r\n            autoCenter : true,\r\n            scrollParent: true,\r\n            hideScrollbar:true,\r\n            fillParent: false,\r\n            height: 130,\r\n            minPxPerSec : 150\r\n        });\r\n\r\n        this.smallWaveSurfer = WaveSurfer.create({\r\n            container: this.smallWave.current,\r\n            fillParent: true,\r\n            scrollParent : false,\r\n            hideScrollbar: true,\r\n            scrollParent : false,\r\n            height: 50,\r\n        })\r\n\r\n        let duration = 0;\r\n        this.bigWaveSurfer.on('ready', () => {\r\n           // this.bigWaveSurfer.play();\r\n            duration = this.bigWaveSurfer.getDuration();\r\n            let resolution = 430;\r\n            let peaks = this.bigWaveSurfer.backend.getPeaks(resolution, 0, resolution);\r\n            this.smallWaveSurfer.load(null, peaks);\r\n            startSync();\r\n            //this.calcBmp();\r\n        });\r\n\r\n        this.smallWaveSurfer.on('seek', (progress) => {\r\n            this.bigWaveSurfer.seekTo(progress);\r\n            if(!this.bigWaveSurfer.isPlaying()){\r\n                this.bigWaveSurfer.play();\r\n            }\r\n        })\r\n\r\n        let syncHandle = null;\r\n        let startSync = () => {\r\n            syncHandle = setInterval(() => {\r\n                let progress = this.bigWaveSurfer.getCurrentTime() / duration;\r\n                this.smallWaveSurfer.drawer.progress(progress);\r\n            }, 100);\r\n        }\r\n\r\n        let url = \"https://ciagnik-yt-downloader.herokuapp.com/download?url=https://www.youtube.com/watch?v=hVv331iLMXM\";\r\n        this.bigWaveSurfer.load(url);\r\n\r\n        this.calcBmp = () => {\r\n            fetch(url)\r\n            .then( response => response.arrayBuffer())\r\n            .then( buffer => {\r\n                const audioContext = new AudioContext();\r\n                return audioContext.decodeAudioData(buffer);\r\n            }).then( audioBuffer => analyze(audioBuffer))\r\n            .then(tempo => console.log(tempo))\r\n\r\n        }\r\n        //analyze()*/\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div style={{height: 250 + 'px'}}>\r\n\r\n                <WaveSurfer type=\"master\" height=\"130\" url=\"\" name={ this.props.name } />        \r\n                <WaveSurfer type=\"slave\" height=\"50\" peaks={[]} name={ this.props.name } />    \r\n\r\n                {/*<div ref={ this.mainWave } style={{height:130 + 'px'}} >  </div>\r\n                <div ref={ this.smallWave }  style={{height: 50 + 'px'}} >  </div> */}\r\n            </div>\r\n            )\r\n        }\r\n    \r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => ({\r\n    state : state.console.deck[ownProps.name],\r\n})\r\n\r\nconst mapDispachToProps = dispach => ({\r\n    \r\n})\r\n\r\nexport default connect(mapStateToProps)(Deck);"]},"metadata":{},"sourceType":"module"}