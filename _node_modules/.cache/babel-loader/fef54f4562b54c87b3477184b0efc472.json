{"ast":null,"code":"import _regeneratorRuntime from\"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\node_modules\\\\@babel\\\\runtime/regenerator\";var _marked=/*#__PURE__*/_regeneratorRuntime.mark(requestUserProfile),_marked2=/*#__PURE__*/_regeneratorRuntime.mark(handle);import{put,takeEvery}from\"redux-saga/effects\";import{ACTIONS,pushLog,setProfile}from\"./../../actions\";import{getApi}from\"./../../apis/apiProvider\";import{Log}from\"./../../utils/logger/logger\";import errorParser from\"./../../utils/serverErrorParser/errorParser\";export default function requestUserProfile(){return _regeneratorRuntime.wrap(function requestUserProfile$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return takeEvery(ACTIONS.P_REQ_PROFILE,handle);case 2:case\"end\":return _context.stop();}}},_marked);}function handle(action){var path,_response$data,_getApi,callQuery,queries,query,response;return _regeneratorRuntime.wrap(function handle$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:path=['saga','profile','request profile data'];_context2.prev=1;if(action.nickname){_context2.next=4;break;}return _context2.abrupt(\"return\");case 4:_getApi=getApi(\"UserAssets\"),callQuery=_getApi.callQuery,queries=_getApi.queries;query=queries.getProfileQl;_context2.next=8;return callQuery(query,null,{nickname:action.nickname});case 8:response=_context2.sent;if(!response.errors){_context2.next=11;break;}throw new Error('Server response contains errors '+errorParser(response.errors));case 11:if(response===null||response===void 0?void 0:(_response$data=response.data)===null||_response$data===void 0?void 0:_response$data.profile){_context2.next=13;break;}throw new Error();case 13:_context2.next=15;return put(setProfile(response.data.profile));case 15:_context2.next=17;return put(pushLog(new Log(\"Profile : \".concat(action.nickname,\" data recived from database\"),path)));case 17:_context2.next=23;break;case 19:_context2.prev=19;_context2.t0=_context2[\"catch\"](1);_context2.next=23;return put(pushLog(Log.Error(path,_context2.t0.message,'can \\'t get profiele data from database'+_context2.t0.message,_context2.t0)));case 23:case\"end\":return _context2.stop();}}},_marked2,null,[[1,19]]);}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/sagas/profile/reqProfileSaqa.js"],"names":["requestUserProfile","handle","put","takeEvery","ACTIONS","pushLog","setProfile","getApi","Log","errorParser","P_REQ_PROFILE","action","path","nickname","callQuery","queries","query","getProfileQl","response","errors","Error","data","profile","message"],"mappings":"2JAMyBA,kB,iDAIfC,M,EAVV,OAASC,GAAT,CAAcC,SAAd,KAA+B,oBAA/B,CACA,OAASC,OAAT,CAAkBC,OAAlB,CAA2BC,UAA3B,KAA6C,iBAA7C,CACA,OAASC,MAAT,KAAuB,0BAAvB,CACA,OAASC,GAAT,KAAoB,6BAApB,CACA,MAAOC,CAAAA,WAAP,KAAwB,6CAAxB,CAEA,cAAe,SAAUT,CAAAA,kBAAV,8IACX,MAAMG,CAAAA,SAAS,CAACC,OAAO,CAACM,aAAT,CAAwBT,MAAxB,CAAf,CADW,sDAIf,QAAUA,CAAAA,MAAV,CAAiBU,MAAjB,qLACUC,IADV,CACiB,CAAC,MAAD,CAAS,SAAT,CAAoB,sBAApB,CADjB,qBAGYD,MAAM,CAACE,QAHnB,2EAMuCN,MAAM,CAAC,YAAD,CAN7C,CAMgBO,SANhB,SAMgBA,SANhB,CAM2BC,OAN3B,SAM2BA,OAN3B,CAOcC,KAPd,CAOsBD,OAAO,CAACE,YAP9B,kBASyB,MAAMH,CAAAA,SAAS,CAACE,KAAD,CAAQ,IAAR,CAAc,CAAEH,QAAQ,CAAEF,MAAM,CAACE,QAAnB,CAAd,CAAf,CATzB,OAScK,QATd,oBAWYA,QAAQ,CAACC,MAXrB,gCAYkB,IAAIC,CAAAA,KAAJ,CAAU,mCAAoCX,WAAW,CAACS,QAAQ,CAACC,MAAV,CAAzD,CAZlB,YAeYD,QAfZ,SAeYA,QAfZ,iCAeYA,QAAQ,CAAEG,IAftB,yCAeY,eAAgBC,OAf5B,gCAgBkB,IAAIF,CAAAA,KAAJ,EAhBlB,2BAmBQ,MAAMlB,CAAAA,GAAG,CAACI,UAAU,CAACY,QAAQ,CAACG,IAAT,CAAcC,OAAf,CAAX,CAAT,CAnBR,0BAqBQ,MAAMpB,CAAAA,GAAG,CAACG,OAAO,CAAC,GAAIG,CAAAA,GAAJ,qBAAqBG,MAAM,CAACE,QAA5B,gCAAmED,IAAnE,CAAD,CAAR,CAAT,CArBR,+GAuBQ,MAAMV,CAAAA,GAAG,CAACG,OAAO,CAACG,GAAG,CAACY,KAAJ,CACdR,IADc,CAEd,aAAMW,OAFQ,CAGd,0CAA4C,aAAMA,OAHpC,cAAD,CAAR,CAAT,CAvBR","sourcesContent":["import { put, takeEvery } from \"redux-saga/effects\";\r\nimport { ACTIONS, pushLog, setProfile } from \"./../../actions\";\r\nimport { getApi } from \"./../../apis/apiProvider\";\r\nimport { Log } from \"./../../utils/logger/logger\";\r\nimport errorParser from \"./../../utils/serverErrorParser/errorParser\";\r\n\r\nexport default function* requestUserProfile() {\r\n    yield takeEvery(ACTIONS.P_REQ_PROFILE, handle)\r\n}\r\n\r\nfunction* handle(action) {\r\n    const path = ['saga', 'profile', 'request profile data']\r\n    try {\r\n        if(!action.nickname) {\r\n            return;\r\n        }\r\n        const { callQuery, queries } = getApi(\"UserAssets\");\r\n        const query = queries.getProfileQl;\r\n\r\n        const response = yield callQuery(query, null, { nickname: action.nickname })\r\n\r\n        if (response.errors) {\r\n            throw new Error('Server response contains errors '+ errorParser(response.errors))\r\n        }\r\n\r\n        if(!response?.data?.profile){\r\n            throw new Error();\r\n        }\r\n\r\n        yield put(setProfile(response.data.profile))\r\n\r\n        yield put(pushLog(new Log(`Profile : ${action.nickname} data recived from database`, path)))\r\n    } catch (error) {\r\n        yield put(pushLog(Log.Error(\r\n            path,\r\n            error.message,\r\n            'can \\'t get profiele data from database' + error.message,\r\n            error\r\n        )))\r\n    }\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}