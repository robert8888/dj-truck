{"ast":null,"code":"import store from \"./../../../../../../store\";\nimport WaveSurfer from \"wavesurfer\";\nimport { hexToRgb } from \"./../../../../../../utils/colors/converter\";\nimport { getBeatLength } from \"./../../../../../../utils/bpm/converter\";\nexport default class Looper {\n  makeLoop(channel, loopLength) {\n    channel.loop = {}; // namespace for loop variables;\n\n    const state = store.getState();\n    const channelName = channel.channelName;\n    const beatLength = getBeatLength(state.console.channel[channelName].track.bpm);\n    const beatOffset = state.console.channel[channelName].playBackState.offset;\n    const currentPosition = channel.master.getCurrentTime();\n    const audioBufferSource = channel.master.backend.source;\n    channel.loop.audioBufferSource = audioBufferSource;\n    channel.loop.beatLength = beatLength;\n    channel.loop.start = currentPosition + (beatLength - (currentPosition - beatOffset) % beatLength); //don't quantize to whole beat\n\n    if (loopLength < 1) {\n      channel.loop.start = currentPosition + (beatLength * loopLength - (currentPosition - beatOffset) % (beatLength * loopLength));\n    }\n\n    channel.loop.end = channel.loop.start + beatLength * loopLength;\n\n    if (isNaN(channel.loop.start) || isNaN(channel.loop.end)) {\n      throw new Error(\"invalid value of range variables\");\n    } // audioBufferSource.loopStart = channel.loop.start;\n    // audioBufferSource.loopEnd = channel.loop.end;\n    // audioBufferSource.loop = true;\n    //looping waveSurrfer and update end position if is set; \n\n\n    channel.loop.watch = time => {\n      if (time > channel.loop.end) {\n        channel.master.seekTo(channel.loop.start + (time - channel.loop.end));\n        /*channel.master.backend.startPosition = channel.loop.start + (time - channel.loop.end);\r\n        channel.master.backend.lastPlay = channel.master.backend.ac.currentTime;\r\n        channel.master.drawer.progress(channel.master.backend.getPlayedPercents());\r\n        if(channel.loop.nextEnd){\r\n            this._updateLoopEnd(channel, channel.loop.nextEnd);\r\n            delete channel.loop.nextEnd;\r\n        }*/\n      }\n    };\n\n    channel.master.on(\"audioprocess\", channel.loop.watch);\n    this.drawLoop(channel);\n  }\n\n  updateLoop(channel, loopLength) {\n    const {\n      start,\n      beatLength\n    } = channel.loop;\n    const newEnd = start + beatLength * loopLength;\n    const currentPosition = channel.master.getCurrentTime();\n\n    if (newEnd < currentPosition) {\n      channel.loop.nextEnd = newEnd;\n    } else {\n      this._updateLoopEnd(channel, newEnd);\n    }\n  }\n\n  _updateLoopEnd(channel, newEnd) {\n    channel.loop.end = newEnd;\n    channel.loop.audioBufferSource.loopEnd = newEnd;\n    this.clearDraw(channel);\n    this.drawLoop(channel);\n  }\n\n  endLoop(channel) {\n    channel.master.un(\"audioprocess\", channel.loop.watch);\n    channel.master.backend.source.loop = false;\n    this.clearDraw(channel);\n    delete channel.loop;\n  }\n\n  drawLoop(channel) {\n    let {\n      start,\n      end\n    } = channel.loop;\n    const wrapper = channel.master.drawer.wrapper;\n    const styleApply = WaveSurfer.Drawer.style;\n    const minPxPerSec = channel.master.params.minPxPerSec;\n    const color = hexToRgb(channel.master.params.waveColor);\n    const regionStyle = {\n      position: \"absolute\",\n      top: \"0px\",\n      height: \"100%\",\n      background: \"rgba(\" + color.r + \",\" + color.g + \",\" + color.b + \", 0.3)\"\n    };\n    const region = document.createElement(\"div\");\n    regionStyle.left = start * minPxPerSec + \"px\";\n    regionStyle.width = (end - start) * minPxPerSec + \"px\";\n    styleApply(region, regionStyle);\n    wrapper.appendChild(region);\n    channel.loop.region = region;\n  }\n\n  clearDraw(channel) {\n    channel.loop.region.remove();\n  }\n\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/pages/app/core/console/channels/looper/looper.js"],"names":["store","WaveSurfer","hexToRgb","getBeatLength","Looper","makeLoop","channel","loopLength","loop","state","getState","channelName","beatLength","console","track","bpm","beatOffset","playBackState","offset","currentPosition","master","getCurrentTime","audioBufferSource","backend","source","start","end","isNaN","Error","watch","time","seekTo","on","drawLoop","updateLoop","newEnd","nextEnd","_updateLoopEnd","loopEnd","clearDraw","endLoop","un","wrapper","drawer","styleApply","Drawer","style","minPxPerSec","params","color","waveColor","regionStyle","position","top","height","background","r","g","b","region","document","createElement","left","width","appendChild","remove"],"mappings":"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","sourcesContent":["import store from \"./../../../../../../store\";\r\nimport WaveSurfer from \"wavesurfer\";\r\nimport { hexToRgb } from \"./../../../../../../utils/colors/converter\";\r\nimport { getBeatLength } from \"./../../../../../../utils/bpm/converter\";\r\n\r\nexport default class Looper {\r\n    makeLoop(channel, loopLength){\r\n        channel.loop = {}// namespace for loop variables;\r\n        const state = store.getState();\r\n        const channelName = channel.channelName;\r\n\r\n        const beatLength = getBeatLength(state.console.channel[channelName].track.bpm);\r\n        const beatOffset = state.console.channel[channelName].playBackState.offset;\r\n        const currentPosition = channel.master.getCurrentTime();\r\n        const audioBufferSource = channel.master.backend.source;\r\n        channel.loop.audioBufferSource = audioBufferSource;\r\n        channel.loop.beatLength = beatLength;\r\n\r\n        channel.loop.start = currentPosition \r\n            + (beatLength - (currentPosition - beatOffset) % beatLength);\r\n        //don't quantize to whole beat\r\n\r\n        if(loopLength < 1){ \r\n            channel.loop.start = currentPosition \r\n                + ((beatLength * loopLength) - (currentPosition - beatOffset) % (beatLength * loopLength));\r\n        }\r\n        channel.loop.end = channel.loop.start + beatLength * loopLength;\r\n\r\n        if(isNaN(channel.loop.start) || isNaN(channel.loop.end)){\r\n            throw new Error(\"invalid value of range variables\")\r\n        }\r\n       // audioBufferSource.loopStart = channel.loop.start;\r\n       // audioBufferSource.loopEnd = channel.loop.end;\r\n       // audioBufferSource.loop = true;\r\n\r\n        //looping waveSurrfer and update end position if is set; \r\n        channel.loop.watch = (time)=>{\r\n            if(time > channel.loop.end){\r\n                channel.master.seekTo(channel.loop.start + (time - channel.loop.end))\r\n                /*channel.master.backend.startPosition = channel.loop.start + (time - channel.loop.end);\r\n                channel.master.backend.lastPlay = channel.master.backend.ac.currentTime;\r\n                channel.master.drawer.progress(channel.master.backend.getPlayedPercents());\r\n                if(channel.loop.nextEnd){\r\n                    this._updateLoopEnd(channel, channel.loop.nextEnd);\r\n                    delete channel.loop.nextEnd;\r\n                }*/\r\n            }\r\n        }\r\n\r\n        channel.master.on(\"audioprocess\", channel.loop.watch);\r\n        this.drawLoop(channel);\r\n    }\r\n\r\n    updateLoop(channel, loopLength){\r\n        const { start, beatLength } = channel.loop;\r\n        const newEnd = start + beatLength * loopLength;\r\n        const currentPosition = channel.master.getCurrentTime();\r\n        if(newEnd < currentPosition ){\r\n            channel.loop.nextEnd = newEnd;\r\n        } else {\r\n            this._updateLoopEnd(channel, newEnd)\r\n        }\r\n    }\r\n\r\n    _updateLoopEnd(channel, newEnd){\r\n        channel.loop.end = newEnd;\r\n        channel.loop.audioBufferSource.loopEnd = newEnd;\r\n        this.clearDraw(channel);\r\n        this.drawLoop(channel);\r\n    }\r\n\r\n    endLoop(channel){\r\n        channel.master.un(\"audioprocess\", channel.loop.watch);\r\n        channel.master.backend.source.loop = false;\r\n        this.clearDraw(channel);\r\n        delete channel.loop;\r\n    }\r\n\r\n    drawLoop(channel){\r\n        let {start, end} = channel.loop;\r\n        const wrapper = channel.master.drawer.wrapper;\r\n        const styleApply = WaveSurfer.Drawer.style;\r\n        const minPxPerSec = channel.master.params.minPxPerSec;\r\n        const color = hexToRgb(channel.master.params.waveColor);\r\n\r\n        const regionStyle = {\r\n            position: \"absolute\",\r\n            top: \"0px\",\r\n            height: \"100%\",\r\n            background: \"rgba(\" + color.r + \",\" + color.g + \",\" + color.b + \", 0.3)\"\r\n        };\r\n\r\n        const region = document.createElement(\"div\");\r\n        regionStyle.left =   start * minPxPerSec  + \"px\";\r\n        regionStyle.width = (end - start) * minPxPerSec  + \"px\";\r\n\r\n        styleApply(region, regionStyle);\r\n        wrapper.appendChild(region);\r\n        channel.loop.region = region;\r\n    }\r\n\r\n    clearDraw(channel){\r\n        channel.loop.region.remove();\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}