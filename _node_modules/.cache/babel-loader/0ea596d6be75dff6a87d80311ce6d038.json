{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\src\\\\pages\\\\console\\\\components\\\\Console\\\\Effector\\\\Effector.js\";\nimport React, { useState, useEffect, useCallback, useMemo, useRef } from \"react\";\nimport { connect } from \"react-redux\"; // import { throttle } from \"./../../../../../utils/functions/lodash\";\n\nimport throttle from \"lodash/throttle\";\nimport \"./effector-channel.scss\";\nimport DryWetKnob from \"./components/DryWetKnob/DryWetKnob\";\nimport EffectorButton from \"./components/EffectorButton/EffectorButton\";\nimport EffectorKnob from \"./components/EffectorKnob/EffectorKnob\";\nimport { Dropdown, DropdownButton } from \"react-bootstrap\";\nimport { setEffectParametr, setCurrentEffect, setDryWet } from \"./../../../../../actions\";\nimport mapComponentToParameter from \"./utils/mapComponentToParameter\";\n\nconst Effector = ({\n  setParameter,\n  availableEffects: getAvailableEffects,\n  channel,\n  channelState,\n  setDryWet,\n  setEffect\n}) => {\n  const [currentEffect, setCurrentEffect] = useState(undefined);\n  const [effectorParams, setEffectorParams] = useState([]);\n  const currentChannelState = useRef();\n  useEffect(() => {\n    currentChannelState.current = channelState;\n  }, [channelState]);\n  const paramChangeHandle = useCallback((param, value) => {\n    setParameter(currentEffect, param, value);\n  }, [setParameter, currentEffect]);\n  useEffect(() => {\n    setEffect(currentEffect);\n  }, [currentEffect, setEffect]);\n  const availableEffects = useMemo(() => Object.keys(getAvailableEffects).map((effect, index) => {\n    return React.createElement(Dropdown.Item, {\n      key: effect + \"-\" + index,\n      onClick: setCurrentEffect.bind(null, effect),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, effect);\n  }), [getAvailableEffects, setCurrentEffect]);\n  useEffect(() => {\n    channelState = currentChannelState.current;\n    let currentEffectParams = getAvailableEffects[currentEffect];\n\n    if (!currentEffectParams) {\n      setEffectorParams([]);\n      return;\n    }\n\n    setEffectorParams(Object.entries(currentEffectParams).map(([name, param]) => {\n      //console.log(\"producing knobs\")\n      const effectState = channelState.effects[currentEffect];\n      let value = param.defaultValue;\n\n      if (effectState) {\n        value = effectState[name] || value;\n      }\n\n      let bindData = {\n        channel: channel,\n        effect: currentEffect,\n        name: name\n      };\n      let reactElement = \"\";\n\n      if (param.type === \"float\") {\n        let Knob = mapComponentToParameter(bindData, EffectorKnob);\n        reactElement = React.createElement(Knob, {\n          key: name + param.description,\n          scale: param.max - param.min,\n          initValue: value,\n          alt: param.description,\n          showValue: true,\n          onChange: paramChangeHandle.bind(null, name),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 65\n          },\n          __self: this\n        });\n      } else if (param.type === \"bool\") {\n        const Button = mapComponentToParameter(bindData, EffectorButton);\n        reactElement = React.createElement(Button, {\n          key: currentEffect + name + param.description,\n          onChange: paramChangeHandle.bind(null, name),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 76\n          },\n          __self: this\n        }, param.description);\n      }\n\n      return reactElement;\n    }));\n  }, [currentEffect, paramChangeHandle, getAvailableEffects, channel, currentChannelState, setEffectorParams]);\n  return React.createElement(\"div\", {\n    className: \"effector-channel effector ch-\" + channel,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, \"FX \" + channel), React.createElement(\"div\", {\n    className: \"dra-wet-knob\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, React.createElement(DryWetKnob, {\n    alt: \"D/W\",\n    onChange: setDryWet,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"effect-selector\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, React.createElement(DropdownButton, {\n    title: currentEffect || \"-----\",\n    className: \"btn-effect-select\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, React.createElement(Dropdown.Item, {\n    key: \"none\",\n    onClick: setCurrentEffect.bind(null, undefined),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, \" ----- \"), availableEffects)), React.createElement(\"div\", {\n    className: \"effector-param\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, effectorParams));\n};\n\nconst mapStateToProps = (state, ownProps) => ({\n  availableEffects: state.effector.effects,\n  channelState: state.effector.channels[ownProps.channel]\n});\n\nconst mapDispachToProps = (dispatch, ownProps) => {\n  const tdispatch = throttle(dispatch, 100);\n  return {\n    setParameter: (...args) => tdispatch(setEffectParametr(ownProps.channel, ...args)),\n    setEffect: effect => dispatch(setCurrentEffect(ownProps.channel, effect)),\n    setDryWet: value => dispatch(setDryWet(ownProps.channel, value))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispachToProps)(Effector);","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/pages/console/components/Console/Effector/Effector.js"],"names":["React","useState","useEffect","useCallback","useMemo","useRef","connect","throttle","DryWetKnob","EffectorButton","EffectorKnob","Dropdown","DropdownButton","setEffectParametr","setCurrentEffect","setDryWet","mapComponentToParameter","Effector","setParameter","availableEffects","getAvailableEffects","channel","channelState","setEffect","currentEffect","undefined","effectorParams","setEffectorParams","currentChannelState","current","paramChangeHandle","param","value","Object","keys","map","effect","index","bind","currentEffectParams","entries","name","effectState","effects","defaultValue","bindData","reactElement","type","Knob","description","max","min","Button","mapStateToProps","state","ownProps","effector","channels","mapDispachToProps","dispatch","tdispatch","args"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback, useMemo, useRef } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n// import { throttle } from \"./../../../../../utils/functions/lodash\";\r\nimport throttle from \"lodash/throttle\";\r\n\r\nimport \"./effector-channel.scss\";\r\nimport DryWetKnob from \"./components/DryWetKnob/DryWetKnob\";\r\nimport EffectorButton from \"./components/EffectorButton/EffectorButton\";\r\nimport EffectorKnob from \"./components/EffectorKnob/EffectorKnob\";\r\nimport { Dropdown, DropdownButton } from \"react-bootstrap\";\r\nimport { setEffectParametr, setCurrentEffect, setDryWet } from \"./../../../../../actions\";\r\nimport mapComponentToParameter from \"./utils/mapComponentToParameter\";\r\n\r\nconst Effector = ({ setParameter, availableEffects: getAvailableEffects, channel, channelState, setDryWet, setEffect }) => {\r\n    const [currentEffect, setCurrentEffect] = useState(undefined);\r\n    const [effectorParams, setEffectorParams] = useState([]);\r\n    const currentChannelState = useRef();\r\n\r\n    useEffect(()=>{\r\n        currentChannelState.current = channelState;\r\n    }, [channelState])\r\n\r\n    const paramChangeHandle = useCallback((param, value) => {\r\n        setParameter(currentEffect, param, value);\r\n    }, [setParameter, currentEffect])\r\n\r\n\r\n    useEffect(() => {\r\n        setEffect(currentEffect);\r\n    }, [currentEffect, setEffect])\r\n\r\n    \r\n    const availableEffects = useMemo(() => Object.keys(getAvailableEffects).map((effect, index) => {\r\n        return (<Dropdown.Item key={effect + \"-\" + index} onClick={setCurrentEffect.bind(null, effect)}>{effect}</Dropdown.Item>)\r\n    }), [getAvailableEffects, setCurrentEffect])\r\n\r\n\r\n    useEffect(() => {\r\n        channelState = currentChannelState.current;\r\n        let currentEffectParams = getAvailableEffects[currentEffect];\r\n        if (!currentEffectParams) {\r\n            setEffectorParams([]);\r\n            return;\r\n        }\r\n\r\n        setEffectorParams(Object.entries(currentEffectParams).map(([name, param]) => {\r\n            //console.log(\"producing knobs\")\r\n            const effectState = channelState.effects[currentEffect];\r\n\r\n            let value = param.defaultValue;\r\n            if (effectState) {\r\n                value = effectState[name] || value;\r\n            }\r\n\r\n            let bindData = {\r\n                channel: channel,\r\n                effect: currentEffect,\r\n                name: name\r\n            };\r\n\r\n            let reactElement = \"\";\r\n            if (param.type === \"float\") {\r\n                let Knob = mapComponentToParameter(bindData, EffectorKnob);\r\n                reactElement = (\r\n                    <Knob\r\n                        key={name + param.description}\r\n                        scale={param.max - param.min}\r\n                        initValue={value}\r\n                        alt={param.description}\r\n                        showValue\r\n                        onChange={paramChangeHandle.bind(null, name)} />\r\n                )\r\n            } else if (param.type === \"bool\") {\r\n                const Button = mapComponentToParameter(bindData, EffectorButton);\r\n\r\n                reactElement = (<Button\r\n                    key={currentEffect + name + param.description}\r\n                    onChange={paramChangeHandle.bind(null, name)}>\r\n                    {param.description}\r\n                </Button>)\r\n            }\r\n\r\n            return reactElement\r\n        }))\r\n    }, [currentEffect, \r\n        paramChangeHandle, \r\n        getAvailableEffects,\r\n        channel, \r\n        currentChannelState, \r\n        setEffectorParams])\r\n\r\n\r\n\r\n    return (\r\n        <div className={\"effector-channel effector ch-\" + channel}>\r\n            <span className=\"label\">{\"FX \" + channel}</span>\r\n            <div className=\"dra-wet-knob\">\r\n                <DryWetKnob alt=\"D/W\" onChange={setDryWet} />\r\n            </div>\r\n            <div className=\"effect-selector\">\r\n                <DropdownButton title={currentEffect || \"-----\"} className=\"btn-effect-select\">\r\n                    <Dropdown.Item key={\"none\"} onClick={setCurrentEffect.bind(null, undefined)}> ----- </Dropdown.Item>\r\n                    {availableEffects}\r\n                </DropdownButton>\r\n            </div>\r\n            <div className=\"effector-param\">\r\n                {effectorParams}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => ({\r\n    availableEffects: state.effector.effects,\r\n    channelState: state.effector.channels[ownProps.channel]\r\n})\r\n\r\nconst mapDispachToProps = (dispatch, ownProps) => {\r\n    const tdispatch = throttle(dispatch, 100);\r\n    return {\r\n        setParameter: (...args) => tdispatch(setEffectParametr(ownProps.channel, ...args)),\r\n        setEffect: (effect) => dispatch(setCurrentEffect(ownProps.channel, effect)),\r\n        setDryWet: (value) => dispatch(setDryWet(ownProps.channel, value))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispachToProps)(Effector);\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}