{"ast":null,"code":"import _regeneratorRuntime from\"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\node_modules\\\\@babel\\\\runtime/regenerator\";var _marked=/*#__PURE__*/_regeneratorRuntime.mark(interceptPlay),_marked2=/*#__PURE__*/_regeneratorRuntime.mark(handel);import{put,select,takeEvery}from\"redux-saga/effects\";import{ACTIONS,pushLog,updateStartTime}from\"../../../actions\";import RECORD_STATE from\"./../../../reducers/console/recorder/stateDef\";import{Log}from\"./../../../utils/logger/logger\";export default function interceptPlay(){return _regeneratorRuntime.wrap(function interceptPlay$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return takeEvery(ACTIONS.CANCEL_CUE_AND_PLAY,handel);case 2:case\"end\":return _context.stop();}}},_marked);}var getChannelState=function getChannelState(state,channel){return state.console.channel[channel];};var isRecording=function isRecording(state){return state.recorder.recordingState===RECORD_STATE.RECORDING;};function handel(action){var path,recording,channel,channelState;return _regeneratorRuntime.wrap(function handel$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:path=['saga','recorder','tracklis','intercept play after cue action'];_context2.prev=1;_context2.next=4;return select(isRecording);case 4:recording=_context2.sent;if(recording){_context2.next=7;break;}return _context2.abrupt(\"return\");case 7:channel=action.destination;_context2.next=10;return select(getChannelState,channel);case 10:channelState=_context2.sent;_context2.next=13;return put(updateStartTime(channelState.track.id));case 13:_context2.next=15;return put(pushLog(new Log(\"Track start time updated on tracklis channel\".concat(channel,\" id: \").concat(channelState.track.id),path)));case 15:_context2.next=21;break;case 17:_context2.prev=17;_context2.t0=_context2[\"catch\"](1);_context2.next=21;return put(pushLog(Log.Error(path,\"Can't update start time on track on tracklist. \"+_context2.t0.message,\"Sorry during process of updating record tracklist occurred a problem\",_context2.t0)));case 21:case\"end\":return _context2.stop();}}},_marked2,null,[[1,17]]);}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/sagas/recorder/tracklist/catchPlaytrack.js"],"names":["interceptPlay","handel","put","select","takeEvery","ACTIONS","pushLog","updateStartTime","RECORD_STATE","Log","CANCEL_CUE_AND_PLAY","getChannelState","state","channel","console","isRecording","recorder","recordingState","RECORDING","action","path","recording","destination","channelState","track","id","Error","message"],"mappings":"2JAKyBA,a,iDAQfC,M,EAbV,OAASC,GAAT,CAAcC,MAAd,CAAsBC,SAAtB,KAAuC,oBAAvC,CACA,OAASC,OAAT,CAAkBC,OAAlB,CAA2BC,eAA3B,KAAkD,kBAAlD,CACA,MAAOC,CAAAA,YAAP,KAAyB,+CAAzB,CACA,OAASC,GAAT,KAAoB,gCAApB,CAEA,cAAe,SAAUT,CAAAA,aAAV,yIACX,MAAMI,CAAAA,SAAS,CAACC,OAAO,CAACK,mBAAT,CAA8BT,MAA9B,CAAf,CADW,sDAIf,GAAMU,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACC,KAAD,CAAQC,OAAR,QAAoBD,CAAAA,KAAK,CAACE,OAAN,CAAcD,OAAd,CAAsBA,OAAtB,CAApB,EAAxB,CAEA,GAAME,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAAAH,KAAK,QAAIA,CAAAA,KAAK,CAACI,QAAN,CAAeC,cAAf,GAAkCT,YAAY,CAACU,SAAnD,EAAzB,CAEA,QAAUjB,CAAAA,MAAV,CAAiBkB,MAAjB,4JACUC,IADV,CACiB,CAAC,MAAD,CAAS,UAAT,CAAqB,UAArB,CAAiC,iCAAjC,CADjB,mCAG0B,MAAMjB,CAAAA,MAAM,CAACY,WAAD,CAAZ,CAH1B,OAGcM,SAHd,mBAIYA,SAJZ,mEAQcR,OARd,CAQwBM,MAAM,CAACG,WAR/B,mBAS6B,MAAMnB,CAAAA,MAAM,CAACQ,eAAD,CAAkBE,OAAlB,CAAZ,CAT7B,QAScU,YATd,kCAWQ,MAAMrB,CAAAA,GAAG,CAACK,eAAe,CAACgB,YAAY,CAACC,KAAb,CAAmBC,EAApB,CAAhB,CAAT,CAXR,0BAaQ,MAAMvB,CAAAA,GAAG,CAACI,OAAO,CACT,GAAIG,CAAAA,GAAJ,uDAAuDI,OAAvD,iBAAsEU,YAAY,CAACC,KAAb,CAAmBC,EAAzF,EAA+FL,IAA/F,CADS,CAAR,CAAT,CAbR,+GAiBQ,MAAMlB,CAAAA,GAAG,CAACI,OAAO,CAACG,GAAG,CAACiB,KAAJ,CACdN,IADc,CAEd,kDAAoD,aAAMO,OAF5C,CAGd,sEAHc,cAAD,CAAR,CAAT,CAjBR","sourcesContent":["import { put, select, takeEvery } from \"redux-saga/effects\";\r\nimport { ACTIONS, pushLog, updateStartTime } from \"../../../actions\";\r\nimport RECORD_STATE from \"./../../../reducers/console/recorder/stateDef\";\r\nimport { Log } from \"./../../../utils/logger/logger\";\r\n\r\nexport default function* interceptPlay() {\r\n    yield takeEvery(ACTIONS.CANCEL_CUE_AND_PLAY, handel);\r\n}\r\n\r\nconst getChannelState = (state, channel) => state.console.channel[channel];\r\n\r\nconst isRecording = state => state.recorder.recordingState === RECORD_STATE.RECORDING; \r\n\r\nfunction* handel(action){\r\n    const path = ['saga', 'recorder', 'tracklis', 'intercept play after cue action'];\r\n    try{\r\n        const recording = yield select(isRecording);\r\n        if(!recording) {\r\n            return;\r\n        }\r\n\r\n        const channel = action.destination;\r\n        const channelState = yield select(getChannelState, channel)\r\n\r\n        yield put(updateStartTime(channelState.track.id))\r\n\r\n        yield put(pushLog(\r\n                new Log(`Track start time updated on tracklis channel${channel} id: ${channelState.track.id}`, path)\r\n            )) \r\n    } catch (error){\r\n        yield put(pushLog(Log.Error(\r\n            path,\r\n            \"Can't update start time on track on tracklist. \" + error.message,\r\n            \"Sorry during process of updating record tracklist occurred a problem\",\r\n            error\r\n        )))\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}