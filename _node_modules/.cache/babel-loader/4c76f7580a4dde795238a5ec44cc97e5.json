{"ast":null,"code":"import _classCallCheck from\"D:\\\\PROJEKTY\\\\APKI\\\\DjTruck\\\\djtruck\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"D:\\\\PROJEKTY\\\\APKI\\\\DjTruck\\\\djtruck\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import store from\"./../../store\";import Observer from\"./observer/observer\";import STATUS from\"./observer/STATUS\";import{togglePlay,setTimeLeft}from\"./../../actions\";import Channels from\"./channels/channels\";import Mixer from\"./mixer/mixer\";var mixConsole;var Console=/*#__PURE__*/function(){function Console(){_classCallCheck(this,Console);store.subscribe(this.handleChange.bind(this));this.dispatch=store.dispatch;this.observer=new Observer(store);this.channels=new Channels();this.mixer=new Mixer(this.channels);}_createClass(Console,[{key:\"getMixerChannelInterface\",value:function getMixerChannelInterface(channelName){return this.mixer.getChannelInterface(channelName);}},{key:\"setPlayer\",value:function setPlayer(channelName,player){this.channels.setChannel(channelName,player);this.mixer.setUpAudioNodes(channelName);this.attachEvents(channelName);}},{key:\"attachEvents\",value:function attachEvents(channel){var _this=this;var player=this.channels.getChannel(channel);player.on('finish',function(){_this.dispatch(togglePlay(channel));});var lastUpdate=new Date().getTime();player.on('audioprocess',function(){var currentTime=new Date().getTime();if(currentTime-lastUpdate>=999){lastUpdate=currentTime;_this.dispatch(setTimeLeft(channel,parseInt(player.getDuration()-player.getCurrentTime())));}});// updating time Left value\n///Because on seek event is called a 1000 time per second, is created watcher witch update \n// value after 500 ms with last progress value \nvar lastCall={time:new Date().getTime(),value:null};var watcher=null;player.on('seek',function(progress){lastCall.time=new Date().getTime();lastCall.value=progress;if(!watcher){watcher=setTimeout(function(){if(new Date().getTime()-lastCall.time>=100){_this.dispatch(setTimeLeft(channel,parseInt(player.getDuration()*lastCall.value)));clearTimeout(watcher);watcher=null;}},500);}});}},{key:\"handleChange\",value:function handleChange(){var storeChanges=this.observer.check();var _iteratorNormalCompletion=true;var _didIteratorError=false;var _iteratorError=undefined;try{for(var _iterator=storeChanges[Symbol.iterator](),_step;!(_iteratorNormalCompletion=(_step=_iterator.next()).done);_iteratorNormalCompletion=true){var diff=_step.value;this.callAction(diff);}}catch(err){_didIteratorError=true;_iteratorError=err;}finally{try{if(!_iteratorNormalCompletion&&_iterator.return!=null){_iterator.return();}}finally{if(_didIteratorError){throw _iteratorError;}}}}},{key:\"callAction\",value:function callAction(diff){switch(diff.status){case STATUS.TOGGLE_PLAY:{this.channels.togglePlay(diff.channel,diff.currentValue);break;}case STATUS.TOGGLE_CUE:{this.channels.toggleCue(diff.channel,diff.currentValue);break;}case STATUS.PITCH_CHANGE:{this.channels.adjustPitch(diff.channel,diff.currentValue);break;}case STATUS.GAIN_CHANGE:{this.mixer.setGain(diff.channel,diff.currentValue);break;}case STATUS.EQ_LOW_CHANGE:{this.mixer.setEqLow(diff.channel,diff.currentValue);break;}case STATUS.EQ_MID_CHANGE:{this.mixer.setEqMid(diff.channel,diff.currentValue);break;}case STATUS.EQ_HI_CHANGE:{this.mixer.setEqHigh(diff.channel,diff.currentValue);break;}case STATUS.FADER_CHANGE:{this.mixer.setFader(diff.currentValue);break;}default:return;}}}],[{key:\"Create\",value:function Create(){mixConsole=new Console();}},{key:\"Get\",value:function Get(){if(!mixConsole){mixConsole=new Console();return mixConsole;}else{return mixConsole;}}}]);return Console;}();export{Console as default};","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/core/console/console.js"],"names":["store","Observer","STATUS","togglePlay","setTimeLeft","Channels","Mixer","mixConsole","Console","subscribe","handleChange","bind","dispatch","observer","channels","mixer","channelName","getChannelInterface","player","setChannel","setUpAudioNodes","attachEvents","channel","getChannel","on","lastUpdate","Date","getTime","currentTime","parseInt","getDuration","getCurrentTime","lastCall","time","value","watcher","progress","setTimeout","clearTimeout","storeChanges","check","diff","callAction","status","TOGGLE_PLAY","currentValue","TOGGLE_CUE","toggleCue","PITCH_CHANGE","adjustPitch","GAIN_CHANGE","setGain","EQ_LOW_CHANGE","setEqLow","EQ_MID_CHANGE","setEqMid","EQ_HI_CHANGE","setEqHigh","FADER_CHANGE","setFader"],"mappings":"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","sourcesContent":["import store from \"./../../store\";\r\nimport Observer from \"./observer/observer\";\r\nimport STATUS from \"./observer/STATUS\";\r\nimport { togglePlay,\r\n         setTimeLeft }\r\n         from \"./../../actions\";\r\nimport Channels from \"./channels/channels\";\r\nimport Mixer from \"./mixer/mixer\";\r\n\r\nlet mixConsole;\r\n\r\nexport default class Console{\r\n    constructor(){\r\n        store.subscribe(this.handleChange.bind(this));\r\n        this.dispatch = store.dispatch;\r\n        this.observer = new Observer(store);\r\n\r\n        this.channels = new Channels();\r\n        this.mixer = new Mixer(this.channels);\r\n\r\n    }\r\n\r\n    static Create(){\r\n        mixConsole = new Console();\r\n    }\r\n\r\n    static Get(){\r\n        if(!mixConsole){\r\n            mixConsole = new Console();\r\n            return mixConsole;\r\n        } else {\r\n            return mixConsole;\r\n        }\r\n    }\r\n\r\n    getMixerChannelInterface(channelName){\r\n        return this.mixer.getChannelInterface(channelName);\r\n    }\r\n\r\n    setPlayer(channelName, player){\r\n        this.channels.setChannel(channelName, player);\r\n        this.mixer.setUpAudioNodes(channelName);\r\n        this.attachEvents(channelName);\r\n    }\r\n\r\n    attachEvents(channel){\r\n        const player = this.channels.getChannel(channel);\r\n        player.on('finish', ()=>{\r\n            this.dispatch(togglePlay(channel))\r\n        })\r\n\r\n        let lastUpdate = (new Date()).getTime();\r\n        player.on('audioprocess', ()=>{\r\n            const currentTime = (new Date()).getTime();\r\n            if((currentTime - lastUpdate) >= 999){\r\n                lastUpdate = currentTime;\r\n                this.dispatch(setTimeLeft(channel, parseInt(player.getDuration() - player.getCurrentTime())))\r\n            }\r\n        })\r\n        // updating time Left value\r\n        ///Because on seek event is called a 1000 time per second, is created watcher witch update \r\n        // value after 500 ms with last progress value \r\n        let lastCall = {\r\n            time :(new Date()).getTime(),\r\n            value : null\r\n        };\r\n        let watcher = null;\r\n        player.on('seek', progress => {\r\n            lastCall.time = (new Date()).getTime();\r\n            lastCall.value = progress;\r\n            if(!watcher){\r\n                watcher = setTimeout(()=>{\r\n                        if(((new Date()).getTime() - lastCall.time) >= 100)\r\n                        {\r\n                            this.dispatch(setTimeLeft(channel, parseInt(player.getDuration() * lastCall.value)))\r\n                            clearTimeout(watcher);\r\n                            watcher = null\r\n                        }\r\n                    }, 500)\r\n            }\r\n        })\r\n    }\r\n\r\n    handleChange(){\r\n        const storeChanges = this.observer.check();\r\n        for(let diff of storeChanges){\r\n            this.callAction(diff);\r\n        }\r\n    }\r\n\r\n    callAction(diff){\r\n        switch(diff.status){\r\n            case STATUS.TOGGLE_PLAY : {\r\n                this.channels.togglePlay(diff.channel, diff.currentValue);\r\n                break;\r\n            }\r\n            case STATUS.TOGGLE_CUE : {\r\n                this.channels.toggleCue(diff.channel, diff.currentValue)\r\n                break;\r\n            }\r\n            case STATUS.PITCH_CHANGE : {\r\n                this.channels.adjustPitch(diff.channel, diff.currentValue)\r\n                break;\r\n            }\r\n            case STATUS.GAIN_CHANGE : {\r\n                this.mixer.setGain(diff.channel, diff.currentValue);\r\n                break;\r\n            }\r\n            case STATUS.EQ_LOW_CHANGE : {\r\n                this.mixer.setEqLow(diff.channel, diff.currentValue);\r\n                break;\r\n            }\r\n            case STATUS.EQ_MID_CHANGE : {\r\n                this.mixer.setEqMid(diff.channel, diff.currentValue);\r\n                break;\r\n            }\r\n            case STATUS.EQ_HI_CHANGE : {\r\n                this.mixer.setEqHigh(diff.channel, diff.currentValue);\r\n                break;\r\n            }\r\n            case STATUS.FADER_CHANGE : {\r\n                this.mixer.setFader(diff.currentValue);\r\n                break;\r\n            }\r\n            default : return; \r\n        }\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}