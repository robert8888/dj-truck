{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJEKTY\\\\APKI\\\\DjTruck\\\\djtruck\\\\src\\\\components\\\\common\\\\Slider\\\\Slider.js\";\nimport React from \"react\";\nimport \"./slider.scss\";\n\nclass Slider extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      //from get derived stated from props\n      sliderCurrnetPositionFromProps: null,\n      sliderRange: null,\n      sliderCurrnetPosition: null,\n      sliderPrevPosition: null,\n      isDragged: false,\n      thumbSize: 0,\n      sliderAreaOffset: 0\n    };\n\n    this.evalValue = () => {\n      const {\n        from,\n        range\n      } = Slider.getRange(this.props.from, this.props.to);\n      const progress = (this.state.sliderCurrnetPosition - this.state.thumbSize / 2) / this.state.sliderRange;\n      let value = range * progress + from;\n      return value;\n    };\n\n    this.setValue = value => {\n      const {\n        from,\n        range\n      } = Slider.getRange(this.props.from, this.props.to);\n      const progress = (value - from) / range;\n      const position = progress * this.state.sliderRange;\n      this.setPosition(position + this.state.thumbSize / 2);\n    };\n\n    this.setPosition = (currentPosition, prevPosition) => {\n      this.setState({ ...this.state,\n        sliderCurrnetPosition: this.positionNormalize(currentPosition),\n        sliderPrevPosition: prevPosition || this.state.sliderPrevPosition\n      }, () => {\n        if (this.props.onChange) {\n          this.props.onChange(this.evalValue());\n        }\n      });\n    };\n\n    this.mouseDownHandle = event => {\n      if (event.target === this.sliderAreaElement.current || event.target === this.sliderRangeElement.current) {\n        //temporary\n        const rect = this.sliderAreaElement.current.getBoundingClientRect();\n        const position = this.props.horizontal ? event.clientX - rect.left : event.clientY - rect.top;\n        this.setPosition(position, this.state.sliderCurrnetPositionFromProps);\n      } else // dragging \n        if (event.target === this.sliderThumbElement.current) {\n          this.setState({ ...this.state,\n            isDragged: true\n          });\n          const rect = this.sliderThumbElement.current.getBoundingClientRect();\n          const shiftY = event.clientY - rect.top;\n          const shiftX = event.clientX - rect.left;\n          document.addEventListener('mousemove', e => this.mouseMoveHandler.call(this, e, shiftY, shiftX));\n          document.addEventListener('dragstart', e => e.preventDefault());\n        }\n\n      document.addEventListener('mouseup', this.mouseUpHandler);\n      document.addEventListener('dragend', this.mouseUpHandler);\n    };\n\n    this.mouseUpHandler = event => {\n      if (this.state.isDragged) {\n        this.setState({ ...this.state,\n          isDragged: false\n        });\n      } else {\n        if (this.props.step) {\n          const step = this.props.step;\n          let currentVal = this.evalValue(this.state.sliderCurrnetPosition);\n          console.log(currentVal);\n          currentVal = this.state.sliderCurrnetPosition > this.state.sliderPrevPosition ? -step : +step;\n          console.log(currentVal);\n          this.setPosition(Slider.getPostion(currentVal, this.state, this.props));\n        } else {\n          this.setPosition(this.state.sliderPrevPosition);\n        }\n      }\n\n      document.removeEventListener('mousemove', this.mouseMoveHandler.bind(this));\n      document.removeEventListener('mouseup', this.mouseUpHandler);\n      document.removeEventListener('dragend', this.mouseUpHandler);\n    };\n\n    this.mouseMoveHandler = (event, shiftY, shiftX) => {\n      if (!this.state.isDragged) return;\n      let position;\n\n      if (this.props.horizontal) {\n        position = event.clientX - this.state.sliderAreaOffset - shiftX + this.state.thumbSize / 2;\n      } else {\n        position = event.clientY - this.state.sliderAreaOffset - shiftY + this.state.thumbSize / 2;\n      }\n\n      console.log(position);\n      this.setPosition(position);\n    };\n\n    this.sliderRangeElement = React.createRef();\n    this.sliderThumbElement = React.createRef();\n    this.sliderAreaElement = React.createRef();\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (!state.sliderRange || !state.thumbSize) return null;\n\n    if (props.value === undefined) {\n      console.log(\"current position from \", state);\n      return { ...state,\n        sliderCurrnetPositionFromProps: state.sliderCurrnetPosition\n      };\n    }\n    /*const getPostion = (value) => {\r\n        const { from , range } = Slider.getRange(props.from, props.to);\r\n        const progress = (value - from)/ range;  \r\n        const position = progress * (state.sliderRange);\r\n        return (position + state.thumbSize / 2 )\r\n    }*/\n\n\n    if (props.value > props.to || props.value < props.from) {\n      return null; //dont modify state\n    }\n\n    let currentPosition = Slider.getPostion(props.value, state, props);\n    return { ...state,\n      sliderCurrnetPositionFromProps: currentPosition\n    };\n  }\n\n  positionNormalize(position) {\n    return Math.min(Math.max(position, this.state.thumbSize / 2), this.state.sliderRange + this.state.thumbSize / 2);\n  }\n\n  componentDidMount() {\n    const thumbRect = this.sliderThumbElement.current.getBoundingClientRect();\n    const areaRect = this.sliderAreaElement.current.getBoundingClientRect();\n    const computedStyleThumbElement = window.getComputedStyle(this.sliderThumbElement.current);\n    const computedStyleRangeElement = window.getComputedStyle(this.sliderRangeElement.current);\n    this.setState(state => {\n      const _state = { ...state\n      };\n\n      if (this.props.horizontal) {\n        _state.sliderCurrnetPosition = parseInt(computedStyleThumbElement.left);\n        _state.sliderRange = parseInt(computedStyleRangeElement.width);\n        _state.sliderAreaOffset = areaRect.left;\n        _state.thumbSize = thumbRect.width;\n      } else {\n        _state.sliderCurrnetPosition = parseInt(computedStyleThumbElement.top);\n        _state.sliderRange = parseInt(computedStyleRangeElement.height);\n        _state.sliderAreaOffset = areaRect.top;\n        _state.thumbSize = thumbRect.height;\n      }\n\n      return _state;\n    }, () => {\n      if (this.props.value !== undefined) {\n        this.setValue(this.props.value);\n      }\n    });\n    this.sliderAreaElement.current.addEventListener('mousedown', this.mouseDownHandle.bind(this));\n  }\n\n  render() {\n    const thumbStyle = {};\n\n    if (this.state.sliderCurrnetPosition !== undefined && !isNaN(this.state.sliderCurrnetPositionFromProps)) {\n      if (this.props.horizontal) {\n        console.log('horizontal', this.state.sliderCurrnetPositionFromProps);\n        thumbStyle.left = this.state.sliderCurrnetPositionFromProps;\n      } else {\n        thumbStyle.top = this.state.sliderCurrnetPositionFromProps;\n      }\n    }\n\n    return React.createElement(\"div\", {\n      className: \"slider\" + (this.props.className ? \" \" + this.props.className : \"\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      ref: this.sliderAreaElement,\n      className: \"slider-area\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      ref: this.sliderRangeElement,\n      className: \"slider-range\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"slider-thumb\",\n      ref: this.sliderThumbElement,\n      style: thumbStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    })));\n  }\n\n}\n\nSlider.getRange = (from, to) => {\n  return {\n    from,\n    to,\n    range: from * to < 0 ? Math.abs(to) + Math.abs(from) : to - from\n  };\n};\n\nSlider.getPostion = (value, state, props) => {\n  const {\n    from,\n    range\n  } = Slider.getRange(props.from, props.to);\n  const progress = (value - from) / range;\n  const position = progress * state.sliderRange;\n  return position + state.thumbSize / 2;\n};\n\nexport default Slider;","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/components/common/Slider/Slider.js"],"names":["React","Slider","Component","constructor","state","sliderCurrnetPositionFromProps","sliderRange","sliderCurrnetPosition","sliderPrevPosition","isDragged","thumbSize","sliderAreaOffset","evalValue","from","range","getRange","props","to","progress","value","setValue","position","setPosition","currentPosition","prevPosition","setState","positionNormalize","onChange","mouseDownHandle","event","target","sliderAreaElement","current","sliderRangeElement","rect","getBoundingClientRect","horizontal","clientX","left","clientY","top","sliderThumbElement","shiftY","shiftX","document","addEventListener","e","mouseMoveHandler","call","preventDefault","mouseUpHandler","step","currentVal","console","log","getPostion","removeEventListener","bind","createRef","getDerivedStateFromProps","undefined","Math","min","max","componentDidMount","thumbRect","areaRect","computedStyleThumbElement","window","getComputedStyle","computedStyleRangeElement","_state","parseInt","width","height","render","thumbStyle","isNaN","className","abs"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport \"./slider.scss\";\r\n\r\nclass Slider extends React.Component{\r\n    constructor() {\r\n        super();\r\n\r\n        this.sliderRangeElement = React.createRef();\r\n        this.sliderThumbElement = React.createRef();\r\n        this.sliderAreaElement = React.createRef();\r\n    }\r\n\r\n    state = {\r\n        //from get derived stated from props\r\n        sliderCurrnetPositionFromProps: null,\r\n\r\n        sliderRange: null,\r\n        sliderCurrnetPosition: null,\r\n        sliderPrevPosition: null,\r\n        isDragged : false,\r\n\r\n        thumbSize: 0,\r\n        sliderAreaOffset : 0,\r\n    }\r\n\r\n    static getRange = (from , to) => {\r\n        return{\r\n            from,\r\n            to,\r\n            range : (from * to < 0) ?  Math.abs(to) + Math.abs(from) : to - from,\r\n        }\r\n    }\r\n\r\n    static getPostion = (value, state, props) => {\r\n        const { from , range } = Slider.getRange(props.from, props.to);\r\n        const progress = (value - from)/ range;  \r\n        const position = progress * (state.sliderRange);\r\n        return (position + state.thumbSize / 2 )\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        if(!state.sliderRange || !state.thumbSize) return null;\r\n        if(props.value === undefined){\r\n            console.log(\"current position from \" , state)\r\n            return {\r\n                ...state,\r\n                sliderCurrnetPositionFromProps: state.sliderCurrnetPosition,\r\n            }\r\n        }\r\n\r\n        /*const getPostion = (value) => {\r\n            const { from , range } = Slider.getRange(props.from, props.to);\r\n            const progress = (value - from)/ range;  \r\n            const position = progress * (state.sliderRange);\r\n            return (position + state.thumbSize / 2 )\r\n        }*/\r\n\r\n        if(props.value > props.to || props.value < props.from){\r\n            return null; //dont modify state\r\n        }\r\n    \r\n        let currentPosition = Slider.getPostion(props.value, state, props);\r\n\r\n        return {\r\n            ...state,\r\n            sliderCurrnetPositionFromProps: currentPosition,\r\n        }\r\n    }\r\n\r\n\r\n\r\n    evalValue = () => {\r\n        const {from , range} = Slider.getRange(this.props.from, this.props.to);\r\n        const progress = (this.state.sliderCurrnetPosition - this.state.thumbSize / 2)\r\n                         / this.state.sliderRange;\r\n\r\n        let value =  range * progress + from;\r\n        return value;\r\n    }\r\n\r\n    setValue = (value) => {\r\n        const { from , range } = Slider.getRange(this.props.from, this.props.to);\r\n        const progress = (value - from)/ range;  \r\n        const position = progress * (this.state.sliderRange);\r\n        this.setPosition(position + this.state.thumbSize / 2 )\r\n    }\r\n\r\n    positionNormalize(position){\r\n        return Math.min( Math.max(position, this.state.thumbSize / 2), \r\n                        this.state.sliderRange + this.state.thumbSize / 2 );\r\n    }\r\n\r\n\r\n    setPosition = (currentPosition, prevPosition) => {\r\n        this.setState({...this.state, \r\n            sliderCurrnetPosition : this.positionNormalize(currentPosition),\r\n            sliderPrevPosition : prevPosition || this.state.sliderPrevPosition,\r\n        }, ()=>{\r\n            if(this.props.onChange){\r\n                this.props.onChange(this.evalValue());\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n\r\n\r\n    mouseDownHandle = (event) =>{\r\n       \r\n        if(event.target === this.sliderAreaElement.current || event.target === this.sliderRangeElement.current){ //temporary\r\n            const rect = this.sliderAreaElement.current.getBoundingClientRect();\r\n            const position = (this.props.horizontal) ? event.clientX  - rect.left : event.clientY - rect.top;\r\n            this.setPosition(position, this.state.sliderCurrnetPositionFromProps);\r\n        } else // dragging \r\n            if(event.target === this.sliderThumbElement.current){ \r\n            this.setState({...this.state, isDragged: true});\r\n            const rect = this.sliderThumbElement.current.getBoundingClientRect();\r\n            const shiftY = event.clientY - rect.top;\r\n            const shiftX = event.clientX - rect.left;\r\n            document.addEventListener('mousemove', e =>  this.mouseMoveHandler.call(this, e, shiftY, shiftX))\r\n            document.addEventListener('dragstart', e => e.preventDefault())\r\n        }\r\n\r\n        document.addEventListener('mouseup', this.mouseUpHandler);\r\n        document.addEventListener('dragend', this.mouseUpHandler);\r\n    }\r\n\r\n    mouseUpHandler = event => {\r\n        if(this.state.isDragged){\r\n            this.setState({...this.state, isDragged: false});\r\n        } else {\r\n            if(this.props.step){\r\n                const step = this.props.step;\r\n                let currentVal = this.evalValue(this.state.sliderCurrnetPosition);\r\n                console.log(currentVal)\r\n                currentVal = ((this.state.sliderCurrnetPosition > this.state.sliderPrevPosition) ? - step : + step);\r\n                console.log(currentVal)\r\n                this.setPosition(Slider.getPostion(currentVal, this.state, this.props));\r\n            } else{\r\n                this.setPosition(this.state.sliderPrevPosition);\r\n\r\n            }\r\n        }\r\n\r\n        document.removeEventListener('mousemove', this.mouseMoveHandler.bind(this));\r\n        document.removeEventListener('mouseup', this.mouseUpHandler);\r\n        document.removeEventListener('dragend', this.mouseUpHandler);\r\n    }\r\n\r\n    mouseMoveHandler = (event, shiftY, shiftX) =>{\r\n        if(!this.state.isDragged) return;\r\n        let position;\r\n        if(this.props.horizontal){\r\n            position = event.clientX \r\n                     - this.state.sliderAreaOffset\r\n                     - shiftX\r\n                     + (this.state.thumbSize/2);\r\n        }else {\r\n            position = event.clientY \r\n                     - this.state.sliderAreaOffset \r\n                     - shiftY \r\n                     + (this.state.thumbSize/2);\r\n        }\r\n        console.log(position)\r\n        this.setPosition(position);\r\n    }\r\n\r\n    componentDidMount(){\r\n        const thumbRect = this.sliderThumbElement.current.getBoundingClientRect();\r\n        const areaRect = this.sliderAreaElement.current.getBoundingClientRect();\r\n        const computedStyleThumbElement = window.getComputedStyle(this.sliderThumbElement.current);\r\n        const computedStyleRangeElement = window.getComputedStyle(this.sliderRangeElement.current);\r\n\r\n        this.setState( state => {\r\n            const _state = {...state};\r\n            if(this.props.horizontal){\r\n                _state.sliderCurrnetPosition = parseInt(computedStyleThumbElement.left);\r\n                _state.sliderRange = parseInt(computedStyleRangeElement.width);\r\n                _state.sliderAreaOffset = areaRect.left;\r\n                _state.thumbSize = thumbRect.width;\r\n            } else{\r\n                _state.sliderCurrnetPosition = parseInt(computedStyleThumbElement.top);\r\n                _state.sliderRange = parseInt(computedStyleRangeElement.height);\r\n                _state.sliderAreaOffset = areaRect.top;\r\n                _state.thumbSize = thumbRect.height;\r\n            }\r\n            return _state;\r\n        }, () => {\r\n            if(this.props.value !== undefined){\r\n                this.setValue(this.props.value);\r\n            }\r\n        })\r\n\r\n        this.sliderAreaElement.current.addEventListener('mousedown',  this.mouseDownHandle.bind(this));\r\n    }\r\n\r\n\r\n    render() {\r\n            const thumbStyle = {}\r\n            if(this.state.sliderCurrnetPosition !== undefined && !isNaN(this.state.sliderCurrnetPositionFromProps)){\r\n                if(this.props.horizontal){\r\n                    console.log('horizontal', this.state.sliderCurrnetPositionFromProps)\r\n                    thumbStyle.left = this.state.sliderCurrnetPositionFromProps;\r\n                } else {\r\n                    thumbStyle.top = this.state.sliderCurrnetPositionFromProps;\r\n                }\r\n            }\r\n\r\n            return (\r\n                <div  className={\"slider\" + ((this.props.className) ? \" \" + this.props.className  : \"\") } >\r\n                    <div ref={this.sliderAreaElement} className=\"slider-area\">\r\n                        <div ref={this.sliderRangeElement} className=\"slider-range\"/>\r\n                        <div className=\"slider-thumb\" \r\n                             ref={this.sliderThumbElement} \r\n                             style={ thumbStyle } />\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n}\r\n\r\nexport default Slider;"]},"metadata":{},"sourceType":"module"}