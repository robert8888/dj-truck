{"ast":null,"code":"import store from \"./../../../../../store\";\nimport STATUS from \"./../observer/STATUS\";\nimport io from \"socket.io-client\";\nconst recorder_api_url = process.env.REACT_APP_RECORDER_API;\nexport default class Recorder {\n  constructor(mixer) {\n    this.mixer = mixer;\n    const streamDestination = this.mixer.audioNodes.channels['main'].recorderStremDestination;\n    this.mediaRecorder = new MediaRecorder(streamDestination.stream, {\n      mimeType: 'audio/webm;codecs=opus'\n    });\n    console.log(recorder_api_url);\n  }\n\n  action(status, param) {\n    switch (status) {\n      case STATUS.RECORD_START:\n        {\n          this.startRecording(param);\n          break;\n        }\n\n      case STATUS.RECORD_END:\n        {\n          this.endRecording();\n          break;\n        }\n    }\n  }\n\n  startRecording(param) {\n    console.log(\"im start recording\", param);\n    const token = store.getState().user.token;\n\n    if (!token) {\n      return;\n    }\n\n    const options = {\n      transportOptions: {\n        polling: {\n          extraHeaders: {\n            // 'Authorization': `Bearer ${token}` \n            'abc': 'd'\n          }\n        }\n      }\n    };\n    const socket = io.connect(recorder_api_url.replace('http', 'ws').replace('https', 'wss'), {\n      transportOptions: {\n        polling: {\n          extraHeaders: {\n            Authorization: `Bearer ${token}`,\n            host: 'localhost:4000',\n            connection: 'keep-alive',\n            accept: '*/*',\n            'sec-fetch-dest': 'empty',\n            'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36',\n            origin: 'http://localhost:3000',\n            'sec-fetch-site': 'same-site',\n            'sec-fetch-mode': 'cors',\n            referer: 'http://localhost:3000/',\n            'accept-encoding': 'gzip, deflate, br',\n            'accept-language': 'pl-PL,pl;q=0.9,en-US;q=0.8,en;q=0.7',\n            cookie: 'auth0.is.authenticated=true; io=zHdEROfCDui_RtzfAAAJ'\n          }\n        }\n      }\n    });\n    socket.on(\"connect\", () => {\n      console.log(\"we have connection\");\n\n      this.mediaRecorder.ondataavailable = e => {\n        console.log(e.data);\n        socket.emit('record_chunk', e.data);\n      };\n\n      this.mediaRecorder.addEventListener('stop', () => {\n        socket.close();\n      });\n      this.mediaRecorder.start(1000);\n    });\n  }\n\n  endRecording() {\n    console.log(\"im finish recoriding\");\n\n    if (this.mediaRecorder.state !== 'inactive') {\n      this.mediaRecorder.stop();\n    }\n  }\n\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/pages/console/core/console/mixer/recorder.js"],"names":["store","STATUS","io","recorder_api_url","process","env","REACT_APP_RECORDER_API","Recorder","constructor","mixer","streamDestination","audioNodes","channels","recorderStremDestination","mediaRecorder","MediaRecorder","stream","mimeType","console","log","action","status","param","RECORD_START","startRecording","RECORD_END","endRecording","token","getState","user","options","transportOptions","polling","extraHeaders","socket","connect","replace","Authorization","host","connection","accept","origin","referer","cookie","on","ondataavailable","e","data","emit","addEventListener","close","start","state","stop"],"mappings":"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","sourcesContent":["import store from \"./../../../../../store\";\r\nimport STATUS from \"./../observer/STATUS\";\r\nimport io from \"socket.io-client\";\r\nconst recorder_api_url = process.env.REACT_APP_RECORDER_API\r\n\r\n\r\nexport default class Recorder{\r\n    constructor(mixer){\r\n        this.mixer = mixer;\r\n\r\n        const streamDestination =  this.mixer.audioNodes.channels['main'].recorderStremDestination;\r\n        this.mediaRecorder = new MediaRecorder(streamDestination.stream, {\r\n            mimeType: 'audio/webm;codecs=opus',\r\n        });\r\n\r\n        console.log(recorder_api_url)\r\n    }\r\n\r\n\r\n\r\n    action(status, param){\r\n        switch(status){\r\n            case STATUS.RECORD_START : {\r\n                this.startRecording(param);\r\n                break;\r\n            } \r\n            case STATUS.RECORD_END : {\r\n                this.endRecording()\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    startRecording(param){\r\n        console.log(\"im start recording\", param);\r\n        const token  = store.getState().user.token;\r\n        if(!token) {\r\n            return;\r\n        }\r\n        \r\n        const options = { \r\n            transportOptions: {\r\n                polling: {\r\n                    extraHeaders: {\r\n                       // 'Authorization': `Bearer ${token}` \r\n                       'abc':'d'\r\n                    }\r\n                  }\r\n            }\r\n        }\r\n        \r\n        const socket = io.connect(\r\n            recorder_api_url.replace('http', 'ws').replace('https', 'wss'), {\r\n                transportOptions: {\r\n                    polling: {\r\n                        extraHeaders: {\r\n                            Authorization: `Bearer ${token}` ,\r\n                            host: 'localhost:4000',\r\n                            connection: 'keep-alive',\r\n                            accept: '*/*',\r\n                            'sec-fetch-dest': 'empty',\r\n                            'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36',\r\n                            origin: 'http://localhost:3000',\r\n                            'sec-fetch-site': 'same-site',\r\n                            'sec-fetch-mode': 'cors',\r\n                            referer: 'http://localhost:3000/',\r\n                            'accept-encoding': 'gzip, deflate, br',\r\n                            'accept-language': 'pl-PL,pl;q=0.9,en-US;q=0.8,en;q=0.7',\r\n                            cookie: 'auth0.is.authenticated=true; io=zHdEROfCDui_RtzfAAAJ'\r\n                        }\r\n                    }\r\n                }\r\n              });\r\n\r\n        socket.on(\"connect\", ()=>{\r\n            console.log(\"we have connection\")\r\n\r\n            this.mediaRecorder.ondataavailable = (e) => {\r\n                console.log(e.data)\r\n                socket.emit('record_chunk', e.data)\r\n            }\r\n\r\n            this.mediaRecorder.addEventListener('stop', ()=>{\r\n                socket.close()\r\n            })\r\n\r\n            this.mediaRecorder.start(1000);\r\n        })\r\n    }\r\n\r\n    endRecording(){\r\n        console.log(\"im finish recoriding\")\r\n        if(this.mediaRecorder.state !== 'inactive'){\r\n            this.mediaRecorder.stop();\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}