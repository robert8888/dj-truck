{"ast":null,"code":"import _regeneratorRuntime from\"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\node_modules\\\\@babel\\\\runtime/regenerator\";var _marked=/*#__PURE__*/_regeneratorRuntime.mark(rootDirRequestSaga),_marked2=/*#__PURE__*/_regeneratorRuntime.mark(callApi);import{put,select,takeEvery}from\"redux-saga/effects\";import{ACTIONS,pushDirContent,pushLog}from\"../../actions\";import{getApi}from\"./../../apis/apiProvider\";import{Log}from\"./../../utils/logger/logger\";import errorParser from\"./../../utils/serverErrorParser/errorParser\";export default function rootDirRequestSaga(){return _regeneratorRuntime.wrap(function rootDirRequestSaga$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return takeEvery(ACTIONS.PL_ROOT_REQUEST,callApi);case 2:case\"end\":return _context.stop();}}},_marked);}var getToken=function getToken(state){return state.user.token;};function callApi(){var path,token,_getApi,callQuery,queries,response,isRoot;return _regeneratorRuntime.wrap(function callApi$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:path=['saga','playlist','request read root dir'];_context2.next=3;return select(getToken);case 3:token=_context2.sent;if(token){_context2.next=6;break;}return _context2.abrupt(\"return\");case 6:_context2.prev=6;_getApi=getApi(\"UserAssets\"),callQuery=_getApi.callQuery,queries=_getApi.queries;_context2.next=10;return callQuery(queries.loadRootContentQl,token);case 10:response=_context2.sent;if(!response.errors){_context2.next=13;break;}throw new Error('Server response contains errors '+errorParser(response.errors));case 13:isRoot=true;_context2.next=16;return put(pushDirContent(response.data.root,isRoot));case 16:_context2.next=18;return put(pushLog(new Log(\"Root dir readed from database\",path)));case 18:_context2.next=24;break;case 20:_context2.prev=20;_context2.t0=_context2[\"catch\"](6);_context2.next=24;return put(pushLog(Log.Error(path,\"Can't read root dir\"+_context2.t0.message,\"Sorry. During process reding root directory occurred a problem\",_context2.t0)));case 24:case\"end\":return _context2.stop();}}},_marked2,null,[[6,20]]);}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/sagas/playlists/reqRootDirSaga.js"],"names":["rootDirRequestSaga","callApi","put","select","takeEvery","ACTIONS","pushDirContent","pushLog","getApi","Log","errorParser","PL_ROOT_REQUEST","getToken","state","user","token","path","callQuery","queries","loadRootContentQl","response","errors","Error","isRoot","data","root","message"],"mappings":"2JAMyBA,kB,iDAMfC,O,EAZV,OAASC,GAAT,CAAcC,MAAd,CAAsBC,SAAtB,KAAuC,oBAAvC,CACA,OAASC,OAAT,CAAkBC,cAAlB,CAAkCC,OAAlC,KAAiD,eAAjD,CACA,OAASC,MAAT,KAAuB,0BAAvB,CACA,OAASC,GAAT,KAAoB,6BAApB,CACA,MAAOC,CAAAA,WAAP,KAAwB,6CAAxB,CAEA,cAAe,SAAUV,CAAAA,kBAAV,8IACX,MAAMI,CAAAA,SAAS,CAACC,OAAO,CAACM,eAAT,CAA0BV,OAA1B,CAAf,CADW,sDAIf,GAAMW,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAAAC,KAAK,QAAIA,CAAAA,KAAK,CAACC,IAAN,CAAWC,KAAf,EAAtB,CAEA,QAAUd,CAAAA,OAAV,+KACUe,IADV,CACiB,CAAC,MAAD,CAAS,UAAT,CAAqB,uBAArB,CADjB,kBAEkB,MAAMb,CAAAA,MAAM,CAACS,QAAD,CAAZ,CAFlB,OAEUG,KAFV,mBAGSA,KAHT,4FAOuCP,MAAM,CAAC,YAAD,CAP7C,CAOgBS,SAPhB,SAOgBA,SAPhB,CAO2BC,OAP3B,SAO2BA,OAP3B,mBAQuB,MAAMD,CAAAA,SAAS,CAACC,OAAO,CAACC,iBAAT,CAA4BJ,KAA5B,CAAf,CARvB,QAQYK,QARZ,oBAUWA,QAAQ,CAACC,MAVpB,gCAWkB,IAAIC,CAAAA,KAAJ,CAAU,mCAAoCZ,WAAW,CAACU,QAAQ,CAACC,MAAV,CAAzD,CAXlB,SAccE,MAdd,CAcuB,IAdvB,mBAeQ,MAAMrB,CAAAA,GAAG,CAACI,cAAc,CAACc,QAAQ,CAACI,IAAT,CAAcC,IAAf,CAAqBF,MAArB,CAAf,CAAT,CAfR,0BAiBQ,MAAMrB,CAAAA,GAAG,CAACK,OAAO,CAAC,GAAIE,CAAAA,GAAJ,CAAQ,+BAAR,CAAyCO,IAAzC,CAAD,CAAR,CAAT,CAjBR,+GAmBQ,MAAMd,CAAAA,GAAG,CAACK,OAAO,CAACE,GAAG,CAACa,KAAJ,CACdN,IADc,CAEd,sBAAwB,aAAMU,OAFhB,CAGd,gEAHc,cAAD,CAAR,CAAT,CAnBR","sourcesContent":["import { put, select, takeEvery } from \"redux-saga/effects\";\r\nimport { ACTIONS, pushDirContent, pushLog } from \"../../actions\";\r\nimport { getApi } from \"./../../apis/apiProvider\";\r\nimport { Log } from \"./../../utils/logger/logger\";\r\nimport errorParser from \"./../../utils/serverErrorParser/errorParser\";\r\n\r\nexport default function* rootDirRequestSaga() {\r\n    yield takeEvery(ACTIONS.PL_ROOT_REQUEST, callApi)\r\n}\r\n\r\nconst getToken = state => state.user.token;\r\n\r\nfunction* callApi() {\r\n    const path = ['saga', 'playlist', 'request read root dir']\r\n    const token = yield select(getToken);\r\n    if (!token) {\r\n        return;\r\n    }\r\n    try {\r\n        const { callQuery, queries } = getApi(\"UserAssets\");\r\n        let response = yield callQuery(queries.loadRootContentQl, token);\r\n\r\n        if(response.errors){\r\n            throw new Error('Server response contains errors '+ errorParser(response.errors))\r\n        }\r\n        \r\n        const isRoot = true;\r\n        yield put(pushDirContent(response.data.root, isRoot));\r\n\r\n        yield put(pushLog(new Log(\"Root dir readed from database\", path)))\r\n    } catch (error) {\r\n        yield put(pushLog(Log.Error(\r\n            path,\r\n            \"Can't read root dir\" + error.message,\r\n            \"Sorry. During process reding root directory occurred a problem\",\r\n            error\r\n        )))\r\n    }\r\n\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}