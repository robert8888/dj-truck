{"ast":null,"code":"import { pushTrackToList, ACTIONS } from \"../../actions\";\nimport { takeEvery, select, put, call } from \"redux-saga/effects\";\nimport { getApi } from \"./../../apis/apiProvider\";\nimport createTrackQuery from \"./../../qlQueries/createTrack\";\nimport { generateTemplateName as generateName, findClosesDir } from \"./../../reducers/console/playlist/utils\";\nimport { get } from \"lodash/object\";\nimport { handle as createNewPlaylist } from \"./createPlaylistRequestSaga\";\nimport UUID from \"uuidjs\";\nexport default function* pushTrackToListSaga() {\n  yield takeEvery(ACTIONS.PL_PUSH_TRACK_REQUEST, handle);\n}\n\nconst getToken = state => state.user.token;\n\nconst getCurrentId = state => state.playList.list._id;\n\nfunction* handle(action) {\n  const {\n    callQuery\n  } = getApi(\"UserAssets\");\n  const token = yield select(getToken);\n  console.log(\"action trakc\", action.track); //current playlist id \n\n  let playlistId = yield select(getCurrentId);\n\n  if (!playlistId) {\n    //create new \n    console.log(\"creating new playlist\");\n    yield call(createNewPlaylist, {});\n    playlistId = yield select(getCurrentId);\n  }\n\n  const track = ({} = action.track);\n  const query = createTrackQuery({\n    playlist: playlistId,\n    ...track\n  });\n  console.log(\"the query\", query);\n  const result = callQuery(query, token);\n  console.log(\"result of query\", result); //if(result?.data?.createTrack?.track?.id){\n\n  yield put(pushTrackToList({ ...action.track,\n    //id:result.data.createTrack.track.id\n    id: UUID.genV1().toString()\n  }, action.playList)); // }\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/sagas/playlists/pushTrackToListRequestSaga.js"],"names":["pushTrackToList","ACTIONS","takeEvery","select","put","call","getApi","createTrackQuery","generateTemplateName","generateName","findClosesDir","get","handle","createNewPlaylist","UUID","pushTrackToListSaga","PL_PUSH_TRACK_REQUEST","getToken","state","user","token","getCurrentId","playList","list","_id","action","callQuery","console","log","track","playlistId","query","playlist","result","id","genV1","toString"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,OAA1B,QAAyC,eAAzC;AACA,SAASC,SAAT,EAAoBC,MAApB,EAA4BC,GAA5B,EAAiCC,IAAjC,QAA6C,oBAA7C;AACA,SAASC,MAAT,QAAuB,0BAAvB;AACA,OAAOC,gBAAP,MAA6B,+BAA7B;AACA,SAASC,oBAAoB,IAAIC,YAAjC,EAA+CC,aAA/C,QAAoE,yCAApE;AACA,SAASC,GAAT,QAAoB,eAApB;AACA,SAAQC,MAAM,IAAIC,iBAAlB,QAA0C,6BAA1C;AACA,OAAOC,IAAP,MAAiB,QAAjB;AAGA,eAAe,UAAUC,mBAAV,GAAgC;AAC3C,QAAMb,SAAS,CAACD,OAAO,CAACe,qBAAT,EAAgCJ,MAAhC,CAAf;AACH;;AAED,MAAMK,QAAQ,GAAGC,KAAK,IAAIA,KAAK,CAACC,IAAN,CAAWC,KAArC;;AAGA,MAAMC,YAAY,GAAGH,KAAK,IAAIA,KAAK,CAACI,QAAN,CAAeC,IAAf,CAAoBC,GAAlD;;AAEA,UAAUZ,MAAV,CAAiBa,MAAjB,EAAyB;AACrB,QAAM;AAAEC,IAAAA;AAAF,MAAgBpB,MAAM,CAAC,YAAD,CAA5B;AACA,QAAMc,KAAK,GAAG,MAAMjB,MAAM,CAACc,QAAD,CAA1B;AAEAU,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BH,MAAM,CAACI,KAAnC,EAJqB,CAKrB;;AACA,MAAIC,UAAU,GAAG,MAAM3B,MAAM,CAACkB,YAAD,CAA7B;;AACA,MAAG,CAACS,UAAJ,EAAe;AACX;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACA,UAAMvB,IAAI,CAACQ,iBAAD,EAAoB,EAApB,CAAV;AACAiB,IAAAA,UAAU,GAAG,MAAM3B,MAAM,CAACkB,YAAD,CAAzB;AACH;;AAED,QAAMQ,KAAK,IAAG,KAEVJ,MAAM,CAACI,KAFA,CAAX;AAIA,QAAME,KAAK,GAAGxB,gBAAgB,CAAC;AAC3ByB,IAAAA,QAAQ,EAAGF,UADgB;AAE3B,OAAGD;AAFwB,GAAD,CAA9B;AAIAF,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBG,KAAzB;AAEA,QAAME,MAAM,GAAGP,SAAS,CAACK,KAAD,EAAQX,KAAR,CAAxB;AACAO,EAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BK,MAA/B,EAzBqB,CA0BrB;;AACI,QAAM7B,GAAG,CAACJ,eAAe,CAAC,EACtB,GAAGyB,MAAM,CAACI,KADY;AAEtB;AACAK,IAAAA,EAAE,EAAEpB,IAAI,CAACqB,KAAL,GAAaC,QAAb;AAHkB,GAAD,EAItBX,MAAM,CAACH,QAJe,CAAhB,CAAT,CA3BiB,CAgCtB;AAGF","sourcesContent":["import { pushTrackToList, ACTIONS } from \"../../actions\";\r\nimport { takeEvery, select, put, call } from \"redux-saga/effects\"\r\nimport { getApi } from \"./../../apis/apiProvider\";\r\nimport createTrackQuery from \"./../../qlQueries/createTrack\";\r\nimport { generateTemplateName as generateName, findClosesDir } from \"./../../reducers/console/playlist/utils\";\r\nimport { get } from \"lodash/object\";\r\nimport {handle as createNewPlaylist} from \"./createPlaylistRequestSaga\";\r\nimport UUID from \"uuidjs\";\r\n\r\n\r\nexport default function* pushTrackToListSaga() {\r\n    yield takeEvery(ACTIONS.PL_PUSH_TRACK_REQUEST, handle)\r\n}\r\n\r\nconst getToken = state => state.user.token;\r\n\r\n\r\nconst getCurrentId = state => state.playList.list._id;\r\n\r\nfunction* handle(action) {\r\n    const { callQuery } = getApi(\"UserAssets\");\r\n    const token = yield select(getToken);\r\n\r\n    console.log(\"action trakc\", action.track);\r\n    //current playlist id \r\n    let playlistId = yield select(getCurrentId);\r\n    if(!playlistId){\r\n        //create new \r\n        console.log(\"creating new playlist\")\r\n        yield call(createNewPlaylist, {});\r\n        playlistId = yield select(getCurrentId);\r\n    }\r\n\r\n    const track = {\r\n\r\n    } = action.track;\r\n\r\n    const query = createTrackQuery({\r\n        playlist : playlistId,\r\n        ...track,\r\n    })\r\n    console.log(\"the query\", query);\r\n    \r\n    const result = callQuery(query, token);\r\n    console.log(\"result of query\", result);\r\n    //if(result?.data?.createTrack?.track?.id){\r\n        yield put(pushTrackToList({\r\n            ...action.track,\r\n            //id:result.data.createTrack.track.id\r\n            id: UUID.genV1().toString(),\r\n        }, action.playList));\r\n   // }\r\n\r\n\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}