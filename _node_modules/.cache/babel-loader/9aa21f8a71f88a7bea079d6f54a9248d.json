{"ast":null,"code":"import STATUS from \"./../observer/STATUS\";\nexport default class Mastering {\n  constructor(mixer) {\n    this.mixer = mixer;\n    this.defaultCompressor = {\n      threshold: 0,\n      ratio: 1,\n      attack: .003,\n      release: 0.25\n    };\n  }\n\n  getMain() {\n    return this.mixer.audioNodes.channels['main'];\n  }\n\n  setMasterParam(status, value) {\n    console.log(status, value);\n    const main = this.getMain();\n\n    switch (status) {\n      case STATUS.MASTER_PRE_GAIN_CHANGE:\n        {\n          this.setAudioParam(main.preGainNode, \"gain\", value);\n          return;\n        }\n\n      case STATUS.MASTER_POST_GAIN_CHANGE:\n        {\n          this.setAudioParam(main.postGainNode, \"gain\", value);\n          return;\n        }\n\n      case STATUS.MASTER_THRESHOLD_CHANGE:\n        {\n          this.setAudioParam(main.compressorNode, \"threshold\", value);\n          return;\n        }\n    }\n  }\n\n  configCompressor() {\n    const compressorNode = this.getMain().compressorNode;\n    Object.entries(this.defaultCompressor).forEach(([variable, value]) => {\n      this.setAudioParam(compressorNode, variable, value);\n    });\n  }\n\n  setAudioParam(audioNode, variable, value) {\n    audioNode[variable].setTargetAtTime(value, this.mixer.mainAudioContext.currentTime, 0.01);\n  }\n\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/pages/app/core/console/mixer/mastering.js"],"names":["STATUS","Mastering","constructor","mixer","defaultCompressor","threshold","ratio","attack","release","getMain","audioNodes","channels","setMasterParam","status","value","console","log","main","MASTER_PRE_GAIN_CHANGE","setAudioParam","preGainNode","MASTER_POST_GAIN_CHANGE","postGainNode","MASTER_THRESHOLD_CHANGE","compressorNode","configCompressor","Object","entries","forEach","variable","audioNode","setTargetAtTime","mainAudioContext","currentTime"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,sBAAnB;AAGA,eAAe,MAAMC,SAAN,CAAgB;AAC3BC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,SAAKA,KAAL,GAAaA,KAAb;AAGA,SAAKC,iBAAL,GAAyB;AACrBC,MAAAA,SAAS,EAAE,CADU;AAErBC,MAAAA,KAAK,EAAE,CAFc;AAGrBC,MAAAA,MAAM,EAAE,IAHa;AAIrBC,MAAAA,OAAO,EAAE;AAJY,KAAzB;AAMH;;AAEDC,EAAAA,OAAO,GAAG;AACN,WAAO,KAAKN,KAAL,CAAWO,UAAX,CAAsBC,QAAtB,CAA+B,MAA/B,CAAP;AACH;;AAIDC,EAAAA,cAAc,CAACC,MAAD,EAASC,KAAT,EAAgB;AAC1BC,IAAAA,OAAO,CAACC,GAAR,CAAYH,MAAZ,EAAoBC,KAApB;AACA,UAAMG,IAAI,GAAI,KAAKR,OAAL,EAAd;;AACA,YAAOI,MAAP;AACI,WAAKb,MAAM,CAACkB,sBAAZ;AAAqC;AACjC,eAAKC,aAAL,CAAmBF,IAAI,CAACG,WAAxB,EAAqC,MAArC,EAA6CN,KAA7C;AACA;AACH;;AACD,WAAKd,MAAM,CAACqB,uBAAZ;AAAqC;AACjC,eAAKF,aAAL,CAAmBF,IAAI,CAACK,YAAxB,EAAsC,MAAtC,EAA8CR,KAA9C;AACA;AACH;;AACD,WAAKd,MAAM,CAACuB,uBAAZ;AAAqC;AACjC,eAAKJ,aAAL,CAAmBF,IAAI,CAACO,cAAxB,EAAwC,WAAxC,EAAqDV,KAArD;AACA;AACH;AAZL;AAcH;;AAEDW,EAAAA,gBAAgB,GAAG;AACf,UAAMD,cAAc,GAAG,KAAKf,OAAL,GAAee,cAAtC;AACAE,IAAAA,MAAM,CAACC,OAAP,CAAe,KAAKvB,iBAApB,EAAuCwB,OAAvC,CAA+C,CAAC,CAACC,QAAD,EAAWf,KAAX,CAAD,KAAuB;AAClE,WAAKK,aAAL,CAAmBK,cAAnB,EAAmCK,QAAnC,EAA6Cf,KAA7C;AACH,KAFD;AAGH;;AAEDK,EAAAA,aAAa,CAACW,SAAD,EAAYD,QAAZ,EAAsBf,KAAtB,EAA6B;AACtCgB,IAAAA,SAAS,CAACD,QAAD,CAAT,CAAoBE,eAApB,CAAoCjB,KAApC,EAA2C,KAAKX,KAAL,CAAW6B,gBAAX,CAA4BC,WAAvE,EAAoF,IAApF;AACH;;AA/C0B","sourcesContent":["import STATUS from \"./../observer/STATUS\";\r\n\r\n\r\nexport default class Mastering {\r\n    constructor(mixer) {\r\n        this.mixer = mixer;\r\n\r\n\r\n        this.defaultCompressor = {\r\n            threshold: 0,\r\n            ratio: 1,\r\n            attack: .003,\r\n            release: 0.25,\r\n        }\r\n    }\r\n\r\n    getMain() {\r\n        return this.mixer.audioNodes.channels['main'];\r\n    }\r\n\r\n\r\n\r\n    setMasterParam(status, value) {\r\n        console.log(status, value)\r\n        const main =  this.getMain();\r\n        switch(status){\r\n            case STATUS.MASTER_PRE_GAIN_CHANGE : {\r\n                this.setAudioParam(main.preGainNode, \"gain\", value)\r\n                return;\r\n            }\r\n            case STATUS.MASTER_POST_GAIN_CHANGE: {\r\n                this.setAudioParam(main.postGainNode, \"gain\", value)\r\n                return;\r\n            }\r\n            case STATUS.MASTER_THRESHOLD_CHANGE: {\r\n                this.setAudioParam(main.compressorNode, \"threshold\", value);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    configCompressor() {\r\n        const compressorNode = this.getMain().compressorNode ;\r\n        Object.entries(this.defaultCompressor).forEach(([variable, value]) => {\r\n            this.setAudioParam(compressorNode, variable, value)\r\n        });\r\n    }\r\n\r\n    setAudioParam(audioNode, variable, value) {\r\n        audioNode[variable].setTargetAtTime(value, this.mixer.mainAudioContext.currentTime, 0.01)\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}