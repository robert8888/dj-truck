{"ast":null,"code":"export function improveWaveSurfer(waveSurfer) {\n  waveSurfer.drawer._mainWraper = waveSurfer.drawer.container.firstChild;\n\n  waveSurfer.drawer.progress = function (progress) {\n    var minPxDelta = 1 / this.params.pixelRatio;\n    var pos = Math.round(progress * this.width) * minPxDelta;\n\n    if (pos < this.lastPos || pos - this.lastPos >= minPxDelta) {\n      this.lastPos = pos;\n      /*if (this.params.scrollParent && this.params.autoCenter) {\r\n          var newPos = ~~(this.wrapper.scrollWidth * progress);\r\n          this.recenterOnPosition(newPos);\r\n      }*/\n\n      this.recenterOnPosition(pos); //  this.updateProgress(pos);\n    }\n  };\n\n  waveSurfer.drawer.recenterOnPosition = function (position, immediate) {\n    console.log(\"receter on positon\");\n    var scrollLeft = this.wrapper._scrollLeft;\n    var half = ~~(this.wrapper.clientWidth / 2);\n    var target = position - half;\n    var offset = target - scrollLeft;\n    var maxScroll = this.wrapper.scrollWidth - this.wrapper.clientWidth;\n\n    if (maxScroll == 0) {\n      // **** no need to continue if scrollbar is not there\n      return;\n    } // **** if the cursor is currently visible...\n\n\n    if (!immediate && -half <= offset && offset < half) {\n      // **** we'll limit the \"re-center\" rate.\n      var rate = 5;\n      offset = Math.max(-rate, Math.min(rate, offset));\n      target = scrollLeft + offset;\n    } // **** limit target to valid range (0 to maxScroll)\n    // target = Math.max(0, Math.min(maxScroll, target));\n    // **** no use attempting to scroll if we're not moving\n    //    if (target != scrollLeft) {\n    // this.wrapper.scrollLeft = target;\n\n\n    this.wrapper._scrollLeft = target;\n    console.log(target);\n    this._mainWraper.style.transform = \"translateX(\" + target + \"px)\"; //}\n  };\n\n  waveSurfer.drawerhandleEvent = function (e, noPrevent) {\n    !noPrevent && e.preventDefault();\n    var clientX = e.targetTouches ? e.targetTouches[0].clientX : e.clientX;\n    var bbox = this.wrapper.getBoundingClientRect();\n    var nominalWidth = this.width;\n    var parentWidth = this.getWidth();\n    var progress;\n\n    if (!this.params.fillParent && nominalWidth < parentWidth) {\n      progress = (clientX - bbox.left) * this.params.pixelRatio / nominalWidth || 0;\n\n      if (progress > 1) {\n        progress = 1;\n      }\n    } else {\n      progress = (clientX - bbox.left + this.wrapper.scrollLeft) / this.wrapper.scrollWidth || 0;\n    }\n\n    return progress;\n  };\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/pages/app/core/console/channels/channelBuilder/WaveSurrferTransitions.js"],"names":["improveWaveSurfer","waveSurfer","drawer","_mainWraper","container","firstChild","progress","minPxDelta","params","pixelRatio","pos","Math","round","width","lastPos","recenterOnPosition","position","immediate","console","log","scrollLeft","wrapper","_scrollLeft","half","clientWidth","target","offset","maxScroll","scrollWidth","rate","max","min","style","transform","drawerhandleEvent","e","noPrevent","preventDefault","clientX","targetTouches","bbox","getBoundingClientRect","nominalWidth","parentWidth","getWidth","fillParent","left"],"mappings":"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","sourcesContent":["export function improveWaveSurfer(waveSurfer) {\r\n\r\n    waveSurfer.drawer._mainWraper = waveSurfer.drawer.container.firstChild;\r\n\r\n    waveSurfer.drawer.progress = function (progress) {\r\n        var minPxDelta = 1 / this.params.pixelRatio;\r\n        var pos = Math.round(progress * this.width) * minPxDelta;\r\n\r\n        if (pos < this.lastPos || pos - this.lastPos >= minPxDelta) {\r\n            this.lastPos = pos;\r\n\r\n            /*if (this.params.scrollParent && this.params.autoCenter) {\r\n                var newPos = ~~(this.wrapper.scrollWidth * progress);\r\n                this.recenterOnPosition(newPos);\r\n            }*/\r\n\r\n            this.recenterOnPosition(pos);\r\n \r\n          //  this.updateProgress(pos);\r\n        }\r\n    }\r\n\r\n    waveSurfer.drawer.recenterOnPosition = function (position, immediate) {\r\n        console.log(\"receter on positon\")\r\n        var scrollLeft = this.wrapper._scrollLeft;\r\n        var half = ~~(this.wrapper.clientWidth / 2);\r\n        var target = position - half;\r\n        var offset = target - scrollLeft;\r\n        var maxScroll = this.wrapper.scrollWidth - this.wrapper.clientWidth;\r\n\r\n        if (maxScroll == 0) {\r\n            // **** no need to continue if scrollbar is not there\r\n            return;\r\n        }\r\n\r\n        // **** if the cursor is currently visible...\r\n        if (!immediate && -half <= offset && offset < half) {\r\n            // **** we'll limit the \"re-center\" rate.\r\n            var rate = 5;\r\n            offset = Math.max(-rate, Math.min(rate, offset));\r\n            target = scrollLeft + offset;\r\n        }\r\n\r\n        // **** limit target to valid range (0 to maxScroll)\r\n        // target = Math.max(0, Math.min(maxScroll, target));\r\n        // **** no use attempting to scroll if we're not moving\r\n    //    if (target != scrollLeft) {\r\n           // this.wrapper.scrollLeft = target;\r\n           this.wrapper._scrollLeft  = target;\r\n           console.log(target)\r\n           this._mainWraper.style.transform = \"translateX(\" + target + \"px)\";\r\n        //}\r\n        \r\n\r\n    }\r\n\r\n\r\n    waveSurfer.drawerhandleEvent= function (e, noPrevent) {\r\n        !noPrevent && e.preventDefault();\r\n\r\n        var clientX = e.targetTouches ? e.targetTouches[0].clientX : e.clientX;\r\n        var bbox = this.wrapper.getBoundingClientRect();\r\n\r\n        var nominalWidth = this.width;\r\n        var parentWidth = this.getWidth();\r\n\r\n        var progress;\r\n\r\n        if (!this.params.fillParent && nominalWidth < parentWidth) {\r\n            progress = ((clientX - bbox.left) * this.params.pixelRatio / nominalWidth) || 0;\r\n\r\n            if (progress > 1) {\r\n                progress = 1;\r\n            }\r\n        } else {\r\n            progress = ((clientX - bbox.left + this.wrapper.scrollLeft) / this.wrapper.scrollWidth) || 0;\r\n        }\r\n\r\n        return progress;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}