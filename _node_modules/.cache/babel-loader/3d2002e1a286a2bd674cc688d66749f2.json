{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJEKTY\\\\APKI\\\\DjTruck\\\\djtruck\\\\src\\\\components\\\\Deck\\\\PitchControl\\\\PitchControl.js\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport \"./pitch-control.scss\";\n\nclass PitchControl extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      sliderRange: null,\n      sliderCurrnetPosition: null,\n      sliderPrevPosition: null,\n      startDraging: false\n    };\n\n    this.mouseDownHandle = (event, sliderRange) => {\n      if (event.target === this.sliderAreaElement.current || event.target === this.sliderRangeElement.current) {\n        // area clicked\n        let clickY = event.clientY - this.sliderAreaElement.current.getBoundingClientRect().top;\n        this.setState(state => {\n          const _state = { ...state\n          };\n          _state.sliderPrevPosition = state.sliderCurrnetPosition;\n          _state.sliderCurrnetPosition = clickY;\n          return _state;\n        });\n        document.addEventListener('mouseup', this.mouseUpHandler);\n        document.addEventListener('dragend', this.mouseUpHandler);\n      } else if (event.target === this.sliderThumbElement.current) {\n        // thumb clicked\n        console.log('clicked thumb');\n        const shiftY = event.clientY - this.sliderThumbElement.current.getBoundingClientRect().top;\n        const topOffset = this.sliderAreaElement.current.getBoundingClientRect().top;\n        console.log(sliderRange);\n        document.addEventListener('mousemove', e => this.mouseMoveHandler.call(this, e, shiftY));\n      }\n    };\n\n    this.mouseUpHandler = event => {\n      this.setState(state => {\n        const _state = { ...state\n        };\n        _state.sliderCurrnetPosition = state.sliderPrevPosition;\n        return _state;\n      });\n      document.removeEventListener('mouseup', this.mouseUpHandler);\n      document.removeEventListener('dragend', this.mouseUpHandler);\n    };\n\n    this.mouseMoveHandler = (event, shiftY, topOffset) => {\n      //    console.log('moving', event, shiftY)\n      // console.log(sliderAreaElement.current)\n      let position = event.clientY - topOffset; //position = Math.max(position, 0);\n      //position = Math.min(position, sliderRange);\n\n      console.log(this.state.sliderRange);\n      console.log(\"position: \", position);\n    };\n\n    this.render = () => React.createElement(\"div\", {\n      className: \"pitch-control \" + \"pitch-\" + this.props.name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      ref: this.sliderAreaElement,\n      className: \"pitch-area\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      ref: this.sliderRangeElement,\n      className: \"slider-range\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      ref: this.sliderThumbElement,\n      style: this.sliderCurrnetPosition && {\n        top: this.sliderCurrnetPosition\n      },\n      className: \"slider-thumb\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    })));\n\n    this.sliderRangeElement = React.useRef(null);\n    this.sliderThumbElement = React.useRef(null);\n    this.sliderAreaElement = React.useRef(null);\n  }\n\n  componentDidMount() {\n    this.setState(state => {\n      const _state = { ...state\n      };\n      _state.sliderCurrnetPosition = window.getComputedStyle(this.sliderThumbElement.current).top;\n      _state.sliderRange = window.getComputedStyle(this.sliderRangeElement.current).height;\n    });\n    this.sliderAreaElement.current.addEventListener('mousedown', this.mouseDownHandle.bind(this));\n  }\n\n}\n\nexport default PitchControl;","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/components/Deck/PitchControl/PitchControl.js"],"names":["React","useState","useEffect","useRef","PitchControl","Component","constructor","state","sliderRange","sliderCurrnetPosition","sliderPrevPosition","startDraging","mouseDownHandle","event","target","sliderAreaElement","current","sliderRangeElement","clickY","clientY","getBoundingClientRect","top","setState","_state","document","addEventListener","mouseUpHandler","sliderThumbElement","console","log","shiftY","topOffset","e","mouseMoveHandler","call","removeEventListener","position","render","props","name","componentDidMount","window","getComputedStyle","height","bind"],"mappings":"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","sourcesContent":["import React, { useState , useEffect, useRef} from \"react\";\r\nimport \"./pitch-control.scss\";\r\n\r\nclass PitchControl extends React.Component{\r\n    constructor() {\r\n        super();\r\n\r\n        this.sliderRangeElement = React.useRef(null);\r\n        this.sliderThumbElement = React.useRef(null);\r\n        this.sliderAreaElement = React.useRef(null);\r\n    }\r\n\r\n    state = {\r\n        sliderRange: null,\r\n        sliderCurrnetPosition: null,\r\n        sliderPrevPosition: null,\r\n\r\n        startDraging: false,\r\n    }\r\n    /*const [sliderRange, setSliderRange] = useState(null);\r\n    const [sliderCurrnetPosition, setSliderCurrentPosition ] = useState(null);\r\n    const [sliderPrevPosition, setSliderPrevPosition ] = useState(null);\r\n    const [startDraging, setStartDraging ] = useState(null);\r\n    const sliderRangeElement = useRef();\r\n    const sliderThumbElement = useRef();\r\n    const sliderAreaElement = useRef();*/\r\n\r\n\r\n    mouseDownHandle = (event, sliderRange) =>{\r\n        if(event.target === this.sliderAreaElement.current || event.target === this.sliderRangeElement.current){ // area clicked\r\n            let clickY = event.clientY - this.sliderAreaElement.current.getBoundingClientRect().top;\r\n            this.setState ( state => {\r\n                const _state = {...state};\r\n                _state.sliderPrevPosition = state.sliderCurrnetPosition;\r\n                _state.sliderCurrnetPosition = clickY;\r\n                return _state;\r\n            })\r\n            document.addEventListener('mouseup', this.mouseUpHandler);\r\n            document.addEventListener('dragend', this.mouseUpHandler);\r\n        } else if(event.target === this.sliderThumbElement.current){ // thumb clicked\r\n            console.log('clicked thumb');\r\n            const shiftY = event.clientY - this.sliderThumbElement.current.getBoundingClientRect().top;\r\n            const topOffset = this.sliderAreaElement.current.getBoundingClientRect().top;\r\n            console.log(sliderRange)\r\n  \r\n        \r\n            document.addEventListener('mousemove', e => this.mouseMoveHandler.call(this, e, shiftY));\r\n        }\r\n    }\r\n\r\n    mouseUpHandler = event => {\r\n        this.setState( state => {\r\n            const _state = {...state};\r\n            _state.sliderCurrnetPosition = state.sliderPrevPosition;\r\n            return _state; \r\n        })\r\n        document.removeEventListener('mouseup', this.mouseUpHandler);\r\n        document.removeEventListener('dragend', this.mouseUpHandler);\r\n    }\r\n\r\n    mouseMoveHandler = (event, shiftY, topOffset) =>{\r\n    //    console.log('moving', event, shiftY)\r\n       // console.log(sliderAreaElement.current)\r\n        let position = event.clientY - topOffset\r\n        //position = Math.max(position, 0);\r\n        //position = Math.min(position, sliderRange);\r\n        console.log(this.state.sliderRange);\r\n        console.log(\"position: \" , position);\r\n\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.setState( state => {\r\n            const _state = {...state};\r\n            _state.sliderCurrnetPosition = window.getComputedStyle(this.sliderThumbElement.current).top;\r\n            _state.sliderRange = window.getComputedStyle(this.sliderRangeElement.current).height;\r\n        })\r\n      \r\n        \r\n        this.sliderAreaElement.current.addEventListener('mousedown',  this.mouseDownHandle.bind(this));\r\n    }\r\n\r\n    \r\n\r\n    render = () =>  (\r\n        <div className={\"pitch-control \" + \"pitch-\" + this.props.name}>\r\n            <div ref={this.sliderAreaElement} className=\"pitch-area\">\r\n                <div ref={this.sliderRangeElement} className=\"slider-range\"/>\r\n                <div ref={this.sliderThumbElement} style={this.sliderCurrnetPosition && {top: this.sliderCurrnetPosition}}  className=\"slider-thumb\"/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PitchControl;"]},"metadata":{},"sourceType":"module"}