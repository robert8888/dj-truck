{"ast":null,"code":"import _defineProperty from\"D:\\\\PROJEKTY\\\\APKI\\\\DjTruck\\\\djtruck\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";import _objectSpread from\"D:\\\\PROJEKTY\\\\APKI\\\\DjTruck\\\\djtruck\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import _classCallCheck from\"D:\\\\PROJEKTY\\\\APKI\\\\DjTruck\\\\djtruck\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"D:\\\\PROJEKTY\\\\APKI\\\\DjTruck\\\\djtruck\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import store from\"./../../../store\";var Mixer=/*#__PURE__*/function(){function Mixer(channels){_classCallCheck(this,Mixer);this.config=store.getState().configuration.mixer;this.channels=channels;this.audioNodes={channels:{}};this.sampleBuffers={channels:{}};var _iteratorNormalCompletion=true;var _didIteratorError=false;var _iteratorError=undefined;try{for(var _iterator=this.channels.getChannelNames()[Symbol.iterator](),_step;!(_iteratorNormalCompletion=(_step=_iterator.next()).done);_iteratorNormalCompletion=true){var channelName=_step.value;this.audioNodes.channels=_objectSpread({},this.audioNodes.channels,_defineProperty({},channelName,{}));this.sampleBuffers.channels=_objectSpread({},this.sampleBuffers.channels,_defineProperty({},channelName,null));}}catch(err){_didIteratorError=true;_iteratorError=err;}finally{try{if(!_iteratorNormalCompletion&&_iterator.return!=null){_iterator.return();}}finally{if(_didIteratorError){throw _iteratorError;}}}}_createClass(Mixer,[{key:\"getChannelInterface\",value:function getChannelInterface(channelName){var _this=this;return{getPeakMeter:function getPeakMeter(){return _this.getPeakMeter(channelName);}};}},{key:\"setUpAudioNodes\",value:function setUpAudioNodes(channelName){var audioCtx=this.channels.getChannel(channelName).backend.ac;//chained from up to down \nthis.audioNodes.channels[channelName]={analyserNode:audioCtx.createAnalyser(),faderVolumeNode:audioCtx.createGain(),gainNode:audioCtx.createGain(),eqHiFilterNode:audioCtx.createBiquadFilter(),eqMidFilterNode:audioCtx.createBiquadFilter(),eqLowFilterNode:audioCtx.createBiquadFilter()};var channel=this.audioNodes.channels[channelName];//\nchannel.analyserNode.fftSize=256;//\nchannel.eqLowFilterNode.type=\"lowshelf\";channel.eqLowFilterNode.frequency.setValueAtTime(this.config.low.frequency,audioCtx.currentTime);channel.eqHiFilterNode.type=\"highshelf\";channel.eqHiFilterNode.frequency.setValueAtTime(this.config.hi.frequency,audioCtx.currentTime);channel.eqMidFilterNode.type=\"peaking\";channel.eqMidFilterNode.frequency.setValueAtTime(this.config.mid.frequency,audioCtx.currentTime);channel.eqMidFilterNode.Q.setValueAtTime(this.config.mid.Q,audioCtx.currentTime);//last in array is firt in chain (on top)\nthis.channels.getChannel(channelName).backend.setFilters([channel.eqLowFilterNode,channel.eqMidFilterNode,channel.eqHiFilterNode,channel.gainNode,channel.analyserNode,channel.faderVolumeNode]);this.setUpSampleBuffers(channelName);}},{key:\"setUpSampleBuffers\",value:function setUpSampleBuffers(channelName){var fftSize=this.audioNodes.channels[channelName].analyserNode.fftSize;this.sampleBuffers.channels[channelName]=new Float32Array(fftSize);}},{key:\"setGainValue\",value:function setGainValue(channelName,knobValue,nodeName){var gain=1+knobValue/100;var audioCtx=this.channels.getChannel(channelName).backend.ac;var channel=this.audioNodes.channels[channelName];channel[nodeName].gain.setTargetAtTime(parseFloat(gain),audioCtx.currentTime,0.01);}},{key:\"setFilterValue\",value:function setFilterValue(channelName,knobValue,nodeName){var audioCtx=this.channels.getChannel(channelName).backend.ac;var channel=this.audioNodes.channels[channelName];channel[nodeName].gain.setValueAtTime(knobValue,audioCtx.currentTime);}},{key:\"setGain\",value:function setGain(channelName,knobValue){this.setGainValue(channelName,knobValue,'gainNode');}},{key:\"setEqHigh\",value:function setEqHigh(channelName,knobValue){this.setFilterValue(channelName,knobValue,'eqHiFilterNode');}},{key:\"setEqMid\",value:function setEqMid(channelName,knobValue){this.setFilterValue(channelName,knobValue,'eqMidFilterNode');}},{key:\"setEqLow\",value:function setEqLow(channelName,knobValue){this.setFilterValue(channelName,knobValue,'eqLowFilterNode');}},{key:\"setFader\",value:function setFader(value){//in procent from -50%  to + 50% (not 0.01) but 1\nvar faderVolumeNodeA=this.audioNodes.channels[\"A\"].faderVolumeNode;var faderVolumeNodeB=this.audioNodes.channels[\"B\"].faderVolumeNode;var audioCtxA=this.channels.getChannel(\"A\").backend.ac;var audioCtxB=this.channels.getChannel(\"B\").backend.ac;if(!faderVolumeNodeA||!faderVolumeNodeB||!audioCtxA||!audioCtxB){throw new Error(\"Fased value not set checkout funtion setFader in mixer object\");}var percent=(value+50)/100;var volA=Math.cos(percent*0.5*Math.PI);var volB=Math.cos((1-percent)*0.5*Math.PI);faderVolumeNodeA.gain.setTargetAtTime(volA,audioCtxA.currentTime,0.01);faderVolumeNodeB.gain.setTargetAtTime(volB,audioCtxB.currentTime,0.01);}},{key:\"getPeakMeter\",value:function getPeakMeter(channelName){var _this$audioNodes,_this$audioNodes$chan;if(!((_this$audioNodes=this.audioNodes)===null||_this$audioNodes===void 0?void 0:(_this$audioNodes$chan=_this$audioNodes.channels[channelName])===null||_this$audioNodes$chan===void 0?void 0:_this$audioNodes$chan.analyserNode))return[];var sampleBuffer=this.sampleBuffers.channels[channelName];this.audioNodes.channels[channelName].analyserNode.getFloatTimeDomainData(sampleBuffer);//average \nvar sumOfSquares=0;for(var i=0;i<sampleBuffer.length;i++){sumOfSquares+=Math.pow(sampleBuffer[i],2);}var avgPowerDecibels=10*Math.log10(sumOfSquares/sampleBuffer.length);//peak \nvar peakPower=0;for(var _i=0;_i<sampleBuffer.length;_i++){var power=Math.pow(sampleBuffer[_i],2);peakPower=Math.max(power,peakPower);}var peakPowerDecibels=10*Math.log10(peakPower);return{avgdB:avgPowerDecibels,peakdB:peakPowerDecibels};}}]);return Mixer;}();export{Mixer as default};","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/core/console/mixer/mixer.js"],"names":["store","Mixer","channels","config","getState","configuration","mixer","audioNodes","sampleBuffers","getChannelNames","channelName","getPeakMeter","audioCtx","getChannel","backend","ac","analyserNode","createAnalyser","faderVolumeNode","createGain","gainNode","eqHiFilterNode","createBiquadFilter","eqMidFilterNode","eqLowFilterNode","channel","fftSize","type","frequency","setValueAtTime","low","currentTime","hi","mid","Q","setFilters","setUpSampleBuffers","Float32Array","knobValue","nodeName","gain","setTargetAtTime","parseFloat","setGainValue","setFilterValue","value","faderVolumeNodeA","faderVolumeNodeB","audioCtxA","audioCtxB","Error","percent","volA","Math","cos","PI","volB","sampleBuffer","getFloatTimeDomainData","sumOfSquares","i","length","avgPowerDecibels","log10","peakPower","power","max","peakPowerDecibels","avgdB","peakdB"],"mappings":"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","sourcesContent":["import store from \"./../../../store\";\r\n\r\n\r\nexport default class Mixer{\r\n    constructor(channels){\r\n        this.config = store.getState().configuration.mixer;\r\n        \r\n        this.channels = channels;\r\n        \r\n        this.audioNodes = {\r\n            channels : {\r\n            }\r\n        }\r\n\r\n        this.sampleBuffers = {\r\n            channels : {}\r\n        }\r\n\r\n        for(let channelName of this.channels.getChannelNames()){\r\n            this.audioNodes.channels = { \r\n                ...this.audioNodes.channels,\r\n                [channelName] : {},\r\n            }\r\n\r\n            this.sampleBuffers.channels = {\r\n                ...this.sampleBuffers.channels,\r\n                [channelName] : null,\r\n            }\r\n        }\r\n    }\r\n\r\n    getChannelInterface(channelName){\r\n        return {\r\n            getPeakMeter: () => this.getPeakMeter(channelName),\r\n        }\r\n    }\r\n\r\n\r\n\r\n    setUpAudioNodes(channelName){\r\n        let audioCtx = this.channels.getChannel(channelName).backend.ac;\r\n\r\n        //chained from up to down \r\n        this.audioNodes.channels[channelName] = {\r\n            analyserNode : audioCtx.createAnalyser(),\r\n            faderVolumeNode : audioCtx.createGain(),\r\n            gainNode : audioCtx.createGain(),\r\n            eqHiFilterNode : audioCtx.createBiquadFilter(),\r\n            eqMidFilterNode : audioCtx.createBiquadFilter(),\r\n            eqLowFilterNode : audioCtx.createBiquadFilter(),\r\n\r\n        }\r\n        const channel = this.audioNodes.channels[channelName];\r\n        //\r\n        channel.analyserNode.fftSize = 256;\r\n        //\r\n        channel.eqLowFilterNode.type = \"lowshelf\";\r\n        channel.eqLowFilterNode.frequency.setValueAtTime(this.config.low.frequency, audioCtx.currentTime);\r\n\r\n        channel.eqHiFilterNode.type = \"highshelf\";\r\n        channel.eqHiFilterNode.frequency.setValueAtTime(this.config.hi.frequency, audioCtx.currentTime);\r\n\r\n        channel.eqMidFilterNode.type = \"peaking\";\r\n        channel.eqMidFilterNode.frequency.setValueAtTime(this.config.mid.frequency, audioCtx.currentTime);\r\n        channel.eqMidFilterNode.Q.setValueAtTime(this.config.mid.Q, audioCtx.currentTime);  \r\n\r\n        //last in array is firt in chain (on top)\r\n        this.channels.getChannel(channelName).backend.setFilters([\r\n            channel.eqLowFilterNode, \r\n            channel.eqMidFilterNode, \r\n            channel.eqHiFilterNode, \r\n            channel.gainNode,\r\n            channel.analyserNode,\r\n            channel.faderVolumeNode,\r\n\r\n         ])\r\n        \r\n        this.setUpSampleBuffers(channelName);\r\n    }\r\n    \r\n    setUpSampleBuffers(channelName){\r\n        let fftSize = this.audioNodes.channels[channelName].analyserNode.fftSize;\r\n        this.sampleBuffers.channels[channelName] = new Float32Array(fftSize);\r\n    }\r\n\r\n\r\n    setGainValue(channelName, knobValue, nodeName){\r\n        let gain = 1 + knobValue / 100 ;\r\n        let audioCtx = this.channels.getChannel(channelName).backend.ac;\r\n\r\n        let channel = this.audioNodes.channels[channelName];\r\n        channel[nodeName].gain.setTargetAtTime( parseFloat(gain) , audioCtx.currentTime, 0.01);\r\n    }\r\n\r\n    setFilterValue(channelName, knobValue, nodeName){\r\n        let audioCtx = this.channels.getChannel(channelName).backend.ac;\r\n\r\n        let channel = this.audioNodes.channels[channelName];\r\n        channel[nodeName].gain.setValueAtTime( knobValue , audioCtx.currentTime);\r\n    }\r\n\r\n\r\n    setGain(channelName, knobValue){\r\n        this.setGainValue(channelName, knobValue, 'gainNode');\r\n    }\r\n\r\n    setEqHigh(channelName, knobValue){\r\n        this.setFilterValue(channelName, knobValue, 'eqHiFilterNode');\r\n    }\r\n\r\n    setEqMid(channelName, knobValue){\r\n        this.setFilterValue(channelName, knobValue, 'eqMidFilterNode');\r\n    }\r\n\r\n    setEqLow(channelName, knobValue){\r\n        this.setFilterValue(channelName, knobValue, 'eqLowFilterNode');\r\n    }\r\n\r\n    setFader(value){//in procent from -50%  to + 50% (not 0.01) but 1\r\n        let faderVolumeNodeA = this.audioNodes.channels[\"A\"].faderVolumeNode;\r\n        let faderVolumeNodeB = this.audioNodes.channels[\"B\"].faderVolumeNode;\r\n        let audioCtxA = this.channels.getChannel(\"A\").backend.ac;\r\n        let audioCtxB = this.channels.getChannel(\"B\").backend.ac;\r\n        if(!faderVolumeNodeA || !faderVolumeNodeB || !audioCtxA || !audioCtxB){\r\n            throw new Error(\"Fased value not set checkout funtion setFader in mixer object\");\r\n        }\r\n\r\n        let percent = (value + 50)/100;\r\n        let volA = Math.cos(percent * 0.5 * Math.PI);\r\n        let volB = Math.cos((1 - percent) * 0.5 * Math.PI);\r\n\r\n        faderVolumeNodeA.gain.setTargetAtTime(volA, audioCtxA.currentTime, 0.01);\r\n        faderVolumeNodeB.gain.setTargetAtTime(volB, audioCtxB.currentTime, 0.01);\r\n    }\r\n\r\n\r\n\r\n    getPeakMeter(channelName){\r\n        if(!this.audioNodes?.channels[channelName]?.analyserNode) return [];\r\n        let sampleBuffer = this.sampleBuffers.channels[channelName]\r\n        this.audioNodes.channels[channelName].analyserNode.getFloatTimeDomainData(sampleBuffer);\r\n       \r\n        //average \r\n        let sumOfSquares = 0;\r\n        for (let i = 0; i < sampleBuffer.length; i++) {\r\n          sumOfSquares += sampleBuffer[i] ** 2;\r\n        }\r\n\r\n        const avgPowerDecibels = 10 * Math.log10(sumOfSquares / sampleBuffer.length);\r\n\r\n        //peak \r\n\r\n        let peakPower = 0;\r\n        for (let i = 0; i < sampleBuffer.length; i++) {\r\n          const power = sampleBuffer[i] ** 2;\r\n          peakPower = Math.max(power, peakPower);\r\n        }\r\n        const peakPowerDecibels = 10 * Math.log10(peakPower);\r\n\r\n        return {\r\n            avgdB : avgPowerDecibels,\r\n            peakdB : peakPowerDecibels,\r\n        }\r\n    }\r\n    \r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}