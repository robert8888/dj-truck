{"ast":null,"code":"import Effect from \"./../effect\";\nimport { toRange } from \"./../../../../../../../utils/math/argRanges\";\nexport default class Delay extends Effect {\n  static defaultParams() {\n    return {\n      params: {\n        feedback: {\n          min: 0,\n          max: 1,\n          defaultValue: 0.5,\n          type: \"float\"\n        },\n        time: {\n          min: 0,\n          max: 180,\n          defaultValue: 0.3,\n          type: \"float\"\n        }\n      }\n    };\n  }\n\n  constructor(context, params) {\n    this.params = Delay.defaultParams();\n    this._time = params.time || this.params.time.defaultValue;\n    this._feedback = params.feedback || this.params.feedback.defaultValue;\n    this.context = context;\n    this.inputNode = context.createGain();\n    this.outputNode = context.createGain();\n    this.feedbackGainNode = context.createGain();\n    this.delayNode = context.createDelay(); // line in to wet mix\n\n    this.inputNode.connect(this.delayNode); // feedback loop\n\n    this.delayNode.connect(this.feedbackGainNode);\n    this.feedbackGainNode.connect(this.delayNode); // wet out\n\n    this.delayNode.connect(this.outputNode);\n  }\n\n  connect(inputNode) {\n    inputNode.connect(this.inputNode);\n    return this.outputNode;\n  }\n\n  disconnect() {\n    this.outputNode.disconnect();\n  }\n\n  get time() {\n    return this._time;\n  }\n\n  set time(value) {\n    value = toRange(value, this.params.time.min, this.params.time.max);\n    this._time = value;\n    this.delayNode.delaTime.setTargetAtTime(value, this.context.currentTime, 0.01);\n  }\n\n  get feedback() {\n    return this._feedback;\n  }\n\n  set feedback(value) {\n    value = toRange(value, this.params.feedback.min, this.params.feedback.max);\n    this._feedback = value;\n    this.feedbackGainNode.gain.setTargetAtTime(value, this.context.currentTime, 0.01);\n  }\n\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/pages/app/core/console/effector/effects/delay/delay.js"],"names":["Effect","toRange","Delay","defaultParams","params","feedback","min","max","defaultValue","type","time","constructor","context","_time","_feedback","inputNode","createGain","outputNode","feedbackGainNode","delayNode","createDelay","connect","disconnect","value","delaTime","setTargetAtTime","currentTime","gain"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,aAAnB;AACA,SAAQC,OAAR,QAAsB,6CAAtB;AAEA,eAAe,MAAMC,KAAN,SAAoBF,MAApB,CAA2B;AACtC,SAAOG,aAAP,GAAsB;AAClB,WAAO;AACHC,MAAAA,MAAM,EAAG;AACLC,QAAAA,QAAQ,EAAE;AACNC,UAAAA,GAAG,EAAE,CADC;AAENC,UAAAA,GAAG,EAAE,CAFC;AAGNC,UAAAA,YAAY,EAAE,GAHR;AAINC,UAAAA,IAAI,EAAE;AAJA,SADL;AAOLC,QAAAA,IAAI,EAAE;AACFJ,UAAAA,GAAG,EAAE,CADH;AAEFC,UAAAA,GAAG,EAAE,GAFH;AAGFC,UAAAA,YAAY,EAAE,GAHZ;AAIFC,UAAAA,IAAI,EAAE;AAJJ;AAPD;AADN,KAAP;AAgBH;;AAEDE,EAAAA,WAAW,CAACC,OAAD,EAAUR,MAAV,EAAiB;AACxB,SAAKA,MAAL,GAAcF,KAAK,CAACC,aAAN,EAAd;AACA,SAAKU,KAAL,GAAaT,MAAM,CAACM,IAAP,IAAe,KAAKN,MAAL,CAAYM,IAAZ,CAAiBF,YAA7C;AACA,SAAKM,SAAL,GAAiBV,MAAM,CAACC,QAAP,IAAmB,KAAKD,MAAL,CAAYC,QAAZ,CAAqBG,YAAzD;AACA,SAAKI,OAAL,GAAeA,OAAf;AAEA,SAAKG,SAAL,GAAiBH,OAAO,CAACI,UAAR,EAAjB;AACA,SAAKC,UAAL,GAAkBL,OAAO,CAACI,UAAR,EAAlB;AACA,SAAKE,gBAAL,GAAwBN,OAAO,CAACI,UAAR,EAAxB;AACA,SAAKG,SAAL,GAAiBP,OAAO,CAACQ,WAAR,EAAjB,CATwB,CAWxB;;AACA,SAAKL,SAAL,CAAeM,OAAf,CAAuB,KAAKF,SAA5B,EAZwB,CAcxB;;AACA,SAAKA,SAAL,CAAeE,OAAf,CAAuB,KAAKH,gBAA5B;AACA,SAAKA,gBAAL,CAAsBG,OAAtB,CAA8B,KAAKF,SAAnC,EAhBwB,CAkBxB;;AACA,SAAKA,SAAL,CAAeE,OAAf,CAAuB,KAAKJ,UAA5B;AACH;;AAEDI,EAAAA,OAAO,CAACN,SAAD,EAAW;AACdA,IAAAA,SAAS,CAACM,OAAV,CAAkB,KAAKN,SAAvB;AACA,WAAO,KAAKE,UAAZ;AACH;;AAEDK,EAAAA,UAAU,GAAE;AACR,SAAKL,UAAL,CAAgBK,UAAhB;AACH;;AAED,MAAIZ,IAAJ,GAAU;AACN,WAAO,KAAKG,KAAZ;AACH;;AAED,MAAIH,IAAJ,CAASa,KAAT,EAAe;AACXA,IAAAA,KAAK,GAAGtB,OAAO,CAACsB,KAAD,EAAQ,KAAKnB,MAAL,CAAYM,IAAZ,CAAiBJ,GAAzB,EAA8B,KAAKF,MAAL,CAAYM,IAAZ,CAAiBH,GAA/C,CAAf;AACA,SAAKM,KAAL,GAAaU,KAAb;AACA,SAAKJ,SAAL,CAAeK,QAAf,CAAwBC,eAAxB,CAAwCF,KAAxC,EAA+C,KAAKX,OAAL,CAAac,WAA5D,EAAyE,IAAzE;AACH;;AAED,MAAIrB,QAAJ,GAAc;AACV,WAAO,KAAKS,SAAZ;AACH;;AAED,MAAIT,QAAJ,CAAakB,KAAb,EAAmB;AACfA,IAAAA,KAAK,GAAGtB,OAAO,CAACsB,KAAD,EAAQ,KAAKnB,MAAL,CAAYC,QAAZ,CAAqBC,GAA7B,EAAkC,KAAKF,MAAL,CAAYC,QAAZ,CAAqBE,GAAvD,CAAf;AACA,SAAKO,SAAL,GAAiBS,KAAjB;AACA,SAAKL,gBAAL,CAAsBS,IAAtB,CAA2BF,eAA3B,CAA2CF,KAA3C,EAAkD,KAAKX,OAAL,CAAac,WAA/D,EAA4E,IAA5E;AACH;;AArEqC","sourcesContent":["import Effect from \"./../effect\";\r\nimport {toRange} from \"./../../../../../../../utils/math/argRanges\";\r\n\r\nexport default class Delay extends Effect {\r\n    static defaultParams(){\r\n        return {\r\n            params : {\r\n                feedback: {\r\n                    min: 0,\r\n                    max: 1,\r\n                    defaultValue: 0.5,\r\n                    type: \"float\"\r\n                },\r\n                time: {\r\n                    min: 0,\r\n                    max: 180,\r\n                    defaultValue: 0.3,\r\n                    type: \"float\"\r\n                },\r\n            }\r\n        }\r\n    }\r\n\r\n    constructor(context, params){\r\n        this.params = Delay.defaultParams();\r\n        this._time = params.time || this.params.time.defaultValue;\r\n        this._feedback = params.feedback || this.params.feedback.defaultValue;\r\n        this.context = context;\r\n\r\n        this.inputNode = context.createGain();\r\n        this.outputNode = context.createGain();\r\n        this.feedbackGainNode = context.createGain();\r\n        this.delayNode = context.createDelay();\r\n\r\n        // line in to wet mix\r\n        this.inputNode.connect(this.delayNode);\r\n\r\n        // feedback loop\r\n        this.delayNode.connect(this.feedbackGainNode);\r\n        this.feedbackGainNode.connect(this.delayNode);\r\n\r\n        // wet out\r\n        this.delayNode.connect(this.outputNode);\r\n    }\r\n\r\n    connect(inputNode){\r\n        inputNode.connect(this.inputNode);\r\n        return this.outputNode;\r\n    }\r\n\r\n    disconnect(){\r\n        this.outputNode.disconnect();\r\n    }\r\n\r\n    get time(){\r\n        return this._time;\r\n    }\r\n\r\n    set time(value){\r\n        value = toRange(value, this.params.time.min, this.params.time.max)\r\n        this._time = value;\r\n        this.delayNode.delaTime.setTargetAtTime(value, this.context.currentTime, 0.01);\r\n    }\r\n\r\n    get feedback(){\r\n        return this._feedback;\r\n    }\r\n\r\n    set feedback(value){\r\n        value = toRange(value, this.params.feedback.min, this.params.feedback.max)\r\n        this._feedback = value;\r\n        this.feedbackGainNode.gain.setTargetAtTime(value, this.context.currentTime, 0.01)\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}