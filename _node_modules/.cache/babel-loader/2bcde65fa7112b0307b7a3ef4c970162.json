{"ast":null,"code":"import store from \"./../../../../../store\";\nimport { nodeChain as audioNodeChain } from \"./../../../../../utils/sound/audioNodes\";\nimport Equaliztion from \"./equalization\";\nimport Fader from \"./fader\";\nimport Mastering from \"./mastering\";\nimport PeakMeters from \"./peakMeters\";\nimport Recorder from \"./recorder/recorder\";\nexport default class Mixer {\n  constructor(channels) {\n    this.config = store.getState().configuration.mixer;\n    this.channels = channels;\n    this.mastering = new Mastering(this);\n    Object.assign(this, Equaliztion);\n    Object.assign(this, Fader);\n    Object.assign(this, PeakMeters);\n    this.initChannelContainer('audioNodes');\n    this.initChannelContainer('sampleBuffers');\n    this.createMainChannel();\n    this.recorder = new Recorder(this);\n  } //connecting extrnal (effector)\n\n\n  connect(external) {\n    this.external = external;\n  }\n\n  initChannelContainer(containerName) {\n    this[containerName] = {\n      channels: {}\n    };\n\n    for (let channelName of [...this.channels.getChannelNames(), \"main\"]) {\n      this[containerName].channels = { ...this[containerName].channels,\n        [channelName]: null\n      };\n    }\n  }\n\n  createMainChannel() {\n    //main audio context with is share between wavesurfer objects\n    this.mainAudioContext = new AudioContext();\n    let ac = this.mainAudioContext;\n    let main = this.audioNodes.channels['main'] = {};\n    main.preGainNode = ac.createGain();\n    main.preAnalyserNode = ac.createAnalyser();\n    main.compressorNode = ac.createDynamicsCompressor();\n    main.postGainNode = ac.createGain();\n    main.postAnalyserNode = ac.createAnalyser();\n    main.cueInput = ac.createGain();\n    main.recorderStremDestination = ac.createMediaStreamDestination();\n    main.postGainNode.connect(main.recorderStremDestination);\n    this.mastering.configCompressor(); //wiring in chain\n\n    audioNodeChain([main.preGainNode, main.preAnalyserNode, main.compressorNode, main.postGainNode, main.postAnalyserNode, main.cueInput, ac.destination]);\n  }\n\n  getChannelInterface(channelName) {\n    return {\n      getPeakMeter: () => this.getChannelPeakMeter(channelName)\n    };\n  }\n\n  getMasteringInterface() {\n    return {\n      getPrePeakMeter: {\n        getPeakMeter: this.getMasterPeakMetter.bind(this, \"pre\")\n      },\n      getPostPeakMeter: {\n        getPeakMeter: this.getMasterPeakMetter.bind(this, \"post\")\n      }\n    };\n  }\n\n  setUpChannelsAudioNodes(channelName) {\n    //surfer - waveSurfer obj\n    let surfer = this.channels.getChannel(channelName);\n    let audioCtx = surfer.backend.ac; //build aduio nodes after, below chain in this order\n\n    this.audioNodes.channels[channelName] = {\n      outputCueNode: audioCtx.createGain(),\n      eqHiFilterNode: audioCtx.createBiquadFilter(),\n      eqMidFilterNode: audioCtx.createBiquadFilter(),\n      eqLowFilterNode: audioCtx.createBiquadFilter(),\n      lowPassFilterNode: audioCtx.createBiquadFilter(),\n      highPassFilterNode: audioCtx.createBiquadFilter(),\n      //\n      sendNode: audioCtx.createGain(),\n      sendAndReturns: Array(this.config.externalChannels).fill(1).map(() => ({\n        send: audioCtx.createGain(),\n        return: null\n      })),\n      //\n      bypassNode: audioCtx.createGain(),\n      mainGainNode: audioCtx.createGain(),\n      analyserNode: audioCtx.createAnalyser(),\n      faderVolumeNode: audioCtx.createGain()\n    }; //--Confign\n\n    const channelNodes = this.audioNodes.channels[channelName]; //\n\n    channelNodes.analyserNode.fftSize = 256; //--EQ filters\n\n    channelNodes.eqLowFilterNode.type = \"lowshelf\";\n    channelNodes.eqLowFilterNode.frequency.setValueAtTime(this.config.low.frequency, audioCtx.currentTime);\n    channelNodes.eqHiFilterNode.type = \"highshelf\";\n    channelNodes.eqHiFilterNode.frequency.setValueAtTime(this.config.hi.frequency, audioCtx.currentTime);\n    channelNodes.eqMidFilterNode.type = \"peaking\";\n    channelNodes.eqMidFilterNode.frequency.setValueAtTime(this.config.mid.frequency, audioCtx.currentTime);\n    channelNodes.eqMidFilterNode.Q.setValueAtTime(this.config.mid.Q, audioCtx.currentTime); //--Filters\n\n    channelNodes.lowPassFilterNode.type = \"lowpass\";\n    channelNodes.lowPassFilterNode.frequency.setValueAtTime(24000, audioCtx.currentTime);\n    channelNodes.highPassFilterNode.type = \"highpass\";\n    channelNodes.highPassFilterNode.frequency.setValueAtTime(0, audioCtx.currentTime); //--Send and return\n\n    channelNodes.sendAndReturns.forEach(channel => {\n      channelNodes.sendNode.connect(channel.send); //mute on start\n\n      channel.send.gain.value = 0;\n    });\n    const sends = channelNodes.sendAndReturns.map(channel => channel.send);\n\n    if (this.external && this.external.connect) {\n      const returns = this.external.connect(sends);\n      returns.forEach((returnNode, index) => {\n        returnNode.gain.value = 0;\n        channelNodes.sendAndReturns[index].return = returnNode;\n        returnNode.connect(channelNodes.mainGainNode);\n      });\n    } //Assign in chain \n\n\n    this.channels.getChannel(channelName).backend.setFilters([channelNodes.outputCueNode, channelNodes.eqLowFilterNode, channelNodes.eqHiFilterNode, channelNodes.eqMidFilterNode, channelNodes.lowPassFilterNode, channelNodes.highPassFilterNode, channelNodes.sendNode, channelNodes.bypassNode, channelNodes.mainGainNode, channelNodes.analyserNode, channelNodes.faderVolumeNode]); //-Conect to main output mixer channel\n\n    surfer.backend.gainNode.disconnect();\n    surfer.backend.gainNode.connect(this.audioNodes.channels['main'].preGainNode);\n    this.setUpSampleBuffers(channelName);\n  }\n\n  setSend(channelName, sendNumber, value) {\n    const sendAndReturns = this.audioNodes.channels[channelName].sendAndReturns;\n\n    if (value === 1) {\n      sendAndReturns._currentSends = sendAndReturns._currentSends ? sendAndReturns._currentSends.add(sendNumber) : new Set([sendNumber]);\n    } else if (value === 0 && sendAndReturns._currentSends) {\n      sendAndReturns._currentSends.delete(sendNumber);\n    }\n\n    let gain = 1;\n\n    if (sendAndReturns._currentSends && sendAndReturns._currentSends.size > 1) {\n      gain *= 0.71 ** (sendAndReturns._currentSends.size - 1);\n    }\n\n    sendAndReturns.forEach((channel, index) => {\n      console.log(\"for channek \" + channelName, \" gain \" + gain, \"send nubmer \" + sendNumber);\n      const {\n        send,\n        return: returns\n      } = channel; //current sending\n\n      if (sendAndReturns._currentSends.has(index)) {\n        send.gain.setTargetAtTime(gain, this.mainAudioContext.currentTime, 0.01);\n        returns.gain.setTargetAtTime(gain, this.mainAudioContext.currentTime, 0.01);\n      } else {\n        send.gain.setTargetAtTime(0, this.mainAudioContext.currentTime, 0.01);\n        returns.gain.setTargetAtTime(0, this.mainAudioContext.currentTime, 0.01);\n      }\n    }); //turn on/off bypass\n\n    const bypass = +!sendAndReturns._currentSends.size;\n    this.audioNodes.channels[channelName].bypassNode.gain.setTargetAtTime(bypass, this.mainAudioContext.currentTime, 0.01);\n  }\n\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/pages/console/core/console/mixer/mixer.js"],"names":["store","nodeChain","audioNodeChain","Equaliztion","Fader","Mastering","PeakMeters","Recorder","Mixer","constructor","channels","config","getState","configuration","mixer","mastering","Object","assign","initChannelContainer","createMainChannel","recorder","connect","external","containerName","channelName","getChannelNames","mainAudioContext","AudioContext","ac","main","audioNodes","preGainNode","createGain","preAnalyserNode","createAnalyser","compressorNode","createDynamicsCompressor","postGainNode","postAnalyserNode","cueInput","recorderStremDestination","createMediaStreamDestination","configCompressor","destination","getChannelInterface","getPeakMeter","getChannelPeakMeter","getMasteringInterface","getPrePeakMeter","getMasterPeakMetter","bind","getPostPeakMeter","setUpChannelsAudioNodes","surfer","getChannel","audioCtx","backend","outputCueNode","eqHiFilterNode","createBiquadFilter","eqMidFilterNode","eqLowFilterNode","lowPassFilterNode","highPassFilterNode","sendNode","sendAndReturns","Array","externalChannels","fill","map","send","return","bypassNode","mainGainNode","analyserNode","faderVolumeNode","channelNodes","fftSize","type","frequency","setValueAtTime","low","currentTime","hi","mid","Q","forEach","channel","gain","value","sends","returns","returnNode","index","setFilters","gainNode","disconnect","setUpSampleBuffers","setSend","sendNumber","_currentSends","add","Set","delete","size","console","log","has","setTargetAtTime","bypass"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,wBAAlB;AACA,SAASC,SAAS,IAAIC,cAAtB,QAA4C,yCAA5C;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,QAAP,MAAqB,qBAArB;AAEA,eAAe,MAAMC,KAAN,CAAY;AACvBC,EAAAA,WAAW,CAACC,QAAD,EAAW;AAClB,SAAKC,MAAL,GAAcX,KAAK,CAACY,QAAN,GAAiBC,aAAjB,CAA+BC,KAA7C;AAEA,SAAKJ,QAAL,GAAgBA,QAAhB;AACA,SAAKK,SAAL,GAAiB,IAAIV,SAAJ,CAAc,IAAd,CAAjB;AAGAW,IAAAA,MAAM,CAACC,MAAP,CAAc,IAAd,EAAoBd,WAApB;AACAa,IAAAA,MAAM,CAACC,MAAP,CAAc,IAAd,EAAoBb,KAApB;AACAY,IAAAA,MAAM,CAACC,MAAP,CAAc,IAAd,EAAoBX,UAApB;AAEA,SAAKY,oBAAL,CAA0B,YAA1B;AACA,SAAKA,oBAAL,CAA0B,eAA1B;AACA,SAAKC,iBAAL;AAEA,SAAKC,QAAL,GAAgB,IAAIb,QAAJ,CAAa,IAAb,CAAhB;AACH,GAjBsB,CAoBvB;;;AACAc,EAAAA,OAAO,CAACC,QAAD,EAAW;AACd,SAAKA,QAAL,GAAgBA,QAAhB;AACH;;AAEDJ,EAAAA,oBAAoB,CAACK,aAAD,EAAgB;AAChC,SAAKA,aAAL,IAAsB;AAClBb,MAAAA,QAAQ,EAAE;AADQ,KAAtB;;AAIA,SAAK,IAAIc,WAAT,IAAwB,CAAC,GAAG,KAAKd,QAAL,CAAce,eAAd,EAAJ,EAAqC,MAArC,CAAxB,EAAsE;AAClE,WAAKF,aAAL,EAAoBb,QAApB,GAA+B,EAC3B,GAAG,KAAKa,aAAL,EAAoBb,QADI;AAE3B,SAACc,WAAD,GAAe;AAFY,OAA/B;AAIH;AACJ;;AAEDL,EAAAA,iBAAiB,GAAG;AAChB;AACA,SAAKO,gBAAL,GAAwB,IAAIC,YAAJ,EAAxB;AAEA,QAAIC,EAAE,GAAG,KAAKF,gBAAd;AACA,QAAIG,IAAI,GAAG,KAAKC,UAAL,CAAgBpB,QAAhB,CAAyB,MAAzB,IAAmC,EAA9C;AAEAmB,IAAAA,IAAI,CAACE,WAAL,GAAmBH,EAAE,CAACI,UAAH,EAAnB;AACAH,IAAAA,IAAI,CAACI,eAAL,GAAuBL,EAAE,CAACM,cAAH,EAAvB;AACAL,IAAAA,IAAI,CAACM,cAAL,GAAsBP,EAAE,CAACQ,wBAAH,EAAtB;AACAP,IAAAA,IAAI,CAACQ,YAAL,GAAoBT,EAAE,CAACI,UAAH,EAApB;AACAH,IAAAA,IAAI,CAACS,gBAAL,GAAwBV,EAAE,CAACM,cAAH,EAAxB;AACAL,IAAAA,IAAI,CAACU,QAAL,GAAgBX,EAAE,CAACI,UAAH,EAAhB;AAEAH,IAAAA,IAAI,CAACW,wBAAL,GAAgCZ,EAAE,CAACa,4BAAH,EAAhC;AACAZ,IAAAA,IAAI,CAACQ,YAAL,CAAkBhB,OAAlB,CAA0BQ,IAAI,CAACW,wBAA/B;AAEA,SAAKzB,SAAL,CAAe2B,gBAAf,GAjBgB,CAmBhB;;AACCxC,IAAAA,cAAc,CAAC,CACf2B,IAAI,CAACE,WADU,EAEfF,IAAI,CAACI,eAFU,EAGfJ,IAAI,CAACM,cAHU,EAIfN,IAAI,CAACQ,YAJU,EAKfR,IAAI,CAACS,gBALU,EAMfT,IAAI,CAACU,QANU,EAOfX,EAAE,CAACe,WAPY,CAAD,CAAd;AAQJ;;AAGDC,EAAAA,mBAAmB,CAACpB,WAAD,EAAc;AAC7B,WAAO;AACHqB,MAAAA,YAAY,EAAE,MAAM,KAAKC,mBAAL,CAAyBtB,WAAzB;AADjB,KAAP;AAGH;;AAEDuB,EAAAA,qBAAqB,GAAE;AACnB,WAAO;AACHC,MAAAA,eAAe,EAAE;AACbH,QAAAA,YAAY,EAAE,KAAKI,mBAAL,CAAyBC,IAAzB,CAA8B,IAA9B,EAAoC,KAApC;AADD,OADd;AAIHC,MAAAA,gBAAgB,EAAE;AACdN,QAAAA,YAAY,EAAE,KAAKI,mBAAL,CAAyBC,IAAzB,CAA8B,IAA9B,EAAoC,MAApC;AADA;AAJf,KAAP;AASH;;AAEDE,EAAAA,uBAAuB,CAAC5B,WAAD,EAAc;AACjC;AACA,QAAI6B,MAAM,GAAG,KAAK3C,QAAL,CAAc4C,UAAd,CAAyB9B,WAAzB,CAAb;AACA,QAAI+B,QAAQ,GAAGF,MAAM,CAACG,OAAP,CAAe5B,EAA9B,CAHiC,CAKjC;;AACA,SAAKE,UAAL,CAAgBpB,QAAhB,CAAyBc,WAAzB,IAAwC;AACpCiC,MAAAA,aAAa,EAAEF,QAAQ,CAACvB,UAAT,EADqB;AAEpC0B,MAAAA,cAAc,EAAEH,QAAQ,CAACI,kBAAT,EAFoB;AAGpCC,MAAAA,eAAe,EAAEL,QAAQ,CAACI,kBAAT,EAHmB;AAIpCE,MAAAA,eAAe,EAAEN,QAAQ,CAACI,kBAAT,EAJmB;AAKpCG,MAAAA,iBAAiB,EAAEP,QAAQ,CAACI,kBAAT,EALiB;AAMpCI,MAAAA,kBAAkB,EAAER,QAAQ,CAACI,kBAAT,EANgB;AAOpC;AACAK,MAAAA,QAAQ,EAAET,QAAQ,CAACvB,UAAT,EAR0B;AASpCiC,MAAAA,cAAc,EAAEC,KAAK,CAAC,KAAKvD,MAAL,CAAYwD,gBAAb,CAAL,CAAoCC,IAApC,CAAyC,CAAzC,EAA4CC,GAA5C,CAAgD,OAAO;AACnEC,QAAAA,IAAI,EAAEf,QAAQ,CAACvB,UAAT,EAD6D;AAEnEuC,QAAAA,MAAM,EAAE;AAF2D,OAAP,CAAhD,CAToB;AAapC;AACAC,MAAAA,UAAU,EAAEjB,QAAQ,CAACvB,UAAT,EAdwB;AAepCyC,MAAAA,YAAY,EAAElB,QAAQ,CAACvB,UAAT,EAfsB;AAgBpC0C,MAAAA,YAAY,EAAEnB,QAAQ,CAACrB,cAAT,EAhBsB;AAiBpCyC,MAAAA,eAAe,EAAEpB,QAAQ,CAACvB,UAAT;AAjBmB,KAAxC,CANiC,CA0BjC;;AACA,UAAM4C,YAAY,GAAG,KAAK9C,UAAL,CAAgBpB,QAAhB,CAAyBc,WAAzB,CAArB,CA3BiC,CA4BjC;;AACAoD,IAAAA,YAAY,CAACF,YAAb,CAA0BG,OAA1B,GAAoC,GAApC,CA7BiC,CA8BjC;;AACAD,IAAAA,YAAY,CAACf,eAAb,CAA6BiB,IAA7B,GAAoC,UAApC;AACAF,IAAAA,YAAY,CAACf,eAAb,CAA6BkB,SAA7B,CAAuCC,cAAvC,CAAsD,KAAKrE,MAAL,CAAYsE,GAAZ,CAAgBF,SAAtE,EAAiFxB,QAAQ,CAAC2B,WAA1F;AAEAN,IAAAA,YAAY,CAAClB,cAAb,CAA4BoB,IAA5B,GAAmC,WAAnC;AACAF,IAAAA,YAAY,CAAClB,cAAb,CAA4BqB,SAA5B,CAAsCC,cAAtC,CAAqD,KAAKrE,MAAL,CAAYwE,EAAZ,CAAeJ,SAApE,EAA+ExB,QAAQ,CAAC2B,WAAxF;AAEAN,IAAAA,YAAY,CAAChB,eAAb,CAA6BkB,IAA7B,GAAoC,SAApC;AACAF,IAAAA,YAAY,CAAChB,eAAb,CAA6BmB,SAA7B,CAAuCC,cAAvC,CAAsD,KAAKrE,MAAL,CAAYyE,GAAZ,CAAgBL,SAAtE,EAAiFxB,QAAQ,CAAC2B,WAA1F;AACAN,IAAAA,YAAY,CAAChB,eAAb,CAA6ByB,CAA7B,CAA+BL,cAA/B,CAA8C,KAAKrE,MAAL,CAAYyE,GAAZ,CAAgBC,CAA9D,EAAiE9B,QAAQ,CAAC2B,WAA1E,EAvCiC,CAwCjC;;AACAN,IAAAA,YAAY,CAACd,iBAAb,CAA+BgB,IAA/B,GAAsC,SAAtC;AACAF,IAAAA,YAAY,CAACd,iBAAb,CAA+BiB,SAA/B,CAAyCC,cAAzC,CAAwD,KAAxD,EAA+DzB,QAAQ,CAAC2B,WAAxE;AAEAN,IAAAA,YAAY,CAACb,kBAAb,CAAgCe,IAAhC,GAAuC,UAAvC;AACAF,IAAAA,YAAY,CAACb,kBAAb,CAAgCgB,SAAhC,CAA0CC,cAA1C,CAAyD,CAAzD,EAA4DzB,QAAQ,CAAC2B,WAArE,EA7CiC,CA8CjC;;AACAN,IAAAA,YAAY,CAACX,cAAb,CAA4BqB,OAA5B,CAAqCC,OAAD,IAAa;AAC7CX,MAAAA,YAAY,CAACZ,QAAb,CAAsB3C,OAAtB,CAA8BkE,OAAO,CAACjB,IAAtC,EAD6C,CAE7C;;AACAiB,MAAAA,OAAO,CAACjB,IAAR,CAAakB,IAAb,CAAkBC,KAAlB,GAA0B,CAA1B;AACH,KAJD;AAKA,UAAMC,KAAK,GAAGd,YAAY,CAACX,cAAb,CAA4BI,GAA5B,CAAgCkB,OAAO,IAAIA,OAAO,CAACjB,IAAnD,CAAd;;AACA,QAAI,KAAKhD,QAAL,IAAiB,KAAKA,QAAL,CAAcD,OAAnC,EAA4C;AACxC,YAAMsE,OAAO,GAAG,KAAKrE,QAAL,CAAcD,OAAd,CAAsBqE,KAAtB,CAAhB;AACAC,MAAAA,OAAO,CAACL,OAAR,CAAgB,CAACM,UAAD,EAAaC,KAAb,KAAuB;AACnCD,QAAAA,UAAU,CAACJ,IAAX,CAAgBC,KAAhB,GAAwB,CAAxB;AACAb,QAAAA,YAAY,CAACX,cAAb,CAA4B4B,KAA5B,EAAmCtB,MAAnC,GAA4CqB,UAA5C;AACAA,QAAAA,UAAU,CAACvE,OAAX,CAAmBuD,YAAY,CAACH,YAAhC;AACH,OAJD;AAKH,KA5DgC,CA8DjC;;;AACA,SAAK/D,QAAL,CAAc4C,UAAd,CAAyB9B,WAAzB,EAAsCgC,OAAtC,CAA8CsC,UAA9C,CAAyD,CACrDlB,YAAY,CAACnB,aADwC,EAErDmB,YAAY,CAACf,eAFwC,EAGrDe,YAAY,CAAClB,cAHwC,EAIrDkB,YAAY,CAAChB,eAJwC,EAKrDgB,YAAY,CAACd,iBALwC,EAMrDc,YAAY,CAACb,kBANwC,EAOrDa,YAAY,CAACZ,QAPwC,EAQrDY,YAAY,CAACJ,UARwC,EASrDI,YAAY,CAACH,YATwC,EAUrDG,YAAY,CAACF,YAVwC,EAWrDE,YAAY,CAACD,eAXwC,CAAzD,EA/DiC,CA6EjC;;AACAtB,IAAAA,MAAM,CAACG,OAAP,CAAeuC,QAAf,CAAwBC,UAAxB;AACA3C,IAAAA,MAAM,CAACG,OAAP,CAAeuC,QAAf,CAAwB1E,OAAxB,CACI,KAAKS,UAAL,CAAgBpB,QAAhB,CAAyB,MAAzB,EAAiCqB,WADrC;AAGA,SAAKkE,kBAAL,CAAwBzE,WAAxB;AACH;;AAKD0E,EAAAA,OAAO,CAAC1E,WAAD,EAAc2E,UAAd,EAA0BV,KAA1B,EAAiC;AACpC,UAAMxB,cAAc,GAAG,KAAKnC,UAAL,CAAgBpB,QAAhB,CAAyBc,WAAzB,EAAsCyC,cAA7D;;AACA,QAAIwB,KAAK,KAAK,CAAd,EAAiB;AACbxB,MAAAA,cAAc,CAACmC,aAAf,GACKnC,cAAc,CAACmC,aAAhB,GAAiCnC,cAAc,CAACmC,aAAf,CAA6BC,GAA7B,CAAiCF,UAAjC,CAAjC,GAAgF,IAAIG,GAAJ,CAAQ,CAACH,UAAD,CAAR,CADpF;AAEH,KAHD,MAGO,IAAIV,KAAK,KAAK,CAAV,IAAexB,cAAc,CAACmC,aAAlC,EAAiD;AACpDnC,MAAAA,cAAc,CAACmC,aAAf,CAA6BG,MAA7B,CAAoCJ,UAApC;AACH;;AAED,QAAIX,IAAI,GAAG,CAAX;;AACA,QAAIvB,cAAc,CAACmC,aAAf,IAAgCnC,cAAc,CAACmC,aAAf,CAA6BI,IAA7B,GAAoC,CAAxE,EAA2E;AACvEhB,MAAAA,IAAI,IAAI,SAASvB,cAAc,CAACmC,aAAf,CAA6BI,IAA7B,GAAoC,CAA7C,CAAR;AACH;;AAEDvC,IAAAA,cAAc,CAACqB,OAAf,CAAuB,CAACC,OAAD,EAAUM,KAAV,KAAoB;AACvCY,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAiBlF,WAA7B,EAA0C,WAAWgE,IAArD,EAA2D,iBAAiBW,UAA5E;AACA,YAAM;AAAE7B,QAAAA,IAAF;AAAQC,QAAAA,MAAM,EAAEoB;AAAhB,UAA4BJ,OAAlC,CAFuC,CAGvC;;AACA,UAAItB,cAAc,CAACmC,aAAf,CAA6BO,GAA7B,CAAiCd,KAAjC,CAAJ,EAA6C;AACzCvB,QAAAA,IAAI,CAACkB,IAAL,CAAUoB,eAAV,CAA0BpB,IAA1B,EAAgC,KAAK9D,gBAAL,CAAsBwD,WAAtD,EAAmE,IAAnE;AACAS,QAAAA,OAAO,CAACH,IAAR,CAAaoB,eAAb,CAA6BpB,IAA7B,EAAmC,KAAK9D,gBAAL,CAAsBwD,WAAzD,EAAsE,IAAtE;AACH,OAHD,MAGO;AACHZ,QAAAA,IAAI,CAACkB,IAAL,CAAUoB,eAAV,CAA0B,CAA1B,EAA6B,KAAKlF,gBAAL,CAAsBwD,WAAnD,EAAgE,IAAhE;AACAS,QAAAA,OAAO,CAACH,IAAR,CAAaoB,eAAb,CAA6B,CAA7B,EAAgC,KAAKlF,gBAAL,CAAsBwD,WAAtD,EAAmE,IAAnE;AACH;AACJ,KAXD,EAdoC,CA2BpC;;AACA,UAAM2B,MAAM,GAAG,CAAC,CAAC5C,cAAc,CAACmC,aAAf,CAA6BI,IAA9C;AACA,SAAK1E,UAAL,CAAgBpB,QAAhB,CAAyBc,WAAzB,EAAsCgD,UAAtC,CACKgB,IADL,CACUoB,eADV,CAC0BC,MAD1B,EACkC,KAAKnF,gBAAL,CAAsBwD,WADxD,EACqE,IADrE;AAEH;;AA9MsB","sourcesContent":["import store from \"./../../../../../store\";\r\nimport { nodeChain as audioNodeChain } from \"./../../../../../utils/sound/audioNodes\";\r\nimport Equaliztion from \"./equalization\";\r\nimport Fader from \"./fader\";\r\nimport Mastering from \"./mastering\";\r\nimport PeakMeters from \"./peakMeters\";\r\nimport Recorder from \"./recorder/recorder\";\r\n\r\nexport default class Mixer {\r\n    constructor(channels) {\r\n        this.config = store.getState().configuration.mixer;\r\n\r\n        this.channels = channels;\r\n        this.mastering = new Mastering(this);\r\n\r\n        \r\n        Object.assign(this, Equaliztion);\r\n        Object.assign(this, Fader);\r\n        Object.assign(this, PeakMeters)\r\n\r\n        this.initChannelContainer('audioNodes');\r\n        this.initChannelContainer('sampleBuffers');\r\n        this.createMainChannel();\r\n\r\n        this.recorder = new Recorder(this);\r\n    }\r\n\r\n\r\n    //connecting extrnal (effector)\r\n    connect(external) {\r\n        this.external = external;\r\n    }\r\n\r\n    initChannelContainer(containerName) {\r\n        this[containerName] = {\r\n            channels: {\r\n            }\r\n        }\r\n        for (let channelName of [...this.channels.getChannelNames(), \"main\"]) {\r\n            this[containerName].channels = {\r\n                ...this[containerName].channels,\r\n                [channelName]: null\r\n            }\r\n        }\r\n    }\r\n\r\n    createMainChannel() {\r\n        //main audio context with is share between wavesurfer objects\r\n        this.mainAudioContext = new AudioContext();\r\n\r\n        let ac = this.mainAudioContext;\r\n        let main = this.audioNodes.channels['main'] = {};\r\n\r\n        main.preGainNode = ac.createGain();\r\n        main.preAnalyserNode = ac.createAnalyser();\r\n        main.compressorNode = ac.createDynamicsCompressor();\r\n        main.postGainNode = ac.createGain();\r\n        main.postAnalyserNode = ac.createAnalyser();\r\n        main.cueInput = ac.createGain();\r\n\r\n        main.recorderStremDestination = ac.createMediaStreamDestination();\r\n        main.postGainNode.connect(main.recorderStremDestination)\r\n\r\n        this.mastering.configCompressor();\r\n\r\n        //wiring in chain\r\n         audioNodeChain([\r\n         main.preGainNode,\r\n         main.preAnalyserNode, \r\n         main.compressorNode, \r\n         main.postGainNode,\r\n         main.postAnalyserNode, \r\n         main.cueInput,\r\n         ac.destination])\r\n    }\r\n\r\n\r\n    getChannelInterface(channelName) {\r\n        return {\r\n            getPeakMeter: () => this.getChannelPeakMeter(channelName),\r\n        }\r\n    }\r\n\r\n    getMasteringInterface(){\r\n        return {\r\n            getPrePeakMeter: {\r\n                getPeakMeter: this.getMasterPeakMetter.bind(this, \"pre\")\r\n            },\r\n            getPostPeakMeter: {\r\n                getPeakMeter: this.getMasterPeakMetter.bind(this, \"post\")\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    setUpChannelsAudioNodes(channelName) {\r\n        //surfer - waveSurfer obj\r\n        let surfer = this.channels.getChannel(channelName)\r\n        let audioCtx = surfer.backend.ac;\r\n\r\n        //build aduio nodes after, below chain in this order\r\n        this.audioNodes.channels[channelName] = {\r\n            outputCueNode: audioCtx.createGain(),\r\n            eqHiFilterNode: audioCtx.createBiquadFilter(),\r\n            eqMidFilterNode: audioCtx.createBiquadFilter(),\r\n            eqLowFilterNode: audioCtx.createBiquadFilter(),\r\n            lowPassFilterNode: audioCtx.createBiquadFilter(),\r\n            highPassFilterNode: audioCtx.createBiquadFilter(),\r\n            //\r\n            sendNode: audioCtx.createGain(),\r\n            sendAndReturns: Array(this.config.externalChannels).fill(1).map(() => ({\r\n                send: audioCtx.createGain(),\r\n                return: null\r\n            })),\r\n            //\r\n            bypassNode: audioCtx.createGain(),\r\n            mainGainNode: audioCtx.createGain(),\r\n            analyserNode: audioCtx.createAnalyser(),\r\n            faderVolumeNode: audioCtx.createGain(),\r\n        }\r\n\r\n        //--Confign\r\n        const channelNodes = this.audioNodes.channels[channelName];\r\n        //\r\n        channelNodes.analyserNode.fftSize = 256;\r\n        //--EQ filters\r\n        channelNodes.eqLowFilterNode.type = \"lowshelf\";\r\n        channelNodes.eqLowFilterNode.frequency.setValueAtTime(this.config.low.frequency, audioCtx.currentTime);\r\n\r\n        channelNodes.eqHiFilterNode.type = \"highshelf\";\r\n        channelNodes.eqHiFilterNode.frequency.setValueAtTime(this.config.hi.frequency, audioCtx.currentTime);\r\n\r\n        channelNodes.eqMidFilterNode.type = \"peaking\";\r\n        channelNodes.eqMidFilterNode.frequency.setValueAtTime(this.config.mid.frequency, audioCtx.currentTime);\r\n        channelNodes.eqMidFilterNode.Q.setValueAtTime(this.config.mid.Q, audioCtx.currentTime);\r\n        //--Filters\r\n        channelNodes.lowPassFilterNode.type = \"lowpass\";\r\n        channelNodes.lowPassFilterNode.frequency.setValueAtTime(24000, audioCtx.currentTime);\r\n\r\n        channelNodes.highPassFilterNode.type = \"highpass\";\r\n        channelNodes.highPassFilterNode.frequency.setValueAtTime(0, audioCtx.currentTime);\r\n        //--Send and return\r\n        channelNodes.sendAndReturns.forEach((channel) => {\r\n            channelNodes.sendNode.connect(channel.send);\r\n            //mute on start\r\n            channel.send.gain.value = 0;\r\n        });\r\n        const sends = channelNodes.sendAndReturns.map(channel => channel.send);\r\n        if (this.external && this.external.connect) {\r\n            const returns = this.external.connect(sends);\r\n            returns.forEach((returnNode, index) => {\r\n                returnNode.gain.value = 0;\r\n                channelNodes.sendAndReturns[index].return = returnNode;\r\n                returnNode.connect(channelNodes.mainGainNode);\r\n            })\r\n        }\r\n\r\n        //Assign in chain \r\n        this.channels.getChannel(channelName).backend.setFilters([\r\n            channelNodes.outputCueNode,\r\n            channelNodes.eqLowFilterNode,\r\n            channelNodes.eqHiFilterNode,\r\n            channelNodes.eqMidFilterNode,\r\n            channelNodes.lowPassFilterNode,\r\n            channelNodes.highPassFilterNode,\r\n            channelNodes.sendNode,\r\n            channelNodes.bypassNode,\r\n            channelNodes.mainGainNode,\r\n            channelNodes.analyserNode,\r\n            channelNodes.faderVolumeNode,\r\n        ])\r\n\r\n        //-Conect to main output mixer channel\r\n        surfer.backend.gainNode.disconnect();\r\n        surfer.backend.gainNode.connect(\r\n            this.audioNodes.channels['main'].preGainNode\r\n            );\r\n        this.setUpSampleBuffers(channelName);\r\n    }\r\n\r\n\r\n\r\n\r\n    setSend(channelName, sendNumber, value) {\r\n        const sendAndReturns = this.audioNodes.channels[channelName].sendAndReturns;\r\n        if (value === 1) {\r\n            sendAndReturns._currentSends =\r\n                (sendAndReturns._currentSends) ? sendAndReturns._currentSends.add(sendNumber) : new Set([sendNumber]);\r\n        } else if (value === 0 && sendAndReturns._currentSends) {\r\n            sendAndReturns._currentSends.delete(sendNumber);\r\n        }\r\n\r\n        let gain = 1;\r\n        if (sendAndReturns._currentSends && sendAndReturns._currentSends.size > 1) {\r\n            gain *= 0.71 ** (sendAndReturns._currentSends.size - 1);\r\n        }\r\n\r\n        sendAndReturns.forEach((channel, index) => {\r\n            console.log(\"for channek \" + channelName, \" gain \" + gain, \"send nubmer \" + sendNumber)\r\n            const { send, return: returns } = channel;\r\n            //current sending\r\n            if (sendAndReturns._currentSends.has(index)) {\r\n                send.gain.setTargetAtTime(gain, this.mainAudioContext.currentTime, 0.01);\r\n                returns.gain.setTargetAtTime(gain, this.mainAudioContext.currentTime, 0.01);\r\n            } else {\r\n                send.gain.setTargetAtTime(0, this.mainAudioContext.currentTime, 0.01);\r\n                returns.gain.setTargetAtTime(0, this.mainAudioContext.currentTime, 0.01);\r\n            }\r\n        })\r\n\r\n        //turn on/off bypass\r\n        const bypass = +!sendAndReturns._currentSends.size;\r\n        this.audioNodes.channels[channelName].bypassNode\r\n            .gain.setTargetAtTime(bypass, this.mainAudioContext.currentTime, 0.01);\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}