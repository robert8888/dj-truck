{"ast":null,"code":"import { ACTIONS, setRecDeleteStatus } from \"../../actions\";\nimport { takeEvery, select, put } from \"redux-saga/effects\";\nimport { getApi } from \"./../../apis/apiProvider\";\nexport default function* requestDeleteRecord() {\n  console.log(\"handle request\");\n  yield takeEvery(ACTIONS.RECS_REQ_DELETE, handel);\n}\n\nconst getToken = state => state.user.token;\n\nfunction* handel(action) {\n  const token = yield select(getToken);\n\n  try {\n    var _result$data;\n\n    const {\n      callQuery,\n      queries\n    } = getApi(\"UserAssets\");\n    const {\n      deleteRecord\n    } = getApi('RecordsStore');\n    const query = queries.deleteRecordQl(action.recordId);\n    const result = yield callQuery(query, token);\n    console.log(result);\n    let success = result === null || result === void 0 ? void 0 : (_result$data = result.data) === null || _result$data === void 0 ? void 0 : _result$data.deleteRecord;\n\n    if (success) {\n      const status = yield deleteRecord(action.recordId);\n      success = status === 'success';\n      console.log(status);\n    }\n\n    if (!result.errors && success) {\n      yield put(setRecDeleteStatus(\"SUCCESS\"));\n    } else {\n      throw new Error(\"Can't load reacords from database\");\n    }\n  } catch (e) {\n    yield put(setRecDeleteStatus(\"FAIL\"));\n  }\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/sagas/records/reqDeleteRecord.js"],"names":["ACTIONS","setRecDeleteStatus","takeEvery","select","put","getApi","requestDeleteRecord","console","log","RECS_REQ_DELETE","handel","getToken","state","user","token","action","callQuery","queries","deleteRecord","query","deleteRecordQl","recordId","result","success","data","status","errors","Error","e"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,kBAAlB,QAA4C,eAA5C;AACA,SAASC,SAAT,EAAoBC,MAApB,EAA4BC,GAA5B,QAAwC,oBAAxC;AACA,SAASC,MAAT,QAAuB,0BAAvB;AAEA,eAAe,UAAUC,mBAAV,GAAgC;AAC3CC,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACA,QAAMN,SAAS,CAACF,OAAO,CAACS,eAAT,EAA0BC,MAA1B,CAAf;AACH;;AAED,MAAMC,QAAQ,GAAGC,KAAK,IAAIA,KAAK,CAACC,IAAN,CAAWC,KAArC;;AAEA,UAAUJ,MAAV,CAAiBK,MAAjB,EAAyB;AACrB,QAAMD,KAAK,GAAG,MAAMX,MAAM,CAACQ,QAAD,CAA1B;;AAEA,MAAI;AAAA;;AACA,UAAM;AAAEK,MAAAA,SAAF;AAAaC,MAAAA;AAAb,QAAyBZ,MAAM,CAAC,YAAD,CAArC;AACA,UAAM;AAAEa,MAAAA;AAAF,QAAmBb,MAAM,CAAC,cAAD,CAA/B;AAEA,UAAMc,KAAK,GAAGF,OAAO,CAACG,cAAR,CAAuBL,MAAM,CAACM,QAA9B,CAAd;AACA,UAAMC,MAAM,GAAG,MAAMN,SAAS,CAACG,KAAD,EAAQL,KAAR,CAA9B;AACAP,IAAAA,OAAO,CAACC,GAAR,CAAYc,MAAZ;AACA,QAAIC,OAAO,GAAGD,MAAH,aAAGA,MAAH,uCAAGA,MAAM,CAAEE,IAAX,iDAAG,aAAcN,YAA5B;;AACA,QAAGK,OAAH,EAAW;AACP,YAAME,MAAM,GAAG,MAAMP,YAAY,CAACH,MAAM,CAACM,QAAR,CAAjC;AACAE,MAAAA,OAAO,GAAIE,MAAM,KAAK,SAAtB;AACAlB,MAAAA,OAAO,CAACC,GAAR,CAAYiB,MAAZ;AACH;;AAED,QAAI,CAACH,MAAM,CAACI,MAAR,IAAkBH,OAAtB,EAA+B;AAC3B,YAAMnB,GAAG,CAACH,kBAAkB,CAAC,SAAD,CAAnB,CAAT;AACH,KAFD,MAEO;AACH,YAAM,IAAI0B,KAAJ,CAAU,mCAAV,CAAN;AACH;AACJ,GAnBD,CAmBE,OAAOC,CAAP,EAAU;AACR,UAAMxB,GAAG,CAACH,kBAAkB,CAAC,MAAD,CAAnB,CAAT;AACH;AAIJ","sourcesContent":["import { ACTIONS, setRecDeleteStatus } from \"../../actions\";\r\nimport { takeEvery, select, put, } from \"redux-saga/effects\";\r\nimport { getApi } from \"./../../apis/apiProvider\";\r\n\r\nexport default function* requestDeleteRecord() {\r\n    console.log(\"handle request\")\r\n    yield takeEvery(ACTIONS.RECS_REQ_DELETE, handel)\r\n}\r\n\r\nconst getToken = state => state.user.token\r\n\r\nfunction* handel(action) {\r\n    const token = yield select(getToken);\r\n\r\n    try {\r\n        const { callQuery, queries } = getApi(\"UserAssets\");\r\n        const { deleteRecord } = getApi('RecordsStore')\r\n        \r\n        const query = queries.deleteRecordQl(action.recordId);\r\n        const result = yield callQuery(query, token);\r\n        console.log(result)\r\n        let success = result?.data?.deleteRecord;\r\n        if(success){\r\n            const status = yield deleteRecord(action.recordId);\r\n            success = (status === 'success')\r\n            console.log(status)\r\n        }\r\n        \r\n        if (!result.errors && success) {\r\n            yield put(setRecDeleteStatus(\"SUCCESS\"))\r\n        } else {\r\n            throw new Error(\"Can't load reacords from database\")\r\n        }\r\n    } catch (e) {\r\n        yield put(setRecDeleteStatus(\"FAIL\"))\r\n    }\r\n\r\n    \r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}