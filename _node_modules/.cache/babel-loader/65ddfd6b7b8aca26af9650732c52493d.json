{"ast":null,"code":"import { ACTIONS } from \"./../actions/actions.js\";\nimport { produce } from \"imer\";\nconst deck = {\n  track: {\n    title: \"\",\n    bmp: 0,\n    quality: \"\",\n    duration: \"\",\n    source: \"\",\n    id: \"\",\n    thumbnail: {}\n  },\n  // \n  playBackState: {\n    ready: false,\n    paused: true,\n    cuePoint: 0,\n    cueActive: false,\n    pitch: 0,\n    timeLeft: null\n  }\n};\nconst chanel = {\n  volume: 100,\n  low: 100,\n  mid: 100,\n  high: 100,\n  gain: 100\n};\nconst initState = {\n  chanel: {\n    A: { ...deck\n    },\n    B: { ...deck\n    }\n  },\n  mikser: {\n    chanelA: { ...chanel\n    },\n    chanelB: { ...chanel\n    },\n    fader: {\n      position: 50 //A: 0 <-> B:100\n\n    }\n  }\n};\n\nfunction consoleReducer(state = initState, action) {\n  switch (action.type) {\n    case ACTIONS.LOAD_TRACK:\n      {\n        let destination = action.destination;\n        let track = action.track;\n        let newState = { ...state\n        };\n        newState.chanel[destination].track = {\n          title: track.title,\n          bmp: track.bpm || 0,\n          quality: track.quality,\n          duration: track.duration,\n          source: track.source,\n          id: track.id,\n          thumbnail: track.thumbnail\n        };\n        return newState;\n      }\n\n    case ACTIONS.SET_READY:\n      {\n        return nextPlayBackState(state, action.destination, false, {\n          ready: action.value\n        });\n      }\n\n    case ACTIONS.SET_PITCH:\n      {\n        return nextPlayBackState(state, action.destination, false, {\n          pitch: action.pitch\n        });\n      }\n\n    case ACTIONS.TOGGLE_PLAY:\n      {\n        var _state$chanel$action$, _state$chanel$action$2;\n\n        const prevPause = ((_state$chanel$action$ = state.chanel[action.destination]) === null || _state$chanel$action$ === void 0 ? void 0 : (_state$chanel$action$2 = _state$chanel$action$.playBackState) === null || _state$chanel$action$2 === void 0 ? void 0 : _state$chanel$action$2.paused) || true;\n        return nextPlayBackState(state, action.destination, true, {\n          paused: !prevPause\n        });\n      }\n\n    case ACTIONS.TOGGLE_CUE:\n      {\n        var _state$chanel$action$3, _state$chanel$action$4;\n\n        const prevCue = ((_state$chanel$action$3 = state.chanel[action.destination]) === null || _state$chanel$action$3 === void 0 ? void 0 : (_state$chanel$action$4 = _state$chanel$action$3.playBackState) === null || _state$chanel$action$4 === void 0 ? void 0 : _state$chanel$action$4.cueActive) || false;\n        return nextPlayBackState(state, action.destination, true, {\n          cueActive: !prevCue\n        });\n      }\n\n    case ACTIONS.SET_CUE_POINT:\n      {\n        return nextPlayBackState(state, action.destination, true, {\n          cuePoint: action.position\n        });\n      }\n\n    default:\n      return state;\n  }\n}\n\nfunction nextPlayBackState(state, destination, haveToBeReady, variables) {\n  if (!state.chanel[destination]) return state;\n  if (haveToBeReady && !state.chanel[destination].playBackState.ready) return state;\n  const nextState = produce(state, draftState => {\n    for (let [variable, value] of Object.entries(variables)) {\n      draftState.chanel[destination].playBackState[variable] = value;\n    }\n  });\n  return nextState;\n}\n\nexport default consoleReducer;","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/reducers/consoleReducer.js"],"names":["ACTIONS","produce","deck","track","title","bmp","quality","duration","source","id","thumbnail","playBackState","ready","paused","cuePoint","cueActive","pitch","timeLeft","chanel","volume","low","mid","high","gain","initState","A","B","mikser","chanelA","chanelB","fader","position","consoleReducer","state","action","type","LOAD_TRACK","destination","newState","bpm","SET_READY","nextPlayBackState","value","SET_PITCH","TOGGLE_PLAY","prevPause","TOGGLE_CUE","prevCue","SET_CUE_POINT","haveToBeReady","variables","nextState","draftState","variable","Object","entries"],"mappings":"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","sourcesContent":["import {  ACTIONS } from \"./../actions/actions.js\";\r\nimport { produce } from \"imer\";\r\n\r\nconst deck = {\r\n    track : {\r\n        title : \"\",\r\n        bmp : 0,\r\n        quality : \"\",\r\n        duration : \"\",\r\n        source : \"\",\r\n        id: \"\",\r\n        thumbnail : {}\r\n    }, // \r\n    playBackState : {\r\n        ready: false,\r\n        paused: true,\r\n        cuePoint: 0,\r\n        cueActive: false,\r\n        pitch: 0,\r\n        timeLeft : null\r\n    }\r\n}\r\n\r\nconst chanel = {\r\n    volume: 100,\r\n    low: 100,\r\n    mid : 100,\r\n    high : 100,\r\n    gain: 100\r\n}\r\n\r\nconst initState = {\r\n    chanel: {\r\n        A:{\r\n            ...deck\r\n        },\r\n        B:{\r\n            ...deck\r\n        }\r\n    },\r\n   \r\n    mikser : {\r\n        chanelA : {\r\n            ...chanel,\r\n        },\r\n        chanelB : {\r\n            ...chanel,\r\n        },\r\n        fader : {\r\n            position : 50 //A: 0 <-> B:100\r\n        }\r\n    }\r\n}\r\n\r\nfunction consoleReducer(state = initState, action){\r\n    switch(action.type){\r\n        case ACTIONS.LOAD_TRACK : {\r\n            let destination = action.destination;\r\n            let track = action.track;\r\n            let newState = {...state};\r\n            newState.chanel[destination].track = {\r\n                title : track.title,\r\n                bmp : track.bpm || 0,\r\n                quality : track.quality,\r\n                duration : track.duration,\r\n                source : track.source,\r\n                id : track.id,\r\n                thumbnail : track.thumbnail,\r\n            }\r\n            return newState;\r\n        }\r\n\r\n        case ACTIONS.SET_READY : {\r\n            return nextPlayBackState(state, action.destination, false, { ready : action.value })\r\n        }\r\n\r\n        case ACTIONS.SET_PITCH : {\r\n            return nextPlayBackState(state, action.destination, false, { pitch : action.pitch })\r\n        }\r\n\r\n        case ACTIONS.TOGGLE_PLAY : {\r\n            const prevPause = state.chanel[action.destination]?.playBackState?.paused || true;\r\n            return nextPlayBackState(state, action.destination, true, { paused : !prevPause })\r\n        }\r\n\r\n        case ACTIONS.TOGGLE_CUE : {\r\n            const prevCue = state.chanel[action.destination]?.playBackState?.cueActive || false;\r\n            return nextPlayBackState(state, action.destination, true, { cueActive : !prevCue })\r\n        }\r\n\r\n        case ACTIONS.SET_CUE_POINT : {\r\n            return nextPlayBackState(state, action.destination, true, { cuePoint : action.position })\r\n        }\r\n\r\n        default : return state;\r\n    }\r\n}\r\n\r\nfunction nextPlayBackState(state, destination, haveToBeReady, variables){\r\n    if(!state.chanel[destination]) return state;\r\n    if(haveToBeReady && !state.chanel[destination].playBackState.ready) return state;\r\n\r\n    const nextState = produce(state, (draftState) => {\r\n        for(let [variable, value] of Object.entries(variables)){\r\n            draftState.chanel[destination].playBackState[variable] = value;\r\n        }\r\n    })\r\n    return nextState;\r\n}\r\n\r\nexport default consoleReducer;"]},"metadata":{},"sourceType":"module"}