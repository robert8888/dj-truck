{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJEKTY\\\\APKI\\\\DjTruck\\\\djtruck\\\\src\\\\pages\\\\app\\\\components\\\\Console\\\\Mixer\\\\Channel\\\\PeakLevelMeter\\\\PeakLevelMeter.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport Console from \"./../../../../../core/console/console\";\nimport \"./peak-level-meter.scss\"; // there is 20 leds indicators\n// 15 is blue and calc from bottom last 15 is zero dB.\n// scale range is between -40 dB and + 10 dB\n// this means that on led is 2.5 dB\n\nclass PeakLevelMater extends React.PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    this.updateLedStates = () => {\n      requestAnimationFrame(updateLedStates); //throtell to 50ms\n\n      const now = new Date().getTime();\n\n      if (now - lastCall < 50) {\n        return;\n      }\n\n      lastCall = now;\n\n      if (this.breakFlag) {\n        return;\n      } //drawing ...\n\n\n      let peakMeter = this.mixerChannelInterface.getPeakMeter();\n      let ledOn = 25 + peakMeter.peakdB / 2;\n\n      for (let i = 0; i < this.size; i++) {\n        this.leftRefs[i].current.classList.toggle(\"led--on\", i <= ledOn);\n        this.rightRefs[i].current.classList.toggle(\"led--on\", i <= ledOn);\n      }\n    };\n\n    this.size = 30;\n    this.rightChannel = [];\n    this.leftChannel = [];\n    this.leftRefs = new Array(this.size);\n    this.rightRefs = new Array(this.size);\n\n    for (let i = 0; i < this.size; i++) {\n      this.leftRefs[i] = React.createRef();\n      this.rightRefs[i] = React.createRef();\n      this.rightChannel.push(React.createElement(\"div\", {\n        ref: this.rightRefs[i],\n        key: 'right-' + i,\n        className: \"level-meter-led right-bar led-\" + i,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }));\n      this.leftChannel.push(React.createElement(\"div\", {\n        ref: this.leftRefs[i],\n        key: 'left-' + i,\n        className: \"level-meter-led left-bar led-\" + i,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }));\n    }\n\n    this.mixerChannelInterface = Console.Get().getMixerChannelInterface(this.props.name);\n    this.breakFlag = false;\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.chReady) {\n      this.breakFlag = false;\n      this.updateLedStates();\n    } else {\n      this.breakFlag = true;\n    }\n  }\n\n  componentWillUnmount() {\n    this.breakFlag = true;\n  }\n\n  render() {\n    console.log(this.props.chReady);\n    return React.createElement(\"div\", {\n      className: \"peak-level-meter\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"meter-channel\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, this.leftChannel), React.createElement(\"div\", {\n      className: \"meter-channel\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, this.rightChannel));\n  }\n\n}\n\nconst mapStateToProps = (state, ownProps) => ({\n  chReady: state.console.channel[ownProps.name].playBackState.ready\n});\n\nexport default connect(mapStateToProps)(PeakLevelMater);","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/pages/app/components/Console/Mixer/Channel/PeakLevelMeter/PeakLevelMeter.js"],"names":["React","connect","Console","PeakLevelMater","PureComponent","constructor","args","updateLedStates","requestAnimationFrame","now","Date","getTime","lastCall","breakFlag","peakMeter","mixerChannelInterface","getPeakMeter","ledOn","peakdB","i","size","leftRefs","current","classList","toggle","rightRefs","rightChannel","leftChannel","Array","createRef","push","Get","getMixerChannelInterface","props","name","componentDidUpdate","prevProps","chReady","componentWillUnmount","render","console","log","mapStateToProps","state","ownProps","channel","playBackState","ready"],"mappings":"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","sourcesContent":["import React from \"react\"\r\nimport { connect } from \"react-redux\"\r\nimport Console from \"./../../../../../core/console/console\";\r\nimport \"./peak-level-meter.scss\";\r\n// there is 20 leds indicators\r\n// 15 is blue and calc from bottom last 15 is zero dB.\r\n// scale range is between -40 dB and + 10 dB\r\n// this means that on led is 2.5 dB\r\n\r\nclass PeakLevelMater extends React.PureComponent {\r\n    constructor(...args) {\r\n        super(...args);\r\n        this.size = 30;\r\n\r\n\r\n        this.rightChannel = [];\r\n        this.leftChannel = [];\r\n\r\n        this.leftRefs = new Array(this.size);\r\n        this.rightRefs = new Array(this.size);\r\n\r\n        for (let i = 0; i < this.size; i++) {\r\n            this.leftRefs[i] = React.createRef();\r\n            this.rightRefs[i] = React.createRef();\r\n\r\n            this.rightChannel.push(\r\n                <div\r\n                    ref={this.rightRefs[i]}\r\n                    key={'right-' + i}\r\n                    className={\"level-meter-led right-bar led-\" + i} />\r\n            )\r\n            this.leftChannel.push(\r\n                <div\r\n                    ref={this.leftRefs[i]}\r\n                    key={'left-' + i}\r\n                    className={\"level-meter-led left-bar led-\" + i} />\r\n            )\r\n        }\r\n\r\n        this.mixerChannelInterface = Console.Get().getMixerChannelInterface(this.props.name);\r\n        this.breakFlag = false;\r\n    }\r\n\r\n    updateLedStates = () => {\r\n\r\n        requestAnimationFrame(updateLedStates);\r\n        //throtell to 50ms\r\n        const now = new Date().getTime();\r\n        if (now - lastCall < 50) {\r\n            return;\r\n        }\r\n        lastCall = now;\r\n\r\n        if (this.breakFlag) {\r\n            return;\r\n        }\r\n\r\n        //drawing ...\r\n        let peakMeter = this.mixerChannelInterface.getPeakMeter();\r\n        let ledOn = 25 + peakMeter.peakdB / 2;\r\n\r\n        for (let i = 0; i < this.size; i++) {\r\n\r\n            this.leftRefs[i].current.classList.toggle(\"led--on\", (i <= ledOn))\r\n            this.rightRefs[i].current.classList.toggle(\"led--on\", (i <= ledOn))\r\n        }\r\n    }\r\n\r\n\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if(this.props.chReady){\r\n            this.breakFlag = false;\r\n            this.updateLedStates();\r\n        } else {\r\n            this.breakFlag = true;\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.breakFlag = true;\r\n    }\r\n\r\n    render() {\r\n        console.log(this.props.chReady)\r\n\r\n        return (\r\n            <div className=\"peak-level-meter\">\r\n                <div className=\"meter-channel\">\r\n                    {this.leftChannel}\r\n                </div>\r\n                <div className=\"meter-channel\">\r\n                    {this.rightChannel}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => ({\r\n    chReady: state.console.channel[ownProps.name].playBackState.ready\r\n})\r\n\r\nexport default connect(mapStateToProps)(PeakLevelMater);"]},"metadata":{},"sourceType":"module"}