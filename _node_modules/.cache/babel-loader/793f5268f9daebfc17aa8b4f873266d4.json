{"ast":null,"code":"import STATUS from\"./../STATUS\";export default function currentEffectChanged(prev,current){prev=prev.effector;current=current.effector;var response=null;if(!current.lastChange.sygnature||current.lastChange.sygnature&&!current.lastChange.sygnature.startsWith(\"#EffectChange\")){return null;}else{var prevValue=prev.channels[current.lastChange.channel].currentEffect;var currentValue=current.channels[current.lastChange.channel].currentEffect;if(prevValue!==currentValue){response=response||[];response.push({status:STATUS.CURRENT_EFFECT_CHANGED,channel:current.lastChange.channel,currentValue:current.lastChange.effect});}}return response;}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/pages/console/core/console/observer/comparators/currentEffect.js"],"names":["STATUS","currentEffectChanged","prev","current","effector","response","lastChange","sygnature","startsWith","prevValue","channels","channel","currentEffect","currentValue","push","status","CURRENT_EFFECT_CHANGED","effect"],"mappings":"AAAA,MAAOA,CAAAA,MAAP,KAAmB,aAAnB,CAEA,cAAe,SAASC,CAAAA,oBAAT,CAA8BC,IAA9B,CAAoCC,OAApC,CAA6C,CAC1DD,IAAI,CAAGA,IAAI,CAACE,QAAZ,CACAD,OAAO,CAAGA,OAAO,CAACC,QAAlB,CACA,GAAIC,CAAAA,QAAQ,CAAG,IAAf,CAEA,GAAI,CAACF,OAAO,CAACG,UAAR,CAAmBC,SAApB,EACDJ,OAAO,CAACG,UAAR,CAAmBC,SAAnB,EAAgC,CAACJ,OAAO,CAACG,UAAR,CAAmBC,SAAnB,CAA6BC,UAA7B,CAAwC,eAAxC,CADpC,CAC+F,CAC7F,MAAO,KAAP,CACD,CAHD,IAGO,CACL,GAAMC,CAAAA,SAAS,CAAGP,IAAI,CAACQ,QAAL,CAAcP,OAAO,CAACG,UAAR,CAAmBK,OAAjC,EAA0CC,aAA5D,CACA,GAAMC,CAAAA,YAAY,CAAGV,OAAO,CAACO,QAAR,CAAiBP,OAAO,CAACG,UAAR,CAAmBK,OAApC,EAA6CC,aAAlE,CACA,GAAIH,SAAS,GAAKI,YAAlB,CAAgC,CAC9BR,QAAQ,CAAGA,QAAQ,EAAI,EAAvB,CACAA,QAAQ,CAACS,IAAT,CAAc,CACZC,MAAM,CAAEf,MAAM,CAACgB,sBADH,CAEZL,OAAO,CAAER,OAAO,CAACG,UAAR,CAAmBK,OAFhB,CAGZE,YAAY,CAAEV,OAAO,CAACG,UAAR,CAAmBW,MAHrB,CAAd,EAKD,CACF,CAED,MAAOZ,CAAAA,QAAP,CACD","sourcesContent":["import STATUS from \"./../STATUS\";\r\n\r\nexport default function currentEffectChanged(prev, current) {\r\n  prev = prev.effector;\r\n  current = current.effector;\r\n  let response = null;\r\n\r\n  if (!current.lastChange.sygnature ||\r\n    (current.lastChange.sygnature && !current.lastChange.sygnature.startsWith(\"#EffectChange\"))) {\r\n    return null\r\n  } else {\r\n    const prevValue = prev.channels[current.lastChange.channel].currentEffect;\r\n    const currentValue = current.channels[current.lastChange.channel].currentEffect;\r\n    if (prevValue !== currentValue) {\r\n      response = response || [];\r\n      response.push({\r\n        status: STATUS.CURRENT_EFFECT_CHANGED,\r\n        channel: current.lastChange.channel,\r\n        currentValue: current.lastChange.effect\r\n      })\r\n    }\r\n  }\r\n\r\n  return response;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}