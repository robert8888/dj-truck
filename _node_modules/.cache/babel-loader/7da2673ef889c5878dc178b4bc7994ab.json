{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJEKTY\\\\APKI\\\\DjTruck\\\\djtruck\\\\src\\\\pages\\\\app\\\\components\\\\PlayListExplorer\\\\Explorer\\\\ExplorerTree\\\\ExplorerTree.js\";\nimport React, { useCallback, useState, useRef, Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport \"./explorer-tree.scss\";\nimport { toggleDir as toggleDirAction, setSelection, setCurrentPlaylist } from \"./../../../../../../actions\";\nimport { isEmpty, sortObj } from \"./../../../../../../utils/objects/helpers\";\nimport UUID from \"uuidjs\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport ClassName from \"classnames\";\nimport { faFolder, faFile, faAngleRight, faAngleDown } from \"@fortawesome/free-solid-svg-icons\";\nimport { useDoubleClick } from \"./useDoubleClick\";\nimport ExplorerContextMenu from \"./ContextMenu/ExplorerContextMenu\";\nimport { ContextMenuTrigger } from \"react-contextmenu\";\n\nconst ExplorerTree = props => {\n  const [renameMode, setRenameMode] = useState(false);\n  const renameInputRef = useRef();\n  const toggleDir = useCallback(path => {\n    props.toggleDir(path);\n  }, [props.toggleDir]);\n  const setSelection = useCallback(path => {\n    props.setSelection(path);\n  }, [props.setSelection]);\n  const rename = useCallback(() => {});\n  console.log(\"REnder\");\n  const renameInput = useCallback(name => {\n    return React.createElement(\"input\", {\n      type: \"text\",\n      className: \"rename-input\",\n      defaultValue: name,\n      ref: renameInputRef,\n      onBlur: rename(),\n      onKeyPress: e => {\n        if (e.key === \"Enter\") rename();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    });\n  });\n  const [dirClickHandler] = useDoubleClick({\n    clickHandler: setSelection,\n    doubleClickHandler: toggleDir\n  });\n  const getDirElement = useCallback((name, path, open, empty) => {\n    let currentSelected = false;\n\n    if ([...path, name].join(\"\") === props.currentSelection.join(\"\")) {\n      currentSelected = true;\n    }\n\n    const liClassList = ClassName(\"list-item item-dir\", {\n      \"item-dir--empty\": empty\n    }, {\n      \"item--selected\": currentSelected\n    });\n    let content = name;\n\n    if (currentSelected && renameMode) {\n      content = renameInput(name);\n    }\n\n    return React.createElement(\"li\", {\n      onClick: dirClickHandler.bind(null, [...path, name]),\n      onContextMenu: setSelection.bind(null, [...path, name]),\n      className: liClassList,\n      \"data-path\": path.join(\"/\"),\n      key: UUID.genV1(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, !empty && React.createElement(\"button\", {\n      className: \"btn-dir \" + (open ? \"btn-dir--expand\" : \"btn-dir--colapse\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(FontAwesomeIcon, {\n      className: \"icon\",\n      icon: open ? faAngleDown : faAngleRight,\n      onClick: toggleDir.bind(null, [...path, name]),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    })), React.createElement(FontAwesomeIcon, {\n      className: \"icon icon-dir\",\n      icon: faFolder,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }), content);\n  });\n  const [fileClickHandler] = useDoubleClick({\n    clickHandler: setSelection,\n    doubleClickHandler: props.setCurrentPlaylist\n  });\n  const getFileElement = useCallback((name, path) => {\n    let currentSelected = false;\n\n    if ([...path, name].join(\"\") === props.currentSelection.join(\"\")) {\n      currentSelected = true;\n    }\n\n    const liClassList = ClassName(\"list-item item-file\", {\n      \"item--selected\": currentSelected\n    });\n    let content = name;\n\n    if (currentSelected && renameMode) {\n      content = renameInput(name);\n    }\n\n    return React.createElement(\"li\", {\n      className: liClassList,\n      onClick: !renameMode && fileClickHandler.bind(null, [...path, name]),\n      onContextMenu: setSelection.bind(null, [...path, name]),\n      \"data-path\": path.join(\"/\"),\n      key: UUID.genV1(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(FontAwesomeIcon, {\n      className: \"icon icon-file\",\n      icon: faFile,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }), content);\n  });\n  const renderDirElements = useCallback((name, content, path) => {\n    content = sortObj(content);\n\n    if (content instanceof Array) {\n      return getFileElement(name, path);\n    } else {\n      if (content._open === true) {\n        return React.createElement(Fragment, {\n          key: UUID.genV1(),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 125\n          },\n          __self: this\n        }, getDirElement(name, path, true), renderDir(content, [...path, name]));\n      } else {\n        if (isEmpty(content)) {\n          return getDirElement(name, path, false, true);\n        }\n\n        return getDirElement(name, path, false);\n      }\n    }\n  });\n  const renderDir = useCallback((dir, path) => {\n    return React.createElement(\"ul\", {\n      className: \"list-dir dir-content\",\n      key: UUID.generate(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, Object.entries(dir).map(([name, content]) => {\n      if (name === \"_open\") {\n        return null;\n      }\n\n      return renderDirElements(name, content, path);\n    }));\n  });\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  }, React.createElement(ContextMenuTrigger, {\n    id: \"explorer_context_menu\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"explorer-tree\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  }, renderDir(props.root, ['root']))), React.createElement(ExplorerContextMenu, {\n    id: \"explorer_context_menu\",\n    items: {\n      \"Rename\": setRenameMode.bind(null, true),\n      \"Delete\": null\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163\n    },\n    __self: this\n  }));\n};\n\nconst mapStateToProps = state => ({\n  root: state.playList.root,\n  currentSelection: state.playList.currentSelection\n});\n\nconst mapDispatchToProps = dispatch => ({\n  toggleDir: path => dispatch(toggleDirAction(path)),\n  setSelection: path => dispatch(setSelection(path)),\n  setCurrentPlaylist: path => dispatch(setCurrentPlaylist(path))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ExplorerTree);","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/pages/app/components/PlayListExplorer/Explorer/ExplorerTree/ExplorerTree.js"],"names":["React","useCallback","useState","useRef","Fragment","connect","toggleDir","toggleDirAction","setSelection","setCurrentPlaylist","isEmpty","sortObj","UUID","FontAwesomeIcon","ClassName","faFolder","faFile","faAngleRight","faAngleDown","useDoubleClick","ExplorerContextMenu","ContextMenuTrigger","ExplorerTree","props","renameMode","setRenameMode","renameInputRef","path","rename","console","log","renameInput","name","e","key","dirClickHandler","clickHandler","doubleClickHandler","getDirElement","open","empty","currentSelected","join","currentSelection","liClassList","content","bind","genV1","fileClickHandler","getFileElement","renderDirElements","Array","_open","renderDir","dir","generate","Object","entries","map","root","mapStateToProps","state","playList","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useCallback, useState, useRef, Fragment } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport \"./explorer-tree.scss\";\r\nimport { toggleDir as toggleDirAction, setSelection, setCurrentPlaylist } from \"./../../../../../../actions\"\r\nimport { isEmpty, sortObj } from \"./../../../../../../utils/objects/helpers\";\r\nimport UUID from \"uuidjs\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport ClassName from \"classnames\";\r\nimport { faFolder, faFile, faAngleRight, faAngleDown } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { useDoubleClick } from \"./useDoubleClick\";\r\nimport ExplorerContextMenu from \"./ContextMenu/ExplorerContextMenu\";\r\nimport { ContextMenuTrigger } from \"react-contextmenu\";\r\nconst ExplorerTree = props => {\r\n\r\n    const [renameMode, setRenameMode] = useState(false);\r\n    const renameInputRef = useRef();\r\n\r\n    const toggleDir = useCallback((path) => {\r\n        props.toggleDir(path);\r\n    }, [props.toggleDir])\r\n\r\n    const setSelection = useCallback((path) => {\r\n        props.setSelection(path);\r\n    }, [props.setSelection])\r\n\r\n\r\n\r\n    const rename = useCallback(()=>{\r\n\r\n    })\r\n\r\n    console.log(\"REnder\")\r\n    const renameInput = useCallback((name) => {\r\n        return (\r\n            <input\r\n                type=\"text\"\r\n                className=\"rename-input\"\r\n                defaultValue={name}\r\n                ref={renameInputRef}\r\n                onBlur={rename()}\r\n                onKeyPress={e => { if (e.key === \"Enter\") rename() }}\r\n            />\r\n        )\r\n    })\r\n\r\n    const [dirClickHandler] = useDoubleClick({\r\n        clickHandler: setSelection,\r\n        doubleClickHandler: toggleDir\r\n    })\r\n\r\n\r\n    const getDirElement = useCallback((name, path, open, empty) => {\r\n        let currentSelected = false;\r\n        if ([...path, name].join(\"\") === props.currentSelection.join(\"\")) {\r\n            currentSelected = true;\r\n        }\r\n        const liClassList = ClassName(\r\n            \"list-item item-dir\",\r\n            { \"item-dir--empty\": empty },\r\n            { \"item--selected\": currentSelected }\r\n        )\r\n        let content = name;\r\n        if (currentSelected && renameMode) {\r\n            content = renameInput(name)\r\n        }\r\n        return (\r\n            <li\r\n                onClick={dirClickHandler.bind(null, [...path, name])}\r\n                onContextMenu={setSelection.bind(null, [...path, name])}\r\n                className={liClassList}\r\n                data-path={path.join(\"/\")}\r\n                key={UUID.genV1()}>\r\n                {!empty &&\r\n                    <button\r\n                        className={\"btn-dir \" + ((open) ? \"btn-dir--expand\" : \"btn-dir--colapse\")}>\r\n                        <FontAwesomeIcon\r\n                            className=\"icon\"\r\n                            icon={(open) ? faAngleDown : faAngleRight}\r\n                            onClick={toggleDir.bind(null, [...path, name])} />\r\n                    </button>}\r\n                <FontAwesomeIcon className=\"icon icon-dir\" icon={faFolder} />\r\n                {content}\r\n            </li>\r\n        )\r\n    })\r\n\r\n    const [fileClickHandler] = useDoubleClick({\r\n        clickHandler: setSelection,\r\n        doubleClickHandler: props.setCurrentPlaylist\r\n    })\r\n\r\n    const getFileElement = useCallback((name, path) => {\r\n        let currentSelected = false;\r\n        if ([...path, name].join(\"\") === props.currentSelection.join(\"\")) {\r\n            currentSelected = true;\r\n        }\r\n        const liClassList = ClassName(\r\n            \"list-item item-file\",\r\n            { \"item--selected\": currentSelected }\r\n        )\r\n        let content = name;\r\n        if (currentSelected && renameMode) {\r\n            content = renameInput(name)\r\n        }\r\n        return (\r\n            <li\r\n                className={liClassList}\r\n                onClick={!renameMode && fileClickHandler.bind(null, [...path, name])}\r\n                onContextMenu={setSelection.bind(null, [...path, name])}\r\n                data-path={path.join(\"/\")}\r\n                key={UUID.genV1()}>\r\n                <FontAwesomeIcon className=\"icon icon-file\" icon={faFile} />\r\n                {content}\r\n            </li>\r\n        );\r\n    })\r\n\r\n    const renderDirElements = useCallback((name, content, path) => {\r\n        content = sortObj(content);\r\n        if (content instanceof Array) {\r\n            return getFileElement(name, path)\r\n        } else {\r\n            if (content._open === true) {\r\n                return (\r\n                    <Fragment key={UUID.genV1()}>\r\n                        {getDirElement(name, path, true)}\r\n                        {renderDir(content, [...path, name])}\r\n                    </Fragment>\r\n                )\r\n            } else {\r\n                if (isEmpty(content)) {\r\n                    return getDirElement(name, path, false, true)\r\n                }\r\n                return getDirElement(name, path, false)\r\n            }\r\n        }\r\n    })\r\n\r\n\r\n    const renderDir = useCallback((dir, path) => {\r\n        return (\r\n            <ul className=\"list-dir dir-content\" key={UUID.generate()}>\r\n                {\r\n                    Object.entries(dir).map(([name, content]) => {\r\n                        if (name === \"_open\") {\r\n                            return null;\r\n                        }\r\n                        return renderDirElements(name, content, path);\r\n                    })\r\n                }\r\n            </ul>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <Fragment>\r\n            <ContextMenuTrigger id=\"explorer_context_menu\">\r\n                <div className=\"explorer-tree\">\r\n                    {renderDir(props.root, ['root'])}\r\n                </div>\r\n            </ContextMenuTrigger>\r\n\r\n            <ExplorerContextMenu\r\n                id=\"explorer_context_menu\"\r\n                items={{\r\n                    \"Rename\": setRenameMode.bind(null, true),\r\n                    \"Delete\": null\r\n                }} />\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    root: state.playList.root,\r\n    currentSelection: state.playList.currentSelection\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    toggleDir: path => dispatch(toggleDirAction(path)),\r\n    setSelection: path => dispatch(setSelection(path)),\r\n    setCurrentPlaylist: path => dispatch(setCurrentPlaylist(path))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ExplorerTree);"]},"metadata":{},"sourceType":"module"}