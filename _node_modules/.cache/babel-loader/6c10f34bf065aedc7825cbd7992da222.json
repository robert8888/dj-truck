{"ast":null,"code":"import { addUniqueNumber } from 'fast-unique-numbers';\nimport { isSupported } from 'standardized-audio-context';\nimport { render } from './helpers/render';\nexport { isSupported };\nexport const load = url => {\n  const worker = new Worker(url);\n  const ongoingRecordingRequests = new Set();\n\n  const analyze = (audioBuffer, offset = 0, duration = audioBuffer.duration - offset) => {\n    return new Promise(async (resolve, reject) => {\n      const {\n        channelData,\n        sampleRate\n      } = await render(audioBuffer, offset, duration);\n      const id = addUniqueNumber(ongoingRecordingRequests);\n\n      const onMessage = ({\n        data\n      }) => {\n        if (data.id === id) {\n          ongoingRecordingRequests.delete(id);\n          worker.removeEventListener('message', onMessage);\n\n          if (data.error === null) {\n            resolve(data.result.tempo);\n          } else {\n            reject(new Error(data.error.message));\n          }\n        }\n      };\n\n      worker.addEventListener('message', onMessage);\n      worker.postMessage({\n        id,\n        method: 'analyze',\n        params: {\n          channelData,\n          sampleRate\n        }\n      }, [channelData.buffer]);\n    });\n  };\n\n  const guess = (audioBuffer, offset = 0, duration = audioBuffer.duration - offset) => {\n    return new Promise(async (resolve, reject) => {\n      const {\n        channelData,\n        sampleRate\n      } = await render(audioBuffer, offset, duration);\n      const id = addUniqueNumber(ongoingRecordingRequests);\n\n      const onMessage = ({\n        data\n      }) => {\n        if (data.id === id) {\n          ongoingRecordingRequests.delete(id);\n          worker.removeEventListener('message', onMessage);\n\n          if (data.error === null) {\n            resolve(data.result);\n          } else {\n            reject(new Error(data.error.message));\n          }\n        }\n      };\n\n      worker.addEventListener('message', onMessage);\n      worker.postMessage({\n        id,\n        method: 'guess',\n        params: {\n          channelData,\n          sampleRate\n        }\n      }, [channelData.buffer]);\n    });\n  };\n\n  return {\n    analyze,\n    guess\n  };\n};","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/node_modules/web-audio-beat-detector-broker/build/es2019/module.js"],"names":["addUniqueNumber","isSupported","render","load","url","worker","Worker","ongoingRecordingRequests","Set","analyze","audioBuffer","offset","duration","Promise","resolve","reject","channelData","sampleRate","id","onMessage","data","delete","removeEventListener","error","result","tempo","Error","message","addEventListener","postMessage","method","params","buffer","guess"],"mappings":"AAAA,SAASA,eAAT,QAAgC,qBAAhC;AACA,SAASC,WAAT,QAA4B,4BAA5B;AACA,SAASC,MAAT,QAAuB,kBAAvB;AACA,SAASD,WAAT;AACA,OAAO,MAAME,IAAI,GAAIC,GAAD,IAAS;AACzB,QAAMC,MAAM,GAAG,IAAIC,MAAJ,CAAWF,GAAX,CAAf;AACA,QAAMG,wBAAwB,GAAG,IAAIC,GAAJ,EAAjC;;AACA,QAAMC,OAAO,GAAG,CAACC,WAAD,EAAcC,MAAM,GAAG,CAAvB,EAA0BC,QAAQ,GAAGF,WAAW,CAACE,QAAZ,GAAuBD,MAA5D,KAAuE;AACnF,WAAO,IAAIE,OAAJ,CAAY,OAAOC,OAAP,EAAgBC,MAAhB,KAA2B;AAC1C,YAAM;AAAEC,QAAAA,WAAF;AAAeC,QAAAA;AAAf,UAA8B,MAAMf,MAAM,CAACQ,WAAD,EAAcC,MAAd,EAAsBC,QAAtB,CAAhD;AACA,YAAMM,EAAE,GAAGlB,eAAe,CAACO,wBAAD,CAA1B;;AACA,YAAMY,SAAS,GAAG,CAAC;AAAEC,QAAAA;AAAF,OAAD,KAAc;AAC5B,YAAIA,IAAI,CAACF,EAAL,KAAYA,EAAhB,EAAoB;AAChBX,UAAAA,wBAAwB,CAACc,MAAzB,CAAgCH,EAAhC;AACAb,UAAAA,MAAM,CAACiB,mBAAP,CAA2B,SAA3B,EAAsCH,SAAtC;;AACA,cAAIC,IAAI,CAACG,KAAL,KAAe,IAAnB,EAAyB;AACrBT,YAAAA,OAAO,CAACM,IAAI,CAACI,MAAL,CAAYC,KAAb,CAAP;AACH,WAFD,MAGK;AACDV,YAAAA,MAAM,CAAC,IAAIW,KAAJ,CAAUN,IAAI,CAACG,KAAL,CAAWI,OAArB,CAAD,CAAN;AACH;AACJ;AACJ,OAXD;;AAYAtB,MAAAA,MAAM,CAACuB,gBAAP,CAAwB,SAAxB,EAAmCT,SAAnC;AACAd,MAAAA,MAAM,CAACwB,WAAP,CAAmB;AAAEX,QAAAA,EAAF;AAAMY,QAAAA,MAAM,EAAE,SAAd;AAAyBC,QAAAA,MAAM,EAAE;AAAEf,UAAAA,WAAF;AAAeC,UAAAA;AAAf;AAAjC,OAAnB,EAAmF,CAACD,WAAW,CAACgB,MAAb,CAAnF;AACH,KAjBM,CAAP;AAkBH,GAnBD;;AAoBA,QAAMC,KAAK,GAAG,CAACvB,WAAD,EAAcC,MAAM,GAAG,CAAvB,EAA0BC,QAAQ,GAAGF,WAAW,CAACE,QAAZ,GAAuBD,MAA5D,KAAuE;AACjF,WAAO,IAAIE,OAAJ,CAAY,OAAOC,OAAP,EAAgBC,MAAhB,KAA2B;AAC1C,YAAM;AAAEC,QAAAA,WAAF;AAAeC,QAAAA;AAAf,UAA8B,MAAMf,MAAM,CAACQ,WAAD,EAAcC,MAAd,EAAsBC,QAAtB,CAAhD;AACA,YAAMM,EAAE,GAAGlB,eAAe,CAACO,wBAAD,CAA1B;;AACA,YAAMY,SAAS,GAAG,CAAC;AAAEC,QAAAA;AAAF,OAAD,KAAc;AAC5B,YAAIA,IAAI,CAACF,EAAL,KAAYA,EAAhB,EAAoB;AAChBX,UAAAA,wBAAwB,CAACc,MAAzB,CAAgCH,EAAhC;AACAb,UAAAA,MAAM,CAACiB,mBAAP,CAA2B,SAA3B,EAAsCH,SAAtC;;AACA,cAAIC,IAAI,CAACG,KAAL,KAAe,IAAnB,EAAyB;AACrBT,YAAAA,OAAO,CAACM,IAAI,CAACI,MAAN,CAAP;AACH,WAFD,MAGK;AACDT,YAAAA,MAAM,CAAC,IAAIW,KAAJ,CAAUN,IAAI,CAACG,KAAL,CAAWI,OAArB,CAAD,CAAN;AACH;AACJ;AACJ,OAXD;;AAYAtB,MAAAA,MAAM,CAACuB,gBAAP,CAAwB,SAAxB,EAAmCT,SAAnC;AACAd,MAAAA,MAAM,CAACwB,WAAP,CAAmB;AAAEX,QAAAA,EAAF;AAAMY,QAAAA,MAAM,EAAE,OAAd;AAAuBC,QAAAA,MAAM,EAAE;AAAEf,UAAAA,WAAF;AAAeC,UAAAA;AAAf;AAA/B,OAAnB,EAAiF,CAACD,WAAW,CAACgB,MAAb,CAAjF;AACH,KAjBM,CAAP;AAkBH,GAnBD;;AAoBA,SAAO;AACHvB,IAAAA,OADG;AAEHwB,IAAAA;AAFG,GAAP;AAIH,CA/CM","sourcesContent":["import { addUniqueNumber } from 'fast-unique-numbers';\nimport { isSupported } from 'standardized-audio-context';\nimport { render } from './helpers/render';\nexport { isSupported };\nexport const load = (url) => {\n    const worker = new Worker(url);\n    const ongoingRecordingRequests = new Set();\n    const analyze = (audioBuffer, offset = 0, duration = audioBuffer.duration - offset) => {\n        return new Promise(async (resolve, reject) => {\n            const { channelData, sampleRate } = await render(audioBuffer, offset, duration);\n            const id = addUniqueNumber(ongoingRecordingRequests);\n            const onMessage = ({ data }) => {\n                if (data.id === id) {\n                    ongoingRecordingRequests.delete(id);\n                    worker.removeEventListener('message', onMessage);\n                    if (data.error === null) {\n                        resolve(data.result.tempo);\n                    }\n                    else {\n                        reject(new Error(data.error.message));\n                    }\n                }\n            };\n            worker.addEventListener('message', onMessage);\n            worker.postMessage({ id, method: 'analyze', params: { channelData, sampleRate } }, [channelData.buffer]);\n        });\n    };\n    const guess = (audioBuffer, offset = 0, duration = audioBuffer.duration - offset) => {\n        return new Promise(async (resolve, reject) => {\n            const { channelData, sampleRate } = await render(audioBuffer, offset, duration);\n            const id = addUniqueNumber(ongoingRecordingRequests);\n            const onMessage = ({ data }) => {\n                if (data.id === id) {\n                    ongoingRecordingRequests.delete(id);\n                    worker.removeEventListener('message', onMessage);\n                    if (data.error === null) {\n                        resolve(data.result);\n                    }\n                    else {\n                        reject(new Error(data.error.message));\n                    }\n                }\n            };\n            worker.addEventListener('message', onMessage);\n            worker.postMessage({ id, method: 'guess', params: { channelData, sampleRate } }, [channelData.buffer]);\n        });\n    };\n    return {\n        analyze,\n        guess\n    };\n};\n//# sourceMappingURL=/build/es2019/module.js.map"]},"metadata":{},"sourceType":"module"}