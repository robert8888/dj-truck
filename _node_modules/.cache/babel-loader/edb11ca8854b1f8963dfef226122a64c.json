{"ast":null,"code":"import _regeneratorRuntime from\"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\node_modules\\\\@babel\\\\runtime/regenerator\";var _marked=/*#__PURE__*/_regeneratorRuntime.mark(requestCreatedRecord),_marked2=/*#__PURE__*/_regeneratorRuntime.mark(handel);import{format}from'date-fns';import{put,select,takeEvery}from\"redux-saga/effects\";import{ACTIONS,pushLog,recordingRquestFail,startRecording}from\"../../actions\";import{getApi}from\"./../../apis/apiProvider\";import{Log}from\"./../../utils/logger/logger\";import errorParser from\"./../../utils/serverErrorParser/errorParser\";export default function requestCreatedRecord(){return _regeneratorRuntime.wrap(function requestCreatedRecord$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return takeEvery(ACTIONS.R_CREATE_RECORD_REQEST,handel);case 2:case\"end\":return _context.stop();}}},_marked);}var getToken=function getToken(state){return state.user.token;};var getInitTracklist=function getInitTracklist(state){var tracks=[];for(var channelName in state.console.channel){var channel=state.console.channel[channelName];if(channel.track.id){var track={id:channel.track.id,channel:channelName};if(!channel.playBackState.paused){track.start=0;track.playedTime=channel.track.duration-channel.playBackState.timeLeft;}else{track.start=null;track.playedTime=Infinity;}tracks.push(track);}}tracks.sort(function(a,b){return a.playedTime-b.playedTime;}).map(function(track){return{id:track.id,channel:track.channel,start:track.start};});return tracks;};function handel(action){var token,path,_action$recName,_response$data,_response$data$create,_getApi,callQuery,queries,title,query,response,id,tracklist;return _regeneratorRuntime.wrap(function handel$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return select(getToken);case 2:token=_context2.sent;path=['saga','recorder','request created record'];if(!token){_context2.next=32;break;}_context2.prev=5;_getApi=getApi(\"UserAssets\"),callQuery=_getApi.callQuery,queries=_getApi.queries;title=((_action$recName=action.recName)===null||_action$recName===void 0?void 0:_action$recName.split(\"_\").join(\" \"))||\"Record \"+format(new Date(),'yy-MM-dd HH:mm');query=queries.createRecordQl(title);_context2.next=11;return callQuery(query,token);case 11:response=_context2.sent;id=response===null||response===void 0?void 0:(_response$data=response.data)===null||_response$data===void 0?void 0:(_response$data$create=_response$data.createRecord)===null||_response$data$create===void 0?void 0:_response$data$create.id;if(!response.errors){_context2.next=15;break;}throw new Error('Server response contains errors '+errorParser(response.errors));case 15:if(!(id===null||id===undefined)){_context2.next=17;break;}throw new Error(\"Record id undefined. Probably occure problem during creating record on server\");case 17:_context2.next=19;return select(getInitTracklist)||[];case 19:tracklist=_context2.sent;_context2.next=22;return put(startRecording(title,id,tracklist));case 22:_context2.next=24;return put(pushLog(new Log(\"Record successful crated in database id: \".concat(id),path)));case 24:_context2.next=32;break;case 26:_context2.prev=26;_context2.t0=_context2[\"catch\"](5);_context2.next=30;return put(recordingRquestFail());case 30:_context2.next=32;return put(pushLog(Log.Error(path,\"Can't create record data in database\"+_context2.t0.message,\"Sorry. During process of creating record occurred a problem\",_context2.t0)));case 32:case\"end\":return _context2.stop();}}},_marked2,null,[[5,26]]);}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/sagas/recorder/reqCreateRecord.js"],"names":["requestCreatedRecord","handel","format","put","select","takeEvery","ACTIONS","pushLog","recordingRquestFail","startRecording","getApi","Log","errorParser","R_CREATE_RECORD_REQEST","getToken","state","user","token","getInitTracklist","tracks","channelName","console","channel","track","id","playBackState","paused","start","playedTime","duration","timeLeft","Infinity","push","sort","a","b","map","action","path","callQuery","queries","title","recName","split","join","Date","query","createRecordQl","response","data","createRecord","errors","Error","undefined","tracklist","message"],"mappings":"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","sourcesContent":["import { format } from 'date-fns';\r\nimport { put, select, takeEvery } from \"redux-saga/effects\";\r\nimport { ACTIONS, pushLog, recordingRquestFail, startRecording } from \"../../actions\";\r\nimport { getApi } from \"./../../apis/apiProvider\";\r\nimport { Log } from \"./../../utils/logger/logger\";\r\nimport errorParser from \"./../../utils/serverErrorParser/errorParser\";\r\n\r\nexport default function* requestCreatedRecord() {\r\n    yield takeEvery(ACTIONS.R_CREATE_RECORD_REQEST, handel)\r\n}\r\n\r\nconst getToken = state => state.user.token\r\n\r\n\r\nconst getInitTracklist = state => {\r\n    let tracks = []\r\n    for(let channelName in state.console.channel){\r\n        let channel = state.console.channel[channelName];\r\n        if(channel.track.id){\r\n            let track  = {\r\n                id: channel.track.id,\r\n                channel: channelName,\r\n            }\r\n            if(!channel.playBackState.paused){\r\n                track.start = 0;\r\n                track.playedTime  = channel.track.duration - channel.playBackState.timeLeft;\r\n            } else {\r\n                track.start = null;\r\n                track.playedTime = Infinity;\r\n            }\r\n            tracks.push(track);\r\n        }\r\n    }\r\n    tracks.sort((a, b) => a.playedTime - b.playedTime)\r\n            .map(track => ({\r\n                id: track.id,\r\n                channel: track.channel,\r\n                start: track.start,\r\n            }))\r\n    return tracks;\r\n}\r\n\r\nfunction* handel(action) {\r\n    const token = yield select(getToken);\r\n    const path = ['saga', 'recorder', 'request created record']\r\n    if(token){\r\n        try{\r\n            const { callQuery , queries } = getApi(\"UserAssets\");\r\n            let title = action.recName?.split(\"_\").join(\" \") || \"Record \" + format(new Date(), 'yy-MM-dd HH:mm')\r\n            const query = queries.createRecordQl(title);\r\n            const response = yield callQuery(query, token);\r\n            const id = response?.data?.createRecord?.id;\r\n\r\n            if (response.errors) {\r\n                throw new Error('Server response contains errors '+ errorParser(response.errors))\r\n            }\r\n\r\n            if(id === null || id === undefined){\r\n                throw new Error(\"Record id undefined. Probably occure problem during creating record on server\")\r\n            } \r\n\r\n            const tracklist = yield select(getInitTracklist) || [];\r\n\r\n            yield put(startRecording(title, id, tracklist))\r\n\r\n            yield put(pushLog(new Log(`Record successful crated in database id: ${id}`, path)))  \r\n            \r\n        } catch(error) {\r\n            yield put(recordingRquestFail());\r\n\r\n            yield put(pushLog(Log.Error(\r\n                path,\r\n                \"Can't create record data in database\" + error.message,\r\n                \"Sorry. During process of creating record occurred a problem\",\r\n                error\r\n            )))\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}