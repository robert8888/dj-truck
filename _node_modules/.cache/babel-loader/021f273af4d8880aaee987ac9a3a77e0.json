{"ast":null,"code":"import _regeneratorRuntime from\"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _asyncToGenerator from\"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";import*as graphQlQueries from\"./qlQueries\";var url=process.env.REACT_APP_USER_ASSETS_API;export function callQuery(_x,_x2,_x3){return _callQuery.apply(this,arguments);}function _callQuery(){_callQuery=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(query,token,variables){var response,json;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return fetch(url,{method:'POST',headers:{Authorization:\"Bearer \".concat(token),'Content-Type':'application/json','Accept':'application/json'},body:JSON.stringify({query:query,variables:variables})});case 2:response=_context.sent;_context.next=5;return response.json();case 5:json=_context.sent;return _context.abrupt(\"return\",json);case 7:case\"end\":return _context.stop();}}},_callee);}));return _callQuery.apply(this,arguments);}export function callQueryUploadSingle(_x4,_x5,_x6){return _callQueryUploadSingle.apply(this,arguments);}function _callQueryUploadSingle(){_callQueryUploadSingle=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(query,token,variables){var body,options,response,json;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:body=new FormData();body.append('operations',JSON.stringify({query:query,variables:variables}));body.append('map',JSON.stringify({\"0\":[\"variables.file\"]}));body.append('0',variables.file);options={method:'POST',headers:{Authorization:\"Bearer \".concat(token),'Content-Type':'multipart/form-data','Accept':'application/json'},body:body};delete options.headers['Content-Type'];_context2.next=8;return fetch(url,options);case 8:response=_context2.sent;_context2.next=11;return response.json();case 11:json=_context2.sent;return _context2.abrupt(\"return\",json);case 13:case\"end\":return _context2.stop();}}},_callee2);}));return _callQueryUploadSingle.apply(this,arguments);}export default{callQuery:callQuery,callQueryUploadSingle:callQueryUploadSingle,queries:graphQlQueries};","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/apis/userAssets/userApi.js"],"names":["graphQlQueries","url","process","env","REACT_APP_USER_ASSETS_API","callQuery","query","token","variables","fetch","method","headers","Authorization","body","JSON","stringify","response","json","callQueryUploadSingle","FormData","append","file","options","queries"],"mappings":"iOAAA,MAAO,GAAKA,CAAAA,cAAZ,KAAgC,aAAhC,CAEA,GAAMC,CAAAA,GAAG,CAAGC,OAAO,CAACC,GAAR,CAAYC,yBAAxB,CAEA,eAAsBC,CAAAA,SAAtB,sD,yFAAO,iBAAyBC,KAAzB,CAAgCC,KAAhC,CAAuCC,SAAvC,0JACoBC,CAAAA,KAAK,CAACR,GAAD,CAAM,CAC9BS,MAAM,CAAE,MADsB,CAE9BC,OAAO,CAAE,CACLC,aAAa,kBAAYL,KAAZ,CADR,CAEL,eAAgB,kBAFX,CAGL,SAAU,kBAHL,CAFqB,CAQ9BM,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAe,CACjBT,KAAK,CAAEA,KADU,CAEjBE,SAAS,CAAEA,SAFM,CAAf,CARwB,CAAN,CADzB,QACGQ,QADH,qCAccA,CAAAA,QAAQ,CAACC,IAAT,EAdd,QAcCA,IAdD,+CAeIA,IAfJ,wD,4CAkBP,eAAsBC,CAAAA,qBAAtB,mE,iHAAO,kBAAqCZ,KAArC,CAA4CC,KAA5C,CAAmDC,SAAnD,qJACGK,IADH,CACU,GAAIM,CAAAA,QAAJ,EADV,CAEHN,IAAI,CAACO,MAAL,CACI,YADJ,CAEIN,IAAI,CAACC,SAAL,CAAe,CACXT,KAAK,CAALA,KADW,CAEXE,SAAS,CAATA,SAFW,CAAf,CAFJ,EAOAK,IAAI,CAACO,MAAL,CAAY,KAAZ,CAAmBN,IAAI,CAACC,SAAL,CAAe,CAC9B,IAAK,CAAC,gBAAD,CADyB,CAAf,CAAnB,EAGAF,IAAI,CAACO,MAAL,CAAY,GAAZ,CAAiBZ,SAAS,CAACa,IAA3B,EAEMC,OAdH,CAca,CACZZ,MAAM,CAAE,MADI,CAEZC,OAAO,CAAE,CACLC,aAAa,kBAAYL,KAAZ,CADR,CAEL,eAAgB,qBAFX,CAGL,SAAU,kBAHL,CAFG,CAOZM,IAAI,CAAJA,IAPY,CAdb,CAuBH,MAAOS,CAAAA,OAAO,CAACX,OAAR,CAAgB,cAAhB,CAAP,CAvBG,uBAyBoBF,CAAAA,KAAK,CAACR,GAAD,CAAMqB,OAAN,CAzBzB,QAyBGN,QAzBH,wCA0BeA,CAAAA,QAAQ,CAACC,IAAT,EA1Bf,SA0BCA,IA1BD,iDA2BIA,IA3BJ,2D,wDA8BP,cAAe,CACXZ,SAAS,CAATA,SADW,CAEXa,qBAAqB,CAArBA,qBAFW,CAGXK,OAAO,CAAEvB,cAHE,CAAf","sourcesContent":["import * as graphQlQueries from \"./qlQueries\";\r\n\r\nconst url = process.env.REACT_APP_USER_ASSETS_API;\r\n\r\nexport async function callQuery(query, token, variables) {\r\n    const response = await fetch(url, {\r\n        method: 'POST',\r\n        headers: {\r\n            Authorization: `Bearer ${token}`,\r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n\r\n        },\r\n        body: JSON.stringify({\r\n            query: query,\r\n            variables: variables\r\n        }),\r\n    })\r\n    let json = await response.json();\r\n    return json;\r\n}\r\n\r\nexport async function callQueryUploadSingle(query, token, variables){\r\n    const body = new FormData();\r\n    body.append(\r\n        'operations',\r\n        JSON.stringify({\r\n            query,\r\n            variables\r\n        })\r\n    )\r\n    body.append('map', JSON.stringify({\r\n        \"0\": [\"variables.file\"] \r\n    }))\r\n    body.append('0', variables.file);\r\n    \r\n    const options = {\r\n        method: 'POST',\r\n        headers: {\r\n            Authorization: `Bearer ${token}`,\r\n            'Content-Type': 'multipart/form-data',\r\n            'Accept': 'application/json',\r\n        },\r\n        body\r\n    }\r\n    delete options.headers['Content-Type'];\r\n    \r\n    const response = await fetch(url, options)\r\n    let json = await  response.json();\r\n    return json;\r\n}\r\n\r\nexport default {\r\n    callQuery,\r\n    callQueryUploadSingle,\r\n    queries: graphQlQueries\r\n}"]},"metadata":{},"sourceType":"module"}