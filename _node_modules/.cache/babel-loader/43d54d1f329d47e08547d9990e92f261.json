{"ast":null,"code":"//const map = require('unist-util-map');\nconst filter = require('let inlineMethods =processor.Parser.prototype.inlineMethods;\\n' + '        let blockMethods = processor.Parser.prototype.blockMethods;\\n' + '        console.log(tree)\\n' + '        const modify = node => {\\n' + '            if(!node.children) return node;\\n' + '            let className = null;\\n' + '            const children = [];\\n' + '            node.children.forEach(node=> {\\n' + '                if(node.type === \\'cssClass\\'){\\n' + '                    className = node.value;\\n' + '                    return;\\n' + '                }\\n' + '                if(className){\\n' + '                    node.className = className;\\n' + '                    node.data = {\\n' + '                        hProperties: {className: className},\\n' + '                    }\\n' + '                    className = null;\\n' + '                }\\n' + '                if(node.children && node.children.length){\\n' + '                    node = modify(node);\\n' + '                }\\n' + '                children.push(node);\\n' + '            })\\n' + '\\n' + '            node.children = children;\\n' + '            return node;\\n' + '        }\\n' + '\\n' + '        tree = modify(tree)\\n' + '\\n' + '        let next = filter(tree, node => node.type !== \"cssClass\")\\n' + '\\n' + '        return next;');\n\nconst vFile = require('vfile');\n\nmodule.exports = attacher;\n\nconst newFileFrom = (vfile, contents) => {\n  return vFile({ ...vfile,\n    contents: contents\n  });\n};\n\nfunction attacher() {\n  // console.log(\"the this\", this.Parser);\n  const pattern = /{\\.(\\w+)}/;\n  const processor = this;\n\n  function transformer(tree, file) {\n    let inlineMethods = processor.Parser.prototype.inlineMethods;\n    let blockMethods = processor.Parser.prototype.blockMethods;\n    console.log(tree);\n\n    const modify = node => {\n      if (!node.children) return node;\n      let className = null;\n      const children = [];\n      node.children.forEach(node => {\n        if (node.type === 'cssClass') {\n          className = node.value;\n          return;\n        }\n\n        if (className) {\n          node.className = className;\n          node.data = {\n            hProperties: {\n              className: className\n            }\n          };\n          className = null;\n        }\n\n        if (node.children && node.children.length) {\n          node = modify(node);\n        }\n\n        children.push(node);\n      });\n      node.children = children;\n      return node;\n    };\n\n    tree = modify(tree);\n    let next = filter(tree, node => node.type !== \"cssClass\");\n    return next;\n  }\n\n  return transformer;\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/pages/introduction/MarkDonwExtesnion/reamark-hclass.js"],"names":["filter","require","vFile","module","exports","attacher","newFileFrom","vfile","contents","pattern","processor","transformer","tree","file","inlineMethods","Parser","prototype","blockMethods","console","log","modify","node","children","className","forEach","type","value","data","hProperties","length","push","next"],"mappings":"AAAA;AACA,MAAMA,MAAM,GAAGC,OAAO,CAAC,mEACnB,uEADmB,GAEnB,6BAFmB,GAGnB,oCAHmB,GAInB,+CAJmB,GAKnB,qCALmB,GAMnB,oCANmB,GAOnB,8CAPmB,GAQnB,mDARmB,GASnB,+CATmB,GAUnB,+BAVmB,GAWnB,qBAXmB,GAYnB,kCAZmB,GAanB,mDAbmB,GAcnB,qCAdmB,GAenB,gEAfmB,GAgBnB,yBAhBmB,GAiBnB,yCAjBmB,GAkBnB,qBAlBmB,GAmBnB,8DAnBmB,GAoBnB,4CApBmB,GAqBnB,qBArBmB,GAsBnB,wCAtBmB,GAuBnB,kBAvBmB,GAwBnB,IAxBmB,GAyBnB,yCAzBmB,GA0BnB,4BA1BmB,GA2BnB,aA3BmB,GA4BnB,IA5BmB,GA6BnB,+BA7BmB,GA8BnB,IA9BmB,GA+BnB,qEA/BmB,GAgCnB,IAhCmB,GAiCnB,sBAjCkB,CAAtB;;AAkCA,MAAMC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAArB;;AAGAE,MAAM,CAACC,OAAP,GAAiBC,QAAjB;;AAEA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AACrC,SAAON,KAAK,CAAC,EAAC,GAAGK,KAAJ;AAAWC,IAAAA,QAAQ,EAAEA;AAArB,GAAD,CAAZ;AACH,CAFD;;AAIA,SAASH,QAAT,GAAoB;AACjB;AACC,QAAMI,OAAO,GAAG,WAAhB;AACA,QAAMC,SAAS,GAAG,IAAlB;;AACA,WAASC,WAAT,CAAqBC,IAArB,EAA2BC,IAA3B,EAAiC;AAC7B,QAAIC,aAAa,GAAEJ,SAAS,CAACK,MAAV,CAAiBC,SAAjB,CAA2BF,aAA9C;AACA,QAAIG,YAAY,GAAGP,SAAS,CAACK,MAAV,CAAiBC,SAAjB,CAA2BC,YAA9C;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYP,IAAZ;;AACA,UAAMQ,MAAM,GAAGC,IAAI,IAAI;AACnB,UAAG,CAACA,IAAI,CAACC,QAAT,EAAmB,OAAOD,IAAP;AACnB,UAAIE,SAAS,GAAG,IAAhB;AACA,YAAMD,QAAQ,GAAG,EAAjB;AACAD,MAAAA,IAAI,CAACC,QAAL,CAAcE,OAAd,CAAsBH,IAAI,IAAG;AACzB,YAAGA,IAAI,CAACI,IAAL,KAAc,UAAjB,EAA4B;AACxBF,UAAAA,SAAS,GAAGF,IAAI,CAACK,KAAjB;AACA;AACH;;AACD,YAAGH,SAAH,EAAa;AACTF,UAAAA,IAAI,CAACE,SAAL,GAAiBA,SAAjB;AACAF,UAAAA,IAAI,CAACM,IAAL,GAAY;AACRC,YAAAA,WAAW,EAAE;AAACL,cAAAA,SAAS,EAAEA;AAAZ;AADL,WAAZ;AAGAA,UAAAA,SAAS,GAAG,IAAZ;AACH;;AACD,YAAGF,IAAI,CAACC,QAAL,IAAiBD,IAAI,CAACC,QAAL,CAAcO,MAAlC,EAAyC;AACrCR,UAAAA,IAAI,GAAGD,MAAM,CAACC,IAAD,CAAb;AACH;;AACDC,QAAAA,QAAQ,CAACQ,IAAT,CAAcT,IAAd;AACH,OAhBD;AAkBAA,MAAAA,IAAI,CAACC,QAAL,GAAgBA,QAAhB;AACA,aAAOD,IAAP;AACH,KAxBD;;AA0BAT,IAAAA,IAAI,GAAGQ,MAAM,CAACR,IAAD,CAAb;AAEA,QAAImB,IAAI,GAAG/B,MAAM,CAACY,IAAD,EAAOS,IAAI,IAAIA,IAAI,CAACI,IAAL,KAAc,UAA7B,CAAjB;AAEA,WAAOM,IAAP;AACH;;AAED,SAAOpB,WAAP;AACH","sourcesContent":["//const map = require('unist-util-map');\r\nconst filter = require('let inlineMethods =processor.Parser.prototype.inlineMethods;\\n' +\r\n    '        let blockMethods = processor.Parser.prototype.blockMethods;\\n' +\r\n    '        console.log(tree)\\n' +\r\n    '        const modify = node => {\\n' +\r\n    '            if(!node.children) return node;\\n' +\r\n    '            let className = null;\\n' +\r\n    '            const children = [];\\n' +\r\n    '            node.children.forEach(node=> {\\n' +\r\n    '                if(node.type === \\'cssClass\\'){\\n' +\r\n    '                    className = node.value;\\n' +\r\n    '                    return;\\n' +\r\n    '                }\\n' +\r\n    '                if(className){\\n' +\r\n    '                    node.className = className;\\n' +\r\n    '                    node.data = {\\n' +\r\n    '                        hProperties: {className: className},\\n' +\r\n    '                    }\\n' +\r\n    '                    className = null;\\n' +\r\n    '                }\\n' +\r\n    '                if(node.children && node.children.length){\\n' +\r\n    '                    node = modify(node);\\n' +\r\n    '                }\\n' +\r\n    '                children.push(node);\\n' +\r\n    '            })\\n' +\r\n    '\\n' +\r\n    '            node.children = children;\\n' +\r\n    '            return node;\\n' +\r\n    '        }\\n' +\r\n    '\\n' +\r\n    '        tree = modify(tree)\\n' +\r\n    '\\n' +\r\n    '        let next = filter(tree, node => node.type !== \"cssClass\")\\n' +\r\n    '\\n' +\r\n    '        return next;')\r\nconst vFile = require('vfile');\r\n\r\n\r\nmodule.exports = attacher\r\n\r\nconst newFileFrom = (vfile, contents) => {\r\n    return vFile({...vfile, contents: contents})\r\n}\r\n\r\nfunction attacher() {\r\n   // console.log(\"the this\", this.Parser);\r\n    const pattern = /{\\.(\\w+)}/;\r\n    const processor = this;\r\n    function transformer(tree, file) {\r\n        let inlineMethods =processor.Parser.prototype.inlineMethods;\r\n        let blockMethods = processor.Parser.prototype.blockMethods;\r\n        console.log(tree)\r\n        const modify = node => {\r\n            if(!node.children) return node;\r\n            let className = null;\r\n            const children = [];\r\n            node.children.forEach(node=> {\r\n                if(node.type === 'cssClass'){\r\n                    className = node.value;\r\n                    return;\r\n                }\r\n                if(className){\r\n                    node.className = className;\r\n                    node.data = {\r\n                        hProperties: {className: className},\r\n                    }\r\n                    className = null;\r\n                }\r\n                if(node.children && node.children.length){\r\n                    node = modify(node);\r\n                }\r\n                children.push(node);\r\n            })\r\n\r\n            node.children = children;\r\n            return node;\r\n        }\r\n\r\n        tree = modify(tree)\r\n\r\n        let next = filter(tree, node => node.type !== \"cssClass\")\r\n\r\n        return next;\r\n    }\r\n\r\n    return transformer\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}