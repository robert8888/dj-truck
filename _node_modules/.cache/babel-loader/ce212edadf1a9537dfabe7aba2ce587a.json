{"ast":null,"code":"import _objectSpread from\"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import{ACTIONS}from\"./../../../actions\";import STATES from\"./stateDef\";var initState={recName:\"\",recId:null,recordingState:STATES.IDLE,startTime:null,tracklist:[]};export default function headerState(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initState;var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case ACTIONS.R_START_RECORDING:{return _objectSpread({},state,{recordingState:STATES.INIT,recName:action.recName,recId:action.id,startTime:new Date().getTime(),tracklist:action.initTracklist});}case ACTIONS.R_END_RECORDING:{return _objectSpread({},state,{recordingState:STATES.IDLE,recName:\"\"});}case ACTIONS.R_RECORDING:{return _objectSpread({},state,{recordingState:STATES.RECORDING});}case ACTIONS.R_RECORDING_FAIL:{return _objectSpread({},state,{recordingState:STATES.FAIL,recName:\"\",tracklist:[]});}case ACTIONS.R_PUSH_TO_TRACKLIST:{var tracklist=Array.from(state.tracklist);tracklist.push(action.track);return _objectSpread({},state,{tracklist:tracklist});}case ACTIONS.R_UPDATE_START:{var id=action.id;var _tracklist=state.tracklist.map(function(track){if(track.id===id&&!track.start){track.start=(new Date().getTime()-state.startTime)/1000;}return track;});return _objectSpread({},state,{tracklist:_tracklist});}case ACTIONS.R_UPDATE_END:{var _id=action.id;var _tracklist2=state.tracklist.map(function(track){if(track.id===_id&&!track.end){track.end=(new Date().getTime()-state.startTime)/1000;}return track;});return _objectSpread({},state,{tracklist:_tracklist2});}default:return state;}}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/reducers/console/recorder/recorderReducer.js"],"names":["ACTIONS","STATES","initState","recName","recId","recordingState","IDLE","startTime","tracklist","headerState","state","action","type","R_START_RECORDING","INIT","id","Date","getTime","initTracklist","R_END_RECORDING","R_RECORDING","RECORDING","R_RECORDING_FAIL","FAIL","R_PUSH_TO_TRACKLIST","Array","from","push","track","R_UPDATE_START","map","start","R_UPDATE_END","end"],"mappings":"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","sourcesContent":["import { ACTIONS } from \"./../../../actions\";\r\nimport STATES from \"./stateDef\";\r\n\r\nconst initState = {\r\n    recName: \"\",\r\n    recId: null,\r\n    recordingState: STATES.IDLE,\r\n    startTime: null,\r\n    tracklist: [],\r\n}\r\n\r\nexport default function headerState(state = initState, action) {\r\n    switch (action.type) {\r\n        case ACTIONS.R_START_RECORDING: {\r\n            return {\r\n                ...state,\r\n                recordingState: STATES.INIT,\r\n                recName: action.recName,\r\n                recId: action.id,\r\n                startTime: new Date().getTime(),\r\n                tracklist : action.initTracklist\r\n            }\r\n        }\r\n\r\n        case ACTIONS.R_END_RECORDING: {\r\n            return {\r\n                ...state,\r\n                recordingState: STATES.IDLE,\r\n                recName: \"\",\r\n            }\r\n        }\r\n\r\n        case ACTIONS.R_RECORDING: {\r\n            return {\r\n                ...state,\r\n                recordingState: STATES.RECORDING,\r\n            }\r\n        }\r\n\r\n        case ACTIONS.R_RECORDING_FAIL: {\r\n            return {\r\n                ...state,\r\n                recordingState: STATES.FAIL,\r\n                recName: \"\",\r\n                tracklist: []\r\n            }\r\n        }\r\n\r\n        case ACTIONS.R_PUSH_TO_TRACKLIST: {\r\n            const tracklist = Array.from(state.tracklist);\r\n            tracklist.push(action.track);\r\n            return {\r\n                ...state,\r\n                tracklist : tracklist\r\n            }\r\n        }\r\n\r\n        case ACTIONS.R_UPDATE_START:{\r\n            const {id} = action;\r\n            const tracklist = state.tracklist.map((track) => {\r\n                if(track.id === id && !track.start){\r\n                    track.start = (new Date().getTime() - state.startTime) / 1000;\r\n                }\r\n                return track;\r\n            })\r\n            return {\r\n                ...state,\r\n                tracklist,\r\n            }\r\n        }\r\n\r\n        case ACTIONS.R_UPDATE_END:{\r\n            const {id} = action;\r\n            const tracklist = state.tracklist.map((track) => {\r\n                if(track.id === id && !track.end){\r\n                    track.end =  (new Date().getTime() - state.startTime) / 1000;\r\n                }\r\n                return track;\r\n            })\r\n            return {\r\n                ...state,\r\n                tracklist,\r\n            }\r\n        }\r\n\r\n\r\n        default: return state;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}