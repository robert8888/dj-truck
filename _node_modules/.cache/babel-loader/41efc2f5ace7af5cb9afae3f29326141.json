{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJEKTY\\\\APKI\\\\DjTruck\\\\djtruck\\\\src\\\\pages\\\\app\\\\components\\\\PlayListExplorer\\\\PlayList\\\\PlayList.js\";\nimport React, { Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport UUID from \"uuidjs\";\nimport PlaylistCtx from \"./PlaylistContext\";\nimport { ContextMenuTrigger } from \"react-contextmenu\";\nimport PlaylistTable from \"./PlaylistTable/PlaylistTable\";\nimport EmptyListInfo from \"./EmptList/EmptyList\";\nimport PlaylistItem from \"./Playlist_Item/PlaylistItem\";\nimport CtxMenu from \"../../common/ContextMenu/ContextMenu\";\nimport { loadTrack, deleteTrack, swapTrackOnList } from \"./../../../../../actions\";\nimport \"./play-list.scss\";\n\nclass PlayList extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.headers = ['Source', 'Title', 'Quality', 'Time', 'Bpm', 'Destination'];\n\n    this.isEmpty = () => !this.props.currentPlaylist || this.props.currentPlaylist.length === 0;\n  }\n\n  setCurrentHover(index) {\n    if (!this.menuVisible) {\n      this.currentHoverElement = index;\n    }\n  }\n\n  loadTrack(destination) {\n    const track = this.props.playList[this.currentHoverElement];\n    this.props.load(track, destination);\n  }\n\n  deleteTrack() {\n    if (this.props.playList.length === 0) {\n      return;\n    }\n\n    this.props.delete(this.currentHoverElement);\n  }\n\n  swapItems(from, to) {\n    this.props.swapTrackOnList(from, to);\n  }\n\n  render() {\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"playlist\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, React.createElement(ContextMenuTrigger, {\n      id: \"playlist_ctx_menu\",\n      className: \"playlist\",\n      holdToDisplay: -1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(PlaylistCtx.Provider, {\n      value: {\n        setHover: this.setCurrentHover.bind(this)\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, React.createElement(PlaylistTable, {\n      headers: this.headers,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, this.props.playList && this.props.playList.map((item, index) => React.createElement(PlaylistItem, {\n      item: item,\n      listIndex: index,\n      swapItems: this.props.swapTrackOnList,\n      key: UUID.genV1(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }))), React.createElement(EmptyListInfo, {\n      empty: this.isEmpty(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }))))), React.createElement(CtxMenu, {\n      id: \"playlist_ctx_menu\",\n      items: {\n        \"Send to A\": this.loadTrack.bind(this, \"A\"),\n        \"Send to B\": this.loadTrack.bind(this, \"B\"),\n        \"Calc BPM\": null,\n        \"Delete\": this.deleteTrack.bind(this)\n      },\n      handlers: {\n        onShow: () => this.menuVisible = true,\n        onHide: () => this.menuVisible = false\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  playList: state.playList.list,\n  currentPlaylist: state.playList.currentPlaylist\n});\n\nconst mapDispatchToProps = dispatch => ({\n  load: (track, destination) => dispatch(loadTrack(track, destination)),\n  delete: index => dispatch(deleteTrack(index)),\n  swapTrack: (from, to) => dispatch(swapTrackOnList(from, to)),\n  reCalcBpm: () => null\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PlayList);","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/pages/app/components/PlayListExplorer/PlayList/PlayList.js"],"names":["React","Fragment","connect","UUID","PlaylistCtx","ContextMenuTrigger","PlaylistTable","EmptyListInfo","PlaylistItem","CtxMenu","loadTrack","deleteTrack","swapTrackOnList","PlayList","Component","headers","isEmpty","props","currentPlaylist","length","setCurrentHover","index","menuVisible","currentHoverElement","destination","track","playList","load","delete","swapItems","from","to","render","setHover","bind","map","item","genV1","onShow","onHide","mapStateToProps","state","list","mapDispatchToProps","dispatch","swapTrack","reCalcBpm"],"mappings":"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","sourcesContent":["import React, { Fragment } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport UUID from \"uuidjs\";\r\nimport PlaylistCtx from \"./PlaylistContext\";\r\nimport { ContextMenuTrigger } from \"react-contextmenu\"\r\nimport PlaylistTable from \"./PlaylistTable/PlaylistTable\";\r\nimport EmptyListInfo from \"./EmptList/EmptyList\";\r\nimport PlaylistItem from \"./Playlist_Item/PlaylistItem\";\r\nimport CtxMenu from \"../../common/ContextMenu/ContextMenu\";\r\nimport { loadTrack, deleteTrack, swapTrackOnList } from \"./../../../../../actions\";\r\nimport \"./play-list.scss\";\r\n\r\n\r\n\r\nclass PlayList extends React.Component {\r\n\r\n    headers = ['Source', 'Title', 'Quality', 'Time', 'Bpm', 'Destination'];\r\n\r\n    setCurrentHover(index) {\r\n        if (!this.menuVisible) {\r\n            this.currentHoverElement = index;\r\n        }\r\n    }\r\n\r\n    loadTrack(destination) {\r\n        const track = this.props.playList[this.currentHoverElement];\r\n        this.props.load(track, destination)\r\n    }\r\n\r\n    deleteTrack() {\r\n        if (this.props.playList.length === 0) {\r\n            return;\r\n        }\r\n        this.props.delete(this.currentHoverElement);\r\n    }\r\n\r\n    swapItems(from, to){\r\n        this.props.swapTrackOnList(from, to)\r\n    }\r\n\r\n    isEmpty = () => (!this.props.currentPlaylist || this.props.currentPlaylist.length === 0)\r\n\r\n    \r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <div className=\"playlist\">\r\n                    <ContextMenuTrigger id=\"playlist_ctx_menu\" className=\"playlist\" holdToDisplay={-1}>\r\n                        <PlaylistCtx.Provider value={{ setHover: this.setCurrentHover.bind(this) }}>\r\n                            <Fragment>\r\n                                <PlaylistTable headers={this.headers}>\r\n                                    {this.props.playList && this.props.playList.map((item, index) =>\r\n                                        <PlaylistItem \r\n                                            item={item} \r\n                                            listIndex={index} \r\n                                            swapItems={this.props.swapTrackOnList}\r\n                                            key={UUID.genV1()} \r\n                                            />\r\n                                    )}\r\n                                </PlaylistTable>\r\n                                <EmptyListInfo empty={this.isEmpty()}/>\r\n                            </Fragment>\r\n                        </PlaylistCtx.Provider>\r\n                    </ContextMenuTrigger>\r\n                </div>\r\n                <CtxMenu\r\n                    id=\"playlist_ctx_menu\"\r\n                    items={{\r\n                        \"Send to A\": this.loadTrack.bind(this, \"A\"),\r\n                        \"Send to B\": this.loadTrack.bind(this, \"B\"),\r\n                        \"Calc BPM\": null,\r\n                        \"Delete\": this.deleteTrack.bind(this)\r\n                    }}\r\n                    handlers={{\r\n                        onShow: () => this.menuVisible = true,\r\n                        onHide: () => this.menuVisible = false,\r\n                    }}\r\n                />\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    playList: state.playList.list,\r\n    currentPlaylist: state.playList.currentPlaylist,\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    load: (track, destination) => dispatch(loadTrack(track, destination)),\r\n    delete: (index) => dispatch(deleteTrack(index)),\r\n    swapTrack: (from, to) => dispatch(swapTrackOnList(from, to)),\r\n    reCalcBpm: () => null,\r\n\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PlayList);"]},"metadata":{},"sourceType":"module"}