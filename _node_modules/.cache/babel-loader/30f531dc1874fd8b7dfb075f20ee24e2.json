{"ast":null,"code":"import{analyze,guess}from'web-audio-beat-detector';export function calcBpm(url){return fetch(url).then(function(response){return response.arrayBuffer();}).then(function(arrayBuffer){var audioCtx=new AudioContext();return audioCtx.decodeAudioData(arrayBuffer);}).then(function(audioBuffer){return analyze(audioBuffer);}).catch(function(error){return 0;});}export function calcBpmAndOffset(url){return fetch(url).then(function(response){return response.arrayBuffer();}).then(function(arrayBuffer){var audioCtx=new AudioContext();return audioCtx.decodeAudioData(arrayBuffer);}).then(function(audioBuffer){return guess(audioBuffer);}).catch(function(error){return{bpm:0,offset:0};});}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/utils/bpm/analyzer.js"],"names":["analyze","guess","calcBpm","url","fetch","then","response","arrayBuffer","audioCtx","AudioContext","decodeAudioData","audioBuffer","catch","error","calcBpmAndOffset","bpm","offset"],"mappings":"AAAA,OAASA,OAAT,CAAkBC,KAAlB,KAA+B,yBAA/B,CAEA,MAAO,SAASC,CAAAA,OAAT,CAAiBC,GAAjB,CAAqB,CACxB,MAAOC,CAAAA,KAAK,CAACD,GAAD,CAAL,CACNE,IADM,CACD,SAAAC,QAAQ,QAAIA,CAAAA,QAAQ,CAACC,WAAT,EAAJ,EADP,EAENF,IAFM,CAED,SAAAE,WAAW,CAAI,CACjB,GAAMC,CAAAA,QAAQ,CAAG,GAAIC,CAAAA,YAAJ,EAAjB,CACA,MAAOD,CAAAA,QAAQ,CAACE,eAAT,CAAyBH,WAAzB,CAAP,CACH,CALM,EAKJF,IALI,CAKE,SAAAM,WAAW,QAAIX,CAAAA,OAAO,CAACW,WAAD,CAAX,EALb,EAMNC,KANM,CAMA,SAAAC,KAAK,QAAI,EAAJ,EANL,CAAP,CAOH,CAED,MAAO,SAASC,CAAAA,gBAAT,CAA0BX,GAA1B,CAA8B,CACjC,MAAOC,CAAAA,KAAK,CAACD,GAAD,CAAL,CACNE,IADM,CACD,SAAAC,QAAQ,QAAIA,CAAAA,QAAQ,CAACC,WAAT,EAAJ,EADP,EAENF,IAFM,CAED,SAAAE,WAAW,CAAI,CACjB,GAAMC,CAAAA,QAAQ,CAAG,GAAIC,CAAAA,YAAJ,EAAjB,CACA,MAAOD,CAAAA,QAAQ,CAACE,eAAT,CAAyBH,WAAzB,CAAP,CACH,CALM,EAKJF,IALI,CAKE,SAAAM,WAAW,QAAIV,CAAAA,KAAK,CAACU,WAAD,CAAT,EALb,EAMNC,KANM,CAMA,SAAAC,KAAK,QAAK,CAACE,GAAG,CAAE,CAAN,CAASC,MAAM,CAAC,CAAhB,CAAL,EANL,CAAP,CAOH","sourcesContent":["import { analyze, guess } from 'web-audio-beat-detector';\r\n\r\nexport function calcBpm(url){\r\n    return fetch(url)\r\n    .then(response => response.arrayBuffer())\r\n    .then(arrayBuffer => {\r\n        const audioCtx = new AudioContext();\r\n        return audioCtx.decodeAudioData(arrayBuffer);\r\n    }).then( audioBuffer => analyze(audioBuffer))\r\n    .catch(error => 0);\r\n}\r\n\r\nexport function calcBpmAndOffset(url){\r\n    return fetch(url)\r\n    .then(response => response.arrayBuffer())\r\n    .then(arrayBuffer => {\r\n        const audioCtx = new AudioContext();\r\n        return audioCtx.decodeAudioData(arrayBuffer);\r\n    }).then( audioBuffer => guess(audioBuffer))\r\n    .catch(error => ({bpm: 0, offset:0 }))\r\n}\r\n"]},"metadata":{},"sourceType":"module"}