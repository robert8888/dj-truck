{"ast":null,"code":"'use strict';\n\nvar xtend = require('xtend');\n\nvar svg = require('property-information/svg');\n\nvar find = require('property-information/find');\n\nvar spaces = require('space-separated-tokens').stringify;\n\nvar commas = require('comma-separated-tokens').stringify;\n\nvar entities = require('stringify-entities');\n\nvar ccount = require('ccount');\n\nvar all = require('./all');\n\nvar constants = require('./constants');\n\nmodule.exports = serializeElement;\nvar space = ' ';\nvar quotationMark = '\"';\nvar apostrophe = \"'\";\nvar equalsTo = '=';\nvar lessThan = '<';\nvar greaterThan = '>';\nvar slash = '/'; // eslint-disable-next-line complexity\n\nfunction serializeElement(ctx, node, index, parent) {\n  var parentSchema = ctx.schema;\n  var name = node.tagName;\n  var value = '';\n  var selfClosing;\n  var close;\n  var omit;\n  var root = node;\n  var content;\n  var attrs;\n  var last;\n\n  if (parentSchema.space === 'html' && name === 'svg') {\n    ctx.schema = svg;\n  }\n\n  attrs = serializeAttributes(ctx, node.properties);\n\n  if (ctx.schema.space === 'svg') {\n    omit = false;\n    close = true;\n    selfClosing = ctx.closeEmpty;\n  } else {\n    omit = ctx.omit;\n    close = ctx.close;\n    selfClosing = ctx.voids.indexOf(name.toLowerCase()) !== -1;\n\n    if (name === 'template') {\n      root = node.content;\n    }\n  }\n\n  content = all(ctx, root); // If the node is categorised as void, but it has children, remove the\n  // categorisation.\n  // This enables for example `menuitem`s, which are void in W3C HTML but not\n  // void in WHATWG HTML, to be stringified properly.\n\n  selfClosing = content ? false : selfClosing;\n\n  if (attrs || !omit || !omit.opening(node, index, parent)) {\n    value = lessThan + name + (attrs ? space + attrs : '');\n\n    if (selfClosing && close) {\n      last = attrs.charAt(attrs.length - 1);\n\n      if (!ctx.tightClose || last === slash || ctx.schema.space === 'svg' && last && last !== quotationMark && last !== apostrophe) {\n        value += space;\n      }\n\n      value += slash;\n    }\n\n    value += greaterThan;\n  }\n\n  value += content;\n\n  if (!selfClosing && (!omit || !omit.closing(node, index, parent))) {\n    value += lessThan + slash + name + greaterThan;\n  }\n\n  ctx.schema = parentSchema;\n  return value;\n}\n\nfunction serializeAttributes(ctx, props) {\n  var values = [];\n  var key;\n  var value;\n  var result;\n  var length;\n  var index;\n  var last;\n\n  for (key in props) {\n    value = props[key];\n\n    if (value === null || value === undefined) {\n      continue;\n    }\n\n    result = serializeAttribute(ctx, key, value);\n\n    if (result) {\n      values.push(result);\n    }\n  }\n\n  length = values.length;\n  index = -1;\n\n  while (++index < length) {\n    result = values[index];\n    last = null;\n\n    if (ctx.tight) {\n      last = result.charAt(result.length - 1);\n    } // In tight mode, don’t add a space after quoted attributes.\n\n\n    if (index !== length - 1 && last !== quotationMark && last !== apostrophe) {\n      values[index] = result + space;\n    }\n  }\n\n  return values.join('');\n}\n\nfunction serializeAttribute(ctx, key, value) {\n  var schema = ctx.schema;\n  var info = find(schema, key);\n  var name = info.attribute;\n\n  if (info.overloadedBoolean && (value === name || value === '')) {\n    value = true;\n  } else if (info.boolean || info.overloadedBoolean && typeof value !== 'string') {\n    value = Boolean(value);\n  }\n\n  if (value === null || value === undefined || value === false || typeof value === 'number' && isNaN(value)) {\n    return '';\n  }\n\n  name = serializeAttributeName(ctx, name);\n\n  if (value === true) {\n    // There is currently only one boolean property in SVG: `[download]` on\n    // `<a>`.\n    // This property does not seem to work in browsers (FF, Sa, Ch), so I can’t\n    // test if dropping the value works.\n    // But I assume that it should:\n    //\n    // ```html\n    // <!doctype html>\n    // <svg viewBox=\"0 0 100 100\">\n    //   <a href=https://example.com download>\n    //     <circle cx=50 cy=40 r=35 />\n    //   </a>\n    // </svg>\n    // ```\n    //\n    // See: <https://github.com/wooorm/property-information/blob/master/lib/svg.js>\n    return name;\n  }\n\n  return name + serializeAttributeValue(ctx, key, value, info);\n}\n\nfunction serializeAttributeName(ctx, name) {\n  // Always encode without parse errors in non-HTML.\n  var valid = ctx.schema.space === 'html' ? ctx.valid : 1;\n  var subset = constants.name[valid][ctx.safe];\n  return entities(name, xtend(ctx.entities, {\n    subset: subset\n  }));\n}\n\nfunction serializeAttributeValue(ctx, key, value, info) {\n  var options = ctx.entities;\n  var quote = ctx.quote;\n  var alternative = ctx.alternative;\n  var smart = ctx.smart;\n  var unquoted;\n  var subset;\n\n  if (typeof value === 'object' && 'length' in value) {\n    // `spaces` doesn’t accept a second argument, but it’s given here just to\n    // keep the code cleaner.\n    value = (info.commaSeparated ? commas : spaces)(value, {\n      padLeft: !ctx.tightLists\n    });\n  }\n\n  value = String(value);\n\n  if (value || !ctx.collapseEmpty) {\n    unquoted = value; // Check unquoted value.\n\n    if (ctx.unquoted) {\n      subset = constants.unquoted[ctx.valid][ctx.safe];\n      unquoted = entities(value, xtend(options, {\n        subset: subset,\n        attribute: true\n      }));\n    } // If `value` contains entities when unquoted…\n\n\n    if (!ctx.unquoted || unquoted !== value) {\n      // If the alternative is less common than `quote`, switch.\n      if (smart && ccount(value, quote) > ccount(value, alternative)) {\n        quote = alternative;\n      }\n\n      subset = quote === apostrophe ? constants.single : constants.double; // Always encode without parse errors in non-HTML.\n\n      subset = subset[ctx.schema.space === 'html' ? ctx.valid : 1][ctx.safe];\n      value = entities(value, xtend(options, {\n        subset: subset,\n        attribute: true\n      }));\n      value = quote + value + quote;\n    } // Don’t add a `=` for unquoted empties.\n\n\n    value = value ? equalsTo + value : value;\n  }\n\n  return value;\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/node_modules/hast-util-to-html/lib/element.js"],"names":["xtend","require","svg","find","spaces","stringify","commas","entities","ccount","all","constants","module","exports","serializeElement","space","quotationMark","apostrophe","equalsTo","lessThan","greaterThan","slash","ctx","node","index","parent","parentSchema","schema","name","tagName","value","selfClosing","close","omit","root","content","attrs","last","serializeAttributes","properties","closeEmpty","voids","indexOf","toLowerCase","opening","charAt","length","tightClose","closing","props","values","key","result","undefined","serializeAttribute","push","tight","join","info","attribute","overloadedBoolean","boolean","Boolean","isNaN","serializeAttributeName","serializeAttributeValue","valid","subset","safe","options","quote","alternative","smart","unquoted","commaSeparated","padLeft","tightLists","String","collapseEmpty","single","double"],"mappings":"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","sourcesContent":["'use strict'\n\nvar xtend = require('xtend')\nvar svg = require('property-information/svg')\nvar find = require('property-information/find')\nvar spaces = require('space-separated-tokens').stringify\nvar commas = require('comma-separated-tokens').stringify\nvar entities = require('stringify-entities')\nvar ccount = require('ccount')\nvar all = require('./all')\nvar constants = require('./constants')\n\nmodule.exports = serializeElement\n\nvar space = ' '\nvar quotationMark = '\"'\nvar apostrophe = \"'\"\nvar equalsTo = '='\nvar lessThan = '<'\nvar greaterThan = '>'\nvar slash = '/'\n\n// eslint-disable-next-line complexity\nfunction serializeElement(ctx, node, index, parent) {\n  var parentSchema = ctx.schema\n  var name = node.tagName\n  var value = ''\n  var selfClosing\n  var close\n  var omit\n  var root = node\n  var content\n  var attrs\n  var last\n\n  if (parentSchema.space === 'html' && name === 'svg') {\n    ctx.schema = svg\n  }\n\n  attrs = serializeAttributes(ctx, node.properties)\n\n  if (ctx.schema.space === 'svg') {\n    omit = false\n    close = true\n    selfClosing = ctx.closeEmpty\n  } else {\n    omit = ctx.omit\n    close = ctx.close\n    selfClosing = ctx.voids.indexOf(name.toLowerCase()) !== -1\n\n    if (name === 'template') {\n      root = node.content\n    }\n  }\n\n  content = all(ctx, root)\n\n  // If the node is categorised as void, but it has children, remove the\n  // categorisation.\n  // This enables for example `menuitem`s, which are void in W3C HTML but not\n  // void in WHATWG HTML, to be stringified properly.\n  selfClosing = content ? false : selfClosing\n\n  if (attrs || !omit || !omit.opening(node, index, parent)) {\n    value = lessThan + name + (attrs ? space + attrs : '')\n\n    if (selfClosing && close) {\n      last = attrs.charAt(attrs.length - 1)\n      if (\n        !ctx.tightClose ||\n        last === slash ||\n        (ctx.schema.space === 'svg' &&\n          last &&\n          last !== quotationMark &&\n          last !== apostrophe)\n      ) {\n        value += space\n      }\n\n      value += slash\n    }\n\n    value += greaterThan\n  }\n\n  value += content\n\n  if (!selfClosing && (!omit || !omit.closing(node, index, parent))) {\n    value += lessThan + slash + name + greaterThan\n  }\n\n  ctx.schema = parentSchema\n\n  return value\n}\n\nfunction serializeAttributes(ctx, props) {\n  var values = []\n  var key\n  var value\n  var result\n  var length\n  var index\n  var last\n\n  for (key in props) {\n    value = props[key]\n\n    if (value === null || value === undefined) {\n      continue\n    }\n\n    result = serializeAttribute(ctx, key, value)\n\n    if (result) {\n      values.push(result)\n    }\n  }\n\n  length = values.length\n  index = -1\n\n  while (++index < length) {\n    result = values[index]\n    last = null\n\n    if (ctx.tight) {\n      last = result.charAt(result.length - 1)\n    }\n\n    // In tight mode, don’t add a space after quoted attributes.\n    if (index !== length - 1 && last !== quotationMark && last !== apostrophe) {\n      values[index] = result + space\n    }\n  }\n\n  return values.join('')\n}\n\nfunction serializeAttribute(ctx, key, value) {\n  var schema = ctx.schema\n  var info = find(schema, key)\n  var name = info.attribute\n\n  if (info.overloadedBoolean && (value === name || value === '')) {\n    value = true\n  } else if (\n    info.boolean ||\n    (info.overloadedBoolean && typeof value !== 'string')\n  ) {\n    value = Boolean(value)\n  }\n\n  if (\n    value === null ||\n    value === undefined ||\n    value === false ||\n    (typeof value === 'number' && isNaN(value))\n  ) {\n    return ''\n  }\n\n  name = serializeAttributeName(ctx, name)\n\n  if (value === true) {\n    // There is currently only one boolean property in SVG: `[download]` on\n    // `<a>`.\n    // This property does not seem to work in browsers (FF, Sa, Ch), so I can’t\n    // test if dropping the value works.\n    // But I assume that it should:\n    //\n    // ```html\n    // <!doctype html>\n    // <svg viewBox=\"0 0 100 100\">\n    //   <a href=https://example.com download>\n    //     <circle cx=50 cy=40 r=35 />\n    //   </a>\n    // </svg>\n    // ```\n    //\n    // See: <https://github.com/wooorm/property-information/blob/master/lib/svg.js>\n    return name\n  }\n\n  return name + serializeAttributeValue(ctx, key, value, info)\n}\n\nfunction serializeAttributeName(ctx, name) {\n  // Always encode without parse errors in non-HTML.\n  var valid = ctx.schema.space === 'html' ? ctx.valid : 1\n  var subset = constants.name[valid][ctx.safe]\n\n  return entities(name, xtend(ctx.entities, {subset: subset}))\n}\n\nfunction serializeAttributeValue(ctx, key, value, info) {\n  var options = ctx.entities\n  var quote = ctx.quote\n  var alternative = ctx.alternative\n  var smart = ctx.smart\n  var unquoted\n  var subset\n\n  if (typeof value === 'object' && 'length' in value) {\n    // `spaces` doesn’t accept a second argument, but it’s given here just to\n    // keep the code cleaner.\n    value = (info.commaSeparated ? commas : spaces)(value, {\n      padLeft: !ctx.tightLists\n    })\n  }\n\n  value = String(value)\n\n  if (value || !ctx.collapseEmpty) {\n    unquoted = value\n\n    // Check unquoted value.\n    if (ctx.unquoted) {\n      subset = constants.unquoted[ctx.valid][ctx.safe]\n      unquoted = entities(\n        value,\n        xtend(options, {subset: subset, attribute: true})\n      )\n    }\n\n    // If `value` contains entities when unquoted…\n    if (!ctx.unquoted || unquoted !== value) {\n      // If the alternative is less common than `quote`, switch.\n      if (smart && ccount(value, quote) > ccount(value, alternative)) {\n        quote = alternative\n      }\n\n      subset = quote === apostrophe ? constants.single : constants.double\n      // Always encode without parse errors in non-HTML.\n      subset = subset[ctx.schema.space === 'html' ? ctx.valid : 1][ctx.safe]\n\n      value = entities(value, xtend(options, {subset: subset, attribute: true}))\n\n      value = quote + value + quote\n    }\n\n    // Don’t add a `=` for unquoted empties.\n    value = value ? equalsTo + value : value\n  }\n\n  return value\n}\n"]},"metadata":{},"sourceType":"script"}