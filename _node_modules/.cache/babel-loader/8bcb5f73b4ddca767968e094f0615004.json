{"ast":null,"code":"import store from \"./../../store\";\nimport Observer from \"./observer/observer\";\nimport STATUS from \"./observer/STATUS\";\nimport { togglePlay, setTimeLeft } from \"./../../actions\";\nimport Channels from \"./channels/channels\";\nimport Mixer from \"./mixer/mixer\";\nexport default class Console {\n  constructor() {\n    store.subscribe(this.handleChange.bind(this));\n    this.dispatch = store.dispatch;\n    this.observer = new Observer(store);\n    this.channels = new Channels();\n    this.mixer = new Mixer(this.channels);\n  }\n\n  static Create() {\n    return Console.Get();\n  }\n\n  static Get() {\n    if (!Console.instance) {\n      Console.instance = new Console();\n      return Console.instance;\n    } else {\n      return Console.instance;\n    }\n  }\n\n  getMixerChannelInterface(channelName) {\n    return this.mixer.getChannelInterface(channelName);\n  }\n\n  getChannelInterface(channelName) {\n    return this.channels.getChannelInterface(channelName);\n  }\n\n  createChannel(channelName, ...args) {\n    args.push(this.mixer.mainAudioContext);\n    this.channels.createChannel(channelName, ...args);\n    this.mixer.setUpChannelsAudioNodes(channelName);\n  }\n\n  handleChange() {\n    const storeChanges = this.observer.check();\n\n    for (let diff of storeChanges) {\n      this.callAction(diff);\n    }\n  }\n\n  callAction(diff) {\n    switch (diff.status) {\n      case STATUS.TRACK_LOADED:\n        {\n          this.channels.loadTrack(diff.channel, diff.currentValue);\n          break;\n        }\n\n      case STATUS.BPM_AND_OFFSET_READY:\n        {\n          this.channels.createBars(diff.channel, diff.currentValue);\n          break;\n        }\n\n      case STATUS.TOGGLE_PLAY:\n        {\n          this.channels.togglePlay(diff.channel, diff.currentValue);\n          break;\n        }\n\n      case STATUS.TOGGLE_CUE:\n        {\n          this.channels.toggleCue(diff.channel, diff.currentValue);\n          break;\n        }\n\n      case STATUS.PITCH_CHANGE:\n        {\n          this.channels.adjustPitch(diff.channel, diff.currentValue);\n          break;\n        }\n\n      case STATUS.GAIN_CHANGE:\n        {\n          this.mixer.setGain(diff.channel, diff.currentValue);\n          break;\n        }\n\n      case STATUS.EQ_LOW_CHANGE:\n        {\n          this.mixer.setEqLow(diff.channel, diff.currentValue);\n          break;\n        }\n\n      case STATUS.EQ_MID_CHANGE:\n        {\n          this.mixer.setEqMid(diff.channel, diff.currentValue);\n          break;\n        }\n\n      case STATUS.EQ_HI_CHANGE:\n        {\n          this.mixer.setEqHigh(diff.channel, diff.currentValue);\n          break;\n        }\n\n      case STATUS.FADER_CHANGE:\n        {\n          this.mixer.setFader(diff.currentValue);\n          break;\n        }\n\n      case STATUS.SYNC_ACTIVATE:\n        {\n          this.channels.sync(diff.channel);\n          break;\n        }\n\n      case STATUS.LOOP_CHANGE:\n        {\n          if (diff.currentValue.state) {\n            this.channels.makeLoop(diff.channel, diff.currentValue);\n          } else {\n            this.channels.endLoop(diff.channel);\n          }\n\n          break;\n        }\n\n      case STATUS.LOOP_LENGTH_CHANGE:\n        {\n          this.channels.updateLoop(diff.channel, diff.currentValue);\n          break;\n        }\n\n      default:\n        return;\n    }\n  }\n\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/core/console/console.js"],"names":["store","Observer","STATUS","togglePlay","setTimeLeft","Channels","Mixer","Console","constructor","subscribe","handleChange","bind","dispatch","observer","channels","mixer","Create","Get","instance","getMixerChannelInterface","channelName","getChannelInterface","createChannel","args","push","mainAudioContext","setUpChannelsAudioNodes","storeChanges","check","diff","callAction","status","TRACK_LOADED","loadTrack","channel","currentValue","BPM_AND_OFFSET_READY","createBars","TOGGLE_PLAY","TOGGLE_CUE","toggleCue","PITCH_CHANGE","adjustPitch","GAIN_CHANGE","setGain","EQ_LOW_CHANGE","setEqLow","EQ_MID_CHANGE","setEqMid","EQ_HI_CHANGE","setEqHigh","FADER_CHANGE","setFader","SYNC_ACTIVATE","sync","LOOP_CHANGE","state","makeLoop","endLoop","LOOP_LENGTH_CHANGE","updateLoop"],"mappings":"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","sourcesContent":["import store from \"./../../store\";\r\nimport Observer from \"./observer/observer\";\r\nimport STATUS from \"./observer/STATUS\";\r\nimport { togglePlay,\r\n         setTimeLeft }\r\n         from \"./../../actions\";\r\nimport Channels from \"./channels/channels\";\r\nimport Mixer from \"./mixer/mixer\";\r\n\r\n\r\nexport default class Console{\r\n    static instance;\r\n\r\n    constructor(){\r\n        store.subscribe(this.handleChange.bind(this));\r\n        this.dispatch = store.dispatch;\r\n        this.observer = new Observer(store);\r\n\r\n        this.channels = new Channels();\r\n        this.mixer = new Mixer(this.channels);\r\n\r\n    }\r\n\r\n    static Create(){\r\n        return Console.Get();\r\n    }\r\n\r\n    static Get(){\r\n        if(!Console.instance){\r\n            Console.instance = new Console();\r\n            return Console.instance;\r\n        } else {\r\n            return Console.instance;\r\n        }\r\n    }\r\n\r\n    getMixerChannelInterface(channelName){\r\n        return this.mixer.getChannelInterface(channelName);\r\n    }\r\n\r\n    getChannelInterface(channelName){\r\n        return this.channels.getChannelInterface(channelName);\r\n    }\r\n\r\n\r\n    createChannel(channelName, ...args){\r\n        args.push(this.mixer.mainAudioContext);\r\n        this.channels.createChannel(channelName, ...args);\r\n        this.mixer.setUpChannelsAudioNodes(channelName);\r\n    }\r\n\r\n    handleChange(){\r\n        const storeChanges = this.observer.check();\r\n        for(let diff of storeChanges){\r\n            this.callAction(diff);\r\n        }\r\n    }\r\n\r\n    callAction(diff){\r\n        switch(diff.status){\r\n            case STATUS.TRACK_LOADED : {\r\n                this.channels.loadTrack(diff.channel, diff.currentValue);\r\n                break;\r\n            }\r\n\r\n            case STATUS.BPM_AND_OFFSET_READY : {\r\n                this.channels.createBars(diff.channel, diff.currentValue);\r\n                break;\r\n            }\r\n            \r\n            case STATUS.TOGGLE_PLAY : {\r\n                this.channels.togglePlay(diff.channel, diff.currentValue);\r\n                break;\r\n            }\r\n            case STATUS.TOGGLE_CUE : {\r\n                this.channels.toggleCue(diff.channel, diff.currentValue)\r\n                break;\r\n            }\r\n            case STATUS.PITCH_CHANGE : {\r\n                this.channels.adjustPitch(diff.channel, diff.currentValue)\r\n                break;\r\n            }\r\n            case STATUS.GAIN_CHANGE : {\r\n                this.mixer.setGain(diff.channel, diff.currentValue);\r\n                break;\r\n            }\r\n            case STATUS.EQ_LOW_CHANGE : {\r\n                this.mixer.setEqLow(diff.channel, diff.currentValue);\r\n                break;\r\n            }\r\n            case STATUS.EQ_MID_CHANGE : {\r\n                this.mixer.setEqMid(diff.channel, diff.currentValue);\r\n                break;\r\n            }\r\n            case STATUS.EQ_HI_CHANGE : {\r\n                this.mixer.setEqHigh(diff.channel, diff.currentValue);\r\n                break;\r\n            }\r\n            case STATUS.FADER_CHANGE : {\r\n                this.mixer.setFader(diff.currentValue);\r\n                break;\r\n            }\r\n\r\n            case STATUS.SYNC_ACTIVATE : {\r\n                this.channels.sync(diff.channel);\r\n                break;\r\n            }\r\n\r\n            case STATUS.LOOP_CHANGE : {\r\n                if(diff.currentValue.state){\r\n                    this.channels.makeLoop(diff.channel, diff.currentValue);\r\n                } else {\r\n                    this.channels.endLoop(diff.channel);\r\n                }\r\n                break;\r\n            }\r\n\r\n            case STATUS.LOOP_LENGTH_CHANGE : {\r\n                this.channels.updateLoop(diff.channel, diff.currentValue);\r\n                break;\r\n            }\r\n\r\n            default : return; \r\n        }\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}