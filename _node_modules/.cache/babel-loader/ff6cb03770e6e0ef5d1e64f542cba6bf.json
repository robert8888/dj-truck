{"ast":null,"code":"import store from \"./../../../store/\";\nimport ChannelBuilder from \"./channelBuilder/channelBuilder\";\nimport Synchronizer from \"./sync/synchronizer\";\nimport getApi from \"./../../../apis/apiProvider\";\nimport { setCuePoint, setChannelReady, setTimeLeft } from \"./../../../actions\";\nimport Looper from \"./looper/looper\";\nexport default class Channels {\n  constructor() {\n    this.channelBuilder = new ChannelBuilder();\n    this.synchronizer = new Synchronizer(this);\n    this.looper = new Looper();\n    this.dispatch = store.dispatch;\n    this.channels = {\n      A: null,\n      B: null\n    };\n    this.stdDivceDiff = {};\n  }\n\n  getChannelNames() {\n    return Object.keys(this.channels);\n  }\n\n  setChannel(channelName, player) {\n    this.channels[channelName] = player;\n  }\n\n  createChannel(channelName, ...args) {\n    this.channels[channelName] = this.channelBuilder.create(channelName, ...args);\n  }\n\n  createBars(channelName, values) {\n    console.log(channelName, this.getFullChannel(channelName));\n    this.channelBuilder.createBars(this.getFullChannel(channelName), values);\n  }\n\n  getChannel(channelName) {\n    return this.channels[channelName].master;\n  }\n\n  getFullChannel(channelName) {\n    return this.channels[channelName];\n  }\n\n  getChannelInterface(channelName) {\n    return {\n      getSyncBarPosition: () => this.synchronizer.getSyncBarPostion.call(this.synchronizer, channelName)\n    };\n  } //--------------------------------------------\n\n\n  loadTrack(channelName, track) {\n    let api = getApi(track.source);\n    let url = api && api.getUrl(track.id) || null;\n    this.dispatch(setChannelReady(false, channelName));\n    let channel = this.getChannel(channelName);\n\n    if (channel.loadWithEvent) {\n      channel.loadWithEvent(url);\n      console.log(\"loading\", channel);\n    } else {\n      channel.load(url);\n    }\n  }\n\n  togglePlay(channelName, currentValue) {\n    if (currentValue) {\n      this.getChannel(channelName).pause();\n    } else {\n      this.getChannel(channelName).play();\n    }\n  }\n\n  toggleCue(channelName, currentValue) {\n    const player = this.getChannel(channelName);\n    const isPaused = store.getState().console.channel[channelName].playBackState.paused;\n\n    if (!currentValue && isPaused) {\n      // back to cue point and pause\n      let cuePoint = store.getState().console.channel[channelName].playBackState.cuePoint; //in seconds\n      //seek to\n\n      player.pause();\n      player.backend.seekTo(cuePoint);\n      player.drawer.progress(cuePoint / player.getDuration());\n      player.drawer.recenter(cuePoint / player.getDuration());\n    } else if (!currentValue) {\n      //Cancel cue and play\n      if (!player.isPlaying()) {\n        player.play();\n      }\n    } else {\n      const cuePoint = this.getChannel(channelName).getCurrentTime();\n      this.getChannel(channelName).play();\n      this.dispatch(setCuePoint(channelName, cuePoint)); // in float seconds\n    }\n  }\n\n  adjustPitch(channelName, currentValue) {\n    this.getChannel(channelName).setPlaybackRate(1 + currentValue / 100);\n  }\n\n  sync(channelName) {\n    this.synchronizer.sync(channelName);\n  }\n\n  makeLoop(channelName, {\n    loopLength\n  }) {\n    this.looper.makeLoop(this.getChannel(channelName), loopLength);\n  }\n\n  endLoop(channelName) {\n    this.looper.endLoop(this.getChannel(channelName));\n  }\n\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/core/console/channels/channels.js"],"names":["store","ChannelBuilder","Synchronizer","getApi","setCuePoint","setChannelReady","setTimeLeft","Looper","Channels","constructor","channelBuilder","synchronizer","looper","dispatch","channels","A","B","stdDivceDiff","getChannelNames","Object","keys","setChannel","channelName","player","createChannel","args","create","createBars","values","console","log","getFullChannel","getChannel","master","getChannelInterface","getSyncBarPosition","getSyncBarPostion","call","loadTrack","track","api","source","url","getUrl","id","channel","loadWithEvent","load","togglePlay","currentValue","pause","play","toggleCue","isPaused","getState","playBackState","paused","cuePoint","backend","seekTo","drawer","progress","getDuration","recenter","isPlaying","getCurrentTime","adjustPitch","setPlaybackRate","sync","makeLoop","loopLength","endLoop"],"mappings":"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","sourcesContent":["import store from \"./../../../store/\";\r\nimport ChannelBuilder from \"./channelBuilder/channelBuilder\";\r\nimport Synchronizer from \"./sync/synchronizer\";\r\nimport getApi from \"./../../../apis/apiProvider\";\r\nimport {setCuePoint, \r\n        setChannelReady, \r\n        setTimeLeft \r\n      } from \"./../../../actions\";\r\nimport Looper from \"./looper/looper\";\r\n\r\n\r\nexport default class Channels {\r\n  constructor() {\r\n    this.channelBuilder = new ChannelBuilder();\r\n    this.synchronizer = new Synchronizer(this);\r\n    this.looper = new Looper();\r\n    this.dispatch = store.dispatch;\r\n    this.channels = {\r\n      A: null,\r\n      B: null\r\n    };\r\n\r\n    this.stdDivceDiff = {};\r\n  }\r\n\r\n  getChannelNames() {\r\n    return Object.keys(this.channels);\r\n  }\r\n\r\n  setChannel(channelName, player) {\r\n    this.channels[channelName] = player;\r\n  }\r\n\r\n  createChannel( channelName, ...args ){\r\n    this.channels[channelName] = \r\n      this.channelBuilder.create( channelName, ...args); \r\n  }\r\n\r\n  createBars( channelName, values ){\r\n    console.log(channelName, this.getFullChannel(channelName))\r\n    this.channelBuilder.createBars( this.getFullChannel(channelName), values);\r\n  }\r\n\r\n  getChannel(channelName) {\r\n    return this.channels[channelName].master;\r\n  }\r\n\r\n  getFullChannel(channelName){\r\n    return this.channels[channelName];\r\n  }\r\n\r\n  getChannelInterface(channelName) {\r\n    return {\r\n      getSyncBarPosition: () => \r\n        this.synchronizer.getSyncBarPostion.call(this.synchronizer,channelName)\r\n    };\r\n  }\r\n\r\n  //--------------------------------------------\r\n\r\n  loadTrack(channelName, track) {\r\n    let api = getApi(track.source);\r\n    let url = (api && api.getUrl(track.id)) || null;\r\n\r\n    this.dispatch(setChannelReady(false, channelName));\r\n\r\n    let channel = this.getChannel(channelName);\r\n\r\n    if (channel.loadWithEvent) {\r\n      channel.loadWithEvent(url);\r\n      console.log(\"loading\", channel)\r\n    } else {\r\n      channel.load(url);\r\n    }\r\n  }\r\n\r\n\r\n\r\n  togglePlay(channelName, currentValue) {\r\n    if (currentValue) {\r\n      this.getChannel(channelName).pause();\r\n    } else {\r\n      this.getChannel(channelName).play();\r\n    }\r\n  }\r\n\r\n  toggleCue(channelName, currentValue) {\r\n    const player = this.getChannel(channelName);\r\n    const isPaused = store.getState().console.channel[channelName]\r\n                    .playBackState.paused;\r\n    if (!currentValue && isPaused) {\r\n      // back to cue point and pause\r\n      let cuePoint = store.getState().console.channel[channelName]\r\n                    .playBackState.cuePoint; //in seconds\r\n      //seek to\r\n      player.pause();\r\n      player.backend.seekTo(cuePoint);\r\n      player.drawer.progress(cuePoint / player.getDuration());\r\n      player.drawer.recenter(cuePoint / player.getDuration());\r\n    } else if (!currentValue) {\r\n      //Cancel cue and play\r\n      if (!player.isPlaying()) {\r\n        player.play();\r\n      }\r\n    } else {\r\n      const cuePoint = this.getChannel(channelName).getCurrentTime();\r\n      this.getChannel(channelName).play();\r\n      this.dispatch(setCuePoint(channelName, cuePoint)); // in float seconds\r\n    }\r\n  }\r\n\r\n  adjustPitch(channelName, currentValue) {\r\n    this.getChannel(channelName).setPlaybackRate(1 + currentValue / 100);\r\n  }\r\n\r\n  sync(channelName){\r\n    this.synchronizer.sync(channelName);\r\n  }\r\n\r\n  makeLoop(channelName, {loopLength}){\r\n    this.looper.makeLoop(this.getChannel(channelName), loopLength)\r\n  }\r\n\r\n  endLoop(channelName){\r\n    this.looper.endLoop(this.getChannel(channelName));\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}