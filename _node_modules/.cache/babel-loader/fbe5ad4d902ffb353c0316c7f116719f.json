{"ast":null,"code":"import { analyze, guess } from 'web-audio-beat-detector';\nexport default function calcBpm(url) {\n  //audioContext.decodeAudioData(arrayBuffer, (audioBuffer) =\n  return fetch(url).then(response => response.arrayBuffer())\n  /*    .then(blop => { console.log(typeof blop)\r\n              return new Promise( resolve => {\r\n              const fr = new FileReader();\r\n              fr.onload = () => {\r\n                  const arrayBuffer = fr.result as ArrayBuffer;\r\n                  resolve()\r\n              }\r\n              fr.readAsArrayBuffer(blop);\r\n          })\r\n      })*/\n  .then(arrayBuffer => {\n    console.log(typeof arrayBuffer);\n    const audioCtx = new AudioContext();\n    return audioCtx.decodeAudioData(arrayBuffer);\n  }).then(audioBuffer => analyze(audioBuffer)).then(bpm => bpm);\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/utils/bpm/analyzer.js"],"names":["analyze","guess","calcBpm","url","fetch","then","response","arrayBuffer","console","log","audioCtx","AudioContext","decodeAudioData","audioBuffer","bpm"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,KAAlB,QAA+B,yBAA/B;AAGA,eAAe,SAASC,OAAT,CAAiBC,GAAjB,EAAqB;AAChC;AACA,SAAOC,KAAK,CAACD,GAAD,CAAL,CACNE,IADM,CACDC,QAAQ,IAAIA,QAAQ,CAACC,WAAT,EADX;AAEX;;;;;;;;;;AAFW,GAYNF,IAZM,CAYDE,WAAW,IAAI;AACjBC,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAOF,WAAnB;AACA,UAAMG,QAAQ,GAAG,IAAIC,YAAJ,EAAjB;AACA,WAAOD,QAAQ,CAACE,eAAT,CAAyBL,WAAzB,CAAP;AACH,GAhBM,EAgBJF,IAhBI,CAgBEQ,WAAW,IAAIb,OAAO,CAACa,WAAD,CAhBxB,EAiBNR,IAjBM,CAiBDS,GAAG,IAAIA,GAjBN,CAAP;AAkBH","sourcesContent":["import { analyze, guess } from 'web-audio-beat-detector';\r\n\r\n\r\nexport default function calcBpm(url){\r\n    //audioContext.decodeAudioData(arrayBuffer, (audioBuffer) =\r\n    return fetch(url)\r\n    .then(response => response.arrayBuffer())\r\n/*    .then(blop => { console.log(typeof blop)\r\n            return new Promise( resolve => {\r\n            const fr = new FileReader();\r\n            fr.onload = () => {\r\n                const arrayBuffer = fr.result as ArrayBuffer;\r\n                resolve()\r\n            }\r\n            fr.readAsArrayBuffer(blop);\r\n        })\r\n    })*/\r\n    .then(arrayBuffer => {\r\n        console.log(typeof arrayBuffer)\r\n        const audioCtx = new AudioContext();\r\n        return audioCtx.decodeAudioData(arrayBuffer);\r\n    }).then( audioBuffer => analyze(audioBuffer))\r\n    .then(bpm => bpm)\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}