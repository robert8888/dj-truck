{"ast":null,"code":"import _regeneratorRuntime from\"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\node_modules\\\\@babel\\\\runtime/regenerator\";var _marked=/*#__PURE__*/_regeneratorRuntime.mark(watcher),_marked2=/*#__PURE__*/_regeneratorRuntime.mark(handle);import{hideLoading,showLoading}from'react-redux-loading-bar';import{put,select,takeEvery}from'redux-saga/effects';import{ACTIONS,pushLog,setProfilePicutre}from\"../../actions\";import{getApi}from\"./../../apis/apiProvider\";import{Log}from\"./../../utils/logger/logger\";import errorParser from\"./../../utils/serverErrorParser/errorParser\";export default function watcher(){return _regeneratorRuntime.wrap(function watcher$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return takeEvery(ACTIONS.U_REQ_UPDATE_PICTURE,handle);case 2:case\"end\":return _context.stop();}}},_marked);}var getToken=function getToken(state){return state.user.token;};var userId=function userId(state){return state.user.dbId;};function handle(action){var path,token,_response$data,_getApi,callQueryUploadSingle,queries,query,variables,response,status,id;return _regeneratorRuntime.wrap(function handle$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:path=[\"Saga\",\"Request updated picture\"];_context2.next=3;return select(getToken);case 3:token=_context2.sent;_context2.prev=4;_context2.next=7;return put(showLoading());case 7:_getApi=getApi(\"UserAssets\"),callQueryUploadSingle=_getApi.callQueryUploadSingle,queries=_getApi.queries;query=queries.updateUserPictureQl;variables={file:action.file};_context2.next=12;return callQueryUploadSingle(query,token,variables);case 12:response=_context2.sent;status=response===null||response===void 0?void 0:(_response$data=response.data)===null||_response$data===void 0?void 0:_response$data.updateMyPicture;if(!response.errors){_context2.next=16;break;}throw new Error(\"Can't update picture in database: \"+errorParser(response.errors));case 16:if(status){_context2.next=18;break;}throw new Error(\"Can't read status object from server response\");case 18:if(status===null||status===void 0?void 0:status.success){_context2.next=20;break;}throw new Error(\"Operation of updateing user picture fail. \"+status.message);case 20:_context2.next=22;return select(userId);case 22:id=_context2.sent;_context2.next=25;return put(setProfilePicutre(id,status.data));case 25:_context2.next=27;return put(pushLog(new Log(\"User picture updated to : \"+action.picture,path)));case 27:_context2.next=33;break;case 29:_context2.prev=29;_context2.t0=_context2[\"catch\"](4);_context2.next=33;return put(pushLog(Log.Error(path,\"Update user picture fail \"+_context2.t0.message,\"Sorry. During process of updating picture occurred a problem\",_context2.t0)));case 33:_context2.prev=33;_context2.next=36;return put(hideLoading());case 36:return _context2.finish(33);case 37:case\"end\":return _context2.stop();}}},_marked2,null,[[4,29,33,37]]);}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/sagas/user/reqUpdatePicture.js"],"names":["watcher","handle","hideLoading","showLoading","put","select","takeEvery","ACTIONS","pushLog","setProfilePicutre","getApi","Log","errorParser","U_REQ_UPDATE_PICTURE","getToken","state","user","token","userId","dbId","action","path","callQueryUploadSingle","queries","query","updateUserPictureQl","variables","file","response","status","data","updateMyPicture","errors","Error","success","message","id","picture"],"mappings":"2JAOyBA,O,iDAOfC,M,EAdV,OAASC,WAAT,CAAsBC,WAAtB,KAAyC,yBAAzC,CACA,OAASC,GAAT,CAAcC,MAAd,CAAsBC,SAAtB,KAAuC,oBAAvC,CACA,OAASC,OAAT,CAAkBC,OAAlB,CAA2BC,iBAA3B,KAAoD,eAApD,CACA,OAASC,MAAT,KAAuB,0BAAvB,CACA,OAASC,GAAT,KAAoB,6BAApB,CACA,MAAOC,CAAAA,WAAP,KAAwB,6CAAxB,CAEA,cAAe,SAAUZ,CAAAA,OAAV,mIACX,MAAMM,CAAAA,SAAS,CAACC,OAAO,CAACM,oBAAT,CAA+BZ,MAA/B,CAAf,CADW,sDAIf,GAAMa,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAAAC,KAAK,QAAIA,CAAAA,KAAK,CAACC,IAAN,CAAWC,KAAf,EAAtB,CACA,GAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,CAAAH,KAAK,QAAIA,CAAAA,KAAK,CAACC,IAAN,CAAWG,IAAf,EAApB,CAEA,QAAUlB,CAAAA,MAAV,CAAiBmB,MAAjB,2NACUC,IADV,CACiB,CAAC,MAAD,CAAS,yBAAT,CADjB,kBAEkB,MAAMhB,CAAAA,MAAM,CAACS,QAAD,CAAZ,CAFlB,OAEUG,KAFV,kDAKQ,MAAMb,CAAAA,GAAG,CAACD,WAAW,EAAZ,CAAT,CALR,eAMmDO,MAAM,CAAC,YAAD,CANzD,CAMgBY,qBANhB,SAMgBA,qBANhB,CAMuCC,OANvC,SAMuCA,OANvC,CAQcC,KARd,CAQsBD,OAAO,CAACE,mBAR9B,CAScC,SATd,CAS0B,CAAEC,IAAI,CAAEP,MAAM,CAACO,IAAf,CAT1B,mBAUyB,MAAML,CAAAA,qBAAqB,CAACE,KAAD,CAAQP,KAAR,CAAeS,SAAf,CAA3B,CAVzB,QAUcE,QAVd,gBAYcC,MAZd,CAYuBD,QAZvB,SAYuBA,QAZvB,iCAYuBA,QAAQ,CAAEE,IAZjC,yCAYuB,eAAgBC,eAZvC,KAcYH,QAAQ,CAACI,MAdrB,gCAekB,IAAIC,CAAAA,KAAJ,CAAU,qCAAuCrB,WAAW,CAACgB,QAAQ,CAACI,MAAV,CAA5D,CAflB,YAkBaH,MAlBb,gCAmBkB,IAAII,CAAAA,KAAJ,CAAU,+CAAV,CAnBlB,YAsBaJ,MAtBb,SAsBaA,MAtBb,iBAsBaA,MAAM,CAAEK,OAtBrB,gCAuBkB,IAAID,CAAAA,KAAJ,CAAU,6CAA+CJ,MAAM,CAACM,OAAhE,CAvBlB,2BA0BmB,MAAM9B,CAAAA,MAAM,CAACa,MAAD,CAAZ,CA1BnB,QA0BckB,EA1Bd,kCA2BQ,MAAMhC,CAAAA,GAAG,CAACK,iBAAiB,CAAC2B,EAAD,CAAKP,MAAM,CAACC,IAAZ,CAAlB,CAAT,CA3BR,0BA6BQ,MAAM1B,CAAAA,GAAG,CAACI,OAAO,CAAC,GAAIG,CAAAA,GAAJ,CAAQ,6BAA+BS,MAAM,CAACiB,OAA9C,CAAuDhB,IAAvD,CAAD,CAAR,CAAT,CA7BR,+GA+BQ,MAAMjB,CAAAA,GAAG,CAACI,OAAO,CAACG,GAAG,CAACsB,KAAJ,CACdZ,IADc,CAEd,4BAA8B,aAAMc,OAFtB,CAGd,8DAHc,cAAD,CAAR,CAAT,CA/BR,4CAsCQ,MAAM/B,CAAAA,GAAG,CAACF,WAAW,EAAZ,CAAT,CAtCR","sourcesContent":["import { hideLoading, showLoading } from 'react-redux-loading-bar';\r\nimport { put, select, takeEvery } from 'redux-saga/effects';\r\nimport { ACTIONS, pushLog, setProfilePicutre } from \"../../actions\";\r\nimport { getApi } from \"./../../apis/apiProvider\";\r\nimport { Log } from \"./../../utils/logger/logger\";\r\nimport errorParser from \"./../../utils/serverErrorParser/errorParser\";\r\n\r\nexport default function* watcher() {\r\n    yield takeEvery(ACTIONS.U_REQ_UPDATE_PICTURE, handle);\r\n}\r\n\r\nconst getToken = state => state.user.token\r\nconst userId = state => state.user.dbId\r\n\r\nfunction* handle(action) {\r\n    const path = [\"Saga\", \"Request updated picture\"]\r\n    const token = yield select(getToken);\r\n\r\n    try {\r\n        yield put(showLoading());\r\n        const { callQueryUploadSingle, queries } = getApi(\"UserAssets\");\r\n\r\n        const query = queries.updateUserPictureQl;\r\n        const variables = { file: action.file };\r\n        const response = yield callQueryUploadSingle(query, token, variables);\r\n\r\n        const status = response?.data?.updateMyPicture;\r\n\r\n        if (response.errors) {\r\n            throw new Error(\"Can't update picture in database: \" + errorParser(response.errors))\r\n        }\r\n\r\n        if (!status) {\r\n            throw new Error(\"Can't read status object from server response\")\r\n        }\r\n\r\n        if (!status?.success) {\r\n            throw new Error(\"Operation of updateing user picture fail. \" + status.message)\r\n        }\r\n\r\n        const id = yield select(userId);\r\n        yield put(setProfilePicutre(id, status.data));\r\n\r\n        yield put(pushLog(new Log(\"User picture updated to : \" + action.picture, path)));\r\n    } catch (error) {\r\n        yield put(pushLog(Log.Error(\r\n            path,\r\n            \"Update user picture fail \" + error.message,\r\n            \"Sorry. During process of updating picture occurred a problem\",\r\n            error\r\n        )))\r\n    } finally {\r\n        yield put(hideLoading())\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}