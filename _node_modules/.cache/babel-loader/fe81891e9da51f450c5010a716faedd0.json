{"ast":null,"code":"import store from \"./../../../../../store\";\nimport { setAvailableEffects } from \"./../../../../../actions\"; //import { throttel } from \"./../../../../../utils/functions/lodash\";\n\nimport Reverb from \"./effects/reverb/reverb\";\nimport Delay from \"./effects/delay/delay\";\nexport default class Effector {\n  constructor(audioContext) {\n    this.config = store.getState().configuration.effector;\n    this.mainAC = audioContext;\n    this.channels = new Array(this.config.channels).fill(null).map(() => Object.create(null));\n    this.effects = {\n      \"reverb\": {\n        create: Reverb,\n        params: Reverb.defaultParams().params\n      },\n      \"delay\": {\n        create: Delay,\n        params: Delay.defaultParams().params\n      }\n    };\n    const exportEffects = {};\n    Object.entries(this.effects).forEach(([key, element]) => exportEffects[key] = element.params);\n    store.dispatch(setAvailableEffects(exportEffects));\n  }\n\n  connect(inputs) {\n    const outputs = inputs.map(() => this.mainAC.createGain());\n    inputs.forEach((inputNode, channelNumber) => {\n      const dryNode = this.mainAC.createGain();\n      const wetNode = this.mainAC.createGain(); //  inputNode.connect(dryNode);\n\n      dryNode.connect(outputs[channelNumber]);\n      wetNode.connect(outputs[channelNumber]);\n      this.channels[channelNumber].inputNode = inputNode;\n      this.channels[channelNumber].dryNode = dryNode;\n      this.channels[channelNumber].wetNode = wetNode;\n      this.channels[channelNumber].outputNode = outputs[channelNumber];\n    });\n    return outputs;\n  }\n\n  setDryWet(channelNumber, value) {\n    channelNumber--;\n    console.log(\"set dry wet\", channelNumber + \" val:\", value);\n    const channel = this.channels[channelNumber];\n    channel.dryNode.gain.setTargetAtTime(0, this.mainAC.currentTime, 0.01);\n  }\n\n  setEffect(channelNumber, effectName) {\n    channelNumber--; //array index\n\n    const channel = this.channels[channelNumber];\n\n    if (effectName) {\n      let params = this.assingDefaultParams({}, effectName);\n      console.log(params);\n      const effectorChannel = store.getState().effector.channels;\n\n      if (effectorChannel && effectorChannel[channelNumber]) {\n        params = { ...effectorChannel[channelNumber].effects[effectName]\n        };\n      } //const effect = new this.effects[effectName].create(this.mainAC, params);\n      //this.channels[channelNumber].currentEffect = effect;\n\n\n      console.log(\"connecting\", channelNumber, channel);\n      channel.inputNode.connect(channel.dryNode); //effect.connect(channel.inputNode, channel.wetNode)\n    } else {} //remove effect\n      //  const params = {...channelEffects[effect]};\n      //  console.log(params);\n      //\n\n  }\n\n  assingDefaultParams(obj, effect) {\n    Object.entries(this.effects[effect].params).forEach(([key, value]) => {\n      obj[key] = value.defaultValue;\n    });\n    return obj;\n  }\n\n  setParam(channelNumber, effect, param) {\n    //console.log(\"set param : \"+ channelNumber, \"effect: \" + effect, \" pram: \" + JSON.stringify(param));\n    channelNumber--;\n    const channel = this.channels[channelNumber];\n\n    if (channel.currentEffect && channel.currentEffect.name === effect) {\n      Object.entries(param).forEach(([key, value]) => {\n        channel.currentEffect[key] = value;\n      });\n    }\n  }\n\n  disconectCurrent(channel) {\n    if (!channel.currentEffect) {\n      channel.inputNode.disconect();\n      channel.inputNode.connect(channel.dryNode);\n      channel.currentEffect.disconect();\n      channel.currentEffect = null;\n    }\n  }\n\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/pages/app/core/console/effector/effector.js"],"names":["store","setAvailableEffects","Reverb","Delay","Effector","constructor","audioContext","config","getState","configuration","effector","mainAC","channels","Array","fill","map","Object","create","effects","params","defaultParams","exportEffects","entries","forEach","key","element","dispatch","connect","inputs","outputs","createGain","inputNode","channelNumber","dryNode","wetNode","outputNode","setDryWet","value","console","log","channel","gain","setTargetAtTime","currentTime","setEffect","effectName","assingDefaultParams","effectorChannel","obj","effect","defaultValue","setParam","param","currentEffect","name","disconectCurrent","disconect"],"mappings":"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","sourcesContent":["\r\nimport store from \"./../../../../../store\";\r\nimport { setAvailableEffects } from \"./../../../../../actions\";\r\n//import { throttel } from \"./../../../../../utils/functions/lodash\";\r\nimport Reverb from \"./effects/reverb/reverb\";\r\nimport Delay from \"./effects/delay/delay\";\r\n\r\n\r\n\r\nexport default class Effector {\r\n    constructor(audioContext) {\r\n        this.config = store.getState().configuration.effector;\r\n        this.mainAC = audioContext;\r\n\r\n        this.channels = new Array(this.config.channels)\r\n                         .fill(null).map(() => Object.create(null));\r\n        \r\n        this.effects = {\r\n            \"reverb\": {\r\n                create: Reverb,\r\n                params: Reverb.defaultParams().params,\r\n            },\r\n            \"delay\": {\r\n                create: Delay,\r\n                params: Delay.defaultParams().params\r\n            }\r\n        }\r\n\r\n        const exportEffects = {};\r\n        Object.entries(this.effects).forEach(([key, element]) =>\r\n                exportEffects[key] = element.params\r\n            );\r\n        store.dispatch(setAvailableEffects(exportEffects));\r\n    }\r\n\r\n    connect(inputs) {\r\n        const outputs = inputs.map(() => this.mainAC.createGain())\r\n\r\n        inputs.forEach((inputNode, channelNumber) => {\r\n            const dryNode = this.mainAC.createGain();\r\n            const wetNode = this.mainAC.createGain();\r\n            \r\n          //  inputNode.connect(dryNode);\r\n            dryNode.connect(outputs[channelNumber]);\r\n            wetNode.connect(outputs[channelNumber]);\r\n\r\n            this.channels[channelNumber].inputNode = inputNode;\r\n            this.channels[channelNumber].dryNode = dryNode;\r\n            this.channels[channelNumber].wetNode = wetNode;\r\n            this.channels[channelNumber].outputNode = outputs[channelNumber];\r\n\r\n\r\n        });\r\n\r\n        return outputs;\r\n    }\r\n\r\n\r\n    setDryWet(channelNumber, value){\r\n        channelNumber--;\r\n        console.log(\"set dry wet\", channelNumber + \" val:\", value);\r\n        const channel = this.channels[channelNumber];\r\n        channel.dryNode.gain.setTargetAtTime(0, this.mainAC.currentTime, 0.01);\r\n    }\r\n       \r\n    setEffect(channelNumber, effectName){ \r\n        channelNumber--;//array index\r\n        const channel = this.channels[channelNumber];\r\n\r\n        if(effectName){\r\n            let params = this.assingDefaultParams({}, effectName);\r\n            console.log(params)\r\n            const effectorChannel =  store.getState().effector.channels;\r\n\r\n            if(effectorChannel && effectorChannel[channelNumber]){\r\n                params = {...effectorChannel[channelNumber].effects[effectName]}\r\n            }\r\n\r\n            //const effect = new this.effects[effectName].create(this.mainAC, params);\r\n\r\n            //this.channels[channelNumber].currentEffect = effect;\r\n            console.log(\"connecting\",channelNumber,  channel)\r\n            channel.inputNode.connect(channel.dryNode)\r\n\r\n            //effect.connect(channel.inputNode, channel.wetNode)\r\n\r\n        } else {\r\n            //remove effect\r\n        }\r\n\r\n      //  const params = {...channelEffects[effect]};\r\n      //  console.log(params);\r\n        //\r\n    }\r\n\r\n    assingDefaultParams(obj, effect){\r\n        Object.entries(this.effects[effect].params).forEach(([key, value])=>{\r\n            obj[key] = value.defaultValue;\r\n        })\r\n        return obj;\r\n    }\r\n\r\n    setParam(channelNumber, effect, param){\r\n        //console.log(\"set param : \"+ channelNumber, \"effect: \" + effect, \" pram: \" + JSON.stringify(param));\r\n        channelNumber--;\r\n        const channel = this.channels[channelNumber];\r\n        if(channel.currentEffect && channel.currentEffect.name === effect){\r\n            Object.entries(param).forEach(([key, value])=>{\r\n                channel.currentEffect[key] = value;\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    disconectCurrent(channel){\r\n        if(!channel.currentEffect){\r\n            channel.inputNode.disconect();\r\n            channel.inputNode.connect(channel.dryNode);\r\n            channel.currentEffect.disconect();\r\n            channel.currentEffect = null;\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}