{"ast":null,"code":"import { get } from \"lodash/object\";\nimport { hideLoading, showLoading } from 'react-redux-loading-bar';\nimport { call, put, select, takeEvery } from \"redux-saga/effects\";\nimport UUID from \"uuidjs\";\nimport { ACTIONS, createDir, pushLog } from \"../../actions\";\nimport { getApi } from \"./../../apis/apiProvider\";\nimport { findClosesDir, generateTemplateName as generateName } from \"./../../reducers/console/playlist/utils\";\nimport { Log } from \"./../../utils/logger/logger\";\nimport { handle as readDirSagaHandle } from \"./reqReadDirSaga\";\nexport default function* createDirRequestSaga() {\n  yield takeEvery(ACTIONS.PL_CREATE_DIR_REQEST, callApi);\n}\n\nconst getToken = state => state.user.token;\n\nconst getCurrentSelection = state => state.playList.currentSelection;\n\nconst getParentPath = (state, currentSelection) => findClosesDir(state, currentSelection);\n\nconst generateDirName = (state, parrentPath, base) => generateName(state.playList, parrentPath, base);\n\nconst getParrentId = (state, path) => get(state.playList, path);\n\nfunction* callApi(action) {\n  const path = ['saga', 'playlist', 'request created dir'];\n  const token = yield select(getToken);\n  let renameMode = false;\n\n  if (!token) {\n    if (!action.name) {\n      renameMode = true;\n    }\n\n    return yield put(createDir(action.name), UUID.genV1().toString(), renameMode);\n  }\n\n  try {\n    var _response$data;\n\n    yield put(showLoading());\n    const {\n      callQuery,\n      queries\n    } = getApi(\"UserAssets\");\n    const currentSelection = yield select(getCurrentSelection);\n    const parrentPath = yield select(getParentPath, currentSelection);\n    let dirName;\n\n    if (!action.name) {\n      dirName = yield select(generateDirName, parrentPath, \"New folder\");\n      renameMode = true;\n    } else {\n      dirName = yield select(generateDirName, parrentPath, action.name);\n    }\n\n    const parrent = yield select(getParrentId, parrentPath);\n\n    if (!parrent._loaded) {\n      yield call(readDirSagaHandle, {\n        path: parrentPath\n      });\n    }\n\n    let response = yield callQuery(queries.createDirQl(parrent._id, dirName), token);\n\n    if (response.errors || !((_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.createDir)) {\n      throw new Error(\"Can't create dir\", JSON.stringify(response.errors));\n    }\n\n    const id = response.data.createDir.id;\n    yield put(createDir(dirName, id, renameMode));\n    yield put(pushLog(new Log(`Creating dir in database successful id: ${id}`, path)));\n  } catch (error) {\n    yield put(pushLog(Log.Error(path, \"Can't create dir in database\" + error.message, \"Sorry. During process creating dir occurred a problem\", error)));\n  } finally {\n    yield put(hideLoading());\n  }\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/sagas/playlists/reqCreateDirSaga.js"],"names":["get","hideLoading","showLoading","call","put","select","takeEvery","UUID","ACTIONS","createDir","pushLog","getApi","findClosesDir","generateTemplateName","generateName","Log","handle","readDirSagaHandle","createDirRequestSaga","PL_CREATE_DIR_REQEST","callApi","getToken","state","user","token","getCurrentSelection","playList","currentSelection","getParentPath","generateDirName","parrentPath","base","getParrentId","path","action","renameMode","name","genV1","toString","callQuery","queries","dirName","parrent","_loaded","response","createDirQl","_id","errors","data","Error","JSON","stringify","id","error","message"],"mappings":"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","sourcesContent":["import { get } from \"lodash/object\";\r\nimport { hideLoading, showLoading } from 'react-redux-loading-bar';\r\nimport { call, put, select, takeEvery } from \"redux-saga/effects\";\r\nimport UUID from \"uuidjs\";\r\nimport { ACTIONS, createDir, pushLog } from \"../../actions\";\r\nimport { getApi } from \"./../../apis/apiProvider\";\r\nimport { findClosesDir, generateTemplateName as generateName } from \"./../../reducers/console/playlist/utils\";\r\nimport { Log } from \"./../../utils/logger/logger\";\r\nimport { handle as readDirSagaHandle } from \"./reqReadDirSaga\";\r\n\r\nexport default function* createDirRequestSaga() {\r\n    yield takeEvery(ACTIONS.PL_CREATE_DIR_REQEST, callApi)\r\n}\r\n\r\nconst getToken = state => state.user.token;\r\n\r\nconst getCurrentSelection = state => state.playList.currentSelection;\r\n\r\nconst getParentPath = (state, currentSelection) =>\r\n    findClosesDir(state, currentSelection)\r\n\r\nconst generateDirName = (state, parrentPath, base) =>\r\n    generateName(state.playList, parrentPath, base);\r\n\r\nconst getParrentId = (state, path) => get(state.playList, path);\r\n\r\nfunction* callApi(action) {\r\n    const path = ['saga', 'playlist', 'request created dir'];\r\n\r\n    const token = yield select(getToken);\r\n    let renameMode = false;\r\n    if (!token) {\r\n        if (!action.name) {\r\n            renameMode = true;\r\n        }\r\n        return yield put(createDir(action.name), UUID.genV1().toString(), renameMode);\r\n    }\r\n    try {\r\n        yield put(showLoading());\r\n        const { callQuery, queries } = getApi(\"UserAssets\");\r\n        const currentSelection = yield select(getCurrentSelection);\r\n        const parrentPath = yield select(getParentPath, currentSelection);\r\n\r\n        let dirName;\r\n        if (!action.name) {\r\n            dirName = yield select(generateDirName, parrentPath, \"New folder\");\r\n            renameMode = true;\r\n        } else {\r\n            dirName = yield select(generateDirName, parrentPath, action.name);\r\n        }\r\n\r\n        const parrent = yield select(getParrentId, parrentPath);\r\n        if (!parrent._loaded) {\r\n            yield call(readDirSagaHandle, { path: parrentPath })\r\n        }\r\n\r\n        let response = yield callQuery(queries.createDirQl(parrent._id, dirName), token);\r\n\r\n        if (response.errors || !response.data?.createDir) {\r\n            throw new Error(\"Can't create dir\", JSON.stringify(response.errors))\r\n        }\r\n        const id = response.data.createDir.id;\r\n\r\n        yield put(createDir(dirName, id, renameMode));\r\n        \r\n        yield put(pushLog(new Log(`Creating dir in database successful id: ${id}`, path)))\r\n    } catch (error) {\r\n        yield put(pushLog(Log.Error(\r\n            path,\r\n            \"Can't create dir in database\" + error.message,\r\n            \"Sorry. During process creating dir occurred a problem\",\r\n            error\r\n        )))\r\n    } finally {\r\n        yield put(hideLoading())\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}