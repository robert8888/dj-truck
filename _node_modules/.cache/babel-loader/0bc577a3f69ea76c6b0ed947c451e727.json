{"ast":null,"code":"/**\r\n * Adapted from https://github.com/web-audio-components/simple-reverb\r\n */\nimport Effect from \"./../effect\";\nexport default class Reverb extends Effect {\n  static defaultParams() {\n    return {\n      params: {\n        seconds: {\n          min: 1,\n          max: 50,\n          defaultValue: 3,\n          type: \"float\"\n        },\n        decay: {\n          min: 0,\n          max: 100,\n          defaultValue: 2,\n          type: \"float\"\n        },\n        reverse: {\n          min: 0,\n          max: 1,\n          defaultValue: 0,\n          type: \"bool\"\n        }\n      }\n    };\n  }\n\n  constructor(context, opt = {}) {\n    this.input = context.createConvolver();\n    this.output = context.createConvolver();\n    this._context = context;\n    const defaultParams = Reverb.defaultParams().params;\n    this._seconds = opt.seconds || defaultParams.seconds.defaultValue;\n    this._decay = opt.decay || defaultParams.decay.defaultValue;\n    this._reverse = opt.reverse || defaultParams.reverse.defaultValue;\n\n    this._buildImpulse();\n  }\n\n  connect(dest) {\n    this.output.connect(dest);\n  }\n\n  disconnect() {\n    this.output.disconnect();\n  }\n\n  _buildImpulse() {\n    let rate = this._context.sampleRate,\n        length = rate * this.seconds,\n        decay = this.decay,\n        impulse = this._context.createBuffer(2, length, rate),\n        impulseL = impulse.getChannelData(0),\n        impulseR = impulse.getChannelData(1),\n        n,\n        i;\n\n    for (i = 0; i < length; i++) {\n      n = this.reverse ? length - i : i;\n      impulseL[i] = (Math.random() * 2 - 1) * Math.pow(1 - n / length, decay);\n      impulseR[i] = (Math.random() * 2 - 1) * Math.pow(1 - n / length, decay);\n    }\n\n    this.input.buffer = impulse;\n  }\n\n  get seconds() {\n    return this._seconds;\n  }\n\n  set seconds(value) {\n    let params = Reverb.defaultParams().params;\n    value = Math.min(params.seconds.min, value);\n    value = Math.max(params.seconds.max, value);\n    this._seconds = value;\n\n    this._buildImpulse();\n  }\n\n  get decay() {\n    return this._decay;\n  }\n\n  set decay(value) {\n    let params = Reverb.defaultParams().params;\n    value = Math.min(params.decay.min, value);\n    value = Math.max(params.decay.max, value);\n    this._decay = value;\n\n    this._buildImpulse();\n  }\n\n  get reverse() {\n    return this._reverse;\n  }\n\n  set reverss(value) {\n    this._reverse = value === 1 || value === \"true\";\n\n    this._buildImpulse();\n  }\n\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/pages/app/core/console/effector/effects/reverb/reverb.js"],"names":["Effect","Reverb","defaultParams","params","seconds","min","max","defaultValue","type","decay","reverse","constructor","context","opt","input","createConvolver","output","_context","_seconds","_decay","_reverse","_buildImpulse","connect","dest","disconnect","rate","sampleRate","length","impulse","createBuffer","impulseL","getChannelData","impulseR","n","i","Math","random","pow","buffer","value","reverss"],"mappings":"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","sourcesContent":["/**\r\n * Adapted from https://github.com/web-audio-components/simple-reverb\r\n */\r\nimport Effect from \"./../effect\";\r\n\r\nexport default class Reverb extends Effect {\r\n    static defaultParams() {\r\n        return {\r\n            params: {\r\n                seconds: {\r\n                    min: 1,\r\n                    max: 50,\r\n                    defaultValue: 3,\r\n                    type: \"float\"\r\n                },\r\n                decay: {\r\n                    min: 0,\r\n                    max: 100,\r\n                    defaultValue: 2,\r\n                    type: \"float\"\r\n                },\r\n                reverse: {\r\n                    min: 0,\r\n                    max: 1,\r\n                    defaultValue: 0,\r\n                    type: \"bool\"\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    constructor(context, opt = {}) {\r\n        this.input = context.createConvolver();\r\n        this.output = context.createConvolver();\r\n        this._context = context;\r\n\r\n        const defaultParams = Reverb.defaultParams().params;\r\n        this._seconds = opt.seconds || defaultParams.seconds.defaultValue;\r\n        this._decay = opt.decay || defaultParams.decay.defaultValue;\r\n        this._reverse = opt.reverse || defaultParams.reverse.defaultValue;\r\n\r\n        this._buildImpulse();\r\n    }\r\n\r\n    connect(dest) {\r\n        this.output.connect(dest);\r\n    }\r\n\r\n    disconnect() {\r\n        this.output.disconnect();\r\n    }\r\n\r\n    _buildImpulse() {\r\n        let rate = this._context.sampleRate,\r\n            length = rate * this.seconds,\r\n            decay = this.decay,\r\n            impulse = this._context.createBuffer(2, length, rate),\r\n            impulseL = impulse.getChannelData(0),\r\n            impulseR = impulse.getChannelData(1),\r\n            n,\r\n            i;\r\n\r\n        for (i = 0; i < length; i++) {\r\n            n = this.reverse ? length - i : i;\r\n            impulseL[i] = (Math.random() * 2 - 1) * Math.pow(1 - n / length, decay);\r\n            impulseR[i] = (Math.random() * 2 - 1) * Math.pow(1 - n / length, decay);\r\n        }\r\n\r\n        this.input.buffer = impulse;\r\n    }\r\n\r\n    get seconds() {\r\n        return this._seconds;\r\n    }\r\n\r\n    set seconds(value) {\r\n        let params = Reverb.defaultParams().params;\r\n        value = Math.min(params.seconds.min, value);\r\n        value = Math.max(params.seconds.max, value);\r\n        this._seconds = value;\r\n        this._buildImpulse();\r\n    }\r\n\r\n    get decay() {\r\n        return this._decay;\r\n    }\r\n\r\n    set decay(value) {\r\n        let params = Reverb.defaultParams().params;\r\n        value = Math.min(params.decay.min, value);\r\n        value = Math.max(params.decay.max, value);\r\n        this._decay = value;\r\n        this._buildImpulse();\r\n    }\r\n\r\n    get reverse() {\r\n        return this._reverse;\r\n    }\r\n\r\n    set reverss(value) {\r\n        this._reverse = (value === 1 || value === \"true\");\r\n        this._buildImpulse();\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}