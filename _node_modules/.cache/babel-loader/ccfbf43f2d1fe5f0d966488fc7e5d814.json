{"ast":null,"code":"import { createDir, ACTIONS, loadDirRequest } from \"../../actions\";\nimport { takeEvery, select, put } from \"redux-saga/effects\";\nimport { getApi } from \"./../../apis/apiProvider\";\nimport query from \"./../../qlQueries/createDir\";\nimport { generateTemplateName, findClosesDir } from \"./../../reducers/console/playlist/utils\";\nimport { get } from \"lodash/object\";\nexport default function* createDirRequestSaga() {\n  yield takeEvery(ACTIONS.PL_CREATE_DIR_REQEST, callApi);\n}\n\nconst getToken = state => state.user.token;\n\nconst getCurrentSelection = state => state.playList.currentSelection;\n\nconst getParentPath = (state, currentSelection) => findClosesDir(state, currentSelection);\n\nconst generateDirName = (state, parrentPath) => generateTemplateName(state.playList, parrentPath, \"New folder\");\n\nconst getParrentId = (state, path) => get(state.playList, path);\n\nfunction* callApi(action) {\n  var _result$data;\n\n  const {\n    callQuery\n  } = getApi(\"UserAssets\");\n  const token = yield select(getToken);\n  const currentSelection = yield select(getCurrentSelection);\n  const parrentPath = yield select(getParentPath, currentSelection);\n  let dirName = action.name;\n  let renameMode = false;\n\n  if (!dirName) {\n    dirName = yield select(generateDirName, parrentPath);\n    renameMode = true;\n  }\n\n  const parrent = yield select(getParrentId, parrentPath);\n\n  if (!parrent._loaded) {\n    yield put(loadDirRequest(parrentPath, ture));\n  }\n\n  let result = yield callQuery(query(parrent._id, dirName), token);\n\n  if (!result || !((_result$data = result.data) === null || _result$data === void 0 ? void 0 : _result$data.createDir)) {\n    return;\n  }\n\n  const id = result.data.createDir.id;\n  yield put(createDir(dirName, id, renameMode));\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/sagas/playlists/createDirRequestSaga.js"],"names":["createDir","ACTIONS","loadDirRequest","takeEvery","select","put","getApi","query","generateTemplateName","findClosesDir","get","createDirRequestSaga","PL_CREATE_DIR_REQEST","callApi","getToken","state","user","token","getCurrentSelection","playList","currentSelection","getParentPath","generateDirName","parrentPath","getParrentId","path","action","callQuery","dirName","name","renameMode","parrent","_loaded","ture","result","_id","data","id"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,OAApB,EAA6BC,cAA7B,QAAmD,eAAnD;AACA,SAASC,SAAT,EAAoBC,MAApB,EAA4BC,GAA5B,QAAuC,oBAAvC;AACA,SAASC,MAAT,QAAuB,0BAAvB;AACA,OAAOC,KAAP,MAAkB,6BAAlB;AACA,SAASC,oBAAT,EAA+BC,aAA/B,QAAoD,yCAApD;AACA,SAASC,GAAT,QAAoB,eAApB;AACA,eAAe,UAAUC,oBAAV,GAAiC;AAC5C,QAAMR,SAAS,CAACF,OAAO,CAACW,oBAAT,EAA+BC,OAA/B,CAAf;AACH;;AAED,MAAMC,QAAQ,GAAGC,KAAK,IAAIA,KAAK,CAACC,IAAN,CAAWC,KAArC;;AAEA,MAAMC,mBAAmB,GAAGH,KAAK,IAAIA,KAAK,CAACI,QAAN,CAAeC,gBAApD;;AAEA,MAAMC,aAAa,GAAG,CAACN,KAAD,EAAQK,gBAAR,KAClBX,aAAa,CAACM,KAAD,EAAQK,gBAAR,CADjB;;AAGA,MAAME,eAAe,GAAG,CAACP,KAAD,EAAQQ,WAAR,KACpBf,oBAAoB,CAACO,KAAK,CAACI,QAAP,EAAiBI,WAAjB,EAA8B,YAA9B,CADxB;;AAGA,MAAMC,YAAY,GAAG,CAACT,KAAD,EAAQU,IAAR,KAAiBf,GAAG,CAACK,KAAK,CAACI,QAAP,EAAiBM,IAAjB,CAAzC;;AAIA,UAAUZ,OAAV,CAAkBa,MAAlB,EAA0B;AAAA;;AACtB,QAAM;AAAEC,IAAAA;AAAF,MAAgBrB,MAAM,CAAC,YAAD,CAA5B;AACA,QAAMW,KAAK,GAAG,MAAMb,MAAM,CAACU,QAAD,CAA1B;AACA,QAAMM,gBAAgB,GAAG,MAAMhB,MAAM,CAACc,mBAAD,CAArC;AACA,QAAMK,WAAW,GAAG,MAAMnB,MAAM,CAACiB,aAAD,EAAgBD,gBAAhB,CAAhC;AACA,MAAIQ,OAAO,GAAGF,MAAM,CAACG,IAArB;AACA,MAAIC,UAAU,GAAG,KAAjB;;AACA,MAAG,CAACF,OAAJ,EAAY;AACRA,IAAAA,OAAO,GAAG,MAAMxB,MAAM,CAACkB,eAAD,EAAkBC,WAAlB,CAAtB;AACAO,IAAAA,UAAU,GAAG,IAAb;AACH;;AACD,QAAMC,OAAO,GAAG,MAAM3B,MAAM,CAACoB,YAAD,EAAeD,WAAf,CAA5B;;AACA,MAAG,CAACQ,OAAO,CAACC,OAAZ,EAAoB;AAChB,UAAM3B,GAAG,CAACH,cAAc,CAACqB,WAAD,EAAcU,IAAd,CAAf,CAAT;AACH;;AAED,MAAIC,MAAM,GAAG,MAAMP,SAAS,CAACpB,KAAK,CAACwB,OAAO,CAACI,GAAT,EAAcP,OAAd,CAAN,EAA8BX,KAA9B,CAA5B;;AACA,MAAG,CAACiB,MAAD,IAAW,kBAACA,MAAM,CAACE,IAAR,iDAAC,aAAapC,SAAd,CAAd,EAAsC;AAClC;AACH;;AACD,QAAMqC,EAAE,GAAGH,MAAM,CAACE,IAAP,CAAYpC,SAAZ,CAAsBqC,EAAjC;AAEA,QAAMhC,GAAG,CAACL,SAAS,CAAC4B,OAAD,EAAUS,EAAV,EAAcP,UAAd,CAAV,CAAT;AACH","sourcesContent":["import { createDir, ACTIONS, loadDirRequest } from \"../../actions\";\r\nimport { takeEvery, select, put } from \"redux-saga/effects\"\r\nimport { getApi } from \"./../../apis/apiProvider\";\r\nimport query from \"./../../qlQueries/createDir\";\r\nimport { generateTemplateName, findClosesDir } from \"./../../reducers/console/playlist/utils\";\r\nimport { get } from \"lodash/object\";\r\nexport default function* createDirRequestSaga() {\r\n    yield takeEvery(ACTIONS.PL_CREATE_DIR_REQEST, callApi)\r\n}\r\n\r\nconst getToken = state => state.user.token;\r\n\r\nconst getCurrentSelection = state => state.playList.currentSelection;\r\n\r\nconst getParentPath = (state, currentSelection) =>\r\n    findClosesDir(state, currentSelection)\r\n\r\nconst generateDirName = (state, parrentPath) => \r\n    generateTemplateName(state.playList, parrentPath, \"New folder\");\r\n\r\nconst getParrentId = (state, path) => get(state.playList, path);\r\n\r\n\r\n\r\nfunction* callApi(action) {\r\n    const { callQuery } = getApi(\"UserAssets\");\r\n    const token = yield select(getToken);\r\n    const currentSelection = yield select(getCurrentSelection);\r\n    const parrentPath = yield select(getParentPath, currentSelection);\r\n    let dirName = action.name;\r\n    let renameMode = false;\r\n    if(!dirName){\r\n        dirName = yield select(generateDirName, parrentPath);\r\n        renameMode = true;\r\n    } \r\n    const parrent = yield select(getParrentId, parrentPath);\r\n    if(!parrent._loaded){\r\n        yield put(loadDirRequest(parrentPath, ture));\r\n    }\r\n\r\n    let result = yield callQuery(query(parrent._id, dirName), token);\r\n    if(!result || !result.data?.createDir){\r\n        return;\r\n    }\r\n    const id = result.data.createDir.id;\r\n\r\n    yield put(createDir(dirName, id, renameMode));\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}