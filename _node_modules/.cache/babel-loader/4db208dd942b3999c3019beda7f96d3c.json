{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\src\\\\pages\\\\app\\\\components\\\\Console\\\\Mixer\\\\componets\\\\PeakLevelMeter\\\\PeakLevelMeterV.js\";\nimport React from \"react\";\nimport \"./peak-level-meter--vertical.scss\"; // there is 30 leds indicators\n// 25 is blue and calc from bottom last 25 is zero dB.\n\nclass PeakLevelMater extends React.PureComponent {\n  constructor(...args) {\n    super(...args);\n    this.size = 30;\n    this.rightChannel = [];\n    this.leftChannel = [];\n    this.leftRefs = new Array(this.size);\n    this.rightRefs = new Array(this.size);\n\n    for (let i = 0; i < this.size; i++) {\n      this.leftRefs[i] = React.createRef();\n      this.rightRefs[i] = React.createRef();\n      this.rightChannel.push(React.createElement(\"div\", {\n        ref: this.rightRefs[i],\n        key: 'right-' + i,\n        className: \"level-meter-led right-bar led-\" + i,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      }));\n      this.leftChannel.push(React.createElement(\"div\", {\n        ref: this.leftRefs[i],\n        key: 'left-' + i,\n        className: \"level-meter-led left-bar led-\" + i,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }));\n    }\n\n    this.mixerChannelInterface = this.props.interface;\n    this.breakFlag = false;\n    this.lastCall = 0;\n  }\n\n  updateLedStates() {\n    if (this.breakFlag) {\n      return;\n    }\n\n    requestAnimationFrame(this.updateLedStates.bind(this)); //throtell to 50ms\n\n    const now = new Date().getTime();\n\n    if (now - this.lastCall < 30) {\n      return;\n    }\n\n    this.lastCall = now; //drawing ...\n\n    let peakMeter = this.mixerChannelInterface.getPeakMeter();\n    let ledOn = 25 + peakMeter.peakdB / 2;\n\n    for (let i = 0; i < this.size; i++) {\n      this.leftRefs[i].current.classList.toggle(\"led--on\", i <= ledOn);\n      this.rightRefs[i].current.classList.toggle(\"led--on\", i <= ledOn);\n    }\n  }\n\n  checkActive() {\n    if (this.props.active) {\n      this.breakFlag = false;\n      this.updateLedStates();\n    } else {\n      this.breakFlag = true;\n    }\n  }\n\n  componentDidUpdate() {\n    this.checkActive();\n  }\n\n  componentDidMount() {\n    this.checkActive();\n  }\n\n  componentWillUnmount() {\n    this.breakFlag = true;\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"peak-level-meter \" + this.props.className,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"meter-channel\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, this.leftChannel), React.createElement(\"div\", {\n      className: \"meter-channel\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, this.rightChannel));\n  }\n\n}\n\nexport default PeakLevelMater;","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/pages/app/components/Console/Mixer/componets/PeakLevelMeter/PeakLevelMeterV.js"],"names":["React","PeakLevelMater","PureComponent","constructor","args","size","rightChannel","leftChannel","leftRefs","Array","rightRefs","i","createRef","push","mixerChannelInterface","props","interface","breakFlag","lastCall","updateLedStates","requestAnimationFrame","bind","now","Date","getTime","peakMeter","getPeakMeter","ledOn","peakdB","current","classList","toggle","checkActive","active","componentDidUpdate","componentDidMount","componentWillUnmount","render","className"],"mappings":"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","sourcesContent":["import React from \"react\"\r\n\r\nimport \"./peak-level-meter--vertical.scss\";\r\n// there is 30 leds indicators\r\n// 25 is blue and calc from bottom last 25 is zero dB.\r\n\r\nclass PeakLevelMater extends React.PureComponent {\r\n    constructor(...args) {\r\n        super(...args);\r\n        this.size = 30;\r\n\r\n\r\n        this.rightChannel = [];\r\n        this.leftChannel = [];\r\n\r\n        this.leftRefs = new Array(this.size);\r\n        this.rightRefs = new Array(this.size);\r\n\r\n        for (let i = 0; i < this.size; i++) {\r\n            this.leftRefs[i] = React.createRef();\r\n            this.rightRefs[i] = React.createRef();\r\n\r\n            this.rightChannel.push(\r\n                <div\r\n                    ref={this.rightRefs[i]}\r\n                    key={'right-' + i}\r\n                    className={\"level-meter-led right-bar led-\" + i} />\r\n            )\r\n            this.leftChannel.push(\r\n                <div\r\n                    ref={this.leftRefs[i]}\r\n                    key={'left-' + i}\r\n                    className={\"level-meter-led left-bar led-\" + i} />\r\n            )\r\n        }\r\n\r\n        this.mixerChannelInterface = this.props.interface; \r\n        this.breakFlag = false;\r\n        this.lastCall = 0;\r\n\r\n    }\r\n\r\n    updateLedStates() {\r\n        if (this.breakFlag) {\r\n            return;\r\n        }\r\n\r\n        requestAnimationFrame(this.updateLedStates.bind(this));\r\n        //throtell to 50ms\r\n        const now = new Date().getTime();\r\n        if (now - this.lastCall < 30) {\r\n            return;\r\n        }\r\n        this.lastCall = now;\r\n\r\n        //drawing ...\r\n        let peakMeter = this.mixerChannelInterface.getPeakMeter();\r\n        let ledOn = 25 + peakMeter.peakdB / 2;\r\n\r\n\r\n        for (let i = 0; i < this.size; i++) {\r\n\r\n            this.leftRefs[i].current.classList.toggle(\"led--on\", (i <= ledOn))\r\n            this.rightRefs[i].current.classList.toggle(\"led--on\", (i <= ledOn))\r\n        }\r\n    }\r\n\r\n    checkActive(){\r\n\r\n        if(this.props.active){\r\n            this.breakFlag = false;\r\n            this.updateLedStates();\r\n        } else {\r\n            this.breakFlag = true;\r\n        }\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.checkActive();\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.checkActive();\r\n    }\r\n\r\n\r\n    componentWillUnmount() {\r\n        this.breakFlag = true;\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className={\"peak-level-meter \" + this.props.className}>\r\n                <div className=\"meter-channel\">\r\n                    {this.leftChannel}\r\n                </div>\r\n                <div className=\"meter-channel\">\r\n                    {this.rightChannel}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default PeakLevelMater;"]},"metadata":{},"sourceType":"module"}