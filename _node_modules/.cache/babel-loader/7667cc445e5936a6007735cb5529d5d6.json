{"ast":null,"code":"import config from \"./../../../../components/Deck/Player/configuration\";\nimport WaveSurfer from \"wavesurfer\";\nimport { setChannelReady, setTimeLeft } from \"./../../../../actions\";\nexport default class ChannelBuilder {\n  constructor() {\n    this.startSync = channel => {\n      channel.syncHandle = setInterval(() => {\n        channel.slave.drawer.progress(channel.master.getCurrentTime() / this.currentDuration);\n      }, 100);\n    };\n  }\n\n  create(channelName, masterContaier, slaveContainer) {\n    let channel = {};\n    channel.masterConfig = config.master(masterContaier, channelName);\n    channel.slaveConfig = config.slave(slaveContainer, channelName);\n    channel.master = WaveSurfer.create(channel.masterConfig);\n\n    channel.master.__proto__.loadWithEvent = function (...args) {\n      this.fireEvent(\"load\");\n      this.load(...args);\n    };\n\n    channel.slave = WaveSurfer.create(channel.slaveConfig);\n    channel.master.on(\"load\", () => {\n      this.clearState(channel);\n    });\n    channel.master.on(\"loading\", progress => {//this.setLoading(progress); \n    });\n    channel.master.on(\"ready\", () => {\n      channel.currentDuration = this.master.getDuration();\n      let resolution = 430;\n      channel.slave.load(null, channel.master.backend.getPeaks(resolution, 0, resolution));\n      channel.setLoading(100); //this.props.setReadyHandler(true); \n\n      startSync();\n    });\n    return channel.master;\n  }\n\n  clearState(channel) {\n    channel.slave.load(null, []);\n\n    if (channel.barsElements) {\n      channel.barsElements.forEach(htmlElement => htmlElement.remove());\n    }\n  }\n\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/core/console/channels/channelBuilder/channelBuilder.js"],"names":["config","WaveSurfer","setChannelReady","setTimeLeft","ChannelBuilder","constructor","startSync","channel","syncHandle","setInterval","slave","drawer","progress","master","getCurrentTime","currentDuration","create","channelName","masterContaier","slaveContainer","masterConfig","slaveConfig","__proto__","loadWithEvent","args","fireEvent","load","on","clearState","getDuration","resolution","backend","getPeaks","setLoading","barsElements","forEach","htmlElement","remove"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,oDAAnB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,eAAT,EAA0BC,WAA1B,QAA6C,uBAA7C;AAEA,eAAe,MAAMC,cAAN,CAAqB;AAClCC,EAAAA,WAAW,GAAG;AAAA,SA8CdC,SA9Cc,GA8CDC,OAAD,IAAa;AACvBA,MAAAA,OAAO,CAACC,UAAR,GAAqBC,WAAW,CAAC,MAAM;AACrCF,QAAAA,OAAO,CAACG,KAAR,CAAcC,MAAd,CAAqBC,QAArB,CACEL,OAAO,CAACM,MAAR,CAAeC,cAAf,KAAkC,KAAKC,eADzC;AAGD,OAJ+B,EAI7B,GAJ6B,CAAhC;AAKD,KApDa;AAAE;;AAEhBC,EAAAA,MAAM,CAACC,WAAD,EAAcC,cAAd,EAA8BC,cAA9B,EAA8C;AAClD,QAAIZ,OAAO,GAAG,EAAd;AAEAA,IAAAA,OAAO,CAACa,YAAR,GAAuBpB,MAAM,CAACa,MAAP,CAAcK,cAAd,EAA8BD,WAA9B,CAAvB;AACAV,IAAAA,OAAO,CAACc,WAAR,GAAsBrB,MAAM,CAACU,KAAP,CAAaS,cAAb,EAA6BF,WAA7B,CAAtB;AAEAV,IAAAA,OAAO,CAACM,MAAR,GAAiBZ,UAAU,CAACe,MAAX,CAAkBT,OAAO,CAACa,YAA1B,CAAjB;;AACAb,IAAAA,OAAO,CAACM,MAAR,CAAeS,SAAf,CAAyBC,aAAzB,GAAyC,UAAS,GAAGC,IAAZ,EAAkB;AACzD,WAAKC,SAAL,CAAe,MAAf;AACA,WAAKC,IAAL,CAAU,GAAGF,IAAb;AACD,KAHD;;AAIAjB,IAAAA,OAAO,CAACG,KAAR,GAAgBT,UAAU,CAACe,MAAX,CAAkBT,OAAO,CAACc,WAA1B,CAAhB;AAEAd,IAAAA,OAAO,CAACM,MAAR,CAAec,EAAf,CAAkB,MAAlB,EAA0B,MAAM;AAC9B,WAAKC,UAAL,CAAgBrB,OAAhB;AACD,KAFD;AAIAA,IAAAA,OAAO,CAACM,MAAR,CAAec,EAAf,CAAkB,SAAlB,EAA6Bf,QAAQ,IAAI,CACvC;AACD,KAFD;AAIAL,IAAAA,OAAO,CAACM,MAAR,CAAec,EAAf,CAAkB,OAAlB,EAA2B,MAAM;AAC/BpB,MAAAA,OAAO,CAACQ,eAAR,GAA0B,KAAKF,MAAL,CAAYgB,WAAZ,EAA1B;AACA,UAAIC,UAAU,GAAG,GAAjB;AACAvB,MAAAA,OAAO,CAACG,KAAR,CAAcgB,IAAd,CACE,IADF,EAEEnB,OAAO,CAACM,MAAR,CAAekB,OAAf,CAAuBC,QAAvB,CAAgCF,UAAhC,EAA4C,CAA5C,EAA+CA,UAA/C,CAFF;AAIAvB,MAAAA,OAAO,CAAC0B,UAAR,CAAmB,GAAnB,EAP+B,CAQ/B;;AACA3B,MAAAA,SAAS;AACV,KAVD;AAaA,WAAOC,OAAO,CAACM,MAAf;AACD;;AAEDe,EAAAA,UAAU,CAACrB,OAAD,EAAU;AAClBA,IAAAA,OAAO,CAACG,KAAR,CAAcgB,IAAd,CAAmB,IAAnB,EAAyB,EAAzB;;AACA,QAAInB,OAAO,CAAC2B,YAAZ,EAA0B;AACxB3B,MAAAA,OAAO,CAAC2B,YAAR,CAAqBC,OAArB,CAA6BC,WAAW,IAAIA,WAAW,CAACC,MAAZ,EAA5C;AACD;AACF;;AA7CiC","sourcesContent":["import config from \"./../../../../components/Deck/Player/configuration\";\r\nimport WaveSurfer from \"wavesurfer\";\r\nimport { setChannelReady, setTimeLeft } from \"./../../../../actions\";\r\n\r\nexport default class ChannelBuilder {\r\n  constructor() {}\r\n\r\n  create(channelName, masterContaier, slaveContainer) {\r\n    let channel = {};\r\n\r\n    channel.masterConfig = config.master(masterContaier, channelName);\r\n    channel.slaveConfig = config.slave(slaveContainer, channelName);\r\n\r\n    channel.master = WaveSurfer.create(channel.masterConfig);\r\n    channel.master.__proto__.loadWithEvent = function(...args) {\r\n      this.fireEvent(\"load\");\r\n      this.load(...args);\r\n    };\r\n    channel.slave = WaveSurfer.create(channel.slaveConfig);\r\n\r\n    channel.master.on(\"load\", () => {\r\n      this.clearState(channel);\r\n    });\r\n\r\n    channel.master.on(\"loading\", progress => {\r\n      //this.setLoading(progress); \r\n    });\r\n\r\n    channel.master.on(\"ready\", () => {\r\n      channel.currentDuration = this.master.getDuration();\r\n      let resolution = 430;\r\n      channel.slave.load(\r\n        null,\r\n        channel.master.backend.getPeaks(resolution, 0, resolution)\r\n      );\r\n      channel.setLoading(100);\r\n      //this.props.setReadyHandler(true); \r\n      startSync();\r\n    });\r\n\r\n\r\n    return channel.master;\r\n  }\r\n\r\n  clearState(channel) {\r\n    channel.slave.load(null, []);\r\n    if (channel.barsElements) {\r\n      channel.barsElements.forEach(htmlElement => htmlElement.remove());\r\n    }\r\n  }\r\n\r\n  startSync = (channel) => {\r\n    channel.syncHandle = setInterval(() => {\r\n      channel.slave.drawer.progress(\r\n        channel.master.getCurrentTime() / this.currentDuration\r\n      );\r\n    }, 100);\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}