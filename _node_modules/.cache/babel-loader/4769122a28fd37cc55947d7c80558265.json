{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\src\\\\pages\\\\console\\\\components\\\\Console\\\\Deck\\\\TrackInfo\\\\TimeLeft\\\\TimeLeft.js\";\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { formater } from \"./../../../../../../../utils/time/timeFromater\";\nimport { connect } from \"react-redux\";\nimport Console from \"./../../../../../core/console/console\";\n\nconst TimeLeft = ({\n  duration,\n  playback,\n  name\n}) => {\n  const container = useRef(null);\n  const intervalHandler = useRef(null);\n  const [channelInterface, setChannelInterface] = useState(null);\n  useEffect(() => {\n    setChannelInterface(Console.Get().getChannelInterface(name));\n  }, [setChannelInterface]);\n  useEffect(() => {\n    if (!channelInterface) return;\n\n    if (playback) {\n      intervalHandler.current = setInterval(() => {\n        container.textContent = channelInterface.getCurrnetTime().left;\n      }, 500);\n    } else {\n      clearInterval(intervalHandler.current);\n    }\n  }, [channelInterface, playback, container, intervalHandler]);\n  useEffect(() => {\n    let timeLeft;\n\n    if (props.timeLeft) {\n      timeLeft = formater.secondsToStr(props.timeLeft);\n    } else {\n      if (typeof props.trackDuration === \"string\") {\n        timeLeft = formater.ptToStr(props.trackDuration);\n      } else {\n        timeLeft = formater.secondsToStr(props.trackDuration);\n      }\n    }\n\n    container.current.textContent = timeLeft;\n  }, [props.timeLeft, container, props.trackDuration]);\n  return React.createElement(\"span\", {\n    className: \"time-left\",\n    ref: container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  });\n};\n\nconst mapsStateToProps = (state, ownProps) => ({\n  duration: state.console.channel[ownProps.name].track.duration,\n  //  timeLeft :  state.console.channel[ownProps.name].playBackState.timeLeft,\n  plyaback: state.console.channel[ownProps.name].playBackState.paused\n});\n\nexport default connect(mapsStateToProps)(TimeLeft);","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/pages/console/components/Console/Deck/TrackInfo/TimeLeft/TimeLeft.js"],"names":["React","useRef","useEffect","useState","formater","connect","Console","TimeLeft","duration","playback","name","container","intervalHandler","channelInterface","setChannelInterface","Get","getChannelInterface","current","setInterval","textContent","getCurrnetTime","left","clearInterval","timeLeft","props","secondsToStr","trackDuration","ptToStr","mapsStateToProps","state","ownProps","console","channel","track","plyaback","playBackState","paused"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,EAAmCC,QAAnC,QAAkD,OAAlD;AACA,SAASC,QAAT,QAAyB,gDAAzB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,OAAP,MAAoB,uCAApB;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAACC,EAAAA,QAAD;AAAWC,EAAAA,QAAX;AAAqBC,EAAAA;AAArB,CAAD,KAAgC;AAC7C,QAAMC,SAAS,GAAGV,MAAM,CAAC,IAAD,CAAxB;AACA,QAAMW,eAAe,GAAGX,MAAM,CAAC,IAAD,CAA9B;AAEA,QAAM,CAACY,gBAAD,EAAmBC,mBAAnB,IAA2CX,QAAQ,CAAC,IAAD,CAAzD;AAEAD,EAAAA,SAAS,CAAC,MAAI;AACVY,IAAAA,mBAAmB,CAACR,OAAO,CAACS,GAAR,GAAcC,mBAAd,CAAkCN,IAAlC,CAAD,CAAnB;AACH,GAFQ,EAEN,CAACI,mBAAD,CAFM,CAAT;AAIAZ,EAAAA,SAAS,CAAC,MAAI;AACV,QAAG,CAACW,gBAAJ,EAAsB;;AACtB,QAAGJ,QAAH,EAAY;AACRG,MAAAA,eAAe,CAACK,OAAhB,GAA0BC,WAAW,CAAC,MAAI;AACtCP,QAAAA,SAAS,CAACQ,WAAV,GAAwBN,gBAAgB,CAACO,cAAjB,GAAkCC,IAA1D;AACH,OAFoC,EAElC,GAFkC,CAArC;AAGH,KAJD,MAIO;AACHC,MAAAA,aAAa,CAACV,eAAe,CAACK,OAAjB,CAAb;AACH;AACJ,GATQ,EASN,CAACJ,gBAAD,EAAmBJ,QAAnB,EAA6BE,SAA7B,EAAwCC,eAAxC,CATM,CAAT;AAWAV,EAAAA,SAAS,CAAC,MAAI;AACV,QAAIqB,QAAJ;;AACA,QAAGC,KAAK,CAACD,QAAT,EAAkB;AACdA,MAAAA,QAAQ,GAAGnB,QAAQ,CAACqB,YAAT,CAAsBD,KAAK,CAACD,QAA5B,CAAX;AACH,KAFD,MAEO;AACH,UAAG,OAAOC,KAAK,CAACE,aAAb,KAA+B,QAAlC,EAA2C;AACvCH,QAAAA,QAAQ,GAAGnB,QAAQ,CAACuB,OAAT,CAAiBH,KAAK,CAACE,aAAvB,CAAX;AACH,OAFD,MAEO;AACHH,QAAAA,QAAQ,GAAGnB,QAAQ,CAACqB,YAAT,CAAsBD,KAAK,CAACE,aAA5B,CAAX;AACH;AACJ;;AACDf,IAAAA,SAAS,CAACM,OAAV,CAAkBE,WAAlB,GAAgCI,QAAhC;AACH,GAZQ,EAYN,CAACC,KAAK,CAACD,QAAP,EAAiBZ,SAAjB,EAA4Ba,KAAK,CAACE,aAAlC,CAZM,CAAT;AAcA,SACI;AAAM,IAAA,SAAS,EAAC,WAAhB;AAA4B,IAAA,GAAG,EAAEf,SAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAGH,CAtCD;;AAwCA,MAAMiB,gBAAgB,GAAG,CAACC,KAAD,EAAQC,QAAR,MAAsB;AAC3CtB,EAAAA,QAAQ,EAAGqB,KAAK,CAACE,OAAN,CAAcC,OAAd,CAAsBF,QAAQ,CAACpB,IAA/B,EAAqCuB,KAArC,CAA2CzB,QADX;AAE7C;AACE0B,EAAAA,QAAQ,EAAEL,KAAK,CAACE,OAAN,CAAcC,OAAd,CAAsBF,QAAQ,CAACpB,IAA/B,EAAqCyB,aAArC,CAAmDC;AAHlB,CAAtB,CAAzB;;AAMA,eAAe/B,OAAO,CAACuB,gBAAD,CAAP,CAA0BrB,QAA1B,CAAf","sourcesContent":["import React, { useRef, useEffect, useState} from \"react\"\r\nimport { formater } from \"./../../../../../../../utils/time/timeFromater\";\r\nimport { connect } from \"react-redux\";\r\nimport Console from \"./../../../../../core/console/console\";\r\n\r\nconst TimeLeft = ({duration, playback, name}) => {\r\n    const container = useRef(null);\r\n    const intervalHandler = useRef(null)\r\n\r\n    const [channelInterface, setChannelInterface] =  useState(null);\r\n\r\n    useEffect(()=>{ \r\n        setChannelInterface(Console.Get().getChannelInterface(name));\r\n    }, [setChannelInterface])\r\n\r\n    useEffect(()=>{\r\n        if(!channelInterface) return;\r\n        if(playback){\r\n            intervalHandler.current = setInterval(()=>{\r\n                container.textContent = channelInterface.getCurrnetTime().left\r\n            }, 500)\r\n        } else {\r\n            clearInterval(intervalHandler.current);\r\n        }\r\n    }, [channelInterface, playback, container, intervalHandler])\r\n\r\n    useEffect(()=>{\r\n        let timeLeft;\r\n        if(props.timeLeft){\r\n            timeLeft = formater.secondsToStr(props.timeLeft);\r\n        } else {\r\n            if(typeof props.trackDuration === \"string\"){\r\n                timeLeft = formater.ptToStr(props.trackDuration);\r\n            } else {\r\n                timeLeft = formater.secondsToStr(props.trackDuration);\r\n            }\r\n        }\r\n        container.current.textContent = timeLeft;\r\n    }, [props.timeLeft, container, props.trackDuration])\r\n\r\n    return (\r\n        <span className=\"time-left\" ref={container}/>\r\n    )\r\n}\r\n\r\nconst mapsStateToProps = (state, ownProps) => ({\r\n    duration : state.console.channel[ownProps.name].track.duration,\r\n  //  timeLeft :  state.console.channel[ownProps.name].playBackState.timeLeft,\r\n    plyaback: state.console.channel[ownProps.name].playBackState.paused,\r\n})\r\n\r\nexport default connect(mapsStateToProps)(TimeLeft);"]},"metadata":{},"sourceType":"module"}