{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJEKTY\\\\APKI\\\\DjTruck\\\\djtruck\\\\src\\\\pages\\\\app\\\\components\\\\PlayListExplorer\\\\PlayList\\\\Playlist_Item\\\\PlaylistItem.js\";\nimport React, { useContext, useRef } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Button } from \"react-bootstrap\";\nimport { loadTrack, deleteTrack } from \"../../../../../../actions\";\nimport PlaylistContext from \"./../PlaylistContext\";\nimport { useDrag, useDrop } from \"react-dnd\";\nimport ItemTypes from \"./../../../../appItemTypes\";\n\nconst PlaylistItem = props => {\n  const ref = useRef(null);\n  const ctx = useContext(PlaylistContext);\n  let track = { ...props.item\n  };\n  track.source = track.source;\n\n  const timeFormating = time => time.substr(2, time.length).toLowerCase();\n\n  const [{\n    isDragging\n  }, drag] = useDrag({\n    item: {\n      type: ItemTypes.TRACK,\n      index: props.listIndex,\n      track: track\n    },\n    collect: monitor => ({\n      isDragind: monitor.isDragging()\n    })\n  });\n  const [_, drop] = useDrop({\n    accept: ItemTypes.TRACK,\n\n    hover(item, monitor) {\n      if (!ref.current) {\n        return;\n      }\n\n      const dragIndex = item.index;\n      const hoverIndex = props.listIndex;\n\n      if (dragIndex === hoverIndex) {\n        return;\n      }\n\n      const hoverBoundingRect = ref.current.getBoundingClientRect();\n      const hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\n      const clientOffset = monitor.getClientOffset();\n      const hoverClientY = clientOffset.y - hoverBoundingRect.top; // only if more than half\n\n      if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n        return;\n      } // only if more than half\n\n\n      if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n        return;\n      }\n\n      props.swapItems(dragIndex, hoverIndex);\n    }\n\n  });\n  drag(drop(ref));\n  const style = {\n    opacity: isDragging ? 0 : 1\n  };\n  return React.createElement(\"tr\", {\n    ref: ref,\n    className: \"track-list-table-row\",\n    style: style,\n    onMouseEnter: ctx.setHover.bind(null, props.listIndex),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    className: \"track-list-table-col source\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, track.source), React.createElement(\"td\", {\n    className: \"track-list-table-col title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, track.title), React.createElement(\"td\", {\n    className: \"track-list-table-col quality\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, track.quality), React.createElement(\"td\", {\n    className: \"track-list-table-col time\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, timeFormating(track.duration)), React.createElement(\"td\", {\n    className: \"track-list-table-col bpm\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, track.bpm && track.bpm.toFixed(2)), React.createElement(\"td\", {\n    className: \"track-list-table-col\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, React.createElement(Button, {\n    className: \"btn-dest dest-a\",\n    onClick: e => props.load(track, \"A\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, \"A\"), React.createElement(Button, {\n    className: \"btn-dest dest-b\",\n    onClick: e => props.load(track, \"B\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, \"B\")));\n};\n\nconst mapDispatchToProps = dispach => ({\n  load: (track, destination) => dispach(loadTrack(track, destination))\n});\n\nexport default connect(null, mapDispatchToProps)(PlaylistItem);","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/pages/app/components/PlayListExplorer/PlayList/Playlist_Item/PlaylistItem.js"],"names":["React","useContext","useRef","connect","Button","loadTrack","deleteTrack","PlaylistContext","useDrag","useDrop","ItemTypes","PlaylistItem","props","ref","ctx","track","item","source","timeFormating","time","substr","length","toLowerCase","isDragging","drag","type","TRACK","index","listIndex","collect","monitor","isDragind","_","drop","accept","hover","current","dragIndex","hoverIndex","hoverBoundingRect","getBoundingClientRect","hoverMiddleY","bottom","top","clientOffset","getClientOffset","hoverClientY","y","swapItems","style","opacity","setHover","bind","title","quality","duration","bpm","toFixed","e","load","mapDispatchToProps","dispach","destination"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,MAA5B,QAA0C,OAA1C;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,MAAT,QAAuB,iBAAvB;AACA,SAASC,SAAT,EAAoBC,WAApB,QAAuC,2BAAvC;AACA,OAAOC,eAAP,MAA4B,sBAA5B;AACA,SAASC,OAAT,EAAmBC,OAAnB,QAAkC,WAAlC;AACA,OAAOC,SAAP,MAAsB,4BAAtB;;AAGA,MAAMC,YAAY,GAAGC,KAAK,IAAI;AAC1B,QAAMC,GAAG,GAAGX,MAAM,CAAC,IAAD,CAAlB;AAEA,QAAMY,GAAG,GAAGb,UAAU,CAACM,eAAD,CAAtB;AAEA,MAAIQ,KAAK,GAAG,EACR,GAAGH,KAAK,CAACI;AADD,GAAZ;AAGAD,EAAAA,KAAK,CAACE,MAAN,GAAeF,KAAK,CAACE,MAArB;;AAEA,QAAMC,aAAa,GAAGC,IAAI,IAAIA,IAAI,CAACC,MAAL,CAAY,CAAZ,EAAeD,IAAI,CAACE,MAApB,EAA4BC,WAA5B,EAA9B;;AAEA,QAAM,CAAE;AAACC,IAAAA;AAAD,GAAF,EAAgBC,IAAhB,IAAwBhB,OAAO,CAAC;AAClCQ,IAAAA,IAAI,EAAE;AACDS,MAAAA,IAAI,EAAEf,SAAS,CAACgB,KADf;AAEDC,MAAAA,KAAK,EAAEf,KAAK,CAACgB,SAFZ;AAGDb,MAAAA,KAAK,EAAEA;AAHN,KAD4B;AAMlCc,IAAAA,OAAO,EAAGC,OAAD,KAAa;AAClBC,MAAAA,SAAS,EAAED,OAAO,CAACP,UAAR;AADO,KAAb;AANyB,GAAD,CAArC;AAWA,QAAM,CAAES,CAAF,EAAMC,IAAN,IAAcxB,OAAO,CAAC;AACxByB,IAAAA,MAAM,EAAGxB,SAAS,CAACgB,KADK;;AAExBS,IAAAA,KAAK,CAACnB,IAAD,EAAOc,OAAP,EAAgB;AACjB,UAAI,CAACjB,GAAG,CAACuB,OAAT,EAAkB;AAChB;AACD;;AACD,YAAMC,SAAS,GAAGrB,IAAI,CAACW,KAAvB;AACA,YAAMW,UAAU,GAAG1B,KAAK,CAACgB,SAAzB;;AAEA,UAAIS,SAAS,KAAKC,UAAlB,EAA8B;AAC5B;AACD;;AACD,YAAMC,iBAAiB,GAAG1B,GAAG,CAACuB,OAAJ,CAAYI,qBAAZ,EAA1B;AACA,YAAMC,YAAY,GAChB,CAACF,iBAAiB,CAACG,MAAlB,GAA2BH,iBAAiB,CAACI,GAA9C,IAAqD,CADvD;AAGA,YAAMC,YAAY,GAAGd,OAAO,CAACe,eAAR,EAArB;AAEA,YAAMC,YAAY,GAAGF,YAAY,CAACG,CAAb,GAAiBR,iBAAiB,CAACI,GAAxD,CAhBiB,CAiBjB;;AACA,UAAIN,SAAS,GAAGC,UAAZ,IAA0BQ,YAAY,GAAGL,YAA7C,EAA2D;AACzD;AACD,OApBgB,CAqBjB;;;AACA,UAAIJ,SAAS,GAAGC,UAAZ,IAA0BQ,YAAY,GAAGL,YAA7C,EAA2D;AACzD;AACD;;AAED7B,MAAAA,KAAK,CAACoC,SAAN,CAAgBX,SAAhB,EAA2BC,UAA3B;AACH;;AA7BuB,GAAD,CAA3B;AAgCAd,EAAAA,IAAI,CAACS,IAAI,CAACpB,GAAD,CAAL,CAAJ;AAEA,QAAMoC,KAAK,GAAG;AACVC,IAAAA,OAAO,EAAG3B,UAAD,GAAc,CAAd,GAAkB;AADjB,GAAd;AAIA,SACI;AACI,IAAA,GAAG,EAAEV,GADT;AAEI,IAAA,SAAS,EAAC,sBAFd;AAGI,IAAA,KAAK,EAAEoC,KAHX;AAII,IAAA,YAAY,EAAEnC,GAAG,CAACqC,QAAJ,CAAaC,IAAb,CAAkB,IAAlB,EAAwBxC,KAAK,CAACgB,SAA9B,CAJlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKI;AAAI,IAAA,SAAS,EAAC,6BAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA6Cb,KAAK,CAACE,MAAnD,CALJ,EAMI;AAAI,IAAA,SAAS,EAAC,4BAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA4CF,KAAK,CAACsC,KAAlD,CANJ,EAOI;AAAI,IAAA,SAAS,EAAC,8BAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA8CtC,KAAK,CAACuC,OAApD,CAPJ,EAQI;AAAI,IAAA,SAAS,EAAC,2BAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA2CpC,aAAa,CAACH,KAAK,CAACwC,QAAP,CAAxD,CARJ,EASI;AAAI,IAAA,SAAS,EAAC,0BAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA0CxC,KAAK,CAACyC,GAAN,IAAazC,KAAK,CAACyC,GAAN,CAAUC,OAAV,CAAkB,CAAlB,CAAvD,CATJ,EAUI;AAAI,IAAA,SAAS,EAAC,sBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,MAAD;AAAQ,IAAA,SAAS,EAAC,iBAAlB;AAAoC,IAAA,OAAO,EAAEC,CAAC,IAAI9C,KAAK,CAAC+C,IAAN,CAAW5C,KAAX,EAAkB,GAAlB,CAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADJ,EAEI,oBAAC,MAAD;AAAQ,IAAA,SAAS,EAAC,iBAAlB;AAAoC,IAAA,OAAO,EAAE2C,CAAC,IAAI9C,KAAK,CAAC+C,IAAN,CAAW5C,KAAX,EAAkB,GAAlB,CAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAFJ,CAVJ,CADJ;AAiBH,CA9ED;;AAgFA,MAAM6C,kBAAkB,GAAGC,OAAO,KAAK;AACnCF,EAAAA,IAAI,EAAE,CAAC5C,KAAD,EAAQ+C,WAAR,KAAwBD,OAAO,CAACxD,SAAS,CAACU,KAAD,EAAQ+C,WAAR,CAAV;AADF,CAAL,CAAlC;;AAIA,eAAe3D,OAAO,CAAC,IAAD,EAAOyD,kBAAP,CAAP,CAAkCjD,YAAlC,CAAf","sourcesContent":["import React, { useContext, useRef } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport { loadTrack, deleteTrack } from \"../../../../../../actions\";\r\nimport PlaylistContext from \"./../PlaylistContext\";\r\nimport { useDrag , useDrop } from \"react-dnd\";\r\nimport ItemTypes from \"./../../../../appItemTypes\";\r\n\r\n\r\nconst PlaylistItem = props => {\r\n    const ref = useRef(null)\r\n\r\n    const ctx = useContext(PlaylistContext);\r\n\r\n    let track = {\r\n        ...props.item\r\n    }\r\n    track.source = track.source;\r\n\r\n    const timeFormating = time => time.substr(2, time.length).toLowerCase();\r\n\r\n    const [ {isDragging}, drag] = useDrag({\r\n        item: { \r\n             type: ItemTypes.TRACK,\r\n             index: props.listIndex,\r\n             track: track\r\n            },\r\n        collect: (monitor) =>({\r\n            isDragind: monitor.isDragging()\r\n        })\r\n    })\r\n\r\n    const [ _ , drop] = useDrop({\r\n        accept : ItemTypes.TRACK,\r\n        hover(item, monitor) {\r\n            if (!ref.current) {\r\n              return\r\n            }\r\n            const dragIndex = item.index;\r\n            const hoverIndex = props.listIndex;\r\n\r\n            if (dragIndex === hoverIndex) {\r\n              return\r\n            }\r\n            const hoverBoundingRect = ref.current.getBoundingClientRect()\r\n            const hoverMiddleY =\r\n              (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2\r\n\r\n            const clientOffset = monitor.getClientOffset()\r\n\r\n            const hoverClientY = clientOffset.y - hoverBoundingRect.top\r\n            // only if more than half\r\n            if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\r\n              return\r\n            }\r\n            // only if more than half\r\n            if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\r\n              return\r\n            }\r\n\r\n            props.swapItems(dragIndex, hoverIndex)\r\n        }\r\n    })\r\n\r\n    drag(drop(ref));\r\n\r\n    const style = {\r\n        opacity: (isDragging)? 0 : 1 \r\n    }\r\n\r\n    return (\r\n        <tr\r\n            ref={ref}\r\n            className=\"track-list-table-row\"\r\n            style={style}\r\n            onMouseEnter={ctx.setHover.bind(null, props.listIndex)}>\r\n            <td className=\"track-list-table-col source\">{track.source}</td>\r\n            <td className=\"track-list-table-col title\">{track.title}</td>\r\n            <td className=\"track-list-table-col quality\">{track.quality}</td>\r\n            <td className=\"track-list-table-col time\">{timeFormating(track.duration)}</td>\r\n            <td className=\"track-list-table-col bpm\">{track.bpm && track.bpm.toFixed(2)}</td>\r\n            <td className=\"track-list-table-col\">\r\n                <Button className=\"btn-dest dest-a\" onClick={e => props.load(track, \"A\")}>A</Button>\r\n                <Button className=\"btn-dest dest-b\" onClick={e => props.load(track, \"B\")}>B</Button>\r\n            </td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nconst mapDispatchToProps = dispach => ({\r\n    load: (track, destination) => dispach(loadTrack(track, destination))\r\n})\r\n\r\nexport default connect(null, mapDispatchToProps)(PlaylistItem);\r\n\r\n"]},"metadata":{},"sourceType":"module"}