{"ast":null,"code":"import { put, select, takeEvery } from \"redux-saga/effects\";\nimport { ACTIONS, pushLog, updateStartTime } from \"../../../actions\";\nimport RECORD_STATE from \"./../../../reducers/console/recorder/stateDef\";\nimport { Log } from \"./../../../utils/logger/logger\";\nexport default function* interceptPlay() {\n  yield takeEvery(ACTIONS.CANCEL_CUE_AND_PLAY, handel);\n}\n\nconst getChannelState = (state, channel) => state.console.channel[channel];\n\nconst isRecording = state => state.recorder.recordingState === RECORD_STATE.RECORDING;\n\nfunction* handel(action) {\n  const path = ['saga', 'recorder', 'tracklis', 'intercept play after cue action'];\n\n  try {\n    const recording = yield select(isRecording);\n\n    if (!recording) {\n      return;\n    }\n\n    const channel = action.destination;\n    const channelState = yield select(getChannelState, channel);\n    yield put(updateStartTime(channelState.track.id));\n    yield put(pushLog(new Log(`Track start time updated on tracklis channel${channel} id: ${channelState.track.id}`, path)));\n  } catch (error) {\n    yield put(pushLog(Log.Error(path, \"Can't update start time on track on tracklist. \" + error.message, \"Sorry during process of updating record tracklist occurred a problem\", error)));\n  }\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/sagas/recorder/tracklist/playtrack.js"],"names":["put","select","takeEvery","ACTIONS","pushLog","updateStartTime","RECORD_STATE","Log","interceptPlay","CANCEL_CUE_AND_PLAY","handel","getChannelState","state","channel","console","isRecording","recorder","recordingState","RECORDING","action","path","recording","destination","channelState","track","id","error","Error","message"],"mappings":"AAAA,SAASA,GAAT,EAAcC,MAAd,EAAsBC,SAAtB,QAAuC,oBAAvC;AACA,SAASC,OAAT,EAAkBC,OAAlB,EAA2BC,eAA3B,QAAkD,kBAAlD;AACA,OAAOC,YAAP,MAAyB,+CAAzB;AACA,SAASC,GAAT,QAAoB,gCAApB;AAEA,eAAe,UAAUC,aAAV,GAA0B;AACrC,QAAMN,SAAS,CAACC,OAAO,CAACM,mBAAT,EAA8BC,MAA9B,CAAf;AACH;;AAED,MAAMC,eAAe,GAAG,CAACC,KAAD,EAAQC,OAAR,KAAoBD,KAAK,CAACE,OAAN,CAAcD,OAAd,CAAsBA,OAAtB,CAA5C;;AAEA,MAAME,WAAW,GAAGH,KAAK,IAAIA,KAAK,CAACI,QAAN,CAAeC,cAAf,KAAkCX,YAAY,CAACY,SAA5E;;AAEA,UAAUR,MAAV,CAAiBS,MAAjB,EAAwB;AACpB,QAAMC,IAAI,GAAG,CAAC,MAAD,EAAS,UAAT,EAAqB,UAArB,EAAiC,iCAAjC,CAAb;;AACA,MAAG;AACC,UAAMC,SAAS,GAAG,MAAMpB,MAAM,CAACc,WAAD,CAA9B;;AACA,QAAG,CAACM,SAAJ,EAAe;AACX;AACH;;AAED,UAAMR,OAAO,GAAGM,MAAM,CAACG,WAAvB;AACA,UAAMC,YAAY,GAAG,MAAMtB,MAAM,CAACU,eAAD,EAAkBE,OAAlB,CAAjC;AAEA,UAAMb,GAAG,CAACK,eAAe,CAACkB,YAAY,CAACC,KAAb,CAAmBC,EAApB,CAAhB,CAAT;AAEA,UAAMzB,GAAG,CAACI,OAAO,CACT,IAAIG,GAAJ,CAAS,+CAA8CM,OAAQ,QAAOU,YAAY,CAACC,KAAb,CAAmBC,EAAG,EAA5F,EAA+FL,IAA/F,CADS,CAAR,CAAT;AAGH,GAdD,CAcE,OAAOM,KAAP,EAAa;AACX,UAAM1B,GAAG,CAACI,OAAO,CAACG,GAAG,CAACoB,KAAJ,CACdP,IADc,EAEd,oDAAoDM,KAAK,CAACE,OAF5C,EAGd,sEAHc,EAIdF,KAJc,CAAD,CAAR,CAAT;AAMH;AAEJ","sourcesContent":["import { put, select, takeEvery } from \"redux-saga/effects\";\r\nimport { ACTIONS, pushLog, updateStartTime } from \"../../../actions\";\r\nimport RECORD_STATE from \"./../../../reducers/console/recorder/stateDef\";\r\nimport { Log } from \"./../../../utils/logger/logger\";\r\n\r\nexport default function* interceptPlay() {\r\n    yield takeEvery(ACTIONS.CANCEL_CUE_AND_PLAY, handel);\r\n}\r\n\r\nconst getChannelState = (state, channel) => state.console.channel[channel];\r\n\r\nconst isRecording = state => state.recorder.recordingState === RECORD_STATE.RECORDING; \r\n\r\nfunction* handel(action){\r\n    const path = ['saga', 'recorder', 'tracklis', 'intercept play after cue action'];\r\n    try{\r\n        const recording = yield select(isRecording);\r\n        if(!recording) {\r\n            return;\r\n        }\r\n\r\n        const channel = action.destination;\r\n        const channelState = yield select(getChannelState, channel)\r\n\r\n        yield put(updateStartTime(channelState.track.id))\r\n\r\n        yield put(pushLog(\r\n                new Log(`Track start time updated on tracklis channel${channel} id: ${channelState.track.id}`, path)\r\n            )) \r\n    } catch (error){\r\n        yield put(pushLog(Log.Error(\r\n            path,\r\n            \"Can't update start time on track on tracklist. \" + error.message,\r\n            \"Sorry during process of updating record tracklist occurred a problem\",\r\n            error\r\n        )))\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}