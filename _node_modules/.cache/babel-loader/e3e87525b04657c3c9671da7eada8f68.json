{"ast":null,"code":"\"use strict\";\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nvar spaceSeparated = require('space-separated-tokens');\n\nfunction escapeRegExp(str) {\n  return str.replace(new RegExp(\"[-[\\\\]{}()*+?.\\\\\\\\^$|/]\", 'g'), '\\\\$&');\n}\n\nvar C_NEWLINE = '\\n';\nvar C_FENCE = '|';\n\nfunction compilerFactory(nodeType) {\n  var text;\n  var title;\n  return {\n    blockHeading: function blockHeading(node) {\n      title = this.all(node).join('');\n      return '';\n    },\n    blockBody: function blockBody(node) {\n      text = this.all(node).map(function (s) {\n        return s.replace(/\\n/g, '\\n| ');\n      }).join('\\n|\\n| ');\n      return text;\n    },\n    block: function block(node) {\n      text = '';\n      title = '';\n      this.all(node);\n\n      if (title) {\n        return \"[[\".concat(nodeType, \" | \").concat(title, \"]]\\n| \").concat(text);\n      } else {\n        return \"[[\".concat(nodeType, \"]]\\n| \").concat(text);\n      }\n    }\n  };\n}\n\nmodule.exports = function blockPlugin() {\n  var availableBlocks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var pattern = Object.keys(availableBlocks).map(escapeRegExp).join('|');\n\n  if (!pattern) {\n    throw new Error('remark-custom-blocks needs to be passed a configuration object as option');\n  }\n\n  var regex = new RegExp(\"\\\\[\\\\[(\".concat(pattern, \")(?: *\\\\| *(.*))?\\\\]\\\\]\\n\"));\n\n  function blockTokenizer(eat, value, silent) {\n    var now = eat.now();\n    var keep = regex.exec(value);\n    if (!keep) return;\n    if (keep.index !== 0) return;\n\n    var _keep = _slicedToArray(keep, 3),\n        eaten = _keep[0],\n        blockType = _keep[1],\n        blockTitle = _keep[2];\n    /* istanbul ignore if - never used (yet) */\n\n\n    if (silent) return true;\n    var linesToEat = [];\n    var content = [];\n    var idx = 0;\n\n    while ((idx = value.indexOf(C_NEWLINE)) !== -1) {\n      var next = value.indexOf(C_NEWLINE, idx + 1); // either slice until next NEWLINE or slice until end of string\n\n      var lineToEat = next !== -1 ? value.slice(idx + 1, next) : value.slice(idx + 1);\n      if (lineToEat[0] !== C_FENCE) break; // remove leading `FENCE ` or leading `FENCE`\n\n      var line = lineToEat.slice(lineToEat.startsWith(\"\".concat(C_FENCE, \" \")) ? 2 : 1);\n      linesToEat.push(lineToEat);\n      content.push(line);\n      value = value.slice(idx + 1);\n    }\n\n    var contentString = content.join(C_NEWLINE);\n    var stringToEat = eaten + linesToEat.join(C_NEWLINE);\n    var potentialBlock = availableBlocks[blockType];\n    var titleAllowed = potentialBlock.title && ['optional', 'required'].includes(potentialBlock.title);\n    var titleRequired = potentialBlock.title && potentialBlock.title === 'required';\n    if (titleRequired && !blockTitle) return;\n    if (!titleAllowed && blockTitle) return;\n    var add = eat(stringToEat);\n\n    if (potentialBlock.details) {\n      potentialBlock.containerElement = 'details';\n      potentialBlock.titleElement = 'summary';\n    }\n\n    var exit = this.enterBlock();\n    var contents = {\n      type: \"\".concat(blockType, \"CustomBlockBody\"),\n      data: {\n        hName: potentialBlock.contentsElement ? potentialBlock.contentsElement : 'div',\n        hProperties: {\n          className: 'custom-block-body'\n        }\n      },\n      children: this.tokenizeBlock(contentString, now)\n    };\n    exit();\n    var blockChildren = [contents];\n\n    if (titleAllowed && blockTitle) {\n      var configuredTitleBlockType = potentialBlock.titleElement ? potentialBlock.titleElement : 'div';\n      var titleNode = {\n        type: \"\".concat(blockType, \"CustomBlockHeading\"),\n        data: {\n          hName: configuredTitleBlockType,\n          hProperties: {\n            className: 'custom-block-heading'\n          }\n        },\n        children: this.tokenizeInline(blockTitle, now)\n      };\n      blockChildren.unshift(titleNode);\n    }\n\n    var classList = spaceSeparated.parse(potentialBlock.classes || '');\n    return add({\n      type: \"\".concat(blockType, \"CustomBlock\"),\n      children: blockChildren,\n      data: {\n        hName: potentialBlock.containerElement ? potentialBlock.containerElement : 'div',\n        hProperties: {\n          className: ['custom-block'].concat(_toConsumableArray(classList))\n        }\n      }\n    });\n  }\n\n  var Parser = this.Parser; // Inject blockTokenizer\n\n  var blockTokenizers = Parser.prototype.blockTokenizers;\n  var blockMethods = Parser.prototype.blockMethods;\n  blockTokenizers.customBlocks = blockTokenizer;\n  blockMethods.splice(blockMethods.indexOf('fencedCode') + 1, 0, 'customBlocks');\n  var Compiler = this.Compiler;\n\n  if (Compiler) {\n    var visitors = Compiler.prototype.visitors;\n    if (!visitors) return;\n    Object.keys(availableBlocks).forEach(function (key) {\n      var compiler = compilerFactory(key);\n      visitors[\"\".concat(key, \"CustomBlock\")] = compiler.block;\n      visitors[\"\".concat(key, \"CustomBlockHeading\")] = compiler.blockHeading;\n      visitors[\"\".concat(key, \"CustomBlockBody\")] = compiler.blockBody;\n    });\n  } // Inject into interrupt rules\n\n\n  var interruptParagraph = Parser.prototype.interruptParagraph;\n  var interruptList = Parser.prototype.interruptList;\n  var interruptBlockquote = Parser.prototype.interruptBlockquote;\n  interruptParagraph.splice(interruptParagraph.indexOf('fencedCode') + 1, 0, ['customBlocks']);\n  interruptList.splice(interruptList.indexOf('fencedCode') + 1, 0, ['customBlocks']);\n  interruptBlockquote.splice(interruptBlockquote.indexOf('fencedCode') + 1, 0, ['customBlocks']);\n};","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/node_modules/remark-custom-blocks/dist/index.js"],"names":["_toConsumableArray","arr","_arrayWithoutHoles","_iterableToArray","_nonIterableSpread","TypeError","iter","Symbol","iterator","Object","prototype","toString","call","Array","from","isArray","i","arr2","length","_slicedToArray","_arrayWithHoles","_iterableToArrayLimit","_nonIterableRest","_arr","_n","_d","_e","undefined","_i","_s","next","done","push","value","err","spaceSeparated","require","escapeRegExp","str","replace","RegExp","C_NEWLINE","C_FENCE","compilerFactory","nodeType","text","title","blockHeading","node","all","join","blockBody","map","s","block","concat","module","exports","blockPlugin","availableBlocks","arguments","pattern","keys","Error","regex","blockTokenizer","eat","silent","now","keep","exec","index","_keep","eaten","blockType","blockTitle","linesToEat","content","idx","indexOf","lineToEat","slice","line","startsWith","contentString","stringToEat","potentialBlock","titleAllowed","includes","titleRequired","add","details","containerElement","titleElement","exit","enterBlock","contents","type","data","hName","contentsElement","hProperties","className","children","tokenizeBlock","blockChildren","configuredTitleBlockType","titleNode","tokenizeInline","unshift","classList","parse","classes","Parser","blockTokenizers","blockMethods","customBlocks","splice","Compiler","visitors","forEach","key","compiler","interruptParagraph","interruptList","interruptBlockquote"],"mappings":"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","sourcesContent":["\"use strict\";\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nvar spaceSeparated = require('space-separated-tokens');\n\nfunction escapeRegExp(str) {\n  return str.replace(new RegExp(\"[-[\\\\]{}()*+?.\\\\\\\\^$|/]\", 'g'), '\\\\$&');\n}\n\nvar C_NEWLINE = '\\n';\nvar C_FENCE = '|';\n\nfunction compilerFactory(nodeType) {\n  var text;\n  var title;\n  return {\n    blockHeading: function blockHeading(node) {\n      title = this.all(node).join('');\n      return '';\n    },\n    blockBody: function blockBody(node) {\n      text = this.all(node).map(function (s) {\n        return s.replace(/\\n/g, '\\n| ');\n      }).join('\\n|\\n| ');\n      return text;\n    },\n    block: function block(node) {\n      text = '';\n      title = '';\n      this.all(node);\n\n      if (title) {\n        return \"[[\".concat(nodeType, \" | \").concat(title, \"]]\\n| \").concat(text);\n      } else {\n        return \"[[\".concat(nodeType, \"]]\\n| \").concat(text);\n      }\n    }\n  };\n}\n\nmodule.exports = function blockPlugin() {\n  var availableBlocks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var pattern = Object.keys(availableBlocks).map(escapeRegExp).join('|');\n\n  if (!pattern) {\n    throw new Error('remark-custom-blocks needs to be passed a configuration object as option');\n  }\n\n  var regex = new RegExp(\"\\\\[\\\\[(\".concat(pattern, \")(?: *\\\\| *(.*))?\\\\]\\\\]\\n\"));\n\n  function blockTokenizer(eat, value, silent) {\n    var now = eat.now();\n    var keep = regex.exec(value);\n    if (!keep) return;\n    if (keep.index !== 0) return;\n\n    var _keep = _slicedToArray(keep, 3),\n        eaten = _keep[0],\n        blockType = _keep[1],\n        blockTitle = _keep[2];\n    /* istanbul ignore if - never used (yet) */\n\n\n    if (silent) return true;\n    var linesToEat = [];\n    var content = [];\n    var idx = 0;\n\n    while ((idx = value.indexOf(C_NEWLINE)) !== -1) {\n      var next = value.indexOf(C_NEWLINE, idx + 1); // either slice until next NEWLINE or slice until end of string\n\n      var lineToEat = next !== -1 ? value.slice(idx + 1, next) : value.slice(idx + 1);\n      if (lineToEat[0] !== C_FENCE) break; // remove leading `FENCE ` or leading `FENCE`\n\n      var line = lineToEat.slice(lineToEat.startsWith(\"\".concat(C_FENCE, \" \")) ? 2 : 1);\n      linesToEat.push(lineToEat);\n      content.push(line);\n      value = value.slice(idx + 1);\n    }\n\n    var contentString = content.join(C_NEWLINE);\n    var stringToEat = eaten + linesToEat.join(C_NEWLINE);\n    var potentialBlock = availableBlocks[blockType];\n    var titleAllowed = potentialBlock.title && ['optional', 'required'].includes(potentialBlock.title);\n    var titleRequired = potentialBlock.title && potentialBlock.title === 'required';\n    if (titleRequired && !blockTitle) return;\n    if (!titleAllowed && blockTitle) return;\n    var add = eat(stringToEat);\n\n    if (potentialBlock.details) {\n      potentialBlock.containerElement = 'details';\n      potentialBlock.titleElement = 'summary';\n    }\n\n    var exit = this.enterBlock();\n    var contents = {\n      type: \"\".concat(blockType, \"CustomBlockBody\"),\n      data: {\n        hName: potentialBlock.contentsElement ? potentialBlock.contentsElement : 'div',\n        hProperties: {\n          className: 'custom-block-body'\n        }\n      },\n      children: this.tokenizeBlock(contentString, now)\n    };\n    exit();\n    var blockChildren = [contents];\n\n    if (titleAllowed && blockTitle) {\n      var configuredTitleBlockType = potentialBlock.titleElement ? potentialBlock.titleElement : 'div';\n      var titleNode = {\n        type: \"\".concat(blockType, \"CustomBlockHeading\"),\n        data: {\n          hName: configuredTitleBlockType,\n          hProperties: {\n            className: 'custom-block-heading'\n          }\n        },\n        children: this.tokenizeInline(blockTitle, now)\n      };\n      blockChildren.unshift(titleNode);\n    }\n\n    var classList = spaceSeparated.parse(potentialBlock.classes || '');\n    return add({\n      type: \"\".concat(blockType, \"CustomBlock\"),\n      children: blockChildren,\n      data: {\n        hName: potentialBlock.containerElement ? potentialBlock.containerElement : 'div',\n        hProperties: {\n          className: ['custom-block'].concat(_toConsumableArray(classList))\n        }\n      }\n    });\n  }\n\n  var Parser = this.Parser; // Inject blockTokenizer\n\n  var blockTokenizers = Parser.prototype.blockTokenizers;\n  var blockMethods = Parser.prototype.blockMethods;\n  blockTokenizers.customBlocks = blockTokenizer;\n  blockMethods.splice(blockMethods.indexOf('fencedCode') + 1, 0, 'customBlocks');\n  var Compiler = this.Compiler;\n\n  if (Compiler) {\n    var visitors = Compiler.prototype.visitors;\n    if (!visitors) return;\n    Object.keys(availableBlocks).forEach(function (key) {\n      var compiler = compilerFactory(key);\n      visitors[\"\".concat(key, \"CustomBlock\")] = compiler.block;\n      visitors[\"\".concat(key, \"CustomBlockHeading\")] = compiler.blockHeading;\n      visitors[\"\".concat(key, \"CustomBlockBody\")] = compiler.blockBody;\n    });\n  } // Inject into interrupt rules\n\n\n  var interruptParagraph = Parser.prototype.interruptParagraph;\n  var interruptList = Parser.prototype.interruptList;\n  var interruptBlockquote = Parser.prototype.interruptBlockquote;\n  interruptParagraph.splice(interruptParagraph.indexOf('fencedCode') + 1, 0, ['customBlocks']);\n  interruptList.splice(interruptList.indexOf('fencedCode') + 1, 0, ['customBlocks']);\n  interruptBlockquote.splice(interruptBlockquote.indexOf('fencedCode') + 1, 0, ['customBlocks']);\n};"]},"metadata":{},"sourceType":"script"}