{"ast":null,"code":"import _regeneratorRuntime from\"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\node_modules\\\\@babel\\\\runtime/regenerator\";var _marked=/*#__PURE__*/_regeneratorRuntime.mark(interceptLoadtrack),_marked2=/*#__PURE__*/_regeneratorRuntime.mark(finishUnfinished),_marked3=/*#__PURE__*/_regeneratorRuntime.mark(handel);import{call,put,select,takeEvery}from\"redux-saga/effects\";import{ACTIONS,pushLog,pushToTracklist,updateEndTime}from\"../../../actions\";import RECORD_STATE from\"./../../../reducers/console/recorder/stateDef\";import{Log}from\"./../../../utils/logger/logger\";export default function interceptLoadtrack(){return _regeneratorRuntime.wrap(function interceptLoadtrack$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return takeEvery(ACTIONS.LOAD_TRACK,handel);case 2:case\"end\":return _context.stop();}}},_marked);}var getTracklist=function getTracklist(state){return state.recorder.tracklist;};var isRecording=function isRecording(state){return state.recorder.recordingState===RECORD_STATE.RECORDING;};function finishUnfinished(tracklist,channel){var unfinished;return _regeneratorRuntime.wrap(function finishUnfinished$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:unfinished=tracklist.find(function(track){return track.channel===channel&&track.start&&!track.end;});if(unfinished){_context2.next=3;break;}return _context2.abrupt(\"return\");case 3:_context2.next=5;return put(updateEndTime(unfinished.id));case 5:case\"end\":return _context2.stop();}}},_marked2);}function handel(action){var channel,track,recording,tracklist;return _regeneratorRuntime.wrap(function handel$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.prev=0;channel=action.destination;track=action.track;_context3.next=5;return select(isRecording);case 5:recording=_context3.sent;if(recording){_context3.next=8;break;}return _context3.abrupt(\"return\");case 8:_context3.next=10;return select(getTracklist);case 10:tracklist=_context3.sent;_context3.next=13;return call(finishUnfinished,tracklist,channel);case 13:_context3.next=15;return put(pushToTracklist({id:track.id,channel:channel,start:null,end:null}));case 15:_context3.next=21;break;case 17:_context3.prev=17;_context3.t0=_context3[\"catch\"](0);_context3.next=21;return put(pushLog(Log.Error(['saga','recorder','tracklis','intercept load track to deck'],\"Can't add track to tracklist. :\"+_context3.t0.message,_context3.t0)));case 21:case\"end\":return _context3.stop();}}},_marked3,null,[[0,17]]);}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/sagas/recorder/tracklist/catchLoadtrack.js"],"names":["interceptLoadtrack","finishUnfinished","handel","call","put","select","takeEvery","ACTIONS","pushLog","pushToTracklist","updateEndTime","RECORD_STATE","Log","LOAD_TRACK","getTracklist","state","recorder","tracklist","isRecording","recordingState","RECORDING","channel","unfinished","find","track","start","end","id","action","destination","recording","Error","message"],"mappings":"2JAKyBA,kB,iDAQdC,gB,iDASDC,M,EAtBV,OAASC,IAAT,CAAeC,GAAf,CAAoBC,MAApB,CAA4BC,SAA5B,KAA6C,oBAA7C,CACA,OAASC,OAAT,CAAkBC,OAAlB,CAA2BC,eAA3B,CAA4CC,aAA5C,KAAiE,kBAAjE,CACA,MAAOC,CAAAA,YAAP,KAAyB,+CAAzB,CACA,OAASC,GAAT,KAAoB,gCAApB,CAEA,cAAe,SAAUZ,CAAAA,kBAAV,8IACX,MAAMM,CAAAA,SAAS,CAACC,OAAO,CAACM,UAAT,CAAqBX,MAArB,CAAf,CADW,sDAIf,GAAMY,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAAAC,KAAK,QAAIA,CAAAA,KAAK,CAACC,QAAN,CAAeC,SAAnB,EAA1B,CAEA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAAAH,KAAK,QAAIA,CAAAA,KAAK,CAACC,QAAN,CAAeG,cAAf,GAAkCR,YAAY,CAACS,SAAnD,EAAzB,CAEA,QAAWnB,CAAAA,gBAAX,CAA4BgB,SAA5B,CAAwCI,OAAxC,6IACUC,UADV,CACuBL,SAAS,CAACM,IAAV,CAAe,SAAAC,KAAK,QAClCA,CAAAA,KAAK,CAACH,OAAN,GAAkBA,OAAlB,EAA6BG,KAAK,CAACC,KAAnC,EAA4C,CAACD,KAAK,CAACE,GADjB,EAApB,CADvB,IAIQJ,UAJR,oFAMI,MAAMlB,CAAAA,GAAG,CAACM,aAAa,CAACY,UAAU,CAACK,EAAZ,CAAd,CAAT,CANJ,wDASA,QAAUzB,CAAAA,MAAV,CAAiB0B,MAAjB,2KAEcP,OAFd,CAEwBO,MAAM,CAACC,WAF/B,CAGcL,KAHd,CAGsBI,MAAM,CAACJ,KAH7B,kBAK0B,MAAMnB,CAAAA,MAAM,CAACa,WAAD,CAAZ,CAL1B,OAKcY,SALd,mBAMYA,SANZ,qFAQ0B,MAAMzB,CAAAA,MAAM,CAACS,YAAD,CAAZ,CAR1B,QAQcG,SARd,kCASQ,MAAMd,CAAAA,IAAI,CAACF,gBAAD,CAAmBgB,SAAnB,CAA8BI,OAA9B,CAAV,CATR,0BAWQ,MAAMjB,CAAAA,GAAG,CAACK,eAAe,CAAC,CACtBkB,EAAE,CAAEH,KAAK,CAACG,EADY,CAEtBN,OAAO,CAAPA,OAFsB,CAGtBI,KAAK,CAAE,IAHe,CAItBC,GAAG,CAAE,IAJiB,CAAD,CAAhB,CAAT,CAXR,+GAmBQ,MAAMtB,CAAAA,GAAG,CAACI,OAAO,CAACI,GAAG,CAACmB,KAAJ,CACd,CAAC,MAAD,CAAS,UAAT,CAAqB,UAArB,CAAiC,8BAAjC,CADc,CAEd,kCAAoC,aAAMC,OAF5B,cAAD,CAAR,CAAT,CAnBR","sourcesContent":["import { call, put, select, takeEvery } from \"redux-saga/effects\";\r\nimport { ACTIONS, pushLog, pushToTracklist, updateEndTime } from \"../../../actions\";\r\nimport RECORD_STATE from \"./../../../reducers/console/recorder/stateDef\";\r\nimport { Log } from \"./../../../utils/logger/logger\";\r\n\r\nexport default function* interceptLoadtrack() {\r\n    yield takeEvery(ACTIONS.LOAD_TRACK, handel)\r\n}\r\n\r\nconst getTracklist = state => state.recorder.tracklist;\r\n\r\nconst isRecording = state => state.recorder.recordingState === RECORD_STATE.RECORDING; \r\n\r\nfunction * finishUnfinished(tracklist , channel){\r\n    const unfinished = tracklist.find(track => \r\n        (track.channel === channel && track.start && !track.end)\r\n    )\r\n    if(!unfinished) return; \r\n\r\n    yield put(updateEndTime(unfinished.id))\r\n}\r\n\r\nfunction* handel(action){\r\n    try{\r\n        const channel = action.destination;\r\n        const track = action.track;\r\n        \r\n        const recording = yield select(isRecording);\r\n        if(!recording) return;\r\n    \r\n        const tracklist = yield select(getTracklist);\r\n        yield call(finishUnfinished, tracklist, channel);\r\n    \r\n        yield put(pushToTracklist({\r\n            id: track.id,\r\n            channel,\r\n            start: null,\r\n            end: null,\r\n        }))\r\n        \r\n    } catch(error){\r\n        yield put(pushLog(Log.Error(\r\n            ['saga', 'recorder', 'tracklis', 'intercept load track to deck'],\r\n            \"Can't add track to tracklist. :\" + error.message,\r\n            error\r\n        )))\r\n    }\r\n\r\n\r\n}"]},"metadata":{},"sourceType":"module"}