{"ast":null,"code":"import STATUS from \"./../STATUS\";\nexport default function checkLoopState(prev, current) {\n  prev = prev.console;\n  current = current.console;\n  let response = null;\n\n  for (let channelName of Object.keys(prev.channel)) {\n    const prevValue = prev.channel[channelName].playBackState.loop;\n    const currentValue = current.channel[channelName].playBackState.loop;\n    const loopLength = current.channel[channelName].playBackState.loopLength;\n\n    if (prevValue !== currentValue) {\n      response = response || [];\n      response.push({\n        status: STATUS.LOOP_CHANGE,\n        channel: channelName,\n        currentValue: {\n          state: currentValue,\n          loopLength: loopLength\n        }\n      });\n    }\n  }\n\n  return response;\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/core/console/observer/comperators/loop.js"],"names":["STATUS","checkLoopState","prev","current","console","response","channelName","Object","keys","channel","prevValue","playBackState","loop","currentValue","loopLength","push","status","LOOP_CHANGE","state"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,aAAnB;AAEA,eAAe,SAASC,cAAT,CAAwBC,IAAxB,EAA8BC,OAA9B,EAAuC;AACpDD,EAAAA,IAAI,GAAGA,IAAI,CAACE,OAAZ;AACAD,EAAAA,OAAO,GAAGA,OAAO,CAACC,OAAlB;AACA,MAAIC,QAAQ,GAAG,IAAf;;AACA,OAAK,IAAIC,WAAT,IAAwBC,MAAM,CAACC,IAAP,CAAYN,IAAI,CAACO,OAAjB,CAAxB,EAAmD;AACjD,UAAMC,SAAS,GAAGR,IAAI,CAACO,OAAL,CAAaH,WAAb,EAA0BK,aAA1B,CAAwCC,IAA1D;AACA,UAAMC,YAAY,GAAGV,OAAO,CAACM,OAAR,CAAgBH,WAAhB,EAA6BK,aAA7B,CAA2CC,IAAhE;AAEA,UAAME,UAAU,GAAGX,OAAO,CAACM,OAAR,CAAgBH,WAAhB,EAA6BK,aAA7B,CAA2CG,UAA9D;;AACA,QAAIJ,SAAS,KAAKG,YAAlB,EAAgC;AAC9BR,MAAAA,QAAQ,GAAGA,QAAQ,IAAI,EAAvB;AACAA,MAAAA,QAAQ,CAACU,IAAT,CAAc;AACZC,QAAAA,MAAM,EAAEhB,MAAM,CAACiB,WADH;AAEZR,QAAAA,OAAO,EAAEH,WAFG;AAGZO,QAAAA,YAAY,EAAE;AACZK,UAAAA,KAAK,EAAEL,YADK;AAEZC,UAAAA,UAAU,EAAEA;AAFA;AAHF,OAAd;AAQD;AACF;;AACD,SAAOT,QAAP;AACD","sourcesContent":["import STATUS from \"./../STATUS\";\r\n\r\nexport default function checkLoopState(prev, current) {\r\n  prev = prev.console;\r\n  current = current.console;\r\n  let response = null;\r\n  for (let channelName of Object.keys(prev.channel)) {\r\n    const prevValue = prev.channel[channelName].playBackState.loop;\r\n    const currentValue = current.channel[channelName].playBackState.loop;\r\n\r\n    const loopLength = current.channel[channelName].playBackState.loopLength;\r\n    if (prevValue !== currentValue) {\r\n      response = response || [];\r\n      response.push({\r\n        status: STATUS.LOOP_CHANGE,\r\n        channel: channelName,\r\n        currentValue: {\r\n          state: currentValue,\r\n          loopLength: loopLength\r\n        }\r\n      });\r\n    }\r\n  }\r\n  return response;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}