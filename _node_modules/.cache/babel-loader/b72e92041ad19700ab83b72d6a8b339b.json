{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\src\\\\pages\\\\console\\\\components\\\\PlayListExplorer\\\\PlayList\\\\PlayList.js\";\nimport React, { Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport UUID from \"uuidjs\";\nimport PlaylistCtx from \"./PlaylistContext\";\nimport { ContextMenuTrigger } from \"react-contextmenu\";\nimport PlaylistTable from \"./PlaylistTable/PlaylistTable\";\nimport EmptyListInfo from \"./EmptList/EmptyList\";\nimport PlaylistItem from \"./Playlist_Item/PlaylistItem\";\nimport CtxMenu from \"../../common/ContextMenu/ContextMenu\";\nimport { loadTrack, deleteTrack, swapTrackOnList, startCalcBpm } from \"./../../../../../actions\";\nimport \"./play-list.scss\";\n\nclass PlayList extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.currentHoverElement = -1;\n    this.headers = ['#', 'Source', 'Title', 'Quality', 'Time', 'Bpm'];\n\n    this.isEmpty = () => !this.props.currentPlaylist || this.props.currentPlaylist.length === 0;\n  }\n\n  setCurrentHover(index) {\n    if (!this.menuVisible) {\n      this.currentHoverElement = index;\n    }\n  }\n\n  loadTrack(destination) {\n    if (this.currentHoverElement === -1) return;\n    const track = this.props.playlist[this.currentHoverElement];\n    this.props.load(track, destination);\n  }\n\n  deleteTrack() {\n    if (this.props.playlist.length === 0 || this.currentHoverElement === -1) {\n      return;\n    }\n\n    this.props.delete(this.currentHoverElement);\n  }\n\n  reCalcBpm() {\n    if (this.currentHoverElement === -1) return;\n    this.props.reCalcBpm(this.props.playlist[this.currentHoverElement], this.props.currentPlaylist);\n    this.forceUpdate();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.refreshFalg !== this.props.refreshFalg) {\n      this.forceUpdate();\n    }\n  }\n\n  render() {\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"playlist\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(ContextMenuTrigger, {\n      id: \"playlist_ctx_menu\",\n      className: \"playlist\",\n      holdToDisplay: -1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(PlaylistCtx.Provider, {\n      value: {\n        setHover: this.setCurrentHover.bind(this)\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(PlaylistTable, {\n      headers: this.headers,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, this.props.playlist && this.props.playlist.map((item, index) => React.createElement(PlaylistItem, {\n      item: item,\n      listIndex: index,\n      swapItems: this.props.swapTrack,\n      key: item._id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }))), React.createElement(EmptyListInfo, {\n      empty: this.isEmpty(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }))))), React.createElement(CtxMenu, {\n      id: \"playlist_ctx_menu\",\n      items: {\n        \"Send to A\": this.loadTrack.bind(this, \"A\"),\n        \"Send to B\": this.loadTrack.bind(this, \"B\"),\n        \"Calc BPM\": this.reCalcBpm.bind(this),\n        \"Delete\": this.deleteTrack.bind(this)\n      },\n      handlers: {\n        onShow: () => this.menuVisible = true,\n        onHide: () => this.menuVisible = false\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  playlist: state.playList.list,\n  currentPlaylist: state.playList.currentPlaylist,\n  refreshFalg: state.playList.refreshFalg\n});\n\nconst mapDispatchToProps = dispatch => ({\n  load: (track, destination) => dispatch(loadTrack(track, destination)),\n  delete: index => dispatch(deleteTrack(index)),\n  swapTrack: (from, to) => dispatch(swapTrackOnList(from, to)),\n  reCalcBpm: (track, playlist) => dispatch(startCalcBpm(track, playlist))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PlayList);","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/pages/console/components/PlayListExplorer/PlayList/PlayList.js"],"names":["React","Fragment","connect","UUID","PlaylistCtx","ContextMenuTrigger","PlaylistTable","EmptyListInfo","PlaylistItem","CtxMenu","loadTrack","deleteTrack","swapTrackOnList","startCalcBpm","PlayList","Component","currentHoverElement","headers","isEmpty","props","currentPlaylist","length","setCurrentHover","index","menuVisible","destination","track","playlist","load","delete","reCalcBpm","forceUpdate","componentDidUpdate","prevProps","refreshFalg","render","setHover","bind","map","item","swapTrack","_id","onShow","onHide","mapStateToProps","state","playList","list","mapDispatchToProps","dispatch","from","to"],"mappings":"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","sourcesContent":["import React, { Fragment } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport UUID from \"uuidjs\";\r\nimport PlaylistCtx from \"./PlaylistContext\";\r\nimport { ContextMenuTrigger } from \"react-contextmenu\"\r\nimport PlaylistTable from \"./PlaylistTable/PlaylistTable\";\r\nimport EmptyListInfo from \"./EmptList/EmptyList\";\r\nimport PlaylistItem from \"./Playlist_Item/PlaylistItem\";\r\nimport CtxMenu from \"../../common/ContextMenu/ContextMenu\";\r\nimport { loadTrack, deleteTrack, swapTrackOnList, startCalcBpm } from \"./../../../../../actions\";\r\nimport \"./play-list.scss\";\r\n\r\n\r\n\r\nclass PlayList extends React.Component {\r\n    currentHoverElement = -1;\r\n\r\n    headers = ['#', 'Source', 'Title', 'Quality', 'Time', 'Bpm' ];\r\n\r\n    setCurrentHover(index) {\r\n        if (!this.menuVisible) {\r\n            this.currentHoverElement = index;\r\n        }\r\n    }\r\n\r\n    loadTrack(destination) {\r\n        if(this.currentHoverElement === -1) return;\r\n\r\n        const track = this.props.playlist[this.currentHoverElement];\r\n        this.props.load(track, destination)\r\n    }\r\n\r\n    deleteTrack() {\r\n        if (this.props.playlist.length === 0 || this.currentHoverElement === -1) {\r\n            return;\r\n        }\r\n        this.props.delete(this.currentHoverElement);\r\n    }\r\n\r\n    isEmpty = () => (!this.props.currentPlaylist || this.props.currentPlaylist.length === 0)\r\n\r\n    reCalcBpm(){\r\n        if(this.currentHoverElement === -1) return;\r\n        \r\n        this.props.reCalcBpm(\r\n            this.props.playlist[this.currentHoverElement],\r\n            this.props.currentPlaylist\r\n        )\r\n        this.forceUpdate();\r\n    }\r\n\r\n    componentDidUpdate(prevProps){\r\n        if(prevProps.refreshFalg !== this.props.refreshFalg){\r\n            this.forceUpdate();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <div className=\"playlist\">\r\n                    <ContextMenuTrigger id=\"playlist_ctx_menu\" className=\"playlist\" holdToDisplay={-1}>\r\n                        <PlaylistCtx.Provider value={{ setHover: this.setCurrentHover.bind(this) }}>\r\n                            <Fragment>\r\n                                <PlaylistTable headers={this.headers}>\r\n                                    {this.props.playlist && this.props.playlist.map((item, index) =>\r\n                                        <PlaylistItem\r\n                                            item={item}\r\n                                            listIndex={index}\r\n                                            swapItems={this.props.swapTrack}\r\n                                            key={item._id}\r\n                                        />\r\n                                    )}\r\n                                </PlaylistTable>\r\n                                <EmptyListInfo empty={this.isEmpty()} />\r\n                            </Fragment>\r\n                        </PlaylistCtx.Provider>\r\n                    </ContextMenuTrigger>\r\n                </div>\r\n                <CtxMenu\r\n                    id=\"playlist_ctx_menu\"\r\n                    items={{\r\n                        \"Send to A\": this.loadTrack.bind(this, \"A\"),\r\n                        \"Send to B\": this.loadTrack.bind(this, \"B\"),\r\n                        \"Calc BPM\": this.reCalcBpm.bind(this),\r\n                        \"Delete\": this.deleteTrack.bind(this)\r\n                    }}\r\n                    handlers={{\r\n                        onShow: () => this.menuVisible = true,\r\n                        onHide: () => this.menuVisible = false,\r\n                    }}\r\n                />\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    playlist: state.playList.list,\r\n    currentPlaylist: state.playList.currentPlaylist,\r\n    refreshFalg: state.playList.refreshFalg,\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    load: (track, destination) => dispatch(loadTrack(track, destination)),\r\n    delete: (index) => dispatch(deleteTrack(index)),\r\n    swapTrack: (from, to) => dispatch(swapTrackOnList(from, to)),\r\n    reCalcBpm: (track, playlist) => dispatch(startCalcBpm(track, playlist)),\r\n\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PlayList);"]},"metadata":{},"sourceType":"module"}