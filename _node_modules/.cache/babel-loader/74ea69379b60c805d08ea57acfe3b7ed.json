{"ast":null,"code":"'use strict';\n\nvar convert = require('unist-util-is/convert');\n\nvar element = require('hast-util-is-element');\n\nvar before = require('./util/siblings').before;\n\nvar first = require('./util/first');\n\nvar place = require('./util/place');\n\nvar whiteSpaceStart = require('./util/white-space-start');\n\nvar closing = require('./closing');\n\nvar omission = require('./omission');\n\nvar isComment = convert('comment');\nvar uniqueHeadMetadata = ['title', 'base'];\nvar meta = ['meta', 'link', 'script', 'style', 'template'];\nvar tableContainers = ['thead', 'tbody'];\nvar tableRow = 'tr';\nmodule.exports = omission({\n  html: html,\n  head: head,\n  body: body,\n  colgroup: colgroup,\n  tbody: tbody\n}); // Whether to omit `<html>`.\n\nfunction html(node) {\n  var head = first(node);\n  return !head || !isComment(head);\n} // Whether to omit `<head>`.\n\n\nfunction head(node) {\n  var children = node.children;\n  var length = children.length;\n  var seen = [];\n  var index = -1;\n  var child;\n  var name;\n\n  while (++index < length) {\n    child = children[index];\n    name = child.tagName;\n\n    if (element(child, uniqueHeadMetadata)) {\n      if (seen.indexOf(name) !== -1) {\n        return false;\n      }\n\n      seen.push(name);\n    }\n  }\n\n  return length !== 0;\n} // Whether to omit `<body>`.\n\n\nfunction body(node) {\n  var head = first(node, true);\n  return !head || !isComment(head) && !whiteSpaceStart(head) && !element(head, meta);\n} // Whether to omit `<colgroup>`.\n// The spec describes some logic for the opening tag, but it’s easier to\n// implement in the closing tag, to the same effect, so we handle it there\n// instead.\n\n\nfunction colgroup(node, index, parent) {\n  var previous = before(parent, index);\n  var head = first(node, true); // Previous colgroup was already omitted.\n\n  if (element(previous, 'colgroup') && closing(previous, place(parent, previous), parent)) {\n    return false;\n  }\n\n  return head && element(head, 'col');\n} // Whether to omit `<tbody>`.\n\n\nfunction tbody(node, index, parent) {\n  var previous = before(parent, index);\n  var head = first(node); // Previous table section was already omitted.\n\n  if (element(previous, tableContainers) && closing(previous, place(parent, previous), parent)) {\n    return false;\n  }\n\n  return head && element(head, tableRow);\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/node_modules/hast-util-to-html/lib/omission/opening.js"],"names":["convert","require","element","before","first","place","whiteSpaceStart","closing","omission","isComment","uniqueHeadMetadata","meta","tableContainers","tableRow","module","exports","html","head","body","colgroup","tbody","node","children","length","seen","index","child","name","tagName","indexOf","push","parent","previous"],"mappings":"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","sourcesContent":["'use strict'\n\nvar convert = require('unist-util-is/convert')\nvar element = require('hast-util-is-element')\nvar before = require('./util/siblings').before\nvar first = require('./util/first')\nvar place = require('./util/place')\nvar whiteSpaceStart = require('./util/white-space-start')\nvar closing = require('./closing')\nvar omission = require('./omission')\n\nvar isComment = convert('comment')\n\nvar uniqueHeadMetadata = ['title', 'base']\nvar meta = ['meta', 'link', 'script', 'style', 'template']\nvar tableContainers = ['thead', 'tbody']\nvar tableRow = 'tr'\n\nmodule.exports = omission({\n  html: html,\n  head: head,\n  body: body,\n  colgroup: colgroup,\n  tbody: tbody\n})\n\n// Whether to omit `<html>`.\nfunction html(node) {\n  var head = first(node)\n  return !head || !isComment(head)\n}\n\n// Whether to omit `<head>`.\nfunction head(node) {\n  var children = node.children\n  var length = children.length\n  var seen = []\n  var index = -1\n  var child\n  var name\n\n  while (++index < length) {\n    child = children[index]\n    name = child.tagName\n\n    if (element(child, uniqueHeadMetadata)) {\n      if (seen.indexOf(name) !== -1) {\n        return false\n      }\n\n      seen.push(name)\n    }\n  }\n\n  return length !== 0\n}\n\n// Whether to omit `<body>`.\nfunction body(node) {\n  var head = first(node, true)\n\n  return (\n    !head ||\n    (!isComment(head) && !whiteSpaceStart(head) && !element(head, meta))\n  )\n}\n\n// Whether to omit `<colgroup>`.\n// The spec describes some logic for the opening tag, but it’s easier to\n// implement in the closing tag, to the same effect, so we handle it there\n// instead.\nfunction colgroup(node, index, parent) {\n  var previous = before(parent, index)\n  var head = first(node, true)\n\n  // Previous colgroup was already omitted.\n  if (\n    element(previous, 'colgroup') &&\n    closing(previous, place(parent, previous), parent)\n  ) {\n    return false\n  }\n\n  return head && element(head, 'col')\n}\n\n// Whether to omit `<tbody>`.\nfunction tbody(node, index, parent) {\n  var previous = before(parent, index)\n  var head = first(node)\n\n  // Previous table section was already omitted.\n  if (\n    element(previous, tableContainers) &&\n    closing(previous, place(parent, previous), parent)\n  ) {\n    return false\n  }\n\n  return head && element(head, tableRow)\n}\n"]},"metadata":{},"sourceType":"script"}