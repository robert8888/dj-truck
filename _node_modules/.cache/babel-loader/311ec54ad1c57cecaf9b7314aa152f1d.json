{"ast":null,"code":"import _classCallCheck from\"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import store from\"./../../../../../../store\";import{recording,recordingRquestFail,recordFinalUpdate,roolbackRecord}from\"./../../../../../../actions\";import STATUS from\"./../../observer/STATUS\";import io from\"socket.io-client\";import{getApi}from\"./../../../../../../apis/apiProvider\";import WebWorker from\"./../../../../../../utils/worker/workerSetup\";import interpolatePeakWorker from\"./interpolatePeaksWorker\";var Recorder=/*#__PURE__*/function(){function Recorder(mixer){_classCallCheck(this,Recorder);this.mixer=mixer;var streamDestination=this.mixer.audioNodes.channels['main'].recorderStremDestination;this.mediaRecorder=new MediaRecorder(streamDestination.stream,{mimeType:'audio/webm;codecs=opus'});var api=getApi(\"RecordsStore\");this.wsUrl=api.getSocketUrl();this.currentRec=Recorder.initRecState();this._interpolatePeaksWorker=new WebWorker(interpolatePeakWorker);this._interpolatePeaksWorker.addEventListener('message',this._onPeakReady.bind(this));}_createClass(Recorder,[{key:\"action\",value:function action(status,param){switch(status){case STATUS.RECORD_START:{this.startRecording(param);break;}case STATUS.RECORD_END:{this.endRecording();break;}default:return;}}},{key:\"startRecording\",value:function startRecording(_ref){var _this=this;var recId=_ref.recId,recName=_ref.recName;//console.log(\"im start recording\", recId, recName);\nvar token=store.getState().user.token;if(!token){return;}var socket=io.connect(this.wsUrl);socket.on(\"connect\",function(){//console.log(\"we have connection\")\nsocket.emit('authentication',{token:token});socket.on('authenticated',function(){// console.log('auth')\nsocket.emit(\"record_details\",{recId:recId,recName:recName});});socket.on('recorder_ready',function(){_this.currentRec.id=recId;_this.currentRec.title=recName;_this.mediaRecorder.ondataavailable=function(e){// console.log(e.data)\nsocket.emit('record_chunk',e.data);};_this.mediaRecorder.addEventListener('stop',function(){// socket.close()\nsocket.emit('record_stop');});_this.mediaRecorder.start(1000);_this.currentRec.duration=new Date().getTime();_this.updateInterval=setInterval(_this._updatePeaks.bind(_this),100);store.dispatch(recording());});socket.on('connect_error',function(){store.dispatch(recordingRquestFail());});socket.on('recording_finished',function(_ref2){var fileSize=_ref2.fileSize;//  console.log(\"recording finishe event from socekt\")\n_this.currentRec.fileSize=fileSize;// console.log(\"post peeaks to worker \", this.currentRec.peaks)\n_this._interpolatePeaksWorker.postMessage([_this.currentRec.peaks]);socket.close();});socket.on(\"recording_error\",function(){store.dispatch(roolbackRecord(_this.currentRec.id));});});}},{key:\"endRecording\",value:function endRecording(){//  console.log(\"im finish recoriding\")\nif(this.mediaRecorder.state!=='inactive'){this.mediaRecorder.stop();clearInterval(this.updateInterval);this.currentRec.duration=new Date().getTime()-this.currentRec.duration;}}},{key:\"_updatePeaks\",value:function _updatePeaks(){try{var len=this.currentRec.peaks.length;this.currentRec.peaks[len]=this.mixer.currentPeakMinMax[0];this.currentRec.peaks[len+1]=this.mixer.currentPeakMinMax[1];}catch(_unused){console.log(\"Error can't update record waveform\");}}},{key:\"_onPeakReady\",value:function _onPeakReady(workerEvent){if(!workerEvent.data||!(workerEvent.data[0]instanceof Array)){throw new Error('Transforming peaks failed');}var peaks=workerEvent.data[0];var _this$currentRec=this.currentRec,id=_this$currentRec.id,duration=_this$currentRec.duration,fileSize=_this$currentRec.fileSize;this.updateRecord({id:id,duration:duration,fileSize:fileSize,peaks:peaks});}},{key:\"updateRecord\",value:function updateRecord(data){console.log('i got peaks');var id=data.id,peaks=data.peaks,duration=data.duration,fileSize=data.fileSize;store.dispatch(recordFinalUpdate(id,peaks,duration,fileSize));this.currentRec=Recorder.initRecState();}}]);return Recorder;}();Recorder.initRecState=function(){return{id:null,title:\"\",peaks:[],duration:0};};export{Recorder as default};","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/pages/console/core/console/mixer/recorder/recorder.js"],"names":["store","recording","recordingRquestFail","recordFinalUpdate","roolbackRecord","STATUS","io","getApi","WebWorker","interpolatePeakWorker","Recorder","mixer","streamDestination","audioNodes","channels","recorderStremDestination","mediaRecorder","MediaRecorder","stream","mimeType","api","wsUrl","getSocketUrl","currentRec","initRecState","_interpolatePeaksWorker","addEventListener","_onPeakReady","bind","status","param","RECORD_START","startRecording","RECORD_END","endRecording","recId","recName","token","getState","user","socket","connect","on","emit","id","title","ondataavailable","e","data","start","duration","Date","getTime","updateInterval","setInterval","_updatePeaks","dispatch","fileSize","postMessage","peaks","close","state","stop","clearInterval","len","length","currentPeakMinMax","console","log","workerEvent","Array","Error","updateRecord"],"mappings":"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","sourcesContent":["import store from \"./../../../../../../store\";\r\nimport { recording, recordingRquestFail, recordFinalUpdate, roolbackRecord } from \"./../../../../../../actions\"\r\nimport STATUS from \"./../../observer/STATUS\";\r\nimport io from \"socket.io-client\";\r\nimport { getApi } from \"./../../../../../../apis/apiProvider\";\r\nimport WebWorker from \"./../../../../../../utils/worker/workerSetup\";\r\nimport interpolatePeakWorker from \"./interpolatePeaksWorker\";\r\n\r\n\r\nexport default class Recorder {\r\n    static initRecState = () => ({\r\n        id: null,\r\n        title: \"\",\r\n        peaks: [],\r\n        duration: 0,\r\n    })\r\n\r\n    constructor(mixer) {\r\n        this.mixer = mixer;\r\n\r\n        const streamDestination = this.mixer.audioNodes.channels['main'].recorderStremDestination;\r\n        this.mediaRecorder = new MediaRecorder(streamDestination.stream, {\r\n            mimeType: 'audio/webm;codecs=opus',\r\n        });\r\n\r\n        const api = getApi(\"RecordsStore\");\r\n        this.wsUrl = api.getSocketUrl();\r\n\r\n        this.currentRec = Recorder.initRecState();\r\n        \r\n        this._interpolatePeaksWorker = new WebWorker(interpolatePeakWorker);\r\n        this._interpolatePeaksWorker.addEventListener('message', this._onPeakReady.bind(this));\r\n    }\r\n\r\n\r\n    action(status, param) {\r\n        switch (status) {\r\n            case STATUS.RECORD_START: {\r\n                this.startRecording(param);\r\n                break;\r\n            }\r\n            case STATUS.RECORD_END: {\r\n                this.endRecording()\r\n                break;\r\n            }\r\n            default: return;\r\n        }\r\n    }\r\n\r\n    startRecording({ recId, recName }) {\r\n        //console.log(\"im start recording\", recId, recName);\r\n        const token = store.getState().user.token;\r\n        if (!token) {\r\n            return;\r\n        }\r\n\r\n        const socket = io.connect(this.wsUrl);\r\n\r\n        socket.on(\"connect\", () => {\r\n            //console.log(\"we have connection\")\r\n            socket.emit('authentication', { token: token });\r\n            socket.on('authenticated', () => {\r\n                // console.log('auth')\r\n                socket.emit(\"record_details\", { recId, recName })\r\n            })\r\n            socket.on('recorder_ready', () => {\r\n                this.currentRec.id = recId;\r\n                this.currentRec.title = recName;\r\n\r\n                this.mediaRecorder.ondataavailable = (e) => {\r\n                    // console.log(e.data)\r\n                    socket.emit('record_chunk', e.data)\r\n                }\r\n\r\n                this.mediaRecorder.addEventListener('stop', () => {\r\n                    // socket.close()\r\n                    socket.emit('record_stop')\r\n                })\r\n\r\n                this.mediaRecorder.start(1000);\r\n\r\n                this.currentRec.duration = new Date().getTime();\r\n\r\n                this.updateInterval = setInterval(this._updatePeaks.bind(this), 100);\r\n\r\n                store.dispatch(recording());\r\n            });\r\n\r\n            socket.on('connect_error', () => {\r\n                store.dispatch(recordingRquestFail())\r\n            })\r\n\r\n            socket.on('recording_finished', ({ fileSize }) => {\r\n              //  console.log(\"recording finishe event from socekt\")\r\n\r\n                this.currentRec.fileSize = fileSize;\r\n               // console.log(\"post peeaks to worker \", this.currentRec.peaks)\r\n                this._interpolatePeaksWorker.postMessage([this.currentRec.peaks]);\r\n\r\n                socket.close();\r\n            })\r\n\r\n            socket.on(\"recording_error\", () => {\r\n                store.dispatch(roolbackRecord(this.currentRec.id))\r\n            })\r\n        })\r\n    }\r\n\r\n    endRecording() {\r\n        //  console.log(\"im finish recoriding\")\r\n        if (this.mediaRecorder.state !== 'inactive') {\r\n            this.mediaRecorder.stop();\r\n            clearInterval(this.updateInterval);\r\n            this.currentRec.duration = new Date().getTime() - this.currentRec.duration;\r\n        }\r\n    }\r\n\r\n    _updatePeaks() {\r\n        try {\r\n            const len = this.currentRec.peaks.length;\r\n            this.currentRec.peaks[len] = this.mixer.currentPeakMinMax[0];\r\n            this.currentRec.peaks[len + 1] = this.mixer.currentPeakMinMax[1];\r\n        } catch{\r\n            console.log(\"Error can't update record waveform\")\r\n        }\r\n    }\r\n\r\n    _onPeakReady(workerEvent){\r\n        if(!workerEvent.data || !(workerEvent.data[0] instanceof Array)){\r\n            throw new Error('Transforming peaks failed')\r\n        }\r\n        const peaks = workerEvent.data[0];\r\n        const { id, duration, fileSize } = this.currentRec;\r\n        this.updateRecord({\r\n            id, duration, fileSize, peaks\r\n        })\r\n    }\r\n\r\n    updateRecord(data){\r\n        console.log('i got peaks')\r\n        const {id, peaks, duration, fileSize} = data;\r\n        store.dispatch(recordFinalUpdate(\r\n            id, peaks, duration, fileSize\r\n        ))\r\n        this.currentRec = Recorder.initRecState();\r\n\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}