{"ast":null,"code":"import _slicedToArray from\"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";// import { throttle } from \"./../../../../../utils/functions/lodash\";\nimport throttle from\"lodash/throttle\";import React,{useCallback,useEffect,useMemo,useRef,useState}from\"react\";import{Dropdown,DropdownButton}from\"react-bootstrap\";import{connect}from\"react-redux\";import{setCurrentEffect,setDryWet as _setDryWet,setEffectParametr}from\"./../../../../../actions\";import DryWetKnob from\"./components/DryWetKnob/DryWetKnob\";import EffectorButton from\"./components/EffectorButton/EffectorButton\";import EffectorKnob from\"./components/EffectorKnob/EffectorKnob\";import\"./effector-channel.scss\";import mapComponentToParameter from\"./utils/mapComponentToParameter\";import ErrorBoundary from\"../../../../common/components/ErrorBoundary/ErrorBoundary\";var Effector=function Effector(_ref){var setParameter=_ref.setParameter,getAvailableEffects=_ref.availableEffects,channel=_ref.channel,channelState=_ref.channelState,setDryWet=_ref.setDryWet,setEffect=_ref.setEffect;var _useState=useState(undefined),_useState2=_slicedToArray(_useState,2),currentEffect=_useState2[0],setCurrentEffect=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),effectorParams=_useState4[0],setEffectorParams=_useState4[1];var currentChannelState=useRef();useEffect(function(){currentChannelState.current=channelState;},[channelState]);var paramChangeHandle=useCallback(function(param,value){setParameter(currentEffect,param,value);},[setParameter,currentEffect]);useEffect(function(){setEffect(currentEffect);},[currentEffect,setEffect]);var availableEffects=useMemo(function(){return Object.keys(getAvailableEffects).map(function(effect,index){return React.createElement(Dropdown.Item,{key:effect+\"-\"+index,onClick:setCurrentEffect.bind(null,effect)},effect);});},[getAvailableEffects,setCurrentEffect]);useEffect(function(){var currentEffectParams=getAvailableEffects[currentEffect];if(!currentEffectParams){setEffectorParams([]);return;}setEffectorParams(Object.entries(currentEffectParams).map(function(_ref2){var _ref3=_slicedToArray(_ref2,2),name=_ref3[0],param=_ref3[1];var effectState=currentChannelState.current.effects[currentEffect];var value=param.defaultValue;if(effectState){value=effectState[name]||value;}var bindData={channel:channel,effect:currentEffect,name:name};var reactElement=\"\";if(param.type===\"float\"){var Knob=mapComponentToParameter(bindData,EffectorKnob);reactElement=React.createElement(Knob,{key:name+param.description,scale:param.max-param.min,initValue:value,alt:param.description,showValue:true,onChange:paramChangeHandle.bind(null,name)});}else if(param.type===\"bool\"){var Button=mapComponentToParameter(bindData,EffectorButton);reactElement=React.createElement(Button,{key:currentEffect+name+param.description,onChange:paramChangeHandle.bind(null,name)},param.description);}return reactElement;}));},[currentEffect,paramChangeHandle,getAvailableEffects,channel,currentChannelState,setEffectorParams]);return React.createElement(ErrorBoundary,null,React.createElement(\"div\",{className:\"effector-channel effector ch-\"+channel},React.createElement(\"span\",{className:\"label\"},\"FX \"+channel),React.createElement(\"div\",{className:\"dra-wet-knob\"},React.createElement(DryWetKnob,{alt:\"D/W\",onChange:setDryWet})),React.createElement(\"div\",{className:\"effect-selector\"},React.createElement(DropdownButton,{title:currentEffect||\"-----\",className:\"btn-effect-select\"},React.createElement(Dropdown.Item,{key:\"none\",onClick:setCurrentEffect.bind(null,undefined)},\" ----- \"),availableEffects)),React.createElement(\"div\",{className:\"effector-param\"},effectorParams)));};var mapStateToProps=function mapStateToProps(state,ownProps){return{availableEffects:state.effector.effects,channelState:state.effector.channels[ownProps.channel]};};var mapDispachToProps=function mapDispachToProps(dispatch,ownProps){var tdispatch=throttle(dispatch,100);return{setParameter:function setParameter(){for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}return tdispatch(setEffectParametr.apply(void 0,[ownProps.channel].concat(args)));},setEffect:function setEffect(effect){return dispatch(setCurrentEffect(ownProps.channel,effect));},setDryWet:function setDryWet(value){return dispatch(_setDryWet(ownProps.channel,value));}};};export default connect(mapStateToProps,mapDispachToProps)(Effector);","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/pages/console/components/Console/Effector/Effector.js"],"names":["throttle","React","useCallback","useEffect","useMemo","useRef","useState","Dropdown","DropdownButton","connect","setCurrentEffect","setDryWet","setEffectParametr","DryWetKnob","EffectorButton","EffectorKnob","mapComponentToParameter","ErrorBoundary","Effector","setParameter","getAvailableEffects","availableEffects","channel","channelState","setEffect","undefined","currentEffect","effectorParams","setEffectorParams","currentChannelState","current","paramChangeHandle","param","value","Object","keys","map","effect","index","bind","currentEffectParams","entries","name","effectState","effects","defaultValue","bindData","reactElement","type","Knob","description","max","min","Button","mapStateToProps","state","ownProps","effector","channels","mapDispachToProps","dispatch","tdispatch","args"],"mappings":"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","sourcesContent":["// import { throttle } from \"./../../../../../utils/functions/lodash\";\r\nimport throttle from \"lodash/throttle\";\r\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from \"react\";\r\nimport { Dropdown, DropdownButton } from \"react-bootstrap\";\r\nimport { connect } from \"react-redux\";\r\nimport { setCurrentEffect, setDryWet, setEffectParametr } from \"./../../../../../actions\";\r\nimport DryWetKnob from \"./components/DryWetKnob/DryWetKnob\";\r\nimport EffectorButton from \"./components/EffectorButton/EffectorButton\";\r\nimport EffectorKnob from \"./components/EffectorKnob/EffectorKnob\";\r\nimport \"./effector-channel.scss\";\r\nimport mapComponentToParameter from \"./utils/mapComponentToParameter\";\r\nimport ErrorBoundary from \"../../../../common/components/ErrorBoundary/ErrorBoundary\";\r\n\r\n\r\nconst Effector = ({ setParameter, availableEffects: getAvailableEffects, channel, channelState, setDryWet, setEffect }) => {\r\n    const [currentEffect, setCurrentEffect] = useState(undefined);\r\n    const [effectorParams, setEffectorParams] = useState([]);\r\n    const currentChannelState = useRef();\r\n\r\n    useEffect(() => {\r\n        currentChannelState.current = channelState;\r\n    }, [channelState])\r\n\r\n    const paramChangeHandle = useCallback((param, value) => {\r\n        setParameter(currentEffect, param, value);\r\n    }, [setParameter, currentEffect])\r\n\r\n\r\n    useEffect(() => {\r\n        setEffect(currentEffect);\r\n    }, [currentEffect, setEffect])\r\n\r\n\r\n    const availableEffects = useMemo(() => Object.keys(getAvailableEffects).map((effect, index) => {\r\n        return (<Dropdown.Item key={effect + \"-\" + index} onClick={setCurrentEffect.bind(null, effect)}>{effect}</Dropdown.Item>)\r\n    }), [getAvailableEffects, setCurrentEffect])\r\n\r\n\r\n    useEffect(() => {\r\n        let currentEffectParams = getAvailableEffects[currentEffect];\r\n        if (!currentEffectParams) {\r\n            setEffectorParams([]);\r\n            return;\r\n        }\r\n\r\n        setEffectorParams(Object.entries(currentEffectParams).map(([name, param]) => {\r\n            const effectState = currentChannelState.current.effects[currentEffect];\r\n            let value = param.defaultValue;\r\n            if (effectState) {\r\n                value = effectState[name] || value;\r\n            }\r\n\r\n            let bindData = {\r\n                channel: channel,\r\n                effect: currentEffect,\r\n                name: name\r\n            };\r\n\r\n            let reactElement = \"\";\r\n            if (param.type === \"float\") {\r\n                let Knob = mapComponentToParameter(bindData, EffectorKnob);\r\n                reactElement = (\r\n                    <Knob\r\n                        key={name + param.description}\r\n                        scale={param.max - param.min}\r\n                        initValue={value}\r\n                        alt={param.description}\r\n                        showValue\r\n                        onChange={paramChangeHandle.bind(null, name)} />\r\n                )\r\n            } else if (param.type === \"bool\") {\r\n                const Button = mapComponentToParameter(bindData, EffectorButton);\r\n\r\n                reactElement = (<Button\r\n                    key={currentEffect + name + param.description}\r\n                    onChange={paramChangeHandle.bind(null, name)}>\r\n                    {param.description}\r\n                </Button>)\r\n            }\r\n\r\n            return reactElement\r\n        }))\r\n    }, [currentEffect,\r\n        paramChangeHandle,\r\n        getAvailableEffects,\r\n        channel,\r\n        currentChannelState,\r\n        setEffectorParams])\r\n\r\n\r\n\r\n    return (\r\n        <ErrorBoundary>\r\n            <div className={\"effector-channel effector ch-\" + channel}>\r\n                <span className=\"label\">{\"FX \" + channel}</span>\r\n                <div className=\"dra-wet-knob\">\r\n                    <DryWetKnob alt=\"D/W\" onChange={setDryWet} />\r\n                </div>\r\n                <div className=\"effect-selector\">\r\n                    <DropdownButton title={currentEffect || \"-----\"} className=\"btn-effect-select\">\r\n                        <Dropdown.Item key={\"none\"} onClick={setCurrentEffect.bind(null, undefined)}> ----- </Dropdown.Item>\r\n                        {availableEffects}\r\n                    </DropdownButton>\r\n                </div>\r\n                <div className=\"effector-param\">\r\n                    {effectorParams}\r\n                </div>\r\n            </div>\r\n        </ErrorBoundary>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => ({\r\n    availableEffects: state.effector.effects,\r\n    channelState: state.effector.channels[ownProps.channel]\r\n})\r\n\r\nconst mapDispachToProps = (dispatch, ownProps) => {\r\n    const tdispatch = throttle(dispatch, 100);\r\n    return {\r\n        setParameter: (...args) => tdispatch(setEffectParametr(ownProps.channel, ...args)),\r\n        setEffect: (effect) => dispatch(setCurrentEffect(ownProps.channel, effect)),\r\n        setDryWet: (value) => dispatch(setDryWet(ownProps.channel, value))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispachToProps)(Effector);\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}