{"ast":null,"code":"import{equalPowerFader}from\"./../../../../../utils/sound/converter\";var fader={setFader:function setFader(value){//in procent from -50%  to + 50% (not 0.01) but 1\nvar faderVolumeNodeA=this.audioNodes.channels[\"A\"].faderVolumeNode;var faderVolumeNodeB=this.audioNodes.channels[\"B\"].faderVolumeNode;var audioCtxA=this.channels.getChannel(\"A\").backend.ac;var audioCtxB=this.channels.getChannel(\"B\").backend.ac;if(!faderVolumeNodeA||!faderVolumeNodeB||!audioCtxA||!audioCtxB){throw new Error(\"Fader value not set. Mising auiodContext or AudioNode ref\\n                            .Checkout funtion setFader in mixer object\");}var _equalPowerFader=equalPowerFader(value),volA=_equalPowerFader.a,volB=_equalPowerFader.b;faderVolumeNodeA.gain.setTargetAtTime(volA,audioCtxA.currentTime,0.01);faderVolumeNodeB.gain.setTargetAtTime(volB,audioCtxB.currentTime,0.01);}};export default fader;","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/pages/console/core/console/mixer/fader.js"],"names":["equalPowerFader","fader","setFader","value","faderVolumeNodeA","audioNodes","channels","faderVolumeNode","faderVolumeNodeB","audioCtxA","getChannel","backend","ac","audioCtxB","Error","volA","a","volB","b","gain","setTargetAtTime","currentTime"],"mappings":"AAAA,OAASA,eAAT,KAAgC,wCAAhC,CAEA,GAAMC,CAAAA,KAAK,CAAI,CACXC,QADW,mBACFC,KADE,CACK,CAAC;AACb,GAAIC,CAAAA,gBAAgB,CAAG,KAAKC,UAAL,CAAgBC,QAAhB,CAAyB,GAAzB,EAA8BC,eAArD,CACA,GAAIC,CAAAA,gBAAgB,CAAG,KAAKH,UAAL,CAAgBC,QAAhB,CAAyB,GAAzB,EAA8BC,eAArD,CACA,GAAIE,CAAAA,SAAS,CAAG,KAAKH,QAAL,CAAcI,UAAd,CAAyB,GAAzB,EAA8BC,OAA9B,CAAsCC,EAAtD,CACA,GAAIC,CAAAA,SAAS,CAAG,KAAKP,QAAL,CAAcI,UAAd,CAAyB,GAAzB,EAA8BC,OAA9B,CAAsCC,EAAtD,CAEA,GAAI,CAACR,gBAAD,EAAqB,CAACI,gBAAtB,EAA0C,CAACC,SAA3C,EAAwD,CAACI,SAA7D,CAAwE,CACpE,KAAM,IAAIC,CAAAA,KAAJ,qIAAN,CAEH,CATW,qBAWiBd,eAAe,CAACG,KAAD,CAXhC,CAWDY,IAXC,kBAWJC,CAXI,CAWQC,IAXR,kBAWKC,CAXL,CAaZd,gBAAgB,CAACe,IAAjB,CAAsBC,eAAtB,CAAsCL,IAAtC,CAA4CN,SAAS,CAACY,WAAtD,CAAmE,IAAnE,EACAb,gBAAgB,CAACW,IAAjB,CAAsBC,eAAtB,CAAsCH,IAAtC,CAA4CJ,SAAS,CAACQ,WAAtD,CAAmE,IAAnE,EACH,CAhBU,CAAf,CAmBA,cAAepB,CAAAA,KAAf","sourcesContent":["import { equalPowerFader } from \"./../../../../../utils/sound/converter\"\r\n\r\nconst fader  = {\r\n    setFader(value) {//in procent from -50%  to + 50% (not 0.01) but 1\r\n        let faderVolumeNodeA = this.audioNodes.channels[\"A\"].faderVolumeNode;\r\n        let faderVolumeNodeB = this.audioNodes.channels[\"B\"].faderVolumeNode;\r\n        let audioCtxA = this.channels.getChannel(\"A\").backend.ac;\r\n        let audioCtxB = this.channels.getChannel(\"B\").backend.ac;\r\n\r\n        if (!faderVolumeNodeA || !faderVolumeNodeB || !audioCtxA || !audioCtxB) {\r\n            throw new Error(`Fader value not set. Mising auiodContext or AudioNode ref\r\n                            .Checkout funtion setFader in mixer object`);\r\n        }\r\n\r\n        const { a: volA, b: volB } = equalPowerFader(value)\r\n\r\n        faderVolumeNodeA.gain.setTargetAtTime(volA, audioCtxA.currentTime, 0.01);\r\n        faderVolumeNodeB.gain.setTargetAtTime(volB, audioCtxB.currentTime, 0.01);\r\n    }\r\n}\r\n\r\nexport default fader;"]},"metadata":{},"sourceType":"module"}