{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\src\\\\pages\\\\console\\\\components\\\\PlayListExplorer\\\\PlayList\\\\PlayList.js\";\nimport React, { Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport UUID from \"uuidjs\";\nimport PlaylistCtx from \"./PlaylistContext\";\nimport { ContextMenuTrigger } from \"react-contextmenu\";\nimport PlaylistTable from \"./PlaylistTable/PlaylistTable\";\nimport EmptyListInfo from \"./EmptList/EmptyList\";\nimport PlaylistItem from \"./Playlist_Item/PlaylistItem\";\nimport CtxMenu from \"../../common/ContextMenu/ContextMenu\";\nimport { loadTrack, deleteTrackRequest, swapTrackOnList, startCalcBpm } from \"./../../../../../actions\";\nimport \"./play-list.scss\";\n\nclass PlayList extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.currentHoverElement = -1;\n    this.playlistSnapshot = null;\n    this.headers = ['#', 'Source', 'Title', 'Quality', 'Time', 'Bpm'];\n\n    this.isEmpty = () => !this.props.currentPlaylist || this.props.currentPlaylist.length === 0;\n  }\n\n  setCurrentHover(index) {\n    if (!this.menuVisible) {\n      this.currentHoverElement = index;\n    }\n  }\n\n  loadTrack(destination) {\n    if (this.currentHoverElement === -1) return;\n    const track = this.props.playlist[this.currentHoverElement];\n    this.props.load(track, destination);\n  }\n\n  deleteTrack() {\n    if (this.props.playlist.length === 0 || this.currentHoverElement === -1) {\n      return;\n    }\n\n    const id = this.props.playlist[this.currentHoverElement].id;\n    this.props.delete(this.currentHoverElement, id);\n  }\n\n  reCalcBpm() {\n    if (this.currentHoverElement === -1) return;\n    this.props.reCalcBpm(this.props.playlist[this.currentHoverElement], this.props.currentPlaylist);\n    this.forceUpdate();\n  } // documentMouseUp(event){\n  //     console.log(event)\n  //     if(event.target.closest(\"table\")?.id === \"playlistTable\"){\n  //         //cal to api\n  //         console.log(\"call to api\")\n  //     } else {\n  //         //revet playlist shpae\n  //         console.log(\"revet playlist shape\")\n  //     }\n  //     document.removeEventListener(\"dragend\", this.documentMouseUp);\n  // }\n\n\n  makeListSnapshot() {\n    console.log(\"mouse down\");\n    this.playlistSnapshot = this.props.playlist;\n    document.addEventListener(\"dragend\", this.documentMouseUp);\n  }\n\n  dragEnd() {\n    console.log(\"drag end\");\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.refreshFalg !== this.props.refreshFalg) {\n      this.forceUpdate();\n    }\n  }\n\n  render() {\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"playlist\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(ContextMenuTrigger, {\n      id: \"playlist_ctx_menu\",\n      className: \"playlist\",\n      holdToDisplay: -1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(PlaylistCtx.Provider, {\n      value: {\n        setHover: this.setCurrentHover.bind(this)\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, React.createElement(PlaylistTable, {\n      headers: this.headers,\n      onClick: this.makeListSnapshot.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, this.props.playlist && this.props.playlist.map((item, index) => React.createElement(PlaylistItem, {\n      item: item,\n      listIndex: index,\n      swapItems: this.props.swapTrack,\n      dragEnd: this.dragEnd.bind(this),\n      key: item.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    })))))), React.createElement(EmptyListInfo, {\n      empty: this.isEmpty(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    })), React.createElement(CtxMenu, {\n      id: \"playlist_ctx_menu\",\n      items: {\n        \"Send to A\": this.loadTrack.bind(this, \"A\"),\n        \"Send to B\": this.loadTrack.bind(this, \"B\"),\n        \"Calc BPM\": this.reCalcBpm.bind(this),\n        \"Delete\": this.deleteTrack.bind(this)\n      },\n      handlers: {\n        onShow: () => this.menuVisible = true,\n        onHide: () => this.menuVisible = false\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  playlist: state.playList.list,\n  currentPlaylist: state.playList.currentPlaylist,\n  refreshFalg: state.playList.refreshFalg\n});\n\nconst mapDispatchToProps = dispatch => ({\n  load: (track, destination) => dispatch(loadTrack(track, destination)),\n  delete: (index, id) => dispatch(deleteTrackRequest(index, id)),\n  swapTrack: (from, to) => dispatch(swapTrackOnList(from, to)),\n  reCalcBpm: (track, playlist) => dispatch(startCalcBpm(track, playlist))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PlayList);","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/pages/console/components/PlayListExplorer/PlayList/PlayList.js"],"names":["React","Fragment","connect","UUID","PlaylistCtx","ContextMenuTrigger","PlaylistTable","EmptyListInfo","PlaylistItem","CtxMenu","loadTrack","deleteTrackRequest","swapTrackOnList","startCalcBpm","PlayList","Component","currentHoverElement","playlistSnapshot","headers","isEmpty","props","currentPlaylist","length","setCurrentHover","index","menuVisible","destination","track","playlist","load","deleteTrack","id","delete","reCalcBpm","forceUpdate","makeListSnapshot","console","log","document","addEventListener","documentMouseUp","dragEnd","componentDidUpdate","prevProps","refreshFalg","render","setHover","bind","map","item","swapTrack","onShow","onHide","mapStateToProps","state","playList","list","mapDispatchToProps","dispatch","from","to"],"mappings":"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","sourcesContent":["import React, { Fragment } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport UUID from \"uuidjs\";\r\nimport PlaylistCtx from \"./PlaylistContext\";\r\nimport { ContextMenuTrigger } from \"react-contextmenu\"\r\nimport PlaylistTable from \"./PlaylistTable/PlaylistTable\";\r\nimport EmptyListInfo from \"./EmptList/EmptyList\";\r\nimport PlaylistItem from \"./Playlist_Item/PlaylistItem\";\r\nimport CtxMenu from \"../../common/ContextMenu/ContextMenu\";\r\nimport { loadTrack, deleteTrackRequest, swapTrackOnList, startCalcBpm } from \"./../../../../../actions\";\r\nimport \"./play-list.scss\";\r\n\r\n\r\n\r\nclass PlayList extends React.Component {\r\n    currentHoverElement = -1;\r\n    playlistSnapshot = null;\r\n\r\n    headers = ['#', 'Source', 'Title', 'Quality', 'Time', 'Bpm' ];\r\n\r\n    setCurrentHover(index) {\r\n        if (!this.menuVisible) {\r\n            this.currentHoverElement = index;\r\n        }\r\n    }\r\n\r\n    loadTrack(destination) {\r\n        if(this.currentHoverElement === -1) return;\r\n\r\n        const track = this.props.playlist[this.currentHoverElement];\r\n        this.props.load(track, destination)\r\n    }\r\n\r\n    deleteTrack() {\r\n        if (this.props.playlist.length === 0 || this.currentHoverElement === -1) {\r\n            return;\r\n        }\r\n        const id = this.props.playlist[this.currentHoverElement].id;\r\n        this.props.delete(this.currentHoverElement, id);\r\n    }\r\n\r\n    isEmpty = () => (!this.props.currentPlaylist || this.props.currentPlaylist.length === 0)\r\n\r\n    reCalcBpm(){\r\n        if(this.currentHoverElement === -1) return;\r\n        \r\n        this.props.reCalcBpm(\r\n            this.props.playlist[this.currentHoverElement],\r\n            this.props.currentPlaylist\r\n        )\r\n        this.forceUpdate();\r\n    }\r\n\r\n    // documentMouseUp(event){\r\n    //     console.log(event)\r\n    //     if(event.target.closest(\"table\")?.id === \"playlistTable\"){\r\n    //         //cal to api\r\n    //         console.log(\"call to api\")\r\n    //     } else {\r\n    //         //revet playlist shpae\r\n    //         console.log(\"revet playlist shape\")\r\n    //     }\r\n    //     document.removeEventListener(\"dragend\", this.documentMouseUp);\r\n    // }\r\n\r\n    makeListSnapshot(){\r\n        console.log(\"mouse down\")\r\n        this.playlistSnapshot = this.props.playlist;\r\n        document.addEventListener(\"dragend\", this.documentMouseUp);\r\n    }\r\n\r\n    dragEnd(){\r\n        console.log(\"drag end\")\r\n    }\r\n\r\n    componentDidUpdate(prevProps){\r\n        if(prevProps.refreshFalg !== this.props.refreshFalg){\r\n            this.forceUpdate();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <div className=\"playlist\">\r\n                    <ContextMenuTrigger id=\"playlist_ctx_menu\" className=\"playlist\" holdToDisplay={-1}>\r\n                        <PlaylistCtx.Provider value={{ setHover: this.setCurrentHover.bind(this) }}>\r\n                            <Fragment>\r\n                                <PlaylistTable headers={this.headers} onClick={this.makeListSnapshot.bind(this)}>\r\n                                    {this.props.playlist && this.props.playlist.map((item, index) =>\r\n                                        <PlaylistItem\r\n                                            item={item}\r\n                                            listIndex={index}\r\n                                            swapItems={this.props.swapTrack}\r\n                                            dragEnd={this.dragEnd.bind(this)}\r\n                                            key={item.id}\r\n                                        />\r\n                                    )}\r\n                                </PlaylistTable>\r\n                            </Fragment>\r\n                        </PlaylistCtx.Provider>\r\n                    </ContextMenuTrigger>\r\n                    <EmptyListInfo empty={this.isEmpty()} />\r\n                </div>\r\n                <CtxMenu\r\n                    id=\"playlist_ctx_menu\"\r\n                    items={{\r\n                        \"Send to A\": this.loadTrack.bind(this, \"A\"),\r\n                        \"Send to B\": this.loadTrack.bind(this, \"B\"),\r\n                        \"Calc BPM\": this.reCalcBpm.bind(this),\r\n                        \"Delete\": this.deleteTrack.bind(this)\r\n                    }}\r\n                    handlers={{\r\n                        onShow: () => this.menuVisible = true,\r\n                        onHide: () => this.menuVisible = false,\r\n                    }}\r\n                />\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    playlist: state.playList.list,\r\n    currentPlaylist: state.playList.currentPlaylist,\r\n    refreshFalg: state.playList.refreshFalg,\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    load: (track, destination) => dispatch(loadTrack(track, destination)),\r\n    delete: (index, id) => dispatch(deleteTrackRequest(index, id)),\r\n    swapTrack: (from, to) => dispatch(swapTrackOnList(from, to)),\r\n    reCalcBpm: (track, playlist) => dispatch(startCalcBpm(track, playlist)),\r\n\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PlayList);"]},"metadata":{},"sourceType":"module"}