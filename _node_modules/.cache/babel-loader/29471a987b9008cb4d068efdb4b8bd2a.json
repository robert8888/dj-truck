{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJEKTY\\\\APKI\\\\DjTruck\\\\djtruck\\\\src\\\\components\\\\Deck\\\\PitchControl\\\\PitchControl.js\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport \"./pitch-control.scss\";\n\nclass PitchControl extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      sliderRange: null,\n      sliderCurrnetPosition: null,\n      sliderPrevPosition: null,\n      isDragged: false,\n      thumbHeight: 0,\n      sliderAreaTopOffset: 0\n    };\n\n    this.getRange = () => ({\n      from: this.props.from,\n      to: this.props.to,\n      range: this.from * this.to < 0 ? Math.abs(this.to) + Math.abs(this.from) : this.to - this.from\n    });\n\n    this.evalValue = () => {\n      const {\n        from,\n        range\n      } = this.getRange();\n      const progress = (this.state.sliderCurrnetPosition - this.state.thumbHeight / 2) / this.state.sliderRange;\n      return range * progress + from;\n    };\n\n    this.setValue = value => {//   const { form }\n    };\n\n    this.setPosition = (currentPosition, prevPosition) => {\n      this.setState({ ...this.state,\n        sliderCurrnetPosition: currentPosition,\n        sliderPrevPosition: prevPosition || this.state.sliderPrevPosition\n      });\n      console.log(this.evalValue());\n\n      if (this.props.onValueChange) {\n        this.props.onValueChange(this.evalValue);\n      }\n    };\n\n    this.mouseDownHandle = (event, sliderRange) => {\n      if (event.target === this.sliderAreaElement.current || event.target === this.sliderRangeElement.current) {\n        let clickY = event.clientY - this.sliderAreaElement.current.getBoundingClientRect().top;\n        this.setPosition(clickY, this.state.sliderCurrnetPosition);\n      } else if (event.target === this.sliderThumbElement.current) {\n        this.setState({ ...this.state,\n          isDragged: true\n        });\n        document.addEventListener('mousemove', this.mouseMoveHandler.bind(this));\n        document.addEventListener('dragstart', e => e.preventDefault());\n      }\n\n      document.addEventListener('mouseup', this.mouseUpHandler);\n      document.addEventListener('dragend', this.mouseUpHandler);\n    };\n\n    this.mouseUpHandler = event => {\n      if (this.state.isDragged) {\n        this.setState({ ...this.state,\n          isDragged: false\n        });\n      } else {\n        this.setPosition(this.state.sliderPrevPosition);\n      }\n\n      document.removeEventListener('mousemove', this.mouseMoveHandler.bind(this));\n      document.removeEventListener('mouseup', this.mouseUpHandler);\n      document.removeEventListener('dragend', this.mouseUpHandler);\n    };\n\n    this.mouseMoveHandler = event => {\n      if (!this.state.isDragged) return;\n      let position = event.clientY - this.state.sliderAreaTopOffset;\n      position = Math.min(Math.max(position, this.state.thumbHeight / 2), this.state.sliderRange + this.state.thumbHeight / 2);\n      this.setPosition(position);\n    };\n\n    this.sliderRangeElement = React.createRef(null);\n    this.sliderThumbElement = React.createRef(null);\n    this.sliderAreaElement = React.createRef(null);\n  }\n\n  componentDidMount() {\n    const top = parseInt(window.getComputedStyle(this.sliderThumbElement.current).top);\n    const range = parseInt(window.getComputedStyle(this.sliderRangeElement.current).height);\n    const thumbHeight = this.sliderThumbElement.current.getBoundingClientRect().height;\n    const topOffset = this.sliderAreaElement.current.getBoundingClientRect().top;\n    this.setState(state => {\n      const _state = { ...state\n      };\n      _state.sliderCurrnetPosition = top;\n      _state.sliderRange = range;\n      _state.thumbHeight = thumbHeight;\n      _state.sliderAreaTopOffset = topOffset;\n      return _state;\n    });\n\n    if (this.props.initValue) {\n      this.setValue(this.props.initValue);\n    }\n\n    this.sliderAreaElement.current.addEventListener('mousedown', this.mouseDownHandle.bind(this));\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"pitch-control \" + \"pitch-\" + this.props.name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      ref: this.sliderAreaElement,\n      className: \"pitch-area\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      ref: this.sliderRangeElement,\n      className: \"slider-range\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      ref: this.sliderThumbElement,\n      style: (this.state.sliderCurrnetPosition !== null || this.state.sliderCurrnetPosition !== undefined) && {\n        top: this.state.sliderCurrnetPosition\n      },\n      className: \"slider-thumb\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default PitchControl;","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/components/Deck/PitchControl/PitchControl.js"],"names":["React","useState","useEffect","useRef","PitchControl","Component","constructor","state","sliderRange","sliderCurrnetPosition","sliderPrevPosition","isDragged","thumbHeight","sliderAreaTopOffset","getRange","from","props","to","range","Math","abs","evalValue","progress","setValue","value","setPosition","currentPosition","prevPosition","setState","console","log","onValueChange","mouseDownHandle","event","target","sliderAreaElement","current","sliderRangeElement","clickY","clientY","getBoundingClientRect","top","sliderThumbElement","document","addEventListener","mouseMoveHandler","bind","e","preventDefault","mouseUpHandler","removeEventListener","position","min","max","createRef","componentDidMount","parseInt","window","getComputedStyle","height","topOffset","_state","initValue","render","name","undefined"],"mappings":"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","sourcesContent":["import React, { useState , useEffect, useRef} from \"react\";\r\nimport \"./pitch-control.scss\";\r\n\r\nclass PitchControl extends React.Component{\r\n    constructor() {\r\n        super();\r\n\r\n        this.sliderRangeElement = React.createRef(null);\r\n        this.sliderThumbElement = React.createRef(null);\r\n        this.sliderAreaElement = React.createRef(null);\r\n    }\r\n\r\n    state = {\r\n        sliderRange: null,\r\n        sliderCurrnetPosition: null,\r\n        sliderPrevPosition: null,\r\n        isDragged : false,\r\n\r\n        thumbHeight: 0,\r\n        sliderAreaTopOffset : 0,\r\n    }\r\n\r\n    getRange = () => ({\r\n        from : this.props.from,\r\n        to : this.props.to,\r\n        range : (this.from * this.to < 0) ?  Math.abs(this.to) + Math.abs(this.from) : this.to - this.from\r\n    })\r\n\r\n    evalValue = () => {\r\n        const {from , range} = this.getRange();\r\n\r\n        const progress = (this.state.sliderCurrnetPosition - this.state.thumbHeight / 2)\r\n                         / this.state.sliderRange;\r\n\r\n        return range * progress + from;\r\n    }\r\n\r\n    setValue = (value) => {\r\n     //   const { form }\r\n    }\r\n\r\n    setPosition = (currentPosition, prevPosition) => {\r\n        this.setState({...this.state, \r\n            sliderCurrnetPosition : currentPosition,\r\n            sliderPrevPosition : prevPosition || this.state.sliderPrevPosition,\r\n        });\r\n        \r\n        console.log(this.evalValue());\r\n        if(this.props.onValueChange){\r\n            this.props.onValueChange(this.evalValue);\r\n        }\r\n    }\r\n\r\n    mouseDownHandle = (event, sliderRange) =>{\r\n        if(event.target === this.sliderAreaElement.current || event.target === this.sliderRangeElement.current){ \r\n            let clickY = event.clientY - this.sliderAreaElement.current.getBoundingClientRect().top;\r\n            this.setPosition(clickY, this.state.sliderCurrnetPosition);\r\n        } else \r\n            if(event.target === this.sliderThumbElement.current){ \r\n            this.setState({...this.state, isDragged: true});\r\n            document.addEventListener('mousemove',  this.mouseMoveHandler.bind(this))\r\n            document.addEventListener('dragstart', e => e.preventDefault())\r\n        }\r\n        document.addEventListener('mouseup', this.mouseUpHandler);\r\n        document.addEventListener('dragend', this.mouseUpHandler);\r\n    }\r\n\r\n    mouseUpHandler = event => {\r\n        if(this.state.isDragged){\r\n            this.setState({...this.state, isDragged: false});\r\n        } else {\r\n            this.setPosition(this.state.sliderPrevPosition);\r\n        }\r\n\r\n        document.removeEventListener('mousemove', this.mouseMoveHandler.bind(this));\r\n        document.removeEventListener('mouseup', this.mouseUpHandler);\r\n        document.removeEventListener('dragend', this.mouseUpHandler);\r\n    }\r\n\r\n    mouseMoveHandler = (event) =>{\r\n        if(!this.state.isDragged) return;\r\n\r\n        let position = event.clientY - this.state.sliderAreaTopOffset;\r\n        position = Math.min( Math.max(position, this.state.thumbHeight/2), \r\n                            this.state.sliderRange + this.state.thumbHeight/2 );\r\n                            \r\n        this.setPosition(position);\r\n    }\r\n\r\n    componentDidMount(){\r\n        const top = parseInt(window.getComputedStyle(this.sliderThumbElement.current).top);\r\n        const range = parseInt(window.getComputedStyle(this.sliderRangeElement.current).height)\r\n        const thumbHeight = this.sliderThumbElement.current.getBoundingClientRect().height;\r\n        const topOffset = this.sliderAreaElement.current.getBoundingClientRect().top;\r\n\r\n        this.setState( state => {\r\n            const _state = {...state};\r\n            _state.sliderCurrnetPosition = top;\r\n            _state.sliderRange = range;\r\n            _state.thumbHeight = thumbHeight;\r\n            _state.sliderAreaTopOffset = topOffset;\r\n            return _state;\r\n        })\r\n\r\n        if(this.props.initValue){\r\n            this.setValue(this.props.initValue);\r\n        }\r\n\r\n        this.sliderAreaElement.current.addEventListener('mousedown',  this.mouseDownHandle.bind(this));\r\n    }\r\n\r\n\r\n    render(){\r\n            return (\r\n                <div className={\"pitch-control \" + \"pitch-\" + this.props.name}>\r\n                    <div ref={this.sliderAreaElement} className=\"pitch-area\">\r\n                        <div ref={this.sliderRangeElement} className=\"slider-range\"/>\r\n                        <div ref={this.sliderThumbElement} style={ (this.state.sliderCurrnetPosition !== null || this.state.sliderCurrnetPosition !== undefined) && {top: this.state.sliderCurrnetPosition}}  className=\"slider-thumb\"/>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n}\r\n\r\n\r\n\r\nexport default PitchControl;"]},"metadata":{},"sourceType":"module"}