{"ast":null,"code":"import store from \"./../../../../../../store\";\nimport { recording, recordingRquestFail, recordFinalUpdate, roolbackRecord } from \"./../../../../../../actions\";\nimport STATUS from \"./../../observer/STATUS\";\nimport io from \"socket.io-client\";\nimport { getApi } from \"./../../../../../../apis/apiProvider\";\nimport WebWorker from \"./../../../../../../utils/worker/workerSetup\";\nimport interpolatePeakWorker from \"./interpolatePeaksWorker\";\nimport { Logger, Log } from \"./../../../../../../utils/logger/logger\";\nexport default class Recorder {\n  constructor(mixer) {\n    this.mixer = mixer;\n    const streamDestination = this.mixer.audioNodes.channels['main'].recorderStremDestination;\n    this.mediaRecorder = new MediaRecorder(streamDestination.stream, {\n      mimeType: 'audio/webm;codecs=opus'\n    });\n    const api = getApi(\"RecordsStore\");\n    this.wsUrl = api.getSocketUrl();\n    this.currentRec = Recorder.initRecState();\n    this._interpolatePeaksWorker = new WebWorker(interpolatePeakWorker);\n\n    this._interpolatePeaksWorker.addEventListener('message', this._onPeakReady.bind(this));\n  }\n\n  action(status, param) {\n    switch (status) {\n      case STATUS.RECORD_START:\n        {\n          this.startRecording(param);\n          break;\n        }\n\n      case STATUS.RECORD_END:\n        {\n          this.endRecording();\n          break;\n        }\n\n      default:\n        return;\n    }\n  }\n\n  startRecording({\n    recId,\n    recName\n  }) {\n    //console.log(\"im start recording\", recId, recName);\n    const token = store.getState().user.token;\n\n    if (!token) {\n      Logger.push(Log.Error({\n        private: \"Attempt to start recordin not' authorized user\",\n        path: ['pages', 'console', 'core', 'mixxer', 'recorder', 'startRecording']\n      }));\n      return;\n    }\n\n    if (this.mediaRecorder.state === \"recording\") {\n      Logger.push(Log.Error({\n        private: \"Attempt to start recordin during active recording\",\n        path: ['pages', 'console', 'core', 'mixxer', 'recorder', 'startRecording']\n      }));\n      return;\n    }\n\n    const socket = io.connect(this.wsUrl);\n    socket.on(\"connect\", () => {\n      //console.log(\"we have connection\")\n      socket.emit('authentication', {\n        token: token\n      });\n      socket.on('authenticated', () => {\n        // console.log('auth')\n        socket.emit(\"record_details\", {\n          recId,\n          recName\n        });\n      });\n      socket.on('recorder_ready', () => {\n        this.currentRec.id = recId;\n        this.currentRec.title = recName;\n\n        this.mediaRecorder.ondataavailable = e => {\n          // console.log(e.data)\n          socket.emit('record_chunk', e.data);\n        };\n\n        this.mediaRecorder.addEventListener('stop', () => {\n          // socket.close()\n          socket.emit('record_stop');\n        });\n        this.mediaRecorder.start(1000);\n        this.currentRec.duration = new Date().getTime();\n        this.updateInterval = setInterval(this._updatePeaks.bind(this), 100);\n        store.dispatch(recording());\n      });\n      socket.on('connect_error', () => {\n        store.dispatch(recordingRquestFail());\n      });\n      socket.on('recording_finished', ({\n        fileSize\n      }) => {\n        //  console.log(\"recording finishe event from socekt\")\n        this.currentRec.fileSize = fileSize; // console.log(\"post peeaks to worker \", this.currentRec.peaks)\n\n        this._interpolatePeaksWorker.postMessage([this.currentRec.peaks]);\n\n        socket.close();\n      });\n      socket.on(\"recording_error\", () => {\n        store.dispatch(roolbackRecord(this.currentRec.id));\n      });\n    });\n  }\n\n  endRecording() {\n    //  console.log(\"im finish recoriding\")\n    if (this.mediaRecorder.state !== 'inactive') {\n      this.mediaRecorder.stop();\n      clearInterval(this.updateInterval);\n      this.currentRec.duration = new Date().getTime() - this.currentRec.duration;\n    }\n  }\n\n  _updatePeaks() {\n    try {\n      const len = this.currentRec.peaks.length;\n      this.currentRec.peaks[len] = this.mixer.currentPeakMinMax[0];\n      this.currentRec.peaks[len + 1] = this.mixer.currentPeakMinMax[1];\n    } catch {\n      console.log(\"Error can't update record waveform\");\n    }\n  }\n\n  _onPeakReady(workerEvent) {\n    if (!workerEvent.data || !(workerEvent.data[0] instanceof Array)) {\n      throw new Error('Transforming peaks failed');\n    }\n\n    const peaks = workerEvent.data[0];\n    const {\n      id,\n      duration,\n      fileSize\n    } = this.currentRec;\n    this.updateRecord({\n      id,\n      duration,\n      fileSize,\n      peaks\n    });\n  }\n\n  updateRecord(data) {\n    console.log('i got peaks');\n    const {\n      id,\n      peaks,\n      duration,\n      fileSize\n    } = data;\n    store.dispatch(recordFinalUpdate(id, peaks, duration, fileSize));\n    this.currentRec = Recorder.initRecState();\n  }\n\n}\n\nRecorder.initRecState = () => ({\n  id: null,\n  title: \"\",\n  peaks: [],\n  duration: 0\n});","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/pages/console/core/console/mixer/recorder/recorder.js"],"names":["store","recording","recordingRquestFail","recordFinalUpdate","roolbackRecord","STATUS","io","getApi","WebWorker","interpolatePeakWorker","Logger","Log","Recorder","constructor","mixer","streamDestination","audioNodes","channels","recorderStremDestination","mediaRecorder","MediaRecorder","stream","mimeType","api","wsUrl","getSocketUrl","currentRec","initRecState","_interpolatePeaksWorker","addEventListener","_onPeakReady","bind","action","status","param","RECORD_START","startRecording","RECORD_END","endRecording","recId","recName","token","getState","user","push","Error","private","path","state","socket","connect","on","emit","id","title","ondataavailable","e","data","start","duration","Date","getTime","updateInterval","setInterval","_updatePeaks","dispatch","fileSize","postMessage","peaks","close","stop","clearInterval","len","length","currentPeakMinMax","console","log","workerEvent","Array","updateRecord"],"mappings":"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","sourcesContent":["import store from \"./../../../../../../store\";\r\nimport { recording, recordingRquestFail, recordFinalUpdate, roolbackRecord } from \"./../../../../../../actions\"\r\nimport STATUS from \"./../../observer/STATUS\";\r\nimport io from \"socket.io-client\";\r\nimport { getApi } from \"./../../../../../../apis/apiProvider\";\r\nimport WebWorker from \"./../../../../../../utils/worker/workerSetup\";\r\nimport interpolatePeakWorker from \"./interpolatePeaksWorker\";\r\nimport {Logger, Log} from \"./../../../../../../utils/logger/logger\";\r\n\r\n\r\nexport default class Recorder {\r\n    static initRecState = () => ({\r\n        id: null,\r\n        title: \"\",\r\n        peaks: [],\r\n        duration: 0,\r\n    })\r\n\r\n    constructor(mixer) {\r\n        this.mixer = mixer;\r\n\r\n        const streamDestination = this.mixer.audioNodes.channels['main'].recorderStremDestination;\r\n        this.mediaRecorder = new MediaRecorder(streamDestination.stream, {\r\n            mimeType: 'audio/webm;codecs=opus',\r\n        });\r\n\r\n        const api = getApi(\"RecordsStore\");\r\n        this.wsUrl = api.getSocketUrl();\r\n\r\n        this.currentRec = Recorder.initRecState();\r\n        \r\n        this._interpolatePeaksWorker = new WebWorker(interpolatePeakWorker);\r\n        this._interpolatePeaksWorker.addEventListener('message', this._onPeakReady.bind(this));\r\n    }\r\n\r\n\r\n    action(status, param) {\r\n        switch (status) {\r\n            case STATUS.RECORD_START: {\r\n                this.startRecording(param);\r\n                break;\r\n            }\r\n            case STATUS.RECORD_END: {\r\n                this.endRecording()\r\n                break;\r\n            }\r\n            default: return;\r\n        }\r\n    }\r\n\r\n    startRecording({ recId, recName }) {\r\n        //console.log(\"im start recording\", recId, recName);\r\n        const token = store.getState().user.token;\r\n        if (!token) {\r\n            Logger.push(Log.Error(\r\n                {\r\n                    private: \"Attempt to start recordin not' authorized user\",\r\n                    path: ['pages', 'console', 'core', 'mixxer', 'recorder', 'startRecording']\r\n                }))\r\n            return;\r\n        }\r\n        if(this.mediaRecorder.state === \"recording\"){\r\n            Logger.push(Log.Error(\r\n                {\r\n                    private: \"Attempt to start recordin during active recording\",\r\n                    path: ['pages', 'console', 'core', 'mixxer', 'recorder', 'startRecording']\r\n                }))\r\n            return;\r\n        }\r\n\r\n        const socket = io.connect(this.wsUrl);\r\n\r\n        socket.on(\"connect\", () => {\r\n            //console.log(\"we have connection\")\r\n            socket.emit('authentication', { token: token });\r\n            socket.on('authenticated', () => {\r\n                // console.log('auth')\r\n                socket.emit(\"record_details\", { recId, recName })\r\n            })\r\n            socket.on('recorder_ready', () => {\r\n                this.currentRec.id = recId;\r\n                this.currentRec.title = recName;\r\n\r\n                this.mediaRecorder.ondataavailable = (e) => {\r\n                    // console.log(e.data)\r\n                    socket.emit('record_chunk', e.data)\r\n                }\r\n\r\n                this.mediaRecorder.addEventListener('stop', () => {\r\n                    // socket.close()\r\n                    socket.emit('record_stop')\r\n                })\r\n\r\n                this.mediaRecorder.start(1000);\r\n\r\n                this.currentRec.duration = new Date().getTime();\r\n\r\n                this.updateInterval = setInterval(this._updatePeaks.bind(this), 100);\r\n\r\n                store.dispatch(recording());\r\n            });\r\n\r\n            socket.on('connect_error', () => {\r\n                store.dispatch(recordingRquestFail())\r\n            })\r\n\r\n            socket.on('recording_finished', ({ fileSize }) => {\r\n              //  console.log(\"recording finishe event from socekt\")\r\n\r\n                this.currentRec.fileSize = fileSize;\r\n               // console.log(\"post peeaks to worker \", this.currentRec.peaks)\r\n                this._interpolatePeaksWorker.postMessage([this.currentRec.peaks]);\r\n\r\n                socket.close();\r\n            })\r\n\r\n            socket.on(\"recording_error\", () => {\r\n                store.dispatch(roolbackRecord(this.currentRec.id))\r\n            })\r\n        })\r\n    }\r\n\r\n    endRecording() {\r\n        //  console.log(\"im finish recoriding\")\r\n        if (this.mediaRecorder.state !== 'inactive') {\r\n            this.mediaRecorder.stop();\r\n            clearInterval(this.updateInterval);\r\n            this.currentRec.duration = new Date().getTime() - this.currentRec.duration;\r\n        }\r\n    }\r\n\r\n    _updatePeaks() {\r\n        try {\r\n            const len = this.currentRec.peaks.length;\r\n            this.currentRec.peaks[len] = this.mixer.currentPeakMinMax[0];\r\n            this.currentRec.peaks[len + 1] = this.mixer.currentPeakMinMax[1];\r\n        } catch{\r\n            console.log(\"Error can't update record waveform\")\r\n        }\r\n    }\r\n\r\n    _onPeakReady(workerEvent){\r\n        if(!workerEvent.data || !(workerEvent.data[0] instanceof Array)){\r\n            throw new Error('Transforming peaks failed')\r\n        }\r\n        const peaks = workerEvent.data[0];\r\n        const { id, duration, fileSize } = this.currentRec;\r\n        this.updateRecord({\r\n            id, duration, fileSize, peaks\r\n        })\r\n    }\r\n\r\n    updateRecord(data){\r\n        console.log('i got peaks')\r\n        const {id, peaks, duration, fileSize} = data;\r\n        store.dispatch(recordFinalUpdate(\r\n            id, peaks, duration, fileSize\r\n        ))\r\n        this.currentRec = Recorder.initRecState();\r\n\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}