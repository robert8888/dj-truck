{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJEKTY\\\\APKI\\\\DjTruck\\\\djtruck\\\\src\\\\pages\\\\app\\\\components\\\\PlayListExplorer\\\\PlayList\\\\PlayList.js\";\nimport React, { Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport UUID from \"uuidjs\";\nimport PlaylistCtx from \"./PlaylistContext\";\nimport { ContextMenuTrigger } from \"react-contextmenu\";\nimport PlaylistTable from \"./PlaylistTable/PlaylistTable\";\nimport PlaylistItem from \"./Playlist_Item/PlaylistItem\";\nimport CtxMenu from \"../../common/ContextMenu/ContextMenu\";\nimport { loadTrack } from \"./../../../../../actions\";\nimport \"./play-list.scss\";\n\nclass PlayList extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.headers = ['Source', 'Title', 'Quality', 'Time', 'Bpm', 'Destination'];\n  }\n\n  setCurrentHover(index) {\n    if (!this.menuVisible) {\n      this.currentHoverElement = index;\n    }\n\n    console.log(index);\n  }\n\n  loadTrack(destination) {\n    const track = this.props.playList[this.currentHoverElement];\n    this.props.load(track, destination);\n  }\n\n  render() {\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"playlist\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, React.createElement(ContextMenuTrigger, {\n      id: \"playlist_ctx_menu\",\n      className: \"playlist\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, React.createElement(PlaylistCtx.Provider, {\n      value: {\n        setHover: this.setCurrentHover.bind(this)\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, React.createElement(PlaylistTable, {\n      headers: this.headers,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, this.props.playList && this.props.playList.map((item, index) => React.createElement(PlaylistItem, {\n      item: item,\n      listIndex: index,\n      key: UUID.genV1(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    })))))), React.createElement(CtxMenu, {\n      id: \"playlist_ctx_menu\",\n      items: {\n        \"Send to A\": this.loadTrack.bind(this, \"A\"),\n        \"Send to B\": this.loadTrack.bind(this, \"B\"),\n        \"Calc BPM\": null,\n        \"Delete\": null\n      },\n      handlers: {\n        onShow: () => this.menuVisible = true,\n        onHide: () => this.menuVisible = false\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  playList: state.playList.list\n});\n\nconst mapDispatchToProps = dispach => ({\n  load: (track, destination) => dispach(loadTrack(track, destination))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PlayList);","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/pages/app/components/PlayListExplorer/PlayList/PlayList.js"],"names":["React","Fragment","connect","UUID","PlaylistCtx","ContextMenuTrigger","PlaylistTable","PlaylistItem","CtxMenu","loadTrack","PlayList","Component","headers","setCurrentHover","index","menuVisible","currentHoverElement","console","log","destination","track","props","playList","load","render","setHover","bind","map","item","genV1","onShow","onHide","mapStateToProps","state","list","mapDispatchToProps","dispach"],"mappings":"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","sourcesContent":["import React, { Fragment } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport UUID from \"uuidjs\";\r\nimport PlaylistCtx from \"./PlaylistContext\";\r\nimport { ContextMenuTrigger } from \"react-contextmenu\"\r\nimport PlaylistTable from \"./PlaylistTable/PlaylistTable\";\r\nimport PlaylistItem from \"./Playlist_Item/PlaylistItem\";\r\nimport CtxMenu from \"../../common/ContextMenu/ContextMenu\";\r\nimport { loadTrack } from \"./../../../../../actions\";\r\nimport \"./play-list.scss\";\r\n\r\n\r\n\r\nclass PlayList extends React.Component {\r\n\r\n    headers = ['Source', 'Title', 'Quality', 'Time', 'Bpm', 'Destination'];\r\n\r\n    setCurrentHover(index) {\r\n        if (!this.menuVisible) {\r\n            this.currentHoverElement = index;\r\n        }\r\n        console.log(index)\r\n    }\r\n\r\n    loadTrack(destination){\r\n        const track = this.props.playList[this.currentHoverElement];\r\n        this.props.load(track, destination)\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <div className=\"playlist\">\r\n                    <ContextMenuTrigger id=\"playlist_ctx_menu\" className=\"playlist\">\r\n                        <PlaylistCtx.Provider value={{ setHover: this.setCurrentHover.bind(this) }}>\r\n                            <PlaylistTable headers={this.headers}>\r\n                                {this.props.playList && this.props.playList.map((item, index) =>\r\n                                    <PlaylistItem item={item} listIndex={index} key={UUID.genV1()} />\r\n                                )}\r\n                            </PlaylistTable>\r\n                        </PlaylistCtx.Provider>\r\n                    </ContextMenuTrigger>\r\n                </div>\r\n                <CtxMenu\r\n                    id=\"playlist_ctx_menu\"\r\n                    items={{\r\n                        \"Send to A\": this.loadTrack.bind(this, \"A\"),\r\n                        \"Send to B\": this.loadTrack.bind(this, \"B\"),\r\n                        \"Calc BPM\": null,\r\n                        \"Delete\": null\r\n                    }}\r\n                    handlers={{\r\n                        onShow: () => this.menuVisible = true,\r\n                        onHide: () => this.menuVisible = false,\r\n                    }}\r\n                />\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    playList: state.playList.list\r\n})\r\n\r\nconst mapDispatchToProps = dispach => ({\r\n    load: (track, destination) => dispach(loadTrack(track, destination))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PlayList);"]},"metadata":{},"sourceType":"module"}