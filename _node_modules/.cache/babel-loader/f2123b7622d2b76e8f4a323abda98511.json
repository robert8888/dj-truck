{"ast":null,"code":"import React, { useMemo, useState, useEffect, useCallback, useContext } from \"react\";\nimport { getApi } from \"./../../../../apis/apiProvider\";\nimport { PLAYBACK_STATE } from \"./ListItem/PlaybackButton/PlaybackButton\"; //getRecordUrl\n\nexport const PlayerContext = React.createContext({\n  btnStateHandlers: {},\n  setProgressHandlers: [],\n  getProgressDataHandler: [],\n  progressUpdaterHandler: null,\n  current: {\n    id: null,\n    start: 0,\n    duration: 0,\n    progress: 0,\n    state: null\n  },\n\n  setBtnCtrlHandler(id, handler) {\n    this.btnStateHandlers[id] = handler;\n  },\n\n  setBtnState(id, state) {\n    this.btnStateHandlers[id](state);\n  },\n\n  setProgressHandler(id, handler) {\n    if (this.setProgressHandlers[id]) {\n      this.setProgressHandlers[id].push(handler);\n    }\n\n    this.setProgressHandlers[id] = [handler];\n  },\n\n  setProgress(id, progress) {\n    for (let handler of this.setProgressHandlers[id]) {\n      handler(progress);\n    }\n\n    this.current.progress = progress;\n  },\n\n  setProgressDataHandler(id, handler) {\n    this.getProgressDataHandler[id] = handler;\n  },\n\n  getProgress(id) {\n    return this.getProgressDataHandler[id]();\n  }\n\n});\nexport function useRecordPlayer() {\n  const [mediaElement, setMediaElement] = useState(null); // const [current, setCurrent] = useState(null);\n  // const [currentStart, setCurrentStart] = useState(0);\n\n  const [progressUpdater, setProgressUpdater] = useState(null);\n  const ctx = useContext(PlayerContext);\n  const api = useMemo(() => {\n    return getApi('RecordsStore');\n  }, [getApi]);\n  useEffect(() => {\n    const medEl = document.createElement('audio');\n    medEl.autoplay = true;\n    medEl.preload = 'metadata';\n    setMediaElement(medEl);\n  }, [setMediaElement]);\n  const startUpdateProg = useCallback(() => {\n    const handler = setInterval(() => {\n      const current = ctx.current;\n\n      if (!current.id || !current.duration) {\n        return;\n      }\n\n      const startTime = current.start * (current.duration / 1000);\n      const currTime = startTime + mediaElement.currentTime;\n      const progress = currTime / (current.duration / 1000);\n      ctx.setProgress(current.id, progress);\n    }, 200);\n    ctx.progressUpdaterHandler = handler;\n  }, [setProgressUpdater, mediaElement, ctx]);\n  const stopUpdateProg = useCallback(() => {\n    clearInterval(ctx.progressUpdaterHandler);\n  }, [ctx]);\n  const playback = useCallback((id, pbState) => {\n    if (pbState === PLAYBACK_STATE.PLAY) {\n      const {\n        progress,\n        duration,\n        filePosition\n      } = ctx.getProgress(id);\n      mediaElement.src = api.getRecordUrl(id, filePosition);\n      mediaElement.play();\n\n      if (ctx.current.id) {\n        ctx.setBtnState(ctx.current.id, PLAYBACK_STATE.PAUSE);\n      }\n\n      ctx.current = {\n        id,\n        duration,\n        start: progress,\n        progress: progress,\n        state: PLAYBACK_STATE.PLAY\n      };\n      startUpdateProg();\n    } else if (pbState === PLAYBACK_STATE.PAUSE) {\n      mediaElement.pause();\n      ctx.current.state = PLAYBACK_STATE.PAUSE;\n      stopUpdateProg();\n    }\n  }, [mediaElement, api, ctx, stopUpdateProg, startUpdateProg]);\n  const seek = useCallback(({\n    id,\n    filePosition,\n    progress,\n    duration\n  }) => {\n    stopUpdateProg();\n\n    if (ctx.current.id && ctx.current.id !== id) {\n      ctx.setBtnState(ctx.current.id, PLAYBACK_STATE.PAUSE);\n    }\n\n    mediaElement.src = api.getRecordUrl(id, filePosition);\n    ctx.setBtnState(id, PLAYBACK_STATE.PLAY);\n    ctx.setProgress(id, progress);\n    ctx.current = {\n      id,\n      start: progress,\n      duration\n    };\n    startUpdateProg();\n  }, [ctx, api, mediaElement, stopUpdateProg, startUpdateProg]);\n  return [playback, seek];\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/pages/common/components/RecordList/useRecordPlayer.js"],"names":["React","useMemo","useState","useEffect","useCallback","useContext","getApi","PLAYBACK_STATE","PlayerContext","createContext","btnStateHandlers","setProgressHandlers","getProgressDataHandler","progressUpdaterHandler","current","id","start","duration","progress","state","setBtnCtrlHandler","handler","setBtnState","setProgressHandler","push","setProgress","setProgressDataHandler","getProgress","useRecordPlayer","mediaElement","setMediaElement","progressUpdater","setProgressUpdater","ctx","api","medEl","document","createElement","autoplay","preload","startUpdateProg","setInterval","startTime","currTime","currentTime","stopUpdateProg","clearInterval","playback","pbState","PLAY","filePosition","src","getRecordUrl","play","PAUSE","pause","seek"],"mappings":"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","sourcesContent":["import React, { useMemo, useState, useEffect, useCallback, useContext } from \"react\"\r\nimport { getApi } from \"./../../../../apis/apiProvider\";\r\nimport {PLAYBACK_STATE} from \"./ListItem/PlaybackButton/PlaybackButton\";\r\n\r\n//getRecordUrl\r\nexport const PlayerContext = React.createContext({\r\n    btnStateHandlers: {},\r\n    setProgressHandlers:[],\r\n    getProgressDataHandler: [],\r\n    progressUpdaterHandler: null, \r\n    current : {\r\n        id: null,\r\n        start: 0,\r\n        duration: 0,\r\n        progress: 0,\r\n        state : null,\r\n    },\r\n\r\n    setBtnCtrlHandler(id, handler){\r\n        this.btnStateHandlers[id] = handler;\r\n    },\r\n\r\n    setBtnState(id, state){\r\n        this.btnStateHandlers[id](state)\r\n    },\r\n\r\n    setProgressHandler(id, handler){\r\n        if(this.setProgressHandlers[id]){\r\n            this.setProgressHandlers[id].push(handler);\r\n        }\r\n        this.setProgressHandlers[id] = [handler];\r\n    },\r\n\r\n    setProgress(id, progress){\r\n        for(let handler of this.setProgressHandlers[id]){\r\n            handler(progress)\r\n        }\r\n        this.current.progress = progress;\r\n    },\r\n  \r\n    setProgressDataHandler(id, handler){\r\n        this.getProgressDataHandler[id] = handler;\r\n    },\r\n\r\n    getProgress(id){\r\n        return this.getProgressDataHandler[id]();\r\n    }\r\n})\r\n\r\nexport function useRecordPlayer(){\r\n    const [mediaElement, setMediaElement] = useState(null);\r\n    // const [current, setCurrent] = useState(null);\r\n    // const [currentStart, setCurrentStart] = useState(0);\r\n    const [progressUpdater, setProgressUpdater] = useState(null);\r\n    const ctx = useContext(PlayerContext);\r\n\r\n    const api = useMemo(()=>{\r\n        return getApi('RecordsStore');\r\n    }, [getApi])\r\n\r\n    useEffect(()=>{\r\n        const medEl = document.createElement('audio');\r\n        medEl.autoplay = true;\r\n        medEl.preload = 'metadata'\r\n        setMediaElement(medEl)\r\n    }, [setMediaElement])\r\n\r\n    const startUpdateProg = useCallback(()=>{\r\n        const handler = setInterval(()=>{\r\n            const current = ctx.current;\r\n            if(!current.id || !current.duration){\r\n                return;\r\n            }\r\n            const startTime = current.start * (current.duration/1000);\r\n            const currTime = startTime + mediaElement.currentTime;\r\n            const progress = currTime / (current.duration/1000);\r\n            ctx.setProgress(current.id, progress);\r\n        }, 200)\r\n        ctx.progressUpdaterHandler = handler;\r\n    }, [setProgressUpdater, mediaElement, ctx])\r\n\r\n    const stopUpdateProg = useCallback(()=>{\r\n        clearInterval(ctx.progressUpdaterHandler);\r\n    }, [ctx])\r\n\r\n    const playback = useCallback((id, pbState)=>{\r\n        if(pbState === PLAYBACK_STATE.PLAY){\r\n            const {progress, duration, filePosition} = ctx.getProgress(id);\r\n            mediaElement.src = api.getRecordUrl(id, filePosition);\r\n            mediaElement.play();\r\n            if(ctx.current.id){\r\n                ctx.setBtnState(ctx.current.id, PLAYBACK_STATE.PAUSE)\r\n            } \r\n            ctx.current = {\r\n                id,\r\n                duration,\r\n                start: progress,\r\n                progress : progress,\r\n                state: PLAYBACK_STATE.PLAY,\r\n            }\r\n            startUpdateProg()\r\n        } else if(pbState === PLAYBACK_STATE.PAUSE){\r\n            mediaElement.pause();\r\n            ctx.current.state = PLAYBACK_STATE.PAUSE;\r\n            stopUpdateProg(); \r\n        }\r\n    }, [\r\n        mediaElement, \r\n        api, \r\n        ctx, \r\n        stopUpdateProg, \r\n        startUpdateProg,\r\n    ])\r\n\r\n    const seek = useCallback(({id, filePosition, progress, duration}) => {\r\n        stopUpdateProg();\r\n        if(ctx.current.id && ctx.current.id !== id){\r\n            ctx.setBtnState(ctx.current.id, PLAYBACK_STATE.PAUSE);\r\n        }\r\n        mediaElement.src = api.getRecordUrl(id, filePosition);\r\n        ctx.setBtnState(id, PLAYBACK_STATE.PLAY);\r\n        ctx.setProgress(id, progress);\r\n        ctx.current = {\r\n            id,\r\n            start: progress,\r\n            duration\r\n        }\r\n        startUpdateProg();\r\n\r\n    }, [ctx, api , mediaElement,stopUpdateProg, startUpdateProg])\r\n\r\n    return [playback, seek ]\r\n}"]},"metadata":{},"sourceType":"module"}