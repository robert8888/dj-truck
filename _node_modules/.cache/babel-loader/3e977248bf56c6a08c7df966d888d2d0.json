{"ast":null,"code":"import { get } from \"lodash/object\";\nimport { hideLoading, showLoading } from 'react-redux-loading-bar';\nimport { call, put, select, takeEvery } from \"redux-saga/effects\";\nimport UUID from \"uuidjs\";\nimport { ACTIONS, createPlaylist, pushLog } from \"../../actions\";\nimport { getApi } from \"./../../apis/apiProvider\";\nimport { findClosesDir, generateTemplateName as generateName } from \"./../../reducers/console/playlist/utils\";\nimport Log from \"./../../utils/logger/logger\";\nimport { handle as readDirSagaHandle } from \"./reqReadDirSaga\";\nexport default function* createDirRequestSaga() {\n  yield takeEvery(ACTIONS.PL_CREATE_PLAYLIST_REQUEST, handle);\n}\n\nconst getToken = state => state.user.token;\n\nconst getCurrentSelection = state => state.playList.currentSelection;\n\nconst getParentPath = (state, currentSelection) => findClosesDir(state, currentSelection);\n\nconst generatePlaylistName = (state, parrentPath, base) => generateName(state.playList, parrentPath, base);\n\nconst getParrentDir = (state, path) => get(state.playList, path);\n\nexport function* handle(action) {\n  const path = ['saga', 'playlist', 'request create playlist'];\n  const token = yield select(getToken);\n  let renameMode = false;\n\n  if (!token) {\n    if (!action.name) {\n      renameMode = true;\n    }\n\n    return yield put(action.name, UUID.getV1().toString(), renameMode, true);\n  }\n\n  try {\n    var _response$data;\n\n    yield put(showLoading());\n    const {\n      callQuery,\n      queries\n    } = getApi(\"UserAssets\");\n    const currentSelection = yield select(getCurrentSelection);\n    const parrentPath = yield select(getParentPath, currentSelection);\n    let playlistName;\n\n    if (!action.name) {\n      playlistName = yield select(generatePlaylistName, parrentPath, \"New playlist\");\n      renameMode = true;\n    } else {\n      playlistName = yield select(generatePlaylistName, parrentPath, action.name);\n    }\n\n    const parrentDir = yield select(getParrentDir, parrentPath);\n\n    if (!parrentDir._loaded) {\n      yield call(readDirSagaHandle, {\n        path: parrentPath\n      });\n    }\n\n    let response = yield callQuery(queries.createPlaylistQl(parrentDir._id, playlistName), token);\n\n    if (response.errors || !((_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.createPlaylist)) {\n      throw new Error('Server resposne contains errors' + response.errors);\n    }\n\n    var id = response.data.createPlaylist.id;\n    renameMode = action.renameMode !== undefined ? action.renameMode : renameMode;\n    yield put(createPlaylist(playlistName, id, renameMode, action.setCurrent));\n    yield put(pushLog(new Log(`Creating playlist in database successful id: ${id}`, path)));\n  } catch (error) {\n    yield put(pushLog(Log.Error(path, \"Can't create playlist in database\" + error.message, \"Sorry. During process creating playlist occurred a problem\", error)));\n  } finally {\n    yield put(hideLoading());\n  }\n\n  return id;\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/sagas/playlists/reqCreatePlaylistSaga.js"],"names":["get","hideLoading","showLoading","call","put","select","takeEvery","UUID","ACTIONS","createPlaylist","pushLog","getApi","findClosesDir","generateTemplateName","generateName","Log","handle","readDirSagaHandle","createDirRequestSaga","PL_CREATE_PLAYLIST_REQUEST","getToken","state","user","token","getCurrentSelection","playList","currentSelection","getParentPath","generatePlaylistName","parrentPath","base","getParrentDir","path","action","renameMode","name","getV1","toString","callQuery","queries","playlistName","parrentDir","_loaded","response","createPlaylistQl","_id","errors","data","Error","id","undefined","setCurrent","error","message"],"mappings":"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","sourcesContent":["import { get } from \"lodash/object\";\r\nimport { hideLoading, showLoading } from 'react-redux-loading-bar';\r\nimport { call, put, select, takeEvery } from \"redux-saga/effects\";\r\nimport UUID from \"uuidjs\";\r\nimport { ACTIONS, createPlaylist, pushLog } from \"../../actions\";\r\nimport { getApi } from \"./../../apis/apiProvider\";\r\nimport { findClosesDir, generateTemplateName as generateName } from \"./../../reducers/console/playlist/utils\";\r\nimport Log from \"./../../utils/logger/logger\";\r\nimport { handle as readDirSagaHandle } from \"./reqReadDirSaga\";\r\n\r\n\r\nexport default function* createDirRequestSaga() {\r\n    yield takeEvery(ACTIONS.PL_CREATE_PLAYLIST_REQUEST, handle)\r\n}\r\n\r\nconst getToken = state => state.user.token;\r\n\r\nconst getCurrentSelection = state => state.playList.currentSelection;\r\n\r\nconst getParentPath = (state, currentSelection) =>\r\n    findClosesDir(state, currentSelection)\r\n\r\nconst generatePlaylistName = (state, parrentPath, base) =>\r\n    generateName(state.playList, parrentPath, base);\r\n\r\nconst getParrentDir = (state, path) => get(state.playList, path);\r\n\r\nexport function* handle(action) {\r\n    const path = ['saga', 'playlist', 'request create playlist'];\r\n    const token = yield select(getToken);\r\n\r\n    let renameMode = false;\r\n    if (!token) {\r\n        if (!action.name) {\r\n            renameMode = true;\r\n        }\r\n        return yield put(action.name, UUID.getV1().toString(), renameMode, true);\r\n    }\r\n    try {\r\n        yield put(showLoading());\r\n        const { callQuery, queries } = getApi(\"UserAssets\");\r\n        const currentSelection = yield select(getCurrentSelection);\r\n        const parrentPath = yield select(getParentPath, currentSelection);\r\n\r\n        let playlistName;\r\n        if (!action.name) {\r\n            playlistName = yield select(generatePlaylistName, parrentPath, \"New playlist\");\r\n            renameMode = true;\r\n        } else {\r\n            playlistName = yield select(generatePlaylistName, parrentPath, action.name);\r\n        }\r\n\r\n        const parrentDir = yield select(getParrentDir, parrentPath);\r\n        if (!parrentDir._loaded) {\r\n            yield call(readDirSagaHandle, { path: parrentPath })\r\n        }\r\n\r\n        let response = yield callQuery(queries.createPlaylistQl(parrentDir._id, playlistName), token);\r\n        if (response.errors || !response.data?.createPlaylist) {\r\n            throw new Error('Server resposne contains errors' + response.errors)\r\n        }\r\n        var id = response.data.createPlaylist.id;\r\n\r\n        renameMode = (action.renameMode !== undefined) ? action.renameMode : renameMode;\r\n\r\n        yield put(createPlaylist(playlistName, id, renameMode, action.setCurrent));\r\n\r\n        yield put(pushLog(new Log(`Creating playlist in database successful id: ${id}`, path)))\r\n    } catch (error) {\r\n        yield put(pushLog(Log.Error(\r\n            path,\r\n            \"Can't create playlist in database\" + error.message,\r\n            \"Sorry. During process creating playlist occurred a problem\",\r\n            error\r\n        )))\r\n    } finally {\r\n        yield put(hideLoading())\r\n    }\r\n\r\n    return id;\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}