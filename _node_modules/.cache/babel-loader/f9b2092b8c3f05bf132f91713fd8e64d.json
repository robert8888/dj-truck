{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJEKTY\\\\APKI\\\\DjTruck\\\\djtruck\\\\src\\\\pages\\\\app\\\\components\\\\PlayListExplorer\\\\Explorer\\\\ExplorerTree\\\\ExplorerTree.js\";\nimport React, { useCallback, useState, useRef, Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport ExplorerContextMenu from \"./../../../common/ContextMenu/ContextMenu\";\nimport { ContextMenuTrigger } from \"react-contextmenu\";\nimport RenameInput from \"./RenameInput/RenameInput\";\nimport { toggleDir as toggleDirAction, setSelection, openCurrentPlayList, renameSelected, deleteSelected, createDir, createPlaylist } from \"./../../../../../../actions\";\nimport { isEmpty, sortObj } from \"./../../../../../../utils/objects/helpers\";\nimport UUID from \"uuidjs\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport ClassName from \"classnames\";\nimport { faFolder, faFile, faAngleRight, faAngleDown } from \"@fortawesome/free-solid-svg-icons\";\nimport { useDoubleClick } from \"./useDoubleClick\";\nimport \"./explorer-tree.scss\";\nimport DirElement from \"./DirElement/DirElement\";\nimport FileElement from \"./FileElement/FileElement\";\n\nconst ExplorerTree = props => {\n  const setSelectionHandler = props.setSelection;\n  const [renameMode, setRenameMode] = useState(false);\n\n  const renameInput = name => {\n    return React.createElement(RenameInput, {\n      name: name,\n      onChange: value => {\n        props.renameSelected(value);\n        setRenameMode(false);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    });\n  };\n\n  const [dirClickHandler] = useDoubleClick({\n    clickHandler: path => {\n      if (!renameMode) {\n        props.setSelection(path);\n      }\n    },\n    doubleClickHandler: path => props.toggleDir(path)\n  });\n\n  const getDirElement = ({ ...params\n  }) => {\n    const fullPath = [...params.path, params.name];\n    return React.createElement(DirElement, Object.assign({}, params, {\n      renameMode: renameMode,\n      renameInput: renameInput,\n      onClick: dirClickHandler.bind(null, fullPath),\n      buttonClick: props.toggleDir.bind(null, fullPath),\n      onContextMenu: props.setSelection.bind(null, fullPath),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }));\n  };\n\n  const [fileClickHandler] = useDoubleClick({\n    clickHandler: props.setSelection,\n    doubleClickHandler: props.openSelected\n  });\n\n  const getFileElement = (name, path) => {\n    return React.createElement(FileElement, {\n      name: name,\n      path: path,\n      renameMode: renameMode,\n      renameInput: renameInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    });\n  };\n  /*  const getFileElement = (name, path) => {\r\n        let currentSelected = false;\r\n        if ([...path, name].join(\"\") === props.currentSelection.join(\"\")) {\r\n            currentSelected = true;\r\n        }\r\n        const liClassList = ClassName(\r\n            \"list-item item-file\",\r\n            { \"item--selected\": currentSelected }\r\n        )\r\n        let content = name;\r\n        if (currentSelected && renameMode) {\r\n            content = renameInput(name)\r\n        }\r\n        return (\r\n            <li\r\n                className={liClassList}\r\n                onClick={((!renameMode) ? fileClickHandler.bind(null, [...path, name]) : null)}\r\n                onContextMenu={props.setSelection.bind(null, [...path, name])}\r\n                data-path={path.join(\"/\")}\r\n                key={UUID.genV1()}>\r\n                <FontAwesomeIcon className=\"icon icon-file\" icon={faFile} />\r\n                {content}\r\n            </li>\r\n        );\r\n    }*/\n\n\n  const renderDirElements = useCallback((name, content, path) => {\n    content = sortObj(content);\n\n    if (content instanceof Array) {\n      return getFileElement(name, path);\n    } else {\n      if (content._open === true) {\n        return React.createElement(Fragment, {\n          key: UUID.genV1(),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 115\n          },\n          __self: this\n        }, getDirElement({\n          name,\n          path,\n          open: true\n        }), renderDir(content, [...path, name]));\n      } else {\n        if (isEmpty(content)) {\n          return getDirElement({\n            name,\n            path,\n            open: false,\n            empty: true\n          });\n        }\n\n        return getDirElement({\n          name,\n          path,\n          open: false\n        });\n      }\n    }\n  });\n  const renderDir = useCallback((dir, path) => {\n    return React.createElement(\"ul\", {\n      className: \"list-dir dir-content\",\n      key: UUID.generate(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, Object.entries(dir).map(([name, content]) => {\n      if (name.startsWith(\"_\")) {\n        return null;\n      }\n\n      return renderDirElements(name, content, path);\n    }));\n  });\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }, React.createElement(ContextMenuTrigger, {\n    id: \"explorer_context_menu\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"explorer-tree\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }, renderDir(props.root, ['root']))), React.createElement(ExplorerContextMenu, {\n    id: \"explorer_context_menu\",\n    items: {\n      \"Add Playlist\": () => {\n        props.createPlaylist();\n        setRenameMode(true);\n      },\n      \"Add folder\": () => {\n        props.createDir();\n        setRenameMode(true);\n      },\n      \"Rename\": setRenameMode.bind(null, true),\n      \"Delete\": props.deleteSelected.bind(null)\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }));\n};\n\nconst mapStateToProps = state => ({\n  root: state.playList.root,\n  currentSelection: state.playList.currentSelection\n});\n\nconst mapDispatchToProps = dispatch => ({\n  toggleDir: path => dispatch(toggleDirAction(path)),\n  setSelection: path => dispatch(setSelection(path)),\n  openSelected: path => dispatch(openCurrentPlayList(path)),\n  renameSelected: newName => dispatch(renameSelected(newName)),\n  deleteSelected: () => dispatch(deleteSelected()),\n  createDir: () => dispatch(createDir(null)),\n  createPlaylist: () => dispatch(createPlaylist(null))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ExplorerTree);","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/pages/app/components/PlayListExplorer/Explorer/ExplorerTree/ExplorerTree.js"],"names":["React","useCallback","useState","useRef","Fragment","connect","ExplorerContextMenu","ContextMenuTrigger","RenameInput","toggleDir","toggleDirAction","setSelection","openCurrentPlayList","renameSelected","deleteSelected","createDir","createPlaylist","isEmpty","sortObj","UUID","FontAwesomeIcon","ClassName","faFolder","faFile","faAngleRight","faAngleDown","useDoubleClick","DirElement","FileElement","ExplorerTree","props","setSelectionHandler","renameMode","setRenameMode","renameInput","name","value","dirClickHandler","clickHandler","path","doubleClickHandler","getDirElement","params","fullPath","bind","fileClickHandler","openSelected","getFileElement","renderDirElements","content","Array","_open","genV1","open","renderDir","empty","dir","generate","Object","entries","map","startsWith","root","mapStateToProps","state","playList","currentSelection","mapDispatchToProps","dispatch","newName"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,QAA7B,EAAuCC,MAAvC,EAA+CC,QAA/C,QAA+D,OAA/D;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,mBAAP,MAAgC,2CAAhC;AACA,SAASC,kBAAT,QAAmC,mBAAnC;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,SACIC,SAAS,IAAIC,eADjB,EAEIC,YAFJ,EAGIC,mBAHJ,EAIIC,cAJJ,EAKIC,cALJ,EAMIC,SANJ,EAOIC,cAPJ,QAQO,6BARP;AASA,SAASC,OAAT,EAAkBC,OAAlB,QAAiC,2CAAjC;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SACIC,QADJ,EAEIC,MAFJ,EAGIC,YAHJ,EAIIC,WAJJ,QAKO,mCALP;AAMA,SAASC,cAAT,QAA+B,kBAA/B;AACA,OAAO,sBAAP;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;;AAEA,MAAMC,YAAY,GAAGC,KAAK,IAAI;AAC1B,QAAMC,mBAAmB,GAAGD,KAAK,CAACnB,YAAlC;AACA,QAAM,CAACqB,UAAD,EAAaC,aAAb,IAA8B/B,QAAQ,CAAC,KAAD,CAA5C;;AAEA,QAAMgC,WAAW,GAAGC,IAAI,IAAI;AACxB,WACI,oBAAC,WAAD;AAAa,MAAA,IAAI,EAAEA,IAAnB;AAAyB,MAAA,QAAQ,EAAEC,KAAK,IAAI;AACxCN,QAAAA,KAAK,CAACjB,cAAN,CAAqBuB,KAArB;AACAH,QAAAA,aAAa,CAAC,KAAD,CAAb;AACH,OAHD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AAMH,GAPD;;AASA,QAAM,CAACI,eAAD,IAAoBX,cAAc,CAAC;AACrCY,IAAAA,YAAY,EAAGC,IAAD,IAAQ;AAClB,UAAG,CAACP,UAAJ,EAAe;AACXF,QAAAA,KAAK,CAACnB,YAAN,CAAmB4B,IAAnB;AACH;AACJ,KALoC;AAMrCC,IAAAA,kBAAkB,EAAED,IAAI,IAAIT,KAAK,CAACrB,SAAN,CAAgB8B,IAAhB;AANS,GAAD,CAAxC;;AASA,QAAME,aAAa,GAAG,CAAC,EAAC,GAAGC;AAAJ,GAAD,KAAiB;AACnC,UAAMC,QAAQ,GAAG,CAAC,GAAGD,MAAM,CAACH,IAAX,EAAiBG,MAAM,CAACP,IAAxB,CAAjB;AACA,WACI,oBAAC,UAAD,oBACQO,MADR;AAEI,MAAA,UAAU,EAAGV,UAFjB;AAGI,MAAA,WAAW,EAAEE,WAHjB;AAII,MAAA,OAAO,EAAEG,eAAe,CAACO,IAAhB,CAAqB,IAArB,EAA2BD,QAA3B,CAJb;AAKI,MAAA,WAAW,EAAIb,KAAK,CAACrB,SAAN,CAAgBmC,IAAhB,CAAqB,IAArB,EAA2BD,QAA3B,CALnB;AAMI,MAAA,aAAa,EAAEb,KAAK,CAACnB,YAAN,CAAmBiC,IAAnB,CAAwB,IAAxB,EAA8BD,QAA9B,CANnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADJ;AAUH,GAZD;;AAcA,QAAM,CAACE,gBAAD,IAAqBnB,cAAc,CAAC;AACtCY,IAAAA,YAAY,EAAER,KAAK,CAACnB,YADkB;AAEtC6B,IAAAA,kBAAkB,EAAEV,KAAK,CAACgB;AAFY,GAAD,CAAzC;;AAKA,QAAMC,cAAc,GAAG,CAACZ,IAAD,EAAOI,IAAP,KAAgB;AACnC,WACI,oBAAC,WAAD;AACI,MAAA,IAAI,EAAEJ,IADV;AAEI,MAAA,IAAI,EAAEI,IAFV;AAGI,MAAA,UAAU,EAAEP,UAHhB;AAII,MAAA,WAAW,EAAEE,WAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AAQH,GATD;AAWF;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BE,QAAMc,iBAAiB,GAAG/C,WAAW,CAAC,CAACkC,IAAD,EAAOc,OAAP,EAAgBV,IAAhB,KAAyB;AAC3DU,IAAAA,OAAO,GAAG/B,OAAO,CAAC+B,OAAD,CAAjB;;AACA,QAAIA,OAAO,YAAYC,KAAvB,EAA8B;AAC1B,aAAOH,cAAc,CAACZ,IAAD,EAAOI,IAAP,CAArB;AACH,KAFD,MAEO;AACH,UAAIU,OAAO,CAACE,KAAR,KAAkB,IAAtB,EAA4B;AACxB,eACI,oBAAC,QAAD;AAAU,UAAA,GAAG,EAAEhC,IAAI,CAACiC,KAAL,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACKX,aAAa,CAAC;AAACN,UAAAA,IAAD;AAAOI,UAAAA,IAAP;AAAac,UAAAA,IAAI,EAAG;AAApB,SAAD,CADlB,EAEKC,SAAS,CAACL,OAAD,EAAU,CAAC,GAAGV,IAAJ,EAAUJ,IAAV,CAAV,CAFd,CADJ;AAMH,OAPD,MAOO;AACH,YAAIlB,OAAO,CAACgC,OAAD,CAAX,EAAsB;AAClB,iBAAOR,aAAa,CAAC;AAACN,YAAAA,IAAD;AAAOI,YAAAA,IAAP;AAAac,YAAAA,IAAI,EAAE,KAAnB;AAA0BE,YAAAA,KAAK,EAAE;AAAjC,WAAD,CAApB;AACH;;AACD,eAAOd,aAAa,CAAC;AAACN,UAAAA,IAAD;AAAOI,UAAAA,IAAP;AAAac,UAAAA,IAAI,EAAE;AAAnB,SAAD,CAApB;AACH;AACJ;AACJ,GAnBoC,CAArC;AAsBA,QAAMC,SAAS,GAAGrD,WAAW,CAAC,CAACuD,GAAD,EAAMjB,IAAN,KAAe;AACzC,WACI;AAAI,MAAA,SAAS,EAAC,sBAAd;AAAqC,MAAA,GAAG,EAAEpB,IAAI,CAACsC,QAAL,EAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEQC,MAAM,CAACC,OAAP,CAAeH,GAAf,EAAoBI,GAApB,CAAwB,CAAC,CAACzB,IAAD,EAAOc,OAAP,CAAD,KAAqB;AACzC,UAAId,IAAI,CAAC0B,UAAL,CAAgB,GAAhB,CAAJ,EAA0B;AACtB,eAAO,IAAP;AACH;;AACD,aAAOb,iBAAiB,CAACb,IAAD,EAAOc,OAAP,EAAgBV,IAAhB,CAAxB;AACH,KALD,CAFR,CADJ;AAYH,GAb4B,CAA7B;AAeA,SACI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,kBAAD;AAAoB,IAAA,EAAE,EAAC,uBAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKe,SAAS,CAACxB,KAAK,CAACgC,IAAP,EAAa,CAAC,MAAD,CAAb,CADd,CADJ,CADJ,EAOI,oBAAC,mBAAD;AACI,IAAA,EAAE,EAAC,uBADP;AAEI,IAAA,KAAK,EAAE;AACH,sBAAgB,MAAM;AAClBhC,QAAAA,KAAK,CAACd,cAAN;AACAiB,QAAAA,aAAa,CAAC,IAAD,CAAb;AACH,OAJE;AAKH,oBAAc,MAAM;AAChBH,QAAAA,KAAK,CAACf,SAAN;AACAkB,QAAAA,aAAa,CAAC,IAAD,CAAb;AACH,OARE;AASH,gBAAUA,aAAa,CAACW,IAAd,CAAmB,IAAnB,EAAyB,IAAzB,CATP;AAUH,gBAAUd,KAAK,CAAChB,cAAN,CAAqB8B,IAArB,CAA0B,IAA1B;AAVP,KAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPJ,CADJ;AAwBH,CA3ID;;AA6IA,MAAMmB,eAAe,GAAGC,KAAK,KAAK;AAC9BF,EAAAA,IAAI,EAAEE,KAAK,CAACC,QAAN,CAAeH,IADS;AAE9BI,EAAAA,gBAAgB,EAAEF,KAAK,CAACC,QAAN,CAAeC;AAFH,CAAL,CAA7B;;AAKA,MAAMC,kBAAkB,GAAGC,QAAQ,KAAK;AACpC3D,EAAAA,SAAS,EAAE8B,IAAI,IAAI6B,QAAQ,CAAC1D,eAAe,CAAC6B,IAAD,CAAhB,CADS;AAEpC5B,EAAAA,YAAY,EAAE4B,IAAI,IAAI6B,QAAQ,CAACzD,YAAY,CAAC4B,IAAD,CAAb,CAFM;AAGpCO,EAAAA,YAAY,EAAEP,IAAI,IAAI6B,QAAQ,CAACxD,mBAAmB,CAAC2B,IAAD,CAApB,CAHM;AAIpC1B,EAAAA,cAAc,EAAEwD,OAAO,IAAID,QAAQ,CAACvD,cAAc,CAACwD,OAAD,CAAf,CAJC;AAKpCvD,EAAAA,cAAc,EAAE,MAAMsD,QAAQ,CAACtD,cAAc,EAAf,CALM;AAMpCC,EAAAA,SAAS,EAAE,MAAMqD,QAAQ,CAACrD,SAAS,CAAC,IAAD,CAAV,CANW;AAOpCC,EAAAA,cAAc,EAAE,MAAMoD,QAAQ,CAACpD,cAAc,CAAC,IAAD,CAAf;AAPM,CAAL,CAAnC;;AAUA,eAAeX,OAAO,CAAC0D,eAAD,EAAkBI,kBAAlB,CAAP,CAA6CtC,YAA7C,CAAf","sourcesContent":["import React, { useCallback, useState, useRef, Fragment } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport ExplorerContextMenu from \"./../../../common/ContextMenu/ContextMenu\";\r\nimport { ContextMenuTrigger } from \"react-contextmenu\";\r\nimport RenameInput from \"./RenameInput/RenameInput\"\r\nimport {\r\n    toggleDir as toggleDirAction,\r\n    setSelection,\r\n    openCurrentPlayList,\r\n    renameSelected,\r\n    deleteSelected,\r\n    createDir,\r\n    createPlaylist\r\n} from \"./../../../../../../actions\"\r\nimport { isEmpty, sortObj } from \"./../../../../../../utils/objects/helpers\";\r\nimport UUID from \"uuidjs\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport ClassName from \"classnames\";\r\nimport {\r\n    faFolder,\r\n    faFile,\r\n    faAngleRight,\r\n    faAngleDown\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { useDoubleClick } from \"./useDoubleClick\";\r\nimport \"./explorer-tree.scss\";\r\nimport DirElement from \"./DirElement/DirElement\";\r\nimport FileElement from \"./FileElement/FileElement\";\r\n\r\nconst ExplorerTree = props => {\r\n    const setSelectionHandler = props.setSelection;\r\n    const [renameMode, setRenameMode] = useState(false);\r\n\r\n    const renameInput = name => {\r\n        return (\r\n            <RenameInput name={name} onChange={value => {\r\n                props.renameSelected(value);\r\n                setRenameMode(false)\r\n            }} />\r\n        )\r\n    }\r\n\r\n    const [dirClickHandler] = useDoubleClick({\r\n        clickHandler: (path)=>{\r\n            if(!renameMode){\r\n                props.setSelection(path)\r\n            }\r\n        },\r\n        doubleClickHandler: path => props.toggleDir(path),\r\n    })\r\n\r\n    const getDirElement = ({...params}) => {\r\n        const fullPath = [...params.path, params.name]\r\n        return (\r\n            <DirElement \r\n                {...params}\r\n                renameMode ={renameMode}\r\n                renameInput={renameInput}\r\n                onClick={dirClickHandler.bind(null, fullPath)}\r\n                buttonClick = {props.toggleDir.bind(null, fullPath)}\r\n                onContextMenu={props.setSelection.bind(null, fullPath)}\r\n                 />\r\n        )\r\n    }\r\n\r\n    const [fileClickHandler] = useDoubleClick({\r\n        clickHandler: props.setSelection,\r\n        doubleClickHandler: props.openSelected\r\n    })\r\n\r\n    const getFileElement = (name, path) => {\r\n        return (\r\n            <FileElement\r\n                name={name}\r\n                path={path}\r\n                renameMode={renameMode}\r\n                renameInput={renameInput}\r\n            />\r\n        )\r\n    }\r\n\r\n  /*  const getFileElement = (name, path) => {\r\n        let currentSelected = false;\r\n        if ([...path, name].join(\"\") === props.currentSelection.join(\"\")) {\r\n            currentSelected = true;\r\n        }\r\n        const liClassList = ClassName(\r\n            \"list-item item-file\",\r\n            { \"item--selected\": currentSelected }\r\n        )\r\n        let content = name;\r\n        if (currentSelected && renameMode) {\r\n            content = renameInput(name)\r\n        }\r\n        return (\r\n            <li\r\n                className={liClassList}\r\n                onClick={((!renameMode) ? fileClickHandler.bind(null, [...path, name]) : null)}\r\n                onContextMenu={props.setSelection.bind(null, [...path, name])}\r\n                data-path={path.join(\"/\")}\r\n                key={UUID.genV1()}>\r\n                <FontAwesomeIcon className=\"icon icon-file\" icon={faFile} />\r\n                {content}\r\n            </li>\r\n        );\r\n    }*/\r\n\r\n    const renderDirElements = useCallback((name, content, path) => {\r\n        content = sortObj(content);\r\n        if (content instanceof Array) {\r\n            return getFileElement(name, path)\r\n        } else {\r\n            if (content._open === true) {\r\n                return (\r\n                    <Fragment key={UUID.genV1()}>\r\n                        {getDirElement({name, path, open : true})}\r\n                        {renderDir(content, [...path, name])}\r\n                    </Fragment>\r\n                )\r\n            } else {\r\n                if (isEmpty(content)) {\r\n                    return getDirElement({name, path, open: false, empty: true})\r\n                }\r\n                return getDirElement({name, path, open: false})\r\n            }\r\n        }\r\n    })\r\n\r\n\r\n    const renderDir = useCallback((dir, path) => {\r\n        return (\r\n            <ul className=\"list-dir dir-content\" key={UUID.generate()}>\r\n                {\r\n                    Object.entries(dir).map(([name, content]) => {\r\n                        if (name.startsWith(\"_\")) {\r\n                            return null;\r\n                        }\r\n                        return renderDirElements(name, content, path);\r\n                    })\r\n                }\r\n            </ul>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <Fragment>\r\n            <ContextMenuTrigger id=\"explorer_context_menu\">\r\n                <div className=\"explorer-tree\">\r\n                    {renderDir(props.root, ['root'])}\r\n                </div>\r\n            </ContextMenuTrigger>\r\n\r\n            <ExplorerContextMenu\r\n                id=\"explorer_context_menu\"\r\n                items={{\r\n                    \"Add Playlist\": () => {\r\n                        props.createPlaylist();\r\n                        setRenameMode(true)\r\n                    },\r\n                    \"Add folder\": () => {\r\n                        props.createDir();\r\n                        setRenameMode(true);\r\n                    },\r\n                    \"Rename\": setRenameMode.bind(null, true),\r\n                    \"Delete\": props.deleteSelected.bind(null),\r\n                }} />\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    root: state.playList.root,\r\n    currentSelection: state.playList.currentSelection\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    toggleDir: path => dispatch(toggleDirAction(path)),\r\n    setSelection: path => dispatch(setSelection(path)),\r\n    openSelected: path => dispatch(openCurrentPlayList(path)),\r\n    renameSelected: newName => dispatch(renameSelected(newName)),\r\n    deleteSelected: () => dispatch(deleteSelected()),\r\n    createDir: () => dispatch(createDir(null)),\r\n    createPlaylist: () => dispatch(createPlaylist(null)),\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ExplorerTree);"]},"metadata":{},"sourceType":"module"}