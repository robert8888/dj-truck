{"ast":null,"code":"export default class Mixer {\n  constructor(channels) {\n    this.channels = channels;\n    this.audioNodes = {\n      channels: {}\n    };\n\n    for (let channelName of this.channels.getChannelNames()) {\n      this.audioNodes.channels = { ...this.audioNodes.channels,\n        [channelName]: {}\n      };\n    }\n  }\n\n  setUpAudioNodes(channelName) {\n    let audioCtx = this.channels.getChannel(channelName).backend.ac;\n  }\n\n  applyAudioNode(channelName, varName, node) {}\n\n  setGain(channelName, knobValue) {\n    var _this$audioNodes$chan;\n\n    if (knobValue === 0) return; // idl run\n\n    let gain = 1 + knobValue / 100;\n    let audioCtx = this.channels.getChannel(channelName).backend.ac;\n    let gainNode = (_this$audioNodes$chan = this.audioNodes.channels[channelName]) === null || _this$audioNodes$chan === void 0 ? void 0 : _this$audioNodes$chan.gainNode;\n\n    if (!gainNode) {\n      gainNode = audioCtx.createGain();\n      this.channels.getChannel(channelName).backend.setFilter(gainNode);\n      this.audioNodes.channels[channelName].gainNode = gainNode;\n    }\n\n    gainNode.gain.setValueAtTime(parseFloat(gain), audioCtx.currentTime);\n  }\n\n  setHigh(channelName, knobValue) {\n    var _this$audioNodes$chan2;\n\n    if (knobValue === 0) return; // idl run\n\n    let gain = 1 + knobValue / 100;\n    let audioCtx = this.channels.getChannel(channelName).backend.ac;\n    let eqHiFilter = (_this$audioNodes$chan2 = this.audioNodes.channels[channelName]) === null || _this$audioNodes$chan2 === void 0 ? void 0 : _this$audioNodes$chan2.eqHighFilter;\n\n    if (!eqHiFilter) {\n      eqHiFilter = audioCtx.createBiquadFilter();\n      this.channels.getChannel(channelName).backend.setFilter(eqHiFilter);\n      this.audioNodes.channels[channelName].eqHiFilter = eqHiFilter;\n    }\n\n    gainNode.gain.setValueAtTime(parseFloat(gain), audioCtx.currentTime);\n  }\n\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/core/console/mixer/mixer.js"],"names":["Mixer","constructor","channels","audioNodes","channelName","getChannelNames","setUpAudioNodes","audioCtx","getChannel","backend","ac","applyAudioNode","varName","node","setGain","knobValue","gain","gainNode","createGain","setFilter","setValueAtTime","parseFloat","currentTime","setHigh","eqHiFilter","eqHighFilter","createBiquadFilter"],"mappings":"AAGA,eAAe,MAAMA,KAAN,CAAW;AACtBC,EAAAA,WAAW,CAACC,QAAD,EAAU;AACjB,SAAKA,QAAL,GAAgBA,QAAhB;AAEA,SAAKC,UAAL,GAAkB;AACdD,MAAAA,QAAQ,EAAG;AADG,KAAlB;;AAKA,SAAI,IAAIE,WAAR,IAAuB,KAAKF,QAAL,CAAcG,eAAd,EAAvB,EAAuD;AACnD,WAAKF,UAAL,CAAgBD,QAAhB,GAA2B,EACvB,GAAG,KAAKC,UAAL,CAAgBD,QADI;AAEvB,SAACE,WAAD,GAAgB;AAFO,OAA3B;AAIH;AACJ;;AAEDE,EAAAA,eAAe,CAACF,WAAD,EAAa;AACxB,QAAIG,QAAQ,GAAG,KAAKL,QAAL,CAAcM,UAAd,CAAyBJ,WAAzB,EAAsCK,OAAtC,CAA8CC,EAA7D;AACH;;AAEDC,EAAAA,cAAc,CAACP,WAAD,EAAcQ,OAAd,EAAuBC,IAAvB,EAA4B,CAEzC;;AAGDC,EAAAA,OAAO,CAACV,WAAD,EAAcW,SAAd,EAAwB;AAAA;;AAE3B,QAAGA,SAAS,KAAK,CAAjB,EAAoB,OAFO,CAEC;;AAC5B,QAAIC,IAAI,GAAG,IAAID,SAAS,GAAG,GAA3B;AAEA,QAAIR,QAAQ,GAAG,KAAKL,QAAL,CAAcM,UAAd,CAAyBJ,WAAzB,EAAsCK,OAAtC,CAA8CC,EAA7D;AACA,QAAIO,QAAQ,4BAAG,KAAKd,UAAL,CAAgBD,QAAhB,CAAyBE,WAAzB,CAAH,0DAAG,sBAAuCa,QAAtD;;AAEA,QAAG,CAACA,QAAJ,EAAa;AACTA,MAAAA,QAAQ,GAAGV,QAAQ,CAACW,UAAT,EAAX;AACA,WAAKhB,QAAL,CAAcM,UAAd,CAAyBJ,WAAzB,EAAsCK,OAAtC,CAA8CU,SAA9C,CAAwDF,QAAxD;AACA,WAAKd,UAAL,CAAgBD,QAAhB,CAAyBE,WAAzB,EAAsCa,QAAtC,GAAiDA,QAAjD;AACH;;AACDA,IAAAA,QAAQ,CAACD,IAAT,CAAcI,cAAd,CAA8BC,UAAU,CAACL,IAAD,CAAxC,EAAiDT,QAAQ,CAACe,WAA1D;AACH;;AAEDC,EAAAA,OAAO,CAACnB,WAAD,EAAcW,SAAd,EAAwB;AAAA;;AAE3B,QAAGA,SAAS,KAAK,CAAjB,EAAoB,OAFO,CAEC;;AAC5B,QAAIC,IAAI,GAAG,IAAID,SAAS,GAAG,GAA3B;AAEA,QAAIR,QAAQ,GAAG,KAAKL,QAAL,CAAcM,UAAd,CAAyBJ,WAAzB,EAAsCK,OAAtC,CAA8CC,EAA7D;AACA,QAAIc,UAAU,6BAAG,KAAKrB,UAAL,CAAgBD,QAAhB,CAAyBE,WAAzB,CAAH,2DAAG,uBAAuCqB,YAAxD;;AAEA,QAAG,CAACD,UAAJ,EAAe;AACXA,MAAAA,UAAU,GAAGjB,QAAQ,CAACmB,kBAAT,EAAb;AACA,WAAKxB,QAAL,CAAcM,UAAd,CAAyBJ,WAAzB,EAAsCK,OAAtC,CAA8CU,SAA9C,CAAwDK,UAAxD;AACA,WAAKrB,UAAL,CAAgBD,QAAhB,CAAyBE,WAAzB,EAAsCoB,UAAtC,GAAmDA,UAAnD;AACH;;AACDP,IAAAA,QAAQ,CAACD,IAAT,CAAcI,cAAd,CAA8BC,UAAU,CAACL,IAAD,CAAxC,EAAiDT,QAAQ,CAACe,WAA1D;AACH;;AAxDqB","sourcesContent":["\r\n\r\n\r\nexport default class Mixer{\r\n    constructor(channels){\r\n        this.channels = channels;\r\n\r\n        this.audioNodes = {\r\n            channels : {\r\n            }\r\n        }\r\n\r\n        for(let channelName of this.channels.getChannelNames()){\r\n            this.audioNodes.channels = { \r\n                ...this.audioNodes.channels,\r\n                [channelName] : {},\r\n            }\r\n        }\r\n    }\r\n\r\n    setUpAudioNodes(channelName){\r\n        let audioCtx = this.channels.getChannel(channelName).backend.ac;\r\n    }\r\n\r\n    applyAudioNode(channelName, varName, node){\r\n\r\n    }\r\n\r\n\r\n    setGain(channelName, knobValue){\r\n\r\n        if(knobValue === 0) return; // idl run\r\n        let gain = 1 + knobValue / 100;\r\n\r\n        let audioCtx = this.channels.getChannel(channelName).backend.ac;\r\n        let gainNode = this.audioNodes.channels[channelName]?.gainNode;\r\n\r\n        if(!gainNode){\r\n            gainNode = audioCtx.createGain();\r\n            this.channels.getChannel(channelName).backend.setFilter(gainNode);\r\n            this.audioNodes.channels[channelName].gainNode = gainNode;\r\n        }\r\n        gainNode.gain.setValueAtTime( parseFloat(gain) , audioCtx.currentTime)\r\n    }\r\n\r\n    setHigh(channelName, knobValue){\r\n\r\n        if(knobValue === 0) return; // idl run\r\n        let gain = 1 + knobValue / 100;\r\n\r\n        let audioCtx = this.channels.getChannel(channelName).backend.ac;\r\n        let eqHiFilter = this.audioNodes.channels[channelName]?.eqHighFilter;\r\n\r\n        if(!eqHiFilter){\r\n            eqHiFilter = audioCtx.createBiquadFilter();\r\n            this.channels.getChannel(channelName).backend.setFilter(eqHiFilter);\r\n            this.audioNodes.channels[channelName].eqHiFilter = eqHiFilter;\r\n        }\r\n        gainNode.gain.setValueAtTime( parseFloat(gain) , audioCtx.currentTime)\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}