{"ast":null,"code":"let tokenizer = require(\"./tokens\");\n\ntokenizeHtmlClassBlock.notInLink = true;\n\nfunction tokenizeHtmlClassBlock(eat, value, silent) {\n  console.log(\"Block value\", value);\n  var match = /^(.*){\\.(\\w+)}/.exec(value);\n\n  if (match) {\n    // console.log(match)\n    if (silent) {\n      return true;\n    }\n\n    let type = 'break';\n\n    switch (match[1]) {\n      case \"***\":\n        {\n          type = 'thematicBreak';\n          break;\n        }\n    }\n\n    let node = {\n      type: text\n    };\n    node = tokenizer.forEach(test => test(match[1]));\n    node.className = match[2];\n    return eat(match[0])(node);\n  }\n}\n\nmodule.exports.tokenizeHtmlClassBlock = tokenizeHtmlClassBlock;","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/pages/introduction/MarkDonwExtesnion/tokenizeHtmlClassBlock.js"],"names":["tokenizer","require","tokenizeHtmlClassBlock","notInLink","eat","value","silent","console","log","match","exec","type","node","text","forEach","test","className","module","exports"],"mappings":"AAAA,IAAIA,SAAS,GAAGC,OAAO,CAAC,UAAD,CAAvB;;AAEAC,sBAAsB,CAACC,SAAvB,GAAmC,IAAnC;;AAGA,SAASD,sBAAT,CAAgCE,GAAhC,EAAqCC,KAArC,EAA4CC,MAA5C,EAAoD;AAChDC,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BH,KAA3B;AACA,MAAII,KAAK,GAAG,iBAAiBC,IAAjB,CAAsBL,KAAtB,CAAZ;;AAEA,MAAII,KAAJ,EAAW;AACR;AACC,QAAIH,MAAJ,EAAY;AACR,aAAO,IAAP;AACH;;AAED,QAAIK,IAAI,GAAG,OAAX;;AACA,YAAQF,KAAK,CAAC,CAAD,CAAb;AACI,WAAK,KAAL;AAAa;AACTE,UAAAA,IAAI,GAAG,eAAP;AACA;AACH;AAJL;;AAMA,QAAIC,IAAI,GAAG;AAACD,MAAAA,IAAI,EAAEE;AAAP,KAAX;AACAD,IAAAA,IAAI,GAAGZ,SAAS,CAACc,OAAV,CAAmBC,IAAI,IAAIA,IAAI,CAACN,KAAK,CAAC,CAAD,CAAN,CAA/B,CAAP;AACAG,IAAAA,IAAI,CAACI,SAAL,GAAiBP,KAAK,CAAC,CAAD,CAAtB;AAEA,WAAOL,GAAG,CAACK,KAAK,CAAC,CAAD,CAAN,CAAH,CAAcG,IAAd,CAAP;AAEH;AACJ;;AAEDK,MAAM,CAACC,OAAP,CAAehB,sBAAf,GAAwCA,sBAAxC","sourcesContent":["let tokenizer = require(\"./tokens\");\r\n\r\ntokenizeHtmlClassBlock.notInLink = true\r\n\r\n\r\nfunction tokenizeHtmlClassBlock(eat, value, silent) {\r\n    console.log(\"Block value\", value)\r\n    var match = /^(.*){\\.(\\w+)}/.exec(value)\r\n\r\n    if (match) {\r\n       // console.log(match)\r\n        if (silent) {\r\n            return true\r\n        }\r\n\r\n        let type = 'break';\r\n        switch (match[1]){\r\n            case \"***\" : {\r\n                type = 'thematicBreak';\r\n                break;\r\n            }\r\n        }\r\n        let node = {type: text};\r\n        node = tokenizer.forEach( test => test(match[1]))\r\n        node.className = match[2];\r\n\r\n        return eat(match[0])(node)\r\n\r\n    }\r\n}\r\n\r\nmodule.exports.tokenizeHtmlClassBlock = tokenizeHtmlClassBlock"]},"metadata":{},"sourceType":"module"}