{"ast":null,"code":"/**\n * UUID.js - RFC-compliant UUID Generator for JavaScript\n *\n * @file\n * @author  LiosK\n * @version v4.2.5\n * @license Apache License 2.0: Copyright (c) 2010-2020 LiosK\n */\n\n/**\n * @class\n * @classdesc {@link UUID} object.\n * @hideconstructor\n */\nvar UUID;\n\nUUID = function (overwrittenUUID) {\n  \"use strict\"; // Core Component {{{\n\n  /**\n   * Generates a version 4 UUID as a hexadecimal string.\n   * @returns {string} Hexadecimal UUID string.\n   */\n\n  UUID.generate = function () {\n    var rand = UUID._getRandomInt,\n        hex = UUID._hexAligner;\n    return hex(rand(32), 8) // time_low\n    + \"-\" + hex(rand(16), 4) // time_mid\n    + \"-\" + hex(0x4000 | rand(12), 4) // time_hi_and_version\n    + \"-\" + hex(0x8000 | rand(14), 4) // clock_seq_hi_and_reserved clock_seq_low\n    + \"-\" + hex(rand(48), 12); // node\n  };\n  /**\n   * Returns an unsigned x-bit random integer.\n   * @private\n   * @param {number} x Unsigned integer ranging from 0 to 53, inclusive.\n   * @returns {number} Unsigned x-bit random integer (0 <= f(x) < 2^x).\n   */\n\n\n  UUID._getRandomInt = function (x) {\n    if (x < 0 || x > 53) {\n      return NaN;\n    }\n\n    var n = 0 | Math.random() * 0x40000000; // 1 << 30\n\n    return x > 30 ? n + (0 | Math.random() * (1 << x - 30)) * 0x40000000 : n >>> 30 - x;\n  };\n  /**\n   * Converts an integer to a zero-filled hexadecimal string.\n   * @private\n   * @param {number} num\n   * @param {number} length\n   * @returns {string}\n   */\n\n\n  UUID._hexAligner = function (num, length) {\n    var str = num.toString(16),\n        i = length - str.length,\n        z = \"0\";\n\n    for (; i > 0; i >>>= 1, z += z) {\n      if (i & 1) {\n        str = z + str;\n      }\n    }\n\n    return str;\n  };\n  /**\n   * Retains the value of 'UUID' global variable assigned before loading UUID.js.\n   * @since 3.2\n   * @type {any}\n   */\n\n\n  UUID.overwrittenUUID = overwrittenUUID; // }}}\n  // Advanced Random Number Generator Component {{{\n\n  (function () {\n    var mathPRNG = UUID._getRandomInt;\n    /**\n     * Enables Math.random()-based pseudorandom number generator instead of cryptographically safer options.\n     * @since v3.5.0\n     * @deprecated This method is provided only to work around performance drawbacks of the safer algorithms.\n     */\n\n    UUID.useMathRandom = function () {\n      UUID._getRandomInt = mathPRNG;\n    };\n\n    var crypto = null,\n        cryptoPRNG = mathPRNG;\n\n    if (typeof window !== \"undefined\" && (crypto = window.crypto || window.msCrypto)) {\n      if (crypto.getRandomValues && typeof Uint32Array !== \"undefined\") {\n        // Web Cryptography API\n        cryptoPRNG = function (x) {\n          if (x < 0 || x > 53) {\n            return NaN;\n          }\n\n          var ns = new Uint32Array(x > 32 ? 2 : 1);\n          ns = crypto.getRandomValues(ns) || ns;\n          return x > 32 ? ns[0] + (ns[1] >>> 64 - x) * 0x100000000 : ns[0] >>> 32 - x;\n        };\n      }\n    } else if (typeof require !== \"undefined\" && (crypto = require(\"crypto\"))) {\n      if (crypto.randomBytes) {\n        // nodejs\n        cryptoPRNG = function (x) {\n          if (x < 0 || x > 53) {\n            return NaN;\n          }\n\n          var buf = crypto.randomBytes(x > 32 ? 8 : 4),\n              n = buf.readUInt32BE(0);\n          return x > 32 ? n + (buf.readUInt32BE(4) >>> 64 - x) * 0x100000000 : n >>> 32 - x;\n        };\n      }\n    }\n\n    UUID._getRandomInt = cryptoPRNG;\n  })(); // }}}\n  // UUID Object Component {{{\n\n  /**\n   * Names of UUID internal fields.\n   * @type {string[]}\n   * @constant\n   * @since 3.0\n   */\n\n\n  UUID.FIELD_NAMES = [\"timeLow\", \"timeMid\", \"timeHiAndVersion\", \"clockSeqHiAndReserved\", \"clockSeqLow\", \"node\"];\n  /**\n   * Sizes of UUID internal fields.\n   * @type {number[]}\n   * @constant\n   * @since 3.0\n   */\n\n  UUID.FIELD_SIZES = [32, 16, 16, 8, 8, 48];\n  /**\n   * Creates a version 4 {@link UUID} object.\n   * @returns {UUID} Version 4 {@link UUID} object.\n   * @since 3.0\n   */\n\n  UUID.genV4 = function () {\n    var rand = UUID._getRandomInt;\n    return new UUID()._init(rand(32), rand(16), // time_low time_mid\n    0x4000 | rand(12), // time_hi_and_version\n    0x80 | rand(6), // clock_seq_hi_and_reserved\n    rand(8), rand(48)); // clock_seq_low node\n  };\n  /**\n   * Converts a hexadecimal UUID string to a {@link UUID} object.\n   * @param {string} strId Hexadecimal UUID string (\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\").\n   * @returns {UUID} {@link UUID} object or null.\n   * @since 3.0\n   */\n\n\n  UUID.parse = function (strId) {\n    var r,\n        p = /^\\s*(urn:uuid:|\\{)?([0-9a-f]{8})-([0-9a-f]{4})-([0-9a-f]{4})-([0-9a-f]{2})([0-9a-f]{2})-([0-9a-f]{12})(\\})?\\s*$/i;\n\n    if (r = p.exec(strId)) {\n      var l = r[1] || \"\",\n          t = r[8] || \"\";\n\n      if (l + t === \"\" || l === \"{\" && t === \"}\" || l.toLowerCase() === \"urn:uuid:\" && t === \"\") {\n        return new UUID()._init(parseInt(r[2], 16), parseInt(r[3], 16), parseInt(r[4], 16), parseInt(r[5], 16), parseInt(r[6], 16), parseInt(r[7], 16));\n      }\n    }\n\n    return null;\n  };\n  /**\n   * Initializes a {@link UUID} object.\n   * @private\n   * @constructs UUID\n   * @param {number} [timeLow=0] time_low field (octet 0-3, uint32).\n   * @param {number} [timeMid=0] time_mid field (octet 4-5, uint16).\n   * @param {number} [timeHiAndVersion=0] time_hi_and_version field (octet 6-7, uint16).\n   * @param {number} [clockSeqHiAndReserved=0] clock_seq_hi_and_reserved field (octet 8, uint8).\n   * @param {number} [clockSeqLow=0] clock_seq_low field (octet 9, uint8).\n   * @param {number} [node=0] node field (octet 10-15, uint48).\n   * @returns {UUID} this.\n   */\n\n\n  UUID.prototype._init = function () {\n    var names = UUID.FIELD_NAMES,\n        sizes = UUID.FIELD_SIZES;\n    var bin = UUID._binAligner,\n        hex = UUID._hexAligner;\n    /**\n     * UUID internal field values as an array of integers.\n     * @type {number[]}\n     */\n\n    this.intFields = new Array(6);\n    /**\n     * UUID internal field values as an array of binary strings.\n     * @type {string[]}\n     */\n\n    this.bitFields = new Array(6);\n    /**\n     * UUID internal field values as an array of hexadecimal strings.\n     * @type {string[]}\n     */\n\n    this.hexFields = new Array(6);\n\n    for (var i = 0; i < 6; i++) {\n      var intValue = parseInt(arguments[i] || 0);\n      this.intFields[i] = this.intFields[names[i]] = intValue;\n      this.bitFields[i] = this.bitFields[names[i]] = bin(intValue, sizes[i]);\n      this.hexFields[i] = this.hexFields[names[i]] = hex(intValue, sizes[i] >>> 2);\n    }\n    /**\n     * UUID version number.\n     * @type {number}\n     */\n\n\n    this.version = this.intFields.timeHiAndVersion >>> 12 & 0xF;\n    /**\n     * 128-bit binary string representation.\n     * @type {string}\n     */\n\n    this.bitString = this.bitFields.join(\"\");\n    /**\n     * Non-delimited hexadecimal string representation (\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\").\n     * @type {string}\n     * @since v3.3.0\n     */\n\n    this.hexNoDelim = this.hexFields.join(\"\");\n    /**\n     * Hexadecimal string representation (\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\").\n     * @type {string}\n     */\n\n    this.hexString = this.hexFields[0] + \"-\" + this.hexFields[1] + \"-\" + this.hexFields[2] + \"-\" + this.hexFields[3] + this.hexFields[4] + \"-\" + this.hexFields[5];\n    /**\n     * URN string representation (\"urn:uuid:xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\").\n     * @type {string}\n     */\n\n    this.urn = \"urn:uuid:\" + this.hexString;\n    return this;\n  };\n  /**\n   * Converts an integer to a zero-filled binary string.\n   * @private\n   * @param {number} num\n   * @param {number} length\n   * @returns {string}\n   */\n\n\n  UUID._binAligner = function (num, length) {\n    var str = num.toString(2),\n        i = length - str.length,\n        z = \"0\";\n\n    for (; i > 0; i >>>= 1, z += z) {\n      if (i & 1) {\n        str = z + str;\n      }\n    }\n\n    return str;\n  };\n  /**\n   * Returns the hexadecimal string representation.\n   * @returns {string} {@link UUID#hexString}.\n   */\n\n\n  UUID.prototype.toString = function () {\n    return this.hexString;\n  };\n  /**\n   * Tests if two {@link UUID} objects are equal.\n   * @param {UUID} uuid\n   * @returns {boolean} True if two {@link UUID} objects are equal.\n   */\n\n\n  UUID.prototype.equals = function (uuid) {\n    if (!(uuid instanceof UUID)) {\n      return false;\n    }\n\n    for (var i = 0; i < 6; i++) {\n      if (this.intFields[i] !== uuid.intFields[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n  /**\n   * Nil UUID object.\n   * @type {UUID}\n   * @constant\n   * @since v3.4.0\n   */\n\n\n  UUID.NIL = new UUID()._init(0, 0, 0, 0, 0, 0); // }}}\n  // UUID Version 1 Component {{{\n\n  /**\n   * Creates a version 1 {@link UUID} object.\n   * @returns {UUID} Version 1 {@link UUID} object.\n   * @since 3.0\n   */\n\n  UUID.genV1 = function () {\n    if (UUID._state == null) {\n      UUID.resetState();\n    }\n\n    var now = new Date().getTime(),\n        st = UUID._state;\n\n    if (now != st.timestamp) {\n      if (now < st.timestamp) {\n        st.sequence++;\n      }\n\n      st.timestamp = now;\n      st.tick = UUID._getRandomInt(4);\n    } else if (Math.random() < UUID._tsRatio && st.tick < 9984) {\n      // advance the timestamp fraction at a probability\n      // to compensate for the low timestamp resolution\n      st.tick += 1 + UUID._getRandomInt(4);\n    } else {\n      st.sequence++;\n    } // format time fields\n\n\n    var tf = UUID._getTimeFieldValues(st.timestamp);\n\n    var tl = tf.low + st.tick;\n    var thav = tf.hi & 0xFFF | 0x1000; // set version '0001'\n    // format clock sequence\n\n    st.sequence &= 0x3FFF;\n    var cshar = st.sequence >>> 8 | 0x80; // set variant '10'\n\n    var csl = st.sequence & 0xFF;\n    return new UUID()._init(tl, tf.mid, thav, cshar, csl, st.node);\n  };\n  /**\n   * Re-initializes the internal state for version 1 UUID creation.\n   * @since 3.0\n   */\n\n\n  UUID.resetState = function () {\n    UUID._state = new UUIDState();\n  };\n\n  function UUIDState() {\n    var rand = UUID._getRandomInt;\n    this.timestamp = 0;\n    this.sequence = rand(14);\n    this.node = (rand(8) | 1) * 0x10000000000 + rand(40); // set multicast bit '1'\n\n    this.tick = rand(4); // timestamp fraction smaller than a millisecond\n  }\n  /**\n   * Probability to advance the timestamp fraction: the ratio of tick movements to sequence increments.\n   * @private\n   * @type {number}\n   */\n\n\n  UUID._tsRatio = 1 / 4;\n  /**\n   * Persistent internal state for version 1 UUID creation.\n   * @private\n   * @type {UUIDState}\n   */\n\n  UUID._state = null;\n  /**\n   * @private\n   * @param {Date|number} time ECMAScript Date Object or milliseconds from 1970-01-01.\n   * @returns {any}\n   */\n\n  UUID._getTimeFieldValues = function (time) {\n    var ts = time - Date.UTC(1582, 9, 15);\n    var hm = ts / 0x100000000 * 10000 & 0xFFFFFFF;\n    return {\n      low: (ts & 0xFFFFFFF) * 10000 % 0x100000000,\n      mid: hm & 0xFFFF,\n      hi: hm >>> 16,\n      timestamp: ts\n    };\n  }; // }}}\n  // create local namespace\n\n\n  function UUID() {} // for nodejs\n\n\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\n    module.exports = UUID;\n  }\n\n  return UUID;\n}(UUID); // vim: fdm=marker fmr&","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/node_modules/uuidjs/src/uuid.js"],"names":["UUID","overwrittenUUID","generate","rand","_getRandomInt","hex","_hexAligner","x","NaN","n","Math","random","num","length","str","toString","i","z","mathPRNG","useMathRandom","crypto","cryptoPRNG","window","msCrypto","getRandomValues","Uint32Array","ns","require","randomBytes","buf","readUInt32BE","FIELD_NAMES","FIELD_SIZES","genV4","_init","parse","strId","r","p","exec","l","t","toLowerCase","parseInt","prototype","names","sizes","bin","_binAligner","intFields","Array","bitFields","hexFields","intValue","arguments","version","timeHiAndVersion","bitString","join","hexNoDelim","hexString","urn","equals","uuid","NIL","genV1","_state","resetState","now","Date","getTime","st","timestamp","sequence","tick","_tsRatio","tf","_getTimeFieldValues","tl","low","thav","hi","cshar","csl","mid","node","UUIDState","time","ts","UTC","hm","module","exports"],"mappings":"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","sourcesContent":["/**\n * UUID.js - RFC-compliant UUID Generator for JavaScript\n *\n * @file\n * @author  LiosK\n * @version v4.2.5\n * @license Apache License 2.0: Copyright (c) 2010-2020 LiosK\n */\n\n/**\n * @class\n * @classdesc {@link UUID} object.\n * @hideconstructor\n */\nvar UUID;\n\nUUID = (function(overwrittenUUID) {\n\"use strict\";\n\n// Core Component {{{\n\n/**\n * Generates a version 4 UUID as a hexadecimal string.\n * @returns {string} Hexadecimal UUID string.\n */\nUUID.generate = function() {\n  var rand = UUID._getRandomInt, hex = UUID._hexAligner;\n  return  hex(rand(32), 8)          // time_low\n        + \"-\"\n        + hex(rand(16), 4)          // time_mid\n        + \"-\"\n        + hex(0x4000 | rand(12), 4) // time_hi_and_version\n        + \"-\"\n        + hex(0x8000 | rand(14), 4) // clock_seq_hi_and_reserved clock_seq_low\n        + \"-\"\n        + hex(rand(48), 12);        // node\n};\n\n/**\n * Returns an unsigned x-bit random integer.\n * @private\n * @param {number} x Unsigned integer ranging from 0 to 53, inclusive.\n * @returns {number} Unsigned x-bit random integer (0 <= f(x) < 2^x).\n */\nUUID._getRandomInt = function(x) {\n  if (x < 0 || x > 53) { return NaN; }\n  var n = 0 | Math.random() * 0x40000000; // 1 << 30\n  return x > 30 ? n + (0 | Math.random() * (1 << x - 30)) * 0x40000000 : n >>> 30 - x;\n};\n\n/**\n * Converts an integer to a zero-filled hexadecimal string.\n * @private\n * @param {number} num\n * @param {number} length\n * @returns {string}\n */\nUUID._hexAligner = function(num, length) {\n  var str = num.toString(16), i = length - str.length, z = \"0\";\n  for (; i > 0; i >>>= 1, z += z) { if (i & 1) { str = z + str; } }\n  return str;\n};\n\n/**\n * Retains the value of 'UUID' global variable assigned before loading UUID.js.\n * @since 3.2\n * @type {any}\n */\nUUID.overwrittenUUID = overwrittenUUID;\n\n// }}}\n\n// Advanced Random Number Generator Component {{{\n\n(function() {\n\n  var mathPRNG = UUID._getRandomInt;\n\n  /**\n   * Enables Math.random()-based pseudorandom number generator instead of cryptographically safer options.\n   * @since v3.5.0\n   * @deprecated This method is provided only to work around performance drawbacks of the safer algorithms.\n   */\n  UUID.useMathRandom = function() {\n    UUID._getRandomInt = mathPRNG;\n  };\n\n  var crypto = null, cryptoPRNG = mathPRNG;\n  if (typeof window !== \"undefined\" && (crypto = window.crypto || window.msCrypto)) {\n    if (crypto.getRandomValues && typeof Uint32Array !== \"undefined\") {\n      // Web Cryptography API\n      cryptoPRNG = function(x) {\n        if (x < 0 || x > 53) { return NaN; }\n        var ns = new Uint32Array(x > 32 ? 2 : 1);\n        ns = crypto.getRandomValues(ns) || ns;\n        return x > 32 ? ns[0] + (ns[1] >>> 64 - x) * 0x100000000 : ns[0] >>> 32 - x;\n      };\n    }\n  } else if (typeof require !== \"undefined\" && (crypto = require(\"crypto\"))) {\n    if (crypto.randomBytes) {\n      // nodejs\n      cryptoPRNG = function(x) {\n        if (x < 0 || x > 53) { return NaN; }\n        var buf = crypto.randomBytes(x > 32 ? 8 : 4), n = buf.readUInt32BE(0);\n        return x > 32 ? n + (buf.readUInt32BE(4) >>> 64 - x) * 0x100000000 : n >>> 32 - x;\n      };\n    }\n  }\n  UUID._getRandomInt = cryptoPRNG;\n\n})();\n\n// }}}\n\n// UUID Object Component {{{\n\n/**\n * Names of UUID internal fields.\n * @type {string[]}\n * @constant\n * @since 3.0\n */\nUUID.FIELD_NAMES = [\"timeLow\", \"timeMid\", \"timeHiAndVersion\",\n                    \"clockSeqHiAndReserved\", \"clockSeqLow\", \"node\"];\n\n/**\n * Sizes of UUID internal fields.\n * @type {number[]}\n * @constant\n * @since 3.0\n */\nUUID.FIELD_SIZES = [32, 16, 16, 8, 8, 48];\n\n/**\n * Creates a version 4 {@link UUID} object.\n * @returns {UUID} Version 4 {@link UUID} object.\n * @since 3.0\n */\nUUID.genV4 = function() {\n  var rand = UUID._getRandomInt;\n  return new UUID()._init(rand(32), rand(16), // time_low time_mid\n                          0x4000 | rand(12),  // time_hi_and_version\n                          0x80   | rand(6),   // clock_seq_hi_and_reserved\n                          rand(8), rand(48)); // clock_seq_low node\n};\n\n/**\n * Converts a hexadecimal UUID string to a {@link UUID} object.\n * @param {string} strId Hexadecimal UUID string (\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\").\n * @returns {UUID} {@link UUID} object or null.\n * @since 3.0\n */\nUUID.parse = function(strId) {\n  var r, p = /^\\s*(urn:uuid:|\\{)?([0-9a-f]{8})-([0-9a-f]{4})-([0-9a-f]{4})-([0-9a-f]{2})([0-9a-f]{2})-([0-9a-f]{12})(\\})?\\s*$/i;\n  if (r = p.exec(strId)) {\n    var l = r[1] || \"\", t = r[8] || \"\";\n    if (((l + t) === \"\") ||\n        (l === \"{\" && t === \"}\") ||\n        (l.toLowerCase() === \"urn:uuid:\" && t === \"\")) {\n      return new UUID()._init(parseInt(r[2], 16), parseInt(r[3], 16),\n                              parseInt(r[4], 16), parseInt(r[5], 16),\n                              parseInt(r[6], 16), parseInt(r[7], 16));\n    }\n  }\n  return null;\n};\n\n/**\n * Initializes a {@link UUID} object.\n * @private\n * @constructs UUID\n * @param {number} [timeLow=0] time_low field (octet 0-3, uint32).\n * @param {number} [timeMid=0] time_mid field (octet 4-5, uint16).\n * @param {number} [timeHiAndVersion=0] time_hi_and_version field (octet 6-7, uint16).\n * @param {number} [clockSeqHiAndReserved=0] clock_seq_hi_and_reserved field (octet 8, uint8).\n * @param {number} [clockSeqLow=0] clock_seq_low field (octet 9, uint8).\n * @param {number} [node=0] node field (octet 10-15, uint48).\n * @returns {UUID} this.\n */\nUUID.prototype._init = function() {\n  var names = UUID.FIELD_NAMES, sizes = UUID.FIELD_SIZES;\n  var bin = UUID._binAligner, hex = UUID._hexAligner;\n\n  /**\n   * UUID internal field values as an array of integers.\n   * @type {number[]}\n   */\n  this.intFields = new Array(6);\n\n  /**\n   * UUID internal field values as an array of binary strings.\n   * @type {string[]}\n   */\n  this.bitFields = new Array(6);\n\n  /**\n   * UUID internal field values as an array of hexadecimal strings.\n   * @type {string[]}\n   */\n  this.hexFields = new Array(6);\n\n  for (var i = 0; i < 6; i++) {\n    var intValue = parseInt(arguments[i] || 0);\n    this.intFields[i] = this.intFields[names[i]] = intValue;\n    this.bitFields[i] = this.bitFields[names[i]] = bin(intValue, sizes[i]);\n    this.hexFields[i] = this.hexFields[names[i]] = hex(intValue, sizes[i] >>> 2);\n  }\n\n  /**\n   * UUID version number.\n   * @type {number}\n   */\n  this.version = (this.intFields.timeHiAndVersion >>> 12) & 0xF;\n\n  /**\n   * 128-bit binary string representation.\n   * @type {string}\n   */\n  this.bitString = this.bitFields.join(\"\");\n\n  /**\n   * Non-delimited hexadecimal string representation (\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\").\n   * @type {string}\n   * @since v3.3.0\n   */\n  this.hexNoDelim = this.hexFields.join(\"\");\n\n  /**\n   * Hexadecimal string representation (\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\").\n   * @type {string}\n   */\n  this.hexString = this.hexFields[0] + \"-\" + this.hexFields[1] + \"-\" + this.hexFields[2]\n                 + \"-\" + this.hexFields[3] + this.hexFields[4] + \"-\" + this.hexFields[5];\n\n  /**\n   * URN string representation (\"urn:uuid:xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\").\n   * @type {string}\n   */\n  this.urn = \"urn:uuid:\" + this.hexString;\n\n  return this;\n};\n\n/**\n * Converts an integer to a zero-filled binary string.\n * @private\n * @param {number} num\n * @param {number} length\n * @returns {string}\n */\nUUID._binAligner = function(num, length) {\n  var str = num.toString(2), i = length - str.length, z = \"0\";\n  for (; i > 0; i >>>= 1, z += z) { if (i & 1) { str = z + str; } }\n  return str;\n};\n\n/**\n * Returns the hexadecimal string representation.\n * @returns {string} {@link UUID#hexString}.\n */\nUUID.prototype.toString = function() { return this.hexString; };\n\n/**\n * Tests if two {@link UUID} objects are equal.\n * @param {UUID} uuid\n * @returns {boolean} True if two {@link UUID} objects are equal.\n */\nUUID.prototype.equals = function(uuid) {\n  if (!(uuid instanceof UUID)) { return false; }\n  for (var i = 0; i < 6; i++) {\n    if (this.intFields[i] !== uuid.intFields[i]) { return false; }\n  }\n  return true;\n};\n\n/**\n * Nil UUID object.\n * @type {UUID}\n * @constant\n * @since v3.4.0\n */\nUUID.NIL = new UUID()._init(0, 0, 0, 0, 0, 0);\n\n// }}}\n\n// UUID Version 1 Component {{{\n\n/**\n * Creates a version 1 {@link UUID} object.\n * @returns {UUID} Version 1 {@link UUID} object.\n * @since 3.0\n */\nUUID.genV1 = function() {\n  if (UUID._state == null) { UUID.resetState(); }\n  var now = new Date().getTime(), st = UUID._state;\n  if (now != st.timestamp) {\n    if (now < st.timestamp) { st.sequence++; }\n    st.timestamp = now;\n    st.tick = UUID._getRandomInt(4);\n  } else if (Math.random() < UUID._tsRatio && st.tick < 9984) {\n    // advance the timestamp fraction at a probability\n    // to compensate for the low timestamp resolution\n    st.tick += 1 + UUID._getRandomInt(4);\n  } else {\n    st.sequence++;\n  }\n\n  // format time fields\n  var tf = UUID._getTimeFieldValues(st.timestamp);\n  var tl = tf.low + st.tick;\n  var thav = (tf.hi & 0xFFF) | 0x1000;  // set version '0001'\n\n  // format clock sequence\n  st.sequence &= 0x3FFF;\n  var cshar = (st.sequence >>> 8) | 0x80; // set variant '10'\n  var csl = st.sequence & 0xFF;\n\n  return new UUID()._init(tl, tf.mid, thav, cshar, csl, st.node);\n};\n\n/**\n * Re-initializes the internal state for version 1 UUID creation.\n * @since 3.0\n */\nUUID.resetState = function() {\n  UUID._state = new UUIDState();\n};\n\nfunction UUIDState() {\n  var rand = UUID._getRandomInt;\n  this.timestamp = 0;\n  this.sequence = rand(14);\n  this.node = (rand(8) | 1) * 0x10000000000 + rand(40); // set multicast bit '1'\n  this.tick = rand(4);  // timestamp fraction smaller than a millisecond\n}\n\n/**\n * Probability to advance the timestamp fraction: the ratio of tick movements to sequence increments.\n * @private\n * @type {number}\n */\nUUID._tsRatio = 1 / 4;\n\n/**\n * Persistent internal state for version 1 UUID creation.\n * @private\n * @type {UUIDState}\n */\nUUID._state = null;\n\n/**\n * @private\n * @param {Date|number} time ECMAScript Date Object or milliseconds from 1970-01-01.\n * @returns {any}\n */\nUUID._getTimeFieldValues = function(time) {\n  var ts = time - Date.UTC(1582, 9, 15);\n  var hm = ((ts / 0x100000000) * 10000) & 0xFFFFFFF;\n  return  { low: ((ts & 0xFFFFFFF) * 10000) % 0x100000000,\n            mid: hm & 0xFFFF, hi: hm >>> 16, timestamp: ts };\n};\n\n// }}}\n\n// create local namespace\nfunction UUID() {}\n\n// for nodejs\nif (typeof module === \"object\" && typeof module.exports === \"object\") {\n  module.exports = UUID;\n}\n\nreturn UUID;\n\n})(UUID);\n\n// vim: fdm=marker fmr&\n"]},"metadata":{},"sourceType":"script"}