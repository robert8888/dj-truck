{"ast":null,"code":"import { ACTIONS } from \"./../actions/actions.js\";\nimport { produce } from \"imer\";\nconst deck = {\n  track: {\n    title: \"\",\n    bpm: 0,\n    quality: \"\",\n    duration: \"\",\n    source: \"\",\n    id: \"\",\n    thumbnail: {}\n  },\n  // \n  playBackState: {\n    ready: false,\n    paused: true,\n    cuePoint: 0,\n    cueActive: false,\n    pitch: 0,\n    timeLeft: null\n  }\n};\nconst channel = {\n  volume: 100,\n  low: 100,\n  mid: 100,\n  high: 100,\n  gain: 100\n};\nconst initState = {\n  channel: {\n    A: { ...deck\n    },\n    B: { ...deck\n    }\n  },\n  mikser: {\n    channelA: { ...chanel\n    },\n    channelB: { ...chanel\n    },\n    fader: {\n      position: 50 //A: 0 <-> B:100\n\n    }\n  }\n};\n\nfunction consoleReducer(state = initState, action) {\n  switch (action.type) {\n    case ACTIONS.LOAD_TRACK:\n      {\n        const nextTrack = action.track;\n        return produce(state, draftState => {\n          draftState.channel[action.destination].track = {\n            title: nextTrack.title,\n            bpm: nextTrack.bpm || 0,\n            quality: nextTrack.quality,\n            duration: nextTrack.duration,\n            source: nextTrack.source,\n            id: nextTrack.id,\n            thumbnail: nextTrack.thumbnail\n          };\n        });\n      }\n\n    case ACTIONS.SET_READY:\n      {\n        return nextPlayBackState(state, action.destination, false, {\n          ready: action.value\n        });\n      }\n\n    case ACTIONS.SET_PITCH:\n      {\n        return nextPlayBackState(state, action.destination, false, {\n          pitch: action.pitch\n        });\n      }\n\n    case ACTIONS.TOGGLE_PLAY:\n      {\n        var _state$channel$action, _state$channel$action2;\n\n        const prevPause = ((_state$channel$action = state.channel[action.destination]) === null || _state$channel$action === void 0 ? void 0 : (_state$channel$action2 = _state$channel$action.playBackState) === null || _state$channel$action2 === void 0 ? void 0 : _state$channel$action2.paused) || true;\n        return nextPlayBackState(state, action.destination, true, {\n          paused: !prevPause\n        });\n      }\n\n    case ACTIONS.TOGGLE_CUE:\n      {\n        var _state$channel$action3, _state$channel$action4;\n\n        const prevCue = ((_state$channel$action3 = state.channel[action.destination]) === null || _state$channel$action3 === void 0 ? void 0 : (_state$channel$action4 = _state$channel$action3.playBackState) === null || _state$channel$action4 === void 0 ? void 0 : _state$channel$action4.cueActive) || false;\n        return nextPlayBackState(state, action.destination, true, {\n          cueActive: !prevCue\n        });\n      }\n\n    case ACTIONS.SET_CUE_POINT:\n      {\n        return nextPlayBackState(state, action.destination, true, {\n          cuePoint: action.position\n        });\n      }\n\n    default:\n      return state;\n  }\n}\n\nfunction nextPlayBackState(state, destination, haveToBeReady, variables) {\n  if (!state.channel[destination]) return state;\n  if (haveToBeReady && !state.channel[destination].playBackState.ready) return state;\n  const nextState = produce(state, draftState => {\n    for (let [variable, value] of Object.entries(variables)) {\n      draftState.channel[destination].playBackState[variable] = value;\n    }\n  });\n  return nextState;\n}\n\nexport default consoleReducer;","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/reducers/consoleReducer.js"],"names":["ACTIONS","produce","deck","track","title","bpm","quality","duration","source","id","thumbnail","playBackState","ready","paused","cuePoint","cueActive","pitch","timeLeft","channel","volume","low","mid","high","gain","initState","A","B","mikser","channelA","chanel","channelB","fader","position","consoleReducer","state","action","type","LOAD_TRACK","nextTrack","draftState","destination","SET_READY","nextPlayBackState","value","SET_PITCH","TOGGLE_PLAY","prevPause","TOGGLE_CUE","prevCue","SET_CUE_POINT","haveToBeReady","variables","nextState","variable","Object","entries"],"mappings":"AAAA,SAAUA,OAAV,QAAyB,yBAAzB;AACA,SAASC,OAAT,QAAwB,MAAxB;AAEA,MAAMC,IAAI,GAAG;AACTC,EAAAA,KAAK,EAAG;AACJC,IAAAA,KAAK,EAAG,EADJ;AAEJC,IAAAA,GAAG,EAAG,CAFF;AAGJC,IAAAA,OAAO,EAAG,EAHN;AAIJC,IAAAA,QAAQ,EAAG,EAJP;AAKJC,IAAAA,MAAM,EAAG,EALL;AAMJC,IAAAA,EAAE,EAAE,EANA;AAOJC,IAAAA,SAAS,EAAG;AAPR,GADC;AASN;AACHC,EAAAA,aAAa,EAAG;AACZC,IAAAA,KAAK,EAAE,KADK;AAEZC,IAAAA,MAAM,EAAE,IAFI;AAGZC,IAAAA,QAAQ,EAAE,CAHE;AAIZC,IAAAA,SAAS,EAAE,KAJC;AAKZC,IAAAA,KAAK,EAAE,CALK;AAMZC,IAAAA,QAAQ,EAAG;AANC;AAVP,CAAb;AAoBA,MAAMC,OAAO,GAAG;AACZC,EAAAA,MAAM,EAAE,GADI;AAEZC,EAAAA,GAAG,EAAE,GAFO;AAGZC,EAAAA,GAAG,EAAG,GAHM;AAIZC,EAAAA,IAAI,EAAG,GAJK;AAKZC,EAAAA,IAAI,EAAE;AALM,CAAhB;AAQA,MAAMC,SAAS,GAAG;AACdN,EAAAA,OAAO,EAAE;AACLO,IAAAA,CAAC,EAAC,EACE,GAAGvB;AADL,KADG;AAILwB,IAAAA,CAAC,EAAC,EACE,GAAGxB;AADL;AAJG,GADK;AAUdyB,EAAAA,MAAM,EAAG;AACLC,IAAAA,QAAQ,EAAG,EACP,GAAGC;AADI,KADN;AAILC,IAAAA,QAAQ,EAAG,EACP,GAAGD;AADI,KAJN;AAOLE,IAAAA,KAAK,EAAG;AACJC,MAAAA,QAAQ,EAAG,EADP,CACU;;AADV;AAPH;AAVK,CAAlB;;AAuBA,SAASC,cAAT,CAAwBC,KAAK,GAAGV,SAAhC,EAA2CW,MAA3C,EAAkD;AAC9C,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKpC,OAAO,CAACqC,UAAb;AAA0B;AACtB,cAAMC,SAAS,GAAGH,MAAM,CAAChC,KAAzB;AACA,eAAOF,OAAO,CAACiC,KAAD,EAAQK,UAAU,IAAI;AAChCA,UAAAA,UAAU,CAACrB,OAAX,CAAmBiB,MAAM,CAACK,WAA1B,EAAuCrC,KAAvC,GAA+C;AAC3CC,YAAAA,KAAK,EAAGkC,SAAS,CAAClC,KADyB;AAE3CC,YAAAA,GAAG,EAAGiC,SAAS,CAACjC,GAAV,IAAiB,CAFoB;AAG3CC,YAAAA,OAAO,EAAGgC,SAAS,CAAChC,OAHuB;AAI3CC,YAAAA,QAAQ,EAAG+B,SAAS,CAAC/B,QAJsB;AAK3CC,YAAAA,MAAM,EAAG8B,SAAS,CAAC9B,MALwB;AAM3CC,YAAAA,EAAE,EAAG6B,SAAS,CAAC7B,EAN4B;AAO3CC,YAAAA,SAAS,EAAG4B,SAAS,CAAC5B;AAPqB,WAA/C;AASH,SAVa,CAAd;AAWH;;AAED,SAAKV,OAAO,CAACyC,SAAb;AAAyB;AACrB,eAAOC,iBAAiB,CAACR,KAAD,EAAQC,MAAM,CAACK,WAAf,EAA4B,KAA5B,EAAmC;AAAE5B,UAAAA,KAAK,EAAGuB,MAAM,CAACQ;AAAjB,SAAnC,CAAxB;AACH;;AAED,SAAK3C,OAAO,CAAC4C,SAAb;AAAyB;AACrB,eAAOF,iBAAiB,CAACR,KAAD,EAAQC,MAAM,CAACK,WAAf,EAA4B,KAA5B,EAAmC;AAAExB,UAAAA,KAAK,EAAGmB,MAAM,CAACnB;AAAjB,SAAnC,CAAxB;AACH;;AAED,SAAKhB,OAAO,CAAC6C,WAAb;AAA2B;AAAA;;AACvB,cAAMC,SAAS,GAAG,0BAAAZ,KAAK,CAAChB,OAAN,CAAciB,MAAM,CAACK,WAArB,2GAAmC7B,aAAnC,kFAAkDE,MAAlD,KAA4D,IAA9E;AACA,eAAO6B,iBAAiB,CAACR,KAAD,EAAQC,MAAM,CAACK,WAAf,EAA4B,IAA5B,EAAkC;AAAE3B,UAAAA,MAAM,EAAG,CAACiC;AAAZ,SAAlC,CAAxB;AACH;;AAED,SAAK9C,OAAO,CAAC+C,UAAb;AAA0B;AAAA;;AACtB,cAAMC,OAAO,GAAG,2BAAAd,KAAK,CAAChB,OAAN,CAAciB,MAAM,CAACK,WAArB,6GAAmC7B,aAAnC,kFAAkDI,SAAlD,KAA+D,KAA/E;AACA,eAAO2B,iBAAiB,CAACR,KAAD,EAAQC,MAAM,CAACK,WAAf,EAA4B,IAA5B,EAAkC;AAAEzB,UAAAA,SAAS,EAAG,CAACiC;AAAf,SAAlC,CAAxB;AACH;;AAED,SAAKhD,OAAO,CAACiD,aAAb;AAA6B;AACzB,eAAOP,iBAAiB,CAACR,KAAD,EAAQC,MAAM,CAACK,WAAf,EAA4B,IAA5B,EAAkC;AAAE1B,UAAAA,QAAQ,EAAGqB,MAAM,CAACH;AAApB,SAAlC,CAAxB;AACH;;AAED;AAAU,aAAOE,KAAP;AAtCd;AAwCH;;AAED,SAASQ,iBAAT,CAA2BR,KAA3B,EAAkCM,WAAlC,EAA+CU,aAA/C,EAA8DC,SAA9D,EAAwE;AACpE,MAAG,CAACjB,KAAK,CAAChB,OAAN,CAAcsB,WAAd,CAAJ,EAAgC,OAAON,KAAP;AAChC,MAAGgB,aAAa,IAAI,CAAChB,KAAK,CAAChB,OAAN,CAAcsB,WAAd,EAA2B7B,aAA3B,CAAyCC,KAA9D,EAAqE,OAAOsB,KAAP;AAErE,QAAMkB,SAAS,GAAGnD,OAAO,CAACiC,KAAD,EAASK,UAAD,IAAgB;AAC7C,SAAI,IAAI,CAACc,QAAD,EAAWV,KAAX,CAAR,IAA6BW,MAAM,CAACC,OAAP,CAAeJ,SAAf,CAA7B,EAAuD;AACnDZ,MAAAA,UAAU,CAACrB,OAAX,CAAmBsB,WAAnB,EAAgC7B,aAAhC,CAA8C0C,QAA9C,IAA0DV,KAA1D;AACH;AACJ,GAJwB,CAAzB;AAKA,SAAOS,SAAP;AACH;;AAED,eAAenB,cAAf","sourcesContent":["import {  ACTIONS } from \"./../actions/actions.js\";\r\nimport { produce } from \"imer\";\r\n\r\nconst deck = {\r\n    track : {\r\n        title : \"\",\r\n        bpm : 0,\r\n        quality : \"\",\r\n        duration : \"\",\r\n        source : \"\",\r\n        id: \"\",\r\n        thumbnail : {}\r\n    }, // \r\n    playBackState : {\r\n        ready: false,\r\n        paused: true,\r\n        cuePoint: 0,\r\n        cueActive: false,\r\n        pitch: 0,\r\n        timeLeft : null\r\n    }\r\n}\r\n\r\nconst channel = {\r\n    volume: 100,\r\n    low: 100,\r\n    mid : 100,\r\n    high : 100,\r\n    gain: 100\r\n}\r\n\r\nconst initState = {\r\n    channel: {\r\n        A:{\r\n            ...deck\r\n        },\r\n        B:{\r\n            ...deck\r\n        }\r\n    },\r\n   \r\n    mikser : {\r\n        channelA : {\r\n            ...chanel,\r\n        },\r\n        channelB : {\r\n            ...chanel,\r\n        },\r\n        fader : {\r\n            position : 50 //A: 0 <-> B:100\r\n        }\r\n    }\r\n}\r\n\r\nfunction consoleReducer(state = initState, action){\r\n    switch(action.type){\r\n        case ACTIONS.LOAD_TRACK : {\r\n            const nextTrack = action.track;\r\n            return produce(state, draftState => {\r\n                draftState.channel[action.destination].track = {\r\n                    title : nextTrack.title,\r\n                    bpm : nextTrack.bpm || 0,\r\n                    quality : nextTrack.quality,\r\n                    duration : nextTrack.duration,\r\n                    source : nextTrack.source,\r\n                    id : nextTrack.id,\r\n                    thumbnail : nextTrack.thumbnail,\r\n                }\r\n            })\r\n        }\r\n\r\n        case ACTIONS.SET_READY : {\r\n            return nextPlayBackState(state, action.destination, false, { ready : action.value })\r\n        }\r\n\r\n        case ACTIONS.SET_PITCH : {\r\n            return nextPlayBackState(state, action.destination, false, { pitch : action.pitch })\r\n        }\r\n\r\n        case ACTIONS.TOGGLE_PLAY : {\r\n            const prevPause = state.channel[action.destination]?.playBackState?.paused || true;\r\n            return nextPlayBackState(state, action.destination, true, { paused : !prevPause })\r\n        }\r\n\r\n        case ACTIONS.TOGGLE_CUE : {\r\n            const prevCue = state.channel[action.destination]?.playBackState?.cueActive || false;\r\n            return nextPlayBackState(state, action.destination, true, { cueActive : !prevCue })\r\n        }\r\n\r\n        case ACTIONS.SET_CUE_POINT : {\r\n            return nextPlayBackState(state, action.destination, true, { cuePoint : action.position })\r\n        }\r\n\r\n        default : return state;\r\n    }\r\n}\r\n\r\nfunction nextPlayBackState(state, destination, haveToBeReady, variables){\r\n    if(!state.channel[destination]) return state;\r\n    if(haveToBeReady && !state.channel[destination].playBackState.ready) return state;\r\n\r\n    const nextState = produce(state, (draftState) => {\r\n        for(let [variable, value] of Object.entries(variables)){\r\n            draftState.channel[destination].playBackState[variable] = value;\r\n        }\r\n    })\r\n    return nextState;\r\n}\r\n\r\nexport default consoleReducer;"]},"metadata":{},"sourceType":"module"}