{"ast":null,"code":"import store from \"./../../../../../../store\";\nimport config from \"./../../../../components/Console/Deck/Player/configuration\";\nimport WaveSurfer from \"wavesurfer\";\nimport ChannelEvnetHandler from \"./../channelEvnetHandler/channelEvnetHandler\";\nimport { getBeatLength } from \"./../../../../../../utils/bpm/converter\";\nimport { Container } from \"react-bootstrap\";\nexport default class ChannelBuilder {\n  constructor() {\n    this.eventHandler = new ChannelEvnetHandler();\n    this.dispatch = store.dispatch;\n  }\n\n  create(channelName, masterContainer, slaveContainer, mainAudioContext) {\n    let channel = {\n      channelName,\n      masterContainer,\n      slaveContainer\n    }; //--configs\n\n    channel.masterConfig = config.master(masterContainer, channelName);\n    channel.slaveConfig = config.slave(slaveContainer, channelName); //--master waveSurfer obj\n\n    channel.masterConfig.audioContext = mainAudioContext;\n    channel.master = WaveSurfer.create(channel.masterConfig);\n    this.monkyMock(channel.master);\n\n    channel.master.__proto__.loadWithEvent = function (...args) {\n      this.fireEvent(\"load\");\n      this.load(...args);\n    };\n\n    channel.slave = WaveSurfer.create(channel.slaveConfig);\n    this.eventHandler.CreateEventHandling(channel);\n    return channel;\n  } //!!! turn off !\n\n\n  createBars(channel, {\n    bpm,\n    offset\n  }) {\n    let wrapper = channel.master.drawer.wrapper;\n    let styleApply = WaveSurfer.Drawer.style;\n    let minPxPerSec = channel.master.params.minPxPerSec;\n    let bitLength = getBeatLength(bpm);\n    let barPostions = [];\n\n    for (let i = offset; i < channel.master.getDuration(); i += bitLength) {\n      barPostions.push(i);\n    }\n\n    let barStyle = position => ({\n      position: \"absolute\",\n      left: position + \"px\",\n      top: \"0px\",\n      width: \"1px\",\n      maxWidth: \"1px\",\n      height: \"100%\",\n      background: \"rgba(255,255,255, 0.5)\"\n    }); // packed ----------------\n\n\n    let containerStyle = {\n      position: 'absolute',\n      lef: '0',\n      top: '0',\n      width: '100%',\n      height: '100%',\n      zIndex: \"3\"\n    };\n    let container = document.createElement('div');\n    styleApply(container, containerStyle);\n    channel.barsElements = [];\n    barPostions.forEach(position => {\n      let bar = document.createElement(\"div\");\n      let style = barStyle(minPxPerSec * position);\n      styleApply(bar, style);\n      container.appendChild(bar);\n      channel.barsElements.push(bar);\n    });\n    wrapper.appendChild(container); //------------------\n\n    /*\r\n    channel.barsElements = [];\r\n    barPostions.forEach(position => {\r\n      let bar = document.createElement(\"div\");\r\n      let style = barStyle(minPxPerSec * position);\r\n      styleApply(bar, style);\r\n      wrapper.appendChild(bar);\r\n      channel.barsElements.push(bar);\r\n    });*/\n  }\n\n  monkyMock(waveSurf) {\n    //const children = waveSurf.drawer.wrapper.children;\n    let wraperForWraper = document.createElement('div');\n    wraperForWraper = waveSurf.drawer.wrapper.children;\n    waveSurf.drawer.wrapper.innerHtml = \"\";\n    waveSurf.drawer.wrapper.append(wraperForWraper);\n\n    waveSurf.drawer.handleEvent = function (e, noPrevent) {\n      !noPrevent && e.preventDefault();\n      var clientX = e.targetTouches ? e.targetTouches[0].clientX : e.clientX;\n      var bbox = this.wrapper.getBoundingClientRect();\n      var nominalWidth = this.width;\n      var parentWidth = this.getWidth();\n      var progress;\n\n      if (!this.params.fillParent && nominalWidth < parentWidth) {\n        progress = (clientX - bbox.left) * this.params.pixelRatio / nominalWidth || 0;\n\n        if (progress > 1) {\n          progress = 1;\n        }\n      } else {\n        progress = (clientX - bbox.left + this.wrapper._scrollLeft) / this.width || 0;\n      }\n\n      return progress;\n    };\n\n    waveSurf.drawer.progress = function (progress) {\n      var minPxDelta = 1 / this.params.pixelRatio;\n      var pos = Math.round(progress * this.width) * minPxDelta;\n\n      if (pos < this.lastPos || pos - this.lastPos >= minPxDelta) {\n        this.lastPos = pos;\n        this.recenterOnPosition(pos);\n        this.updateProgress(pos);\n      }\n    };\n\n    waveSurf.drawer.recenterOnPosition = function (position, immediate) {\n      var scrollLeft = this.wrapper._scrollLeft;\n      var half = ~~(this.wrapper.clientWidth / 2);\n      var target = position - half;\n      var offset = target - scrollLeft; // if the cursor is currently visible...\n\n      if (!immediate && -half <= offset && offset < half) {\n        // we'll limit the \"re-center\" rate.\n        var rate = 5;\n        offset = Math.max(-rate, Math.min(rate, offset));\n        target = scrollLeft + offset;\n      }\n\n      if (target != scrollLeft) {\n        this.wrapper._scrollLeft = target;\n        [...this.wrapper.children].forEach(element => {\n          element.style.transform = \"translateX(-\" + target + \"px)\";\n        });\n      }\n    };\n  }\n\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/pages/app/core/console/channels/channelBuilder/channelBuilder.js"],"names":["store","config","WaveSurfer","ChannelEvnetHandler","getBeatLength","Container","ChannelBuilder","constructor","eventHandler","dispatch","create","channelName","masterContainer","slaveContainer","mainAudioContext","channel","masterConfig","master","slaveConfig","slave","audioContext","monkyMock","__proto__","loadWithEvent","args","fireEvent","load","CreateEventHandling","createBars","bpm","offset","wrapper","drawer","styleApply","Drawer","style","minPxPerSec","params","bitLength","barPostions","i","getDuration","push","barStyle","position","left","top","width","maxWidth","height","background","containerStyle","lef","zIndex","container","document","createElement","barsElements","forEach","bar","appendChild","waveSurf","wraperForWraper","children","innerHtml","append","handleEvent","e","noPrevent","preventDefault","clientX","targetTouches","bbox","getBoundingClientRect","nominalWidth","parentWidth","getWidth","progress","fillParent","pixelRatio","_scrollLeft","minPxDelta","pos","Math","round","lastPos","recenterOnPosition","updateProgress","immediate","scrollLeft","half","clientWidth","target","rate","max","min","element","transform"],"mappings":"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","sourcesContent":["import store from \"./../../../../../../store\";\r\nimport config from \"./../../../../components/Console/Deck/Player/configuration\"\r\n\r\nimport WaveSurfer from \"wavesurfer\";\r\nimport ChannelEvnetHandler from \"./../channelEvnetHandler/channelEvnetHandler\"\r\nimport { getBeatLength } from \"./../../../../../../utils/bpm/converter\";\r\nimport { Container } from \"react-bootstrap\";\r\n\r\n\r\n\r\nexport default class ChannelBuilder {\r\n  constructor() {\r\n    this.eventHandler = new ChannelEvnetHandler();\r\n    this.dispatch = store.dispatch;\r\n  }\r\n\r\n  create(channelName, masterContainer, slaveContainer, mainAudioContext) {\r\n    let channel = { channelName, masterContainer, slaveContainer };\r\n\r\n    //--configs\r\n    channel.masterConfig = config.master(masterContainer, channelName);\r\n    channel.slaveConfig = config.slave(slaveContainer, channelName);\r\n\r\n    //--master waveSurfer obj\r\n    channel.masterConfig.audioContext = mainAudioContext;\r\n    channel.master = WaveSurfer.create(channel.masterConfig);\r\n    this.monkyMock(channel.master)\r\n\r\n    channel.master.__proto__.loadWithEvent = function (...args) {\r\n      this.fireEvent(\"load\");\r\n      this.load(...args);\r\n    };\r\n\r\n    channel.slave = WaveSurfer.create(channel.slaveConfig);\r\n\r\n    this.eventHandler.CreateEventHandling(channel)\r\n\r\n    return channel;\r\n  }\r\n\r\n  //!!! turn off !\r\n  createBars(channel, { bpm, offset }) {\r\n \r\n    let wrapper = channel.master.drawer.wrapper;\r\n    let styleApply = WaveSurfer.Drawer.style;\r\n    let minPxPerSec = channel.master.params.minPxPerSec;\r\n    let bitLength = getBeatLength(bpm);\r\n\r\n    let barPostions = [];\r\n\r\n    for (let i = offset; i < channel.master.getDuration(); i += bitLength) {\r\n      barPostions.push(i);\r\n    }\r\n\r\n    let barStyle = position => ({\r\n      position: \"absolute\",\r\n      left: position + \"px\",\r\n      top: \"0px\",\r\n      width: \"1px\",\r\n      maxWidth: \"1px\",\r\n      height: \"100%\",\r\n      background: \"rgba(255,255,255, 0.5)\"\r\n    });\r\n\r\n    // packed ----------------\r\n    let containerStyle = {\r\n      position: 'absolute',\r\n      lef: '0',\r\n      top: '0', \r\n      width: '100%',\r\n      height: '100%',\r\n      zIndex: \"3\",\r\n    }\r\n    let container = document.createElement('div');\r\n    styleApply(container, containerStyle);\r\n    \r\n    channel.barsElements = [];\r\n    barPostions.forEach(position => {\r\n      let bar = document.createElement(\"div\");\r\n      let style = barStyle(minPxPerSec * position);\r\n      styleApply(bar, style);\r\n      container.appendChild(bar);\r\n      channel.barsElements.push(bar);\r\n    });\r\n    wrapper.appendChild(container);\r\n    //------------------\r\n    /*\r\n    channel.barsElements = [];\r\n    barPostions.forEach(position => {\r\n      let bar = document.createElement(\"div\");\r\n      let style = barStyle(minPxPerSec * position);\r\n      styleApply(bar, style);\r\n      wrapper.appendChild(bar);\r\n      channel.barsElements.push(bar);\r\n    });*/\r\n  }\r\n\r\n  monkyMock(waveSurf) {\r\n\r\n    //const children = waveSurf.drawer.wrapper.children;\r\n    let wraperForWraper = document.createElement('div');\r\n    wraperForWraper = waveSurf.drawer.wrapper.children;\r\n    waveSurf.drawer.wrapper.innerHtml = \"\";\r\n    waveSurf.drawer.wrapper.append(wraperForWraper);\r\n\r\n    waveSurf.drawer.handleEvent = function (e, noPrevent) {\r\n        !noPrevent && e.preventDefault();\r\n\r\n        var clientX = e.targetTouches ? e.targetTouches[0].clientX : e.clientX;\r\n        var bbox = this.wrapper.getBoundingClientRect();\r\n\r\n        var nominalWidth = this.width;\r\n        var parentWidth = this.getWidth();\r\n\r\n        var progress;\r\n\r\n        if (!this.params.fillParent && nominalWidth < parentWidth) {\r\n            progress = ((clientX - bbox.left) * this.params.pixelRatio / nominalWidth) || 0;\r\n\r\n            if (progress > 1) {\r\n                progress = 1;\r\n            }\r\n        } else {\r\n            progress = ((clientX - bbox.left + this.wrapper._scrollLeft) / this.width) || 0;\r\n        }\r\n\r\n        return progress;\r\n    };\r\n\r\n    waveSurf.drawer.progress = function (progress) {\r\n      var minPxDelta = 1 / this.params.pixelRatio;\r\n      var pos = Math.round(progress * this.width) * minPxDelta;\r\n\r\n      if (pos < this.lastPos || pos - this.lastPos >= minPxDelta) {\r\n          this.lastPos = pos;\r\n          this.recenterOnPosition(pos)\r\n          this.updateProgress(pos);\r\n      }\r\n    };\r\n\r\n    waveSurf.drawer.recenterOnPosition = function (position, immediate) {\r\n      var scrollLeft = this.wrapper._scrollLeft;\r\n      var half = ~~(this.wrapper.clientWidth / 2);\r\n      var target = position - half;\r\n      var offset = target - scrollLeft;\r\n\r\n\r\n      // if the cursor is currently visible...\r\n      if (!immediate && -half <= offset && offset < half) {\r\n        // we'll limit the \"re-center\" rate.\r\n        var rate = 5;\r\n        offset = Math.max(-rate, Math.min(rate, offset));\r\n        target = scrollLeft + offset;\r\n      }\r\n\r\n      if (target != scrollLeft) {\r\n        this.wrapper._scrollLeft = target;\r\n      \r\n        [...this.wrapper.children].forEach(element => {\r\n          element.style.transform = \"translateX(-\" + target + \"px)\"\r\n        })\r\n\r\n      }\r\n\r\n    }\r\n  }\r\n\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}