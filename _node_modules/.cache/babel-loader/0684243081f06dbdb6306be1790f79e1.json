{"ast":null,"code":"import { ACTIONS } from \"./../../actions\";\nimport { produce } from \"imer\";\nconst initState = {\n  list: [],\n  countAll: null,\n  currentRecord: null,\n  deleteStatus: \"IDLE\"\n};\nexport default function recordsReducer(state = initState, action) {\n  switch (action.type) {\n    case ACTIONS.RECS_LOAD:\n      {\n        const nextState = { ...state,\n          list: action.records\n        };\n\n        if (action.countAll) {\n          nextState.countAll = action.countAll;\n        }\n\n        return nextState;\n      }\n\n    case ACTIONS.RECS_SET_DATA:\n      {\n        const nextState = { ...state,\n          currentRecord: action.recData\n        };\n        return nextState;\n      }\n\n    case ACTIONS.RECS_SET_DELETE_STATUS:\n      {\n        const nextState = { ...state,\n          deleteStatus: action.status\n        };\n        return nextState;\n      }\n\n    case ACTIONS.RECS_POST_COMMENT:\n      {\n        return produce(state, draftState => {\n          const comments = state.currentRecord.comments;\n          comments.unshift(action.commentData);\n          draftState.currentRecord.comments = comments;\n        });\n      }\n\n    case ACTIONS.RECS_UPDATE_COMMENT:\n      {\n        return produce(state, draftState => {\n          const comments = state.currentRecord.comments;\n          comments = comments.map(comment => {\n            if (comment.id === action.commentData.id) {\n              comment.text = action.commentData.text;\n            }\n\n            return comment;\n          });\n          draftState.currentRecord.comments = comments;\n        });\n      }\n\n    case ACTIONS.RECS_DELETE_COMMENT:\n      {\n        return produce(state, draftState => {\n          const comments = state.currentRecord.comments;\n          comments = comments.filter(comment => comment.id !== action.id);\n          draftState.currentRecord.comments = comments;\n        });\n      }\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/reducers/records/recordsReducer.js"],"names":["ACTIONS","produce","initState","list","countAll","currentRecord","deleteStatus","recordsReducer","state","action","type","RECS_LOAD","nextState","records","RECS_SET_DATA","recData","RECS_SET_DELETE_STATUS","status","RECS_POST_COMMENT","draftState","comments","unshift","commentData","RECS_UPDATE_COMMENT","map","comment","id","text","RECS_DELETE_COMMENT","filter"],"mappings":"AAAA,SAAQA,OAAR,QAAsB,iBAAtB;AACA,SAAQC,OAAR,QAAsB,MAAtB;AAGA,MAAMC,SAAS,GAAC;AACZC,EAAAA,IAAI,EAAE,EADM;AAEZC,EAAAA,QAAQ,EAAE,IAFE;AAGZC,EAAAA,aAAa,EAAE,IAHH;AAKZC,EAAAA,YAAY,EAAE;AALF,CAAhB;AAQA,eAAe,SAASC,cAAT,CAAwBC,KAAK,GAAGN,SAAhC,EAA2CO,MAA3C,EAAkD;AAC7D,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKV,OAAO,CAACW,SAAb;AAAyB;AACrB,cAAMC,SAAS,GAAG,EACd,GAAGJ,KADW;AAEdL,UAAAA,IAAI,EAAGM,MAAM,CAACI;AAFA,SAAlB;;AAIA,YAAGJ,MAAM,CAACL,QAAV,EAAmB;AACfQ,UAAAA,SAAS,CAACR,QAAV,GAAqBK,MAAM,CAACL,QAA5B;AACH;;AACD,eAAOQ,SAAP;AACH;;AAED,SAAKZ,OAAO,CAACc,aAAb;AAA4B;AACxB,cAAMF,SAAS,GAAG,EACd,GAAGJ,KADW;AAEdH,UAAAA,aAAa,EAAEI,MAAM,CAACM;AAFR,SAAlB;AAIA,eAAOH,SAAP;AACH;;AAED,SAAKZ,OAAO,CAACgB,sBAAb;AAAqC;AACjC,cAAMJ,SAAS,GAAG,EACd,GAAGJ,KADW;AAEdF,UAAAA,YAAY,EAAGG,MAAM,CAACQ;AAFR,SAAlB;AAIA,eAAOL,SAAP;AACH;;AAED,SAAKZ,OAAO,CAACkB,iBAAb;AAAgC;AAC5B,eAAOjB,OAAO,CAACO,KAAD,EAAQW,UAAU,IAAI;AAChC,gBAAMC,QAAQ,GAAGZ,KAAK,CAACH,aAAN,CAAoBe,QAArC;AACAA,UAAAA,QAAQ,CAACC,OAAT,CAAiBZ,MAAM,CAACa,WAAxB;AACAH,UAAAA,UAAU,CAACd,aAAX,CAAyBe,QAAzB,GAAoCA,QAApC;AACH,SAJa,CAAd;AAKH;;AAED,SAAKpB,OAAO,CAACuB,mBAAb;AAAkC;AAC9B,eAAOtB,OAAO,CAACO,KAAD,EAAQW,UAAU,IAAI;AAChC,gBAAMC,QAAQ,GAAGZ,KAAK,CAACH,aAAN,CAAoBe,QAArC;AACAA,UAAAA,QAAQ,GAAGA,QAAQ,CAACI,GAAT,CAAaC,OAAO,IAAI;AAC/B,gBAAGA,OAAO,CAACC,EAAR,KAAejB,MAAM,CAACa,WAAP,CAAmBI,EAArC,EAAwC;AACpCD,cAAAA,OAAO,CAACE,IAAR,GAAelB,MAAM,CAACa,WAAP,CAAmBK,IAAlC;AACH;;AACD,mBAAOF,OAAP;AACH,WALU,CAAX;AAMAN,UAAAA,UAAU,CAACd,aAAX,CAAyBe,QAAzB,GAAoCA,QAApC;AACH,SATa,CAAd;AAUH;;AAED,SAAKpB,OAAO,CAAC4B,mBAAb;AAAkC;AAC9B,eAAO3B,OAAO,CAACO,KAAD,EAAQW,UAAU,IAAI;AAChC,gBAAMC,QAAQ,GAAGZ,KAAK,CAACH,aAAN,CAAoBe,QAArC;AACAA,UAAAA,QAAQ,GAAGA,QAAQ,CAACS,MAAT,CAAgBJ,OAAO,IAAIA,OAAO,CAACC,EAAR,KAAejB,MAAM,CAACiB,EAAjD,CAAX;AACAP,UAAAA,UAAU,CAACd,aAAX,CAAyBe,QAAzB,GAAoCA,QAApC;AACH,SAJa,CAAd;AAKH;;AAED;AAAS,aAAOZ,KAAP;AAzDb;AA2DH","sourcesContent":["import {ACTIONS} from \"./../../actions\";\r\nimport {produce} from \"imer\";\r\n\r\n\r\nconst initState={\r\n    list: [],\r\n    countAll: null,\r\n    currentRecord: null,\r\n\r\n    deleteStatus: \"IDLE\",\r\n}\r\n\r\nexport default function recordsReducer(state = initState, action){\r\n    switch(action.type){\r\n        case ACTIONS.RECS_LOAD : {\r\n            const nextState = {\r\n                ...state,\r\n                list : action.records,\r\n            }\r\n            if(action.countAll){\r\n                nextState.countAll = action.countAll;\r\n            }\r\n            return nextState;\r\n        }\r\n\r\n        case ACTIONS.RECS_SET_DATA: {\r\n            const nextState = {\r\n                ...state,\r\n                currentRecord: action.recData,\r\n            }   \r\n            return nextState;\r\n        }\r\n\r\n        case ACTIONS.RECS_SET_DELETE_STATUS: {\r\n            const nextState = {\r\n                ...state,\r\n                deleteStatus : action.status,\r\n            }\r\n            return nextState;\r\n        }\r\n\r\n        case ACTIONS.RECS_POST_COMMENT: {\r\n            return produce(state, draftState => {\r\n                const comments = state.currentRecord.comments;\r\n                comments.unshift(action.commentData);\r\n                draftState.currentRecord.comments = comments;\r\n            })\r\n        }\r\n\r\n        case ACTIONS.RECS_UPDATE_COMMENT: {\r\n            return produce(state, draftState => {\r\n                const comments = state.currentRecord.comments;\r\n                comments = comments.map(comment => {\r\n                    if(comment.id === action.commentData.id){\r\n                        comment.text = action.commentData.text;\r\n                    } \r\n                    return comment;\r\n                })\r\n                draftState.currentRecord.comments = comments;\r\n            })\r\n        }\r\n\r\n        case ACTIONS.RECS_DELETE_COMMENT: {\r\n            return produce(state, draftState => {\r\n                const comments = state.currentRecord.comments;\r\n                comments = comments.filter(comment => comment.id !== action.id)\r\n                draftState.currentRecord.comments = comments;\r\n            })\r\n        }\r\n\r\n        default: return state;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}