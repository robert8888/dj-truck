{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\src\\\\pages\\\\introduction\\\\Content\\\\Content.js\";\nimport React, { useEffect, useState } from \"react\"; // import ReactMarkdown from \"react-markdown\";\n\nimport \"./content.scss\";\nimport usePath from \"../Hooks/usePath\"; // import parseCssClass from \"../MarkDonwExtesnion/parseCssClass2\";\n// import transformTree from \"./../MarkDonwExtesnion/reamark-hclass\";\n\nimport remarkAttr from \"./../MarkDonwExtesnion/remark-attr\";\nimport unified from 'unified';\nimport parse from 'remark-parse';\nimport remark2react from 'remark-react';\n\nconst getMarkups = () => require.context('./../markups', true, /\\.*md/).keys();\n\nconst load = module => import(`./../markups/${module}`).then(module => module.default);\n\nconst Content = () => {\n  const [currentPath] = usePath();\n  const [md, setMd] = useState(null);\n  const [content, setContent] = useState(null);\n  useEffect(() => {\n    var _getMarkups$filter$;\n\n    if (!currentPath.length) return;\n    let pattern = \"\";\n    currentPath.forEach(slug => pattern += \"\\\\/?\\\\d?\\\\.\" + slug);\n    pattern += \"\\\\.md\";\n    let regex = new RegExp(pattern);\n    let file = (_getMarkups$filter$ = getMarkups().filter(path => regex.test(path))[0]) === null || _getMarkups$filter$ === void 0 ? void 0 : _getMarkups$filter$.replace(\"./\", \"\");\n    if (!file) return;\n    load(file).then(md => fetch(md)).then(response => response.text()).then(md => setMd(md));\n  }, [currentPath, setMd]);\n  useEffect(() => {\n    if (!md) return;\n    console.log(md);\n    const processed = unified().use(parse).use(remark2react).processSync(md);\n    console.log(processed.result);\n    setContent(processed.result);\n  }, [md, setContent]);\n  if (!md || content) return null;\n  return React.createElement(\"main\", {\n    className: \"introduction__content\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, content);\n};\n\nexport default Content;","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/pages/introduction/Content/Content.js"],"names":["React","useEffect","useState","usePath","remarkAttr","unified","parse","remark2react","getMarkups","require","context","keys","load","module","then","default","Content","currentPath","md","setMd","content","setContent","length","pattern","forEach","slug","regex","RegExp","file","filter","path","test","replace","fetch","response","text","console","log","processed","use","processSync","result"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC,C,CACA;;AACA,OAAO,gBAAP;AACA,OAAOC,OAAP,MAAoB,kBAApB,C,CACA;AACA;;AACA,OAAOC,UAAP,MAAuB,oCAAvB;AAEA,OAAOC,OAAP,MAAoB,SAApB;AACA,OAAOC,KAAP,MAAkB,cAAlB;AACA,OAAOC,YAAP,MAAyB,cAAzB;;AAEA,MAAMC,UAAU,GAAG,MAAMC,OAAO,CAACC,OAAR,CAAgB,cAAhB,EAAgC,IAAhC,EAAsC,OAAtC,EAA+CC,IAA/C,EAAzB;;AAEA,MAAMC,IAAI,GAAIC,MAAD,IAAY,OAAQ,gBAAeA,MAAO,EAA9B,EAAiCC,IAAjC,CAAuCD,MAAM,IAAIA,MAAM,CAACE,OAAxD,CAAzB;;AAEA,MAAMC,OAAO,GAAG,MAAM;AAClB,QAAM,CAACC,WAAD,IAAgBd,OAAO,EAA7B;AACA,QAAM,CAACe,EAAD,EAAKC,KAAL,IAAcjB,QAAQ,CAAC,IAAD,CAA5B;AACA,QAAM,CAACkB,OAAD,EAAUC,UAAV,IAAwBnB,QAAQ,CAAC,IAAD,CAAtC;AAEAD,EAAAA,SAAS,CAAC,MAAI;AAAA;;AACV,QAAG,CAACgB,WAAW,CAACK,MAAhB,EAAwB;AACxB,QAAIC,OAAO,GAAG,EAAd;AACAN,IAAAA,WAAW,CAACO,OAAZ,CAAqBC,IAAI,IAAIF,OAAO,IAAI,gBAAgBE,IAAxD;AACAF,IAAAA,OAAO,IAAI,OAAX;AACA,QAAIG,KAAK,GAAG,IAAIC,MAAJ,CAAWJ,OAAX,CAAZ;AACA,QAAIK,IAAI,0BAAGpB,UAAU,GAAGqB,MAAb,CAAqBC,IAAI,IAAIJ,KAAK,CAACK,IAAN,CAAWD,IAAX,CAA7B,EAA+C,CAA/C,CAAH,wDAAG,oBAAmDE,OAAnD,CAA2D,IAA3D,EAAiE,EAAjE,CAAX;AACA,QAAG,CAACJ,IAAJ,EAAU;AACVhB,IAAAA,IAAI,CAACgB,IAAD,CAAJ,CACKd,IADL,CACUI,EAAE,IAAIe,KAAK,CAACf,EAAD,CADrB,EAEKJ,IAFL,CAEUoB,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAFtB,EAGKrB,IAHL,CAGUI,EAAE,IAAIC,KAAK,CAACD,EAAD,CAHrB;AAIH,GAZQ,EAYP,CAACD,WAAD,EAAcE,KAAd,CAZO,CAAT;AAcAlB,EAAAA,SAAS,CAAC,MAAI;AACV,QAAG,CAACiB,EAAJ,EAAQ;AACRkB,IAAAA,OAAO,CAACC,GAAR,CAAYnB,EAAZ;AACA,UAAMoB,SAAS,GAAGjC,OAAO,GACpBkC,GADa,CACTjC,KADS,EAEbiC,GAFa,CAEThC,YAFS,EAGbiC,WAHa,CAGDtB,EAHC,CAAlB;AAIAkB,IAAAA,OAAO,CAACC,GAAR,CAAYC,SAAS,CAACG,MAAtB;AACApB,IAAAA,UAAU,CAACiB,SAAS,CAACG,MAAX,CAAV;AACH,GATQ,EASN,CAACvB,EAAD,EAAKG,UAAL,CATM,CAAT;AAWA,MAAG,CAACH,EAAD,IAAME,OAAT,EAAkB,OAAO,IAAP;AAElB,SACI;AAAM,IAAA,SAAS,EAAC,uBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKA,OADL,CADJ;AAMH,CAtCD;;AAwCA,eAAeJ,OAAf","sourcesContent":["import React, {useEffect, useState} from \"react\";\r\n// import ReactMarkdown from \"react-markdown\";\r\nimport \"./content.scss\";\r\nimport usePath from \"../Hooks/usePath\";\r\n// import parseCssClass from \"../MarkDonwExtesnion/parseCssClass2\";\r\n// import transformTree from \"./../MarkDonwExtesnion/reamark-hclass\";\r\nimport remarkAttr from \"./../MarkDonwExtesnion/remark-attr\";\r\n\r\nimport unified from 'unified'\r\nimport parse from 'remark-parse'\r\nimport remark2react from 'remark-react'\r\n\r\nconst getMarkups = () => require.context('./../markups', true, /\\.*md/).keys()\r\n\r\nconst load = (module) => import(`./../markups/${module}`).then( module => module.default);\r\n\r\nconst Content = () => {\r\n    const [currentPath] = usePath();\r\n    const [md, setMd] = useState(null);\r\n    const [content, setContent] = useState(null);\r\n\r\n    useEffect(()=>{\r\n        if(!currentPath.length) return;\r\n        let pattern = \"\";\r\n        currentPath.forEach( slug => pattern += \"\\\\/?\\\\d?\\\\.\" + slug)\r\n        pattern += \"\\\\.md\";\r\n        let regex = new RegExp(pattern);\r\n        let file = getMarkups().filter( path => regex.test(path))[0]?.replace(\"./\", \"\");\r\n        if(!file) return;\r\n        load(file)\r\n            .then(md => fetch(md))\r\n            .then(response => response.text())\r\n            .then(md => setMd(md))\r\n    },[currentPath, setMd])\r\n\r\n    useEffect(()=>{\r\n        if(!md) return;\r\n        console.log(md)\r\n        const processed = unified()\r\n            .use(parse)\r\n            .use(remark2react)\r\n            .processSync(md);\r\n        console.log(processed.result)\r\n        setContent(processed.result);\r\n    }, [md, setContent])\r\n\r\n    if(!md|| content) return null;\r\n\r\n    return (\r\n        <main className=\"introduction__content\">\r\n            {content}\r\n            {/*<ReactMarkdown source={md} plugins={[remarkAttr]}/>*/}\r\n        </main>\r\n    )\r\n}\r\n\r\nexport default Content;"]},"metadata":{},"sourceType":"module"}