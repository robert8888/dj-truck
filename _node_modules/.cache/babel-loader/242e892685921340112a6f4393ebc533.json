{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\src\\\\pages\\\\common\\\\components\\\\RecordDetails\\\\RecordDetails.js\";\nimport React, { useState, useEffect, useCallback, useRef, useMemo } from \"react\";\nimport { reqUpdateRec } from \"./../../../../actions\";\nimport { connect } from \"react-redux\";\nimport { Form, Button } from \"react-bootstrap\";\nimport \"./record-details.scss\";\n\nconst RecordDetails = ({\n  record,\n  userId,\n  requestUpdate\n}) => {\n  const [editMode, setEditMode] = useState(false);\n  const [editable, setEditable] = useState(false);\n  const [userNickname, setUserNickname] = useState(\"\");\n  const [title, setTitle] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [generes, setGeneres] = useState([]);\n  const descriptionTextArea = useRef();\n  const setFromRecord = useCallback(record => {\n    if (record.user.id === userId) {\n      setEditable(true);\n    }\n\n    setUserNickname(record.user.nickname || \"\");\n    setTitle(record.title || \"\");\n    setDescription(record.description || \"\");\n    setGeneres(record.generes.map(genere => genere.name) || []);\n  }, [userId, setEditable, setTitle, setDescription, setGeneres, setUserNickname]);\n  useEffect(() => {\n    if (!record) return;\n    setFromRecord(record);\n  }, [record, setFromRecord]);\n  const toggleMode = useCallback(() => {\n    const mode = !editMode;\n    setEditMode(mode);\n\n    if (!mode) {\n      setFromRecord(record);\n    }\n  }, [record, editMode, setEditMode]);\n  const updateTitle = useCallback(event => {\n    setTitle(event.target.value);\n  }, [setTitle]);\n  const updateDescription = useCallback(event => {\n    setDescription(event.target.value);\n  }, [setDescription]);\n  const generereRegex = useMemo(() => {\n    return /^(?:(?:[a-zA-Z]){1,20}\\s(?:,|(?:,[a-zA-Z]{1,20}))*)*$/;\n  }, []);\n  const updateGeneres = useCallback(event => {\n    if (!generereRegex.test(event.target.value)) {\n      return;\n    }\n\n    setGeneres(event.target.value);\n  }, [setGeneres]);\n  const updateRecordDetails = useCallback(event => {\n    event.preventDefault();\n    const title = event.target.elements.title.value;\n    const description = event.target.elements.description.value;\n    const generes = event.target.elements.generes.value || \"\";\n    const generesArr = generes.split(\",\").map(str => str.trim());\n    console.log(\"call update\");\n    requestUpdate(record.id, {\n      title,\n      description,\n      generes: generesArr\n    });\n    setEditMode(false);\n  }, [record, setEditMode, requestUpdate]); //ajust text areaf size \n\n  useEffect(() => {\n    const el = descriptionTextArea.current;\n    el.style.height = 0;\n    el.style.height = el.scrollHeight + 10 + \"px\";\n  }, [description, descriptionTextArea]);\n  return React.createElement(Form, {\n    className: \"record-details\",\n    onSubmit: updateRecordDetails,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, React.createElement(Form.Group, {\n    className: \"record-title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, React.createElement(Form.Label, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, \"User: \"), React.createElement(Form.Control, {\n    name: \"user\",\n    type: \"text\",\n    value: userNickname,\n    disabled: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  })), editable && React.createElement(Form.Check, {\n    type: \"switch\",\n    id: \"switch-edit-mode\",\n    label: \"edit\",\n    className: \"switch-edit-mode\",\n    value: editMode,\n    onChange: toggleMode,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }), React.createElement(Form.Group, {\n    className: \"record-title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, React.createElement(Form.Label, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, \"Title: \"), React.createElement(Form.Control, {\n    name: \"title\",\n    type: \"text\",\n    value: title,\n    onChange: updateTitle,\n    disabled: !editMode,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  })), React.createElement(Form.Group, {\n    className: \"record-description\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, React.createElement(Form.Label, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, \"Description: \"), React.createElement(Form.Control, {\n    name: \"description\",\n    as: \"textarea\",\n    ref: descriptionTextArea,\n    value: description,\n    onChange: updateDescription,\n    disabled: !editMode,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  })), React.createElement(Form.Group, {\n    className: \"genere-list\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, React.createElement(Form.Label, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, \"Generes: \"), React.createElement(Form.Control, {\n    type: \"text\",\n    name: \"generes\",\n    value: generes,\n    onChange: updateGeneres,\n    disabled: !editMode,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  })), editMode && React.createElement(Button, {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, \" Save \"));\n};\n\nconst mapStateToProps = state => ({\n  userId: state.user.dbId\n});\n\nconst mapDispatchToProps = dispatch => ({\n  requestUpdate: (recordId, dataChanges) => dispatch(reqUpdateRec(recordId, dataChanges))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RecordDetails);","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/pages/common/components/RecordDetails/RecordDetails.js"],"names":["React","useState","useEffect","useCallback","useRef","useMemo","reqUpdateRec","connect","Form","Button","RecordDetails","record","userId","requestUpdate","editMode","setEditMode","editable","setEditable","userNickname","setUserNickname","title","setTitle","description","setDescription","generes","setGeneres","descriptionTextArea","setFromRecord","user","id","nickname","map","genere","name","toggleMode","mode","updateTitle","event","target","value","updateDescription","generereRegex","updateGeneres","test","updateRecordDetails","preventDefault","elements","generesArr","split","str","trim","console","log","el","current","style","height","scrollHeight","mapStateToProps","state","dbId","mapDispatchToProps","dispatch","recordId","dataChanges"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback, useRef, useMemo } from \"react\";\r\nimport { reqUpdateRec } from \"./../../../../actions\";\r\nimport { connect } from \"react-redux\";\r\nimport { Form, Button } from \"react-bootstrap\"\r\nimport \"./record-details.scss\";\r\n\r\nconst RecordDetails = ({ record, userId, requestUpdate }) => {\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [editable, setEditable] = useState(false);\r\n\r\n    const [userNickname, setUserNickname] = useState(\"\")\r\n    const [title, setTitle] = useState(\"\");\r\n    const [description, setDescription] = useState(\"\");\r\n    const [generes, setGeneres] = useState([]);\r\n\r\n    const descriptionTextArea = useRef();\r\n\r\n\r\n    const setFromRecord = useCallback((record) => {\r\n        if (record.user.id === userId) {\r\n            setEditable(true);\r\n        }\r\n        setUserNickname(record.user.nickname || \"\");\r\n        setTitle(record.title || \"\")\r\n        setDescription(record.description || \"\")\r\n        setGeneres(record.generes.map(genere => genere.name) || []);\r\n    }, [userId,\r\n        setEditable,\r\n        setTitle,\r\n        setDescription,\r\n        setGeneres,\r\n        setUserNickname])\r\n\r\n    useEffect(() => {\r\n        if (!record) return;\r\n        setFromRecord(record)\r\n    }, [record, setFromRecord])\r\n\r\n\r\n    const toggleMode = useCallback(() => {\r\n        const mode = !editMode;\r\n        setEditMode(mode)\r\n        if (!mode) {\r\n            setFromRecord(record)\r\n        }\r\n\r\n    }, [record, editMode, setEditMode])\r\n\r\n    const updateTitle = useCallback((event) => {\r\n        setTitle(event.target.value);\r\n    }, [setTitle])\r\n\r\n    const updateDescription = useCallback(event => {\r\n\r\n        setDescription(event.target.value)\r\n    }, [setDescription])\r\n\r\n\r\n    const generereRegex = useMemo(() => {\r\n        return /^(?:(?:[a-zA-Z]){1,20}\\s(?:,|(?:,[a-zA-Z]{1,20}))*)*$/;\r\n    }, [])\r\n\r\n    const updateGeneres = useCallback(event => {\r\n        if (!generereRegex.test(event.target.value)) { return }\r\n        setGeneres(event.target.value)\r\n    }, [setGeneres])\r\n\r\n    const updateRecordDetails = useCallback(event => {\r\n        event.preventDefault();\r\n        const title = event.target.elements.title.value;\r\n        const description = event.target.elements.description.value;\r\n        const generes = event.target.elements.generes.value || \"\";\r\n        const generesArr = generes.split(\",\").map(str => str.trim());\r\n        console.log(\"call update\")\r\n        requestUpdate(record.id, {\r\n            title,\r\n            description,\r\n            generes: generesArr\r\n        })\r\n        setEditMode(false)\r\n    }, [record, setEditMode, requestUpdate])\r\n\r\n    //ajust text areaf size \r\n    useEffect(() => {\r\n        const el = descriptionTextArea.current;\r\n        el.style.height = 0;\r\n        el.style.height = el.scrollHeight + 10 + \"px\";\r\n    }, [description, descriptionTextArea])\r\n\r\n    return (\r\n        <Form className=\"record-details\" onSubmit={updateRecordDetails}>\r\n            <Form.Group className=\"record-title\">\r\n                <Form.Label>User: </Form.Label>\r\n                <Form.Control name=\"user\" type=\"text\" value={userNickname} disabled />\r\n            </Form.Group>\r\n            {editable && <Form.Check\r\n                type=\"switch\"\r\n                id=\"switch-edit-mode\"\r\n                label=\"edit\"\r\n                className=\"switch-edit-mode\"\r\n                value={editMode}\r\n                onChange={toggleMode} />}\r\n            <Form.Group className=\"record-title\">\r\n                <Form.Label>Title: </Form.Label>\r\n                <Form.Control name=\"title\" type=\"text\" value={title} onChange={updateTitle} disabled={!editMode} />\r\n            </Form.Group>\r\n            <Form.Group className=\"record-description\">\r\n                <Form.Label>Description: </Form.Label>\r\n                <Form.Control name=\"description\" as=\"textarea\" ref={descriptionTextArea} value={description} onChange={updateDescription} disabled={!editMode} />\r\n            </Form.Group>\r\n            <Form.Group className=\"genere-list\">\r\n                <Form.Label>Generes: </Form.Label>\r\n                <Form.Control\r\n                    type=\"text\"\r\n                    name=\"generes\"\r\n                    value={generes }\r\n                    onChange={updateGeneres}\r\n                    disabled={!editMode} />\r\n            </Form.Group>\r\n            {editMode && <Button type=\"submit\"> Save </Button>}\r\n        </Form>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    userId: state.user.dbId\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    requestUpdate: (recordId, dataChanges) => dispatch(reqUpdateRec(recordId, dataChanges))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(RecordDetails)"]},"metadata":{},"sourceType":"module"}