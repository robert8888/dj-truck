{"ast":null,"code":"import _regeneratorRuntime from \"D:\\\\PROJEKTY\\\\APKI\\\\DjTruck\\\\djtruck\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _slicedToArray from \"D:\\\\PROJEKTY\\\\APKI\\\\DjTruck\\\\djtruck\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _asyncToGenerator from \"D:\\\\PROJEKTY\\\\APKI\\\\DjTruck\\\\djtruck\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nexport var createRenderInputsOfAudioParam = function createRenderInputsOfAudioParam(getAudioNodeRenderer, getAudioParamConnections, isPartOfACycle) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(audioParam, nativeOfflineAudioContext, nativeAudioParam, trace) {\n        var audioParamConnections;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                audioParamConnections = getAudioParamConnections(audioParam);\n                _context2.next = 3;\n                return Promise.all(Array.from(audioParamConnections.activeInputs).map(\n                /*#__PURE__*/\n                function () {\n                  var _ref2 = _asyncToGenerator(\n                  /*#__PURE__*/\n                  _regeneratorRuntime.mark(function _callee(_ref3) {\n                    var _ref4, source, output, audioNodeRenderer, renderedNativeAudioNode;\n\n                    return _regeneratorRuntime.wrap(function _callee$(_context) {\n                      while (1) {\n                        switch (_context.prev = _context.next) {\n                          case 0:\n                            _ref4 = _slicedToArray(_ref3, 2), source = _ref4[0], output = _ref4[1];\n                            audioNodeRenderer = getAudioNodeRenderer(source);\n                            _context.next = 4;\n                            return audioNodeRenderer.render(source, nativeOfflineAudioContext, trace);\n\n                          case 4:\n                            renderedNativeAudioNode = _context.sent;\n\n                            if (!isPartOfACycle(source)) {\n                              renderedNativeAudioNode.connect(nativeAudioParam, output);\n                            }\n\n                          case 6:\n                          case \"end\":\n                            return _context.stop();\n                        }\n                      }\n                    }, _callee);\n                  }));\n\n                  return function (_x5) {\n                    return _ref2.apply(this, arguments);\n                  };\n                }()));\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x, _x2, _x3, _x4) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n};","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/node_modules/standardized-audio-context/build/es2019/factories/render-inputs-of-audio-param.js"],"names":["createRenderInputsOfAudioParam","getAudioNodeRenderer","getAudioParamConnections","isPartOfACycle","audioParam","nativeOfflineAudioContext","nativeAudioParam","trace","audioParamConnections","Promise","all","Array","from","activeInputs","map","source","output","audioNodeRenderer","render","renderedNativeAudioNode","connect"],"mappings":";;;AAAA,OAAO,IAAMA,8BAA8B,GAAG,SAAjCA,8BAAiC,CAACC,oBAAD,EAAuBC,wBAAvB,EAAiDC,cAAjD,EAAoE;AAC9G;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAO,kBAAOC,UAAP,EAAmBC,yBAAnB,EAA8CC,gBAA9C,EAAgEC,KAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AACGC,gBAAAA,qBADH,GAC2BN,wBAAwB,CAACE,UAAD,CADnD;AAAA;AAAA,uBAEGK,OAAO,CACRC,GADC,CACGC,KAAK,CACTC,IADI,CACCJ,qBAAqB,CAACK,YADvB,EAEJC,GAFI;AAAA;AAAA;AAAA;AAAA;AAAA,2CAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,8DAAQC,MAAR,aAAgBC,MAAhB;AACCC,4BAAAA,iBADD,GACqBhB,oBAAoB,CAACc,MAAD,CADzC;AAAA;AAAA,mCAEiCE,iBAAiB,CAACC,MAAlB,CAAyBH,MAAzB,EAAiCV,yBAAjC,EAA4DE,KAA5D,CAFjC;;AAAA;AAECY,4BAAAA,uBAFD;;AAGL,gCAAI,CAAChB,cAAc,CAACY,MAAD,CAAnB,EAA6B;AACzBI,8BAAAA,uBAAuB,CAACC,OAAxB,CAAgCd,gBAAhC,EAAkDU,MAAlD;AACH;;AALI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAFA;;AAAA;AAAA;AAAA;AAAA,oBADH,CAFH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAaH,CAdM","sourcesContent":["export const createRenderInputsOfAudioParam = (getAudioNodeRenderer, getAudioParamConnections, isPartOfACycle) => {\n    return async (audioParam, nativeOfflineAudioContext, nativeAudioParam, trace) => {\n        const audioParamConnections = getAudioParamConnections(audioParam);\n        await Promise\n            .all(Array\n            .from(audioParamConnections.activeInputs)\n            .map(async ([source, output]) => {\n            const audioNodeRenderer = getAudioNodeRenderer(source);\n            const renderedNativeAudioNode = await audioNodeRenderer.render(source, nativeOfflineAudioContext, trace);\n            if (!isPartOfACycle(source)) {\n                renderedNativeAudioNode.connect(nativeAudioParam, output);\n            }\n        }));\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/render-inputs-of-audio-param.js.map"]},"metadata":{},"sourceType":"module"}