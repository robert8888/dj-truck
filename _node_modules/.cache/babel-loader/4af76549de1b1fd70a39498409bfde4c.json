{"ast":null,"code":"import { useMemo, useState, useEffect, useCallback } from \"react\";\nimport { getApi } from \"./../../../apis/apiProvider\";\nimport { PLAYBACK_STATE } from \"./usePlabackState\"; //getRecordUrl\n\nclass PlayerControler {\n  constructor() {\n    this.btnStateHandlers = {};\n    this.progressWatchers = {};\n    this.progressProviders = {};\n    this.progressUpdaterHandler = null;\n    this.current = {\n      id: null,\n      start: 0,\n      duration: 0,\n      progress: 0,\n      state: null\n    };\n  }\n\n  setBtnCtrlHandler(id, handler) {\n    this.btnStateHandlers[id] = handler;\n  }\n\n  setBtnState(id, state) {\n    this.btnStateHandlers[id](state);\n  }\n\n  setProgressHandler(id, handler) {\n    if (this.progressWatchers[id]) {\n      this.progressWatchers[id].push(handler);\n    } else {\n      this.progressWatchers[id] = [handler];\n    }\n  }\n\n  setProgress(id, progress) {\n    for (let handler of [...this.progressWatchers[id], ...this.progressWatchers['#']]) {\n      handler(progress);\n    }\n\n    this.current.progress = progress;\n  }\n\n  setProgressProvider(id, handler) {\n    this.progressProviders[id] = handler;\n  }\n\n  getProgress(id) {\n    if (!id) {\n      return this.getProgress(this.current.id);\n    }\n\n    return this.progressProviders[id]();\n  }\n\n  setCurrent(nextCurrent) {\n    this.current = nextCurrent();\n    this.spreadCurrentChange();\n  }\n\n}\n\nexport function useRecordPlayer() {\n  const [mediaElement, setMediaElement] = useState(null); // const ctr = useContext(PlayerContext);\n\n  const [ctr, _] = useState(new PlayerControler());\n  const api = useMemo(() => {\n    return getApi('RecordsStore');\n  }, [getApi]);\n  useEffect(() => {\n    const medEl = document.createElement('audio');\n    setMediaElement(medEl);\n    ctr.mediaElement = medEl;\n  }, [setMediaElement, ctr]);\n  const startUpdateProg = useCallback(() => {\n    const handler = setInterval(() => {\n      const progress = mediaElement.currentTime / (ctr.current.duration / 1000);\n      ctr.setProgress(ctr.current.id, progress);\n    }, 200);\n    ctr.progressUpdaterHandler = handler;\n  }, [mediaElement, ctr]);\n  const stopUpdateProg = useCallback(() => {\n    clearInterval(ctr.progressUpdaterHandler);\n  }, [ctr]);\n  const playback = useCallback((id, pbState) => {\n    if (pbState === PLAYBACK_STATE.PLAY) {\n      const {\n        progress,\n        duration\n      } = ctr.getProgress(id);\n      const position = duration / 1000 * progress;\n      mediaElement.src = api.getRecordUrl(id);\n      mediaElement.currentTime = position;\n      mediaElement.play();\n\n      if (ctr.current.id) {\n        ctr.setBtnState(ctr.current.id, PLAYBACK_STATE.PAUSE);\n      }\n\n      ctr.current = {\n        id,\n        duration,\n        progress: progress,\n        state: PLAYBACK_STATE.PLAY\n      };\n      startUpdateProg();\n    } else if (pbState === PLAYBACK_STATE.PAUSE) {\n      mediaElement.pause();\n      ctr.current.state = PLAYBACK_STATE.PAUSE;\n      stopUpdateProg();\n    }\n  }, [mediaElement, api, ctr, stopUpdateProg, startUpdateProg]);\n  const seek = useCallback(({\n    id,\n    progress,\n    duration\n  }) => {\n    stopUpdateProg(); //     const bufferdTimeRanges = mediaElement.buffered;\n    //    // const end = bufferdTimeRanges.length && bufferdTimeRanges.end(bufferdTimeRanges.length-1);\n    //     if(bufferdTimeRanges.length){\n    //         //console.log('seeekable',mediaElement.seekable.end(mediaElement.seekable.length - 1));\n    //         console.log(bufferdTimeRanges.end(bufferdTimeRanges.length-1));\n    //     }\n\n    if (ctr.current.id && ctr.current.id !== id) {\n      ctr.setBtnState(ctr.current.id, PLAYBACK_STATE.PAUSE);\n    }\n\n    const position = duration / 1000 * progress;\n\n    if (ctr.current.id !== id) {\n      mediaElement.src = api.getRecordUrl(id);\n      mediaElement.currentTime = position;\n      ctr.setBtnState(id, PLAYBACK_STATE.PLAY);\n      ctr.setProgress(id, progress);\n      ctr.current = {\n        id,\n        duration,\n        state: PLAYBACK_STATE.PLAY\n      };\n    }\n\n    mediaElement.currentTime = position;\n\n    if (mediaElement.pause) {\n      mediaElement.play();\n    }\n\n    startUpdateProg();\n  }, [ctr, api, mediaElement, stopUpdateProg, startUpdateProg]);\n  return [playback, seek, ctr];\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/pages/common/Hooks/useRecordPlayer.js"],"names":["useMemo","useState","useEffect","useCallback","getApi","PLAYBACK_STATE","PlayerControler","btnStateHandlers","progressWatchers","progressProviders","progressUpdaterHandler","current","id","start","duration","progress","state","setBtnCtrlHandler","handler","setBtnState","setProgressHandler","push","setProgress","setProgressProvider","getProgress","setCurrent","nextCurrent","spreadCurrentChange","useRecordPlayer","mediaElement","setMediaElement","ctr","_","api","medEl","document","createElement","startUpdateProg","setInterval","currentTime","stopUpdateProg","clearInterval","playback","pbState","PLAY","position","src","getRecordUrl","play","PAUSE","pause","seek"],"mappings":"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","sourcesContent":["import { useMemo, useState, useEffect, useCallback } from \"react\"\r\nimport { getApi } from \"./../../../apis/apiProvider\";\r\nimport { PLAYBACK_STATE } from \"./usePlabackState\";\r\n\r\n//getRecordUrl\r\nclass PlayerControler {\r\n    btnStateHandlers = {}\r\n    progressWatchers = {}\r\n    progressProviders = {};\r\n    progressUpdaterHandler = null;\r\n    current = {\r\n        id: null,\r\n        start: 0,\r\n        duration: 0,\r\n        progress: 0,\r\n        state: null,\r\n    };\r\n\r\n    setBtnCtrlHandler(id, handler) {\r\n        this.btnStateHandlers[id] = handler;\r\n    }\r\n\r\n    setBtnState(id, state) {\r\n        this.btnStateHandlers[id](state)\r\n    }\r\n\r\n    setProgressHandler(id, handler) {\r\n        if (this.progressWatchers[id]) {\r\n            this.progressWatchers[id].push(handler);\r\n            \r\n        } else{\r\n            this.progressWatchers[id] = [handler];\r\n        }\r\n    }\r\n\r\n    setProgress(id, progress) {\r\n        for (let handler of \r\n            [...this.progressWatchers[id], \r\n             ...this.progressWatchers['#']]) {\r\n            handler(progress)\r\n        }\r\n        this.current.progress = progress;\r\n    }\r\n\r\n    setProgressProvider(id, handler) {\r\n        this.progressProviders[id] = handler;\r\n    }\r\n\r\n    getProgress(id) {\r\n        if(!id){\r\n            return this.getProgress(this.current.id);\r\n        }\r\n        return this.progressProviders[id]();\r\n    }\r\n\r\n    setCurrent(nextCurrent){\r\n        this.current = nextCurrent();\r\n        this.spreadCurrentChange();\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nexport function useRecordPlayer() {\r\n    const [mediaElement, setMediaElement] = useState(null);\r\n    // const ctr = useContext(PlayerContext);\r\n    const [ctr, _] = useState(new PlayerControler())\r\n\r\n    const api = useMemo(() => {\r\n        return getApi('RecordsStore');\r\n    }, [getApi])\r\n\r\n    useEffect(() => {\r\n        const medEl = document.createElement('audio');\r\n        setMediaElement(medEl);\r\n        ctr.mediaElement = medEl;\r\n    }, [setMediaElement, ctr])\r\n\r\n    const startUpdateProg = useCallback(() => {\r\n        const handler = setInterval(() => {\r\n            const progress = mediaElement.currentTime / (ctr.current.duration / 1000);\r\n            ctr.setProgress(ctr.current.id, progress);\r\n        }, 200)\r\n        ctr.progressUpdaterHandler = handler;\r\n    }, [mediaElement, ctr])\r\n\r\n    const stopUpdateProg = useCallback(() => {\r\n        clearInterval(ctr.progressUpdaterHandler);\r\n    }, [ctr])\r\n\r\n    const playback = useCallback((id, pbState) => {\r\n        if (pbState === PLAYBACK_STATE.PLAY) {\r\n            const { progress, duration } = ctr.getProgress(id);\r\n            const position = (duration / 1000) * progress;\r\n            mediaElement.src = api.getRecordUrl(id);\r\n            mediaElement.currentTime = position;\r\n            mediaElement.play();\r\n            if (ctr.current.id) {\r\n                ctr.setBtnState(ctr.current.id, PLAYBACK_STATE.PAUSE)\r\n            }\r\n            ctr.current = {\r\n                id,\r\n                duration,\r\n                progress: progress,\r\n                state: PLAYBACK_STATE.PLAY,\r\n            }\r\n            startUpdateProg()\r\n        } else if (pbState === PLAYBACK_STATE.PAUSE) {\r\n            mediaElement.pause();\r\n            ctr.current.state = PLAYBACK_STATE.PAUSE;\r\n            stopUpdateProg();\r\n        }\r\n    }, [\r\n        mediaElement,\r\n        api,\r\n        ctr,\r\n        stopUpdateProg,\r\n        startUpdateProg,\r\n    ])\r\n\r\n    const seek = useCallback(({ id, progress, duration }) => {\r\n        stopUpdateProg();\r\n\r\n        //     const bufferdTimeRanges = mediaElement.buffered;\r\n        //    // const end = bufferdTimeRanges.length && bufferdTimeRanges.end(bufferdTimeRanges.length-1);\r\n        //     if(bufferdTimeRanges.length){\r\n        //         //console.log('seeekable',mediaElement.seekable.end(mediaElement.seekable.length - 1));\r\n        //         console.log(bufferdTimeRanges.end(bufferdTimeRanges.length-1));\r\n        //     }\r\n\r\n        if (ctr.current.id && ctr.current.id !== id) {\r\n            ctr.setBtnState(ctr.current.id, PLAYBACK_STATE.PAUSE);\r\n        }\r\n        const position = (duration / 1000) * progress;\r\n\r\n        if (ctr.current.id !== id) {\r\n            mediaElement.src = api.getRecordUrl(id);\r\n            mediaElement.currentTime = position;\r\n            ctr.setBtnState(id, PLAYBACK_STATE.PLAY);\r\n            ctr.setProgress(id, progress);\r\n            ctr.current = {\r\n                id,\r\n                duration,\r\n                state: PLAYBACK_STATE.PLAY\r\n            }\r\n        }\r\n\r\n        mediaElement.currentTime = position;\r\n        if (mediaElement.pause) {\r\n            mediaElement.play();\r\n        }\r\n\r\n        startUpdateProg();\r\n\r\n    }, [ctr, api, mediaElement, stopUpdateProg, startUpdateProg])\r\n\r\n    return [playback, seek, ctr]\r\n}"]},"metadata":{},"sourceType":"module"}