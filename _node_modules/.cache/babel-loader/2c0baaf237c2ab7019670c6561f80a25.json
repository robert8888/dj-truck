{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\src\\\\pages\\\\console\\\\components\\\\Console\\\\Deck\\\\TrackInfo\\\\TimeLeft\\\\TimeLeft.js\";\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { formater } from \"./../../../../../../../utils/time/timeFromater\";\nimport { connect } from \"react-redux\";\nimport Console from \"./../../../../../core/console/console\";\n\nconst TimeLeft = ({\n  duration,\n  playback,\n  name\n}) => {\n  const container = useRef(null);\n  const intervalHandler = useRef(null);\n  const [channelInterface, setChannelInterface] = useState(null);\n  useEffect(() => {\n    setChannelInterface(Console.Get().getChannelInterface(name));\n  }, [setChannelInterface, name]);\n  useEffect(() => {\n    if (!channelInterface || !container.current) return;\n\n    if (playback) {\n      intervalHandler.current = setInterval(() => {\n        let left = channelInterface.getCurrentTime().left;\n        left = formater.secondsToStr(left);\n        if (!container.textContent) return;\n        container.current.textContent = left;\n      }, 500);\n    } else {\n      clearInterval(intervalHandler.current);\n    }\n  }, [playback, duration, container, intervalHandler, channelInterface]);\n  useEffect(() => () => {\n    if (intervalHandler.current) {\n      clearInterval(intervalHandler.current);\n    }\n  }, [intervalHandler]);\n  return React.createElement(\"span\", {\n    className: \"time-left\",\n    ref: container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  });\n};\n\nconst mapsStateToProps = (state, ownProps) => ({\n  duration: state.console.channel[ownProps.name].track.duration,\n  playback: state.console.channel[ownProps.name].playBackState.paused\n});\n\nexport default connect(mapsStateToProps)(TimeLeft);","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/pages/console/components/Console/Deck/TrackInfo/TimeLeft/TimeLeft.js"],"names":["React","useRef","useEffect","useState","formater","connect","Console","TimeLeft","duration","playback","name","container","intervalHandler","channelInterface","setChannelInterface","Get","getChannelInterface","current","setInterval","left","getCurrentTime","secondsToStr","textContent","clearInterval","mapsStateToProps","state","ownProps","console","channel","track","playBackState","paused"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,EAAmCC,QAAnC,QAAkD,OAAlD;AACA,SAASC,QAAT,QAAyB,gDAAzB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,OAAP,MAAoB,uCAApB;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAACC,EAAAA,QAAD;AAAWC,EAAAA,QAAX;AAAqBC,EAAAA;AAArB,CAAD,KAAgC;AAC7C,QAAMC,SAAS,GAAGV,MAAM,CAAC,IAAD,CAAxB;AACA,QAAMW,eAAe,GAAGX,MAAM,CAAC,IAAD,CAA9B;AAEA,QAAM,CAACY,gBAAD,EAAmBC,mBAAnB,IAA2CX,QAAQ,CAAC,IAAD,CAAzD;AAEAD,EAAAA,SAAS,CAAC,MAAI;AACVY,IAAAA,mBAAmB,CAACR,OAAO,CAACS,GAAR,GAAcC,mBAAd,CAAkCN,IAAlC,CAAD,CAAnB;AACH,GAFQ,EAEN,CAACI,mBAAD,EAAsBJ,IAAtB,CAFM,CAAT;AAIAR,EAAAA,SAAS,CAAC,MAAI;AACV,QAAG,CAACW,gBAAD,IAAqB,CAACF,SAAS,CAACM,OAAnC,EAA4C;;AAE5C,QAAGR,QAAH,EAAY;AACRG,MAAAA,eAAe,CAACK,OAAhB,GAA0BC,WAAW,CAAC,MAAI;AACtC,YAAIC,IAAI,GAAGN,gBAAgB,CAACO,cAAjB,GAAkCD,IAA7C;AACAA,QAAAA,IAAI,GAAGf,QAAQ,CAACiB,YAAT,CAAsBF,IAAtB,CAAP;AACA,YAAG,CAACR,SAAS,CAACW,WAAd,EAA2B;AAC3BX,QAAAA,SAAS,CAACM,OAAV,CAAkBK,WAAlB,GAAgCH,IAAhC;AACH,OALoC,EAKlC,GALkC,CAArC;AAMH,KAPD,MAOO;AACHI,MAAAA,aAAa,CAACX,eAAe,CAACK,OAAjB,CAAb;AACH;AACJ,GAbQ,EAaN,CAACR,QAAD,EACCD,QADD,EAECG,SAFD,EAGCC,eAHD,EAICC,gBAJD,CAbM,CAAT;AAmBAX,EAAAA,SAAS,CAAC,MAAI,MAAK;AACf,QAAGU,eAAe,CAACK,OAAnB,EAA2B;AACvBM,MAAAA,aAAa,CAACX,eAAe,CAACK,OAAjB,CAAb;AACH;AACJ,GAJQ,EAIN,CAACL,eAAD,CAJM,CAAT;AAMA,SACI;AAAM,IAAA,SAAS,EAAC,WAAhB;AAA4B,IAAA,GAAG,EAAED,SAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAGH,CAtCD;;AAwCA,MAAMa,gBAAgB,GAAG,CAACC,KAAD,EAAQC,QAAR,MAAsB;AAC3ClB,EAAAA,QAAQ,EAAEiB,KAAK,CAACE,OAAN,CAAcC,OAAd,CAAsBF,QAAQ,CAAChB,IAA/B,EAAqCmB,KAArC,CAA2CrB,QADV;AAE3CC,EAAAA,QAAQ,EAAEgB,KAAK,CAACE,OAAN,CAAcC,OAAd,CAAsBF,QAAQ,CAAChB,IAA/B,EAAqCoB,aAArC,CAAmDC;AAFlB,CAAtB,CAAzB;;AAKA,eAAe1B,OAAO,CAACmB,gBAAD,CAAP,CAA0BjB,QAA1B,CAAf","sourcesContent":["import React, { useRef, useEffect, useState} from \"react\"\r\nimport { formater } from \"./../../../../../../../utils/time/timeFromater\";\r\nimport { connect } from \"react-redux\";\r\nimport Console from \"./../../../../../core/console/console\";\r\n\r\nconst TimeLeft = ({duration, playback, name}) => {\r\n    const container = useRef(null);\r\n    const intervalHandler = useRef(null)\r\n\r\n    const [channelInterface, setChannelInterface] =  useState(null);\r\n\r\n    useEffect(()=>{ \r\n        setChannelInterface(Console.Get().getChannelInterface(name));\r\n    }, [setChannelInterface, name])\r\n\r\n    useEffect(()=>{\r\n        if(!channelInterface || !container.current) return;\r\n\r\n        if(playback){\r\n            intervalHandler.current = setInterval(()=>{\r\n                let left = channelInterface.getCurrentTime().left;\r\n                left = formater.secondsToStr(left);\r\n                if(!container.textContent) return;\r\n                container.current.textContent = left;\r\n            }, 500)\r\n        } else {\r\n            clearInterval(intervalHandler.current);\r\n        }\r\n    }, [playback,\r\n        duration,\r\n        container,\r\n        intervalHandler,\r\n        channelInterface])\r\n\r\n    useEffect(()=>()=> {\r\n        if(intervalHandler.current){\r\n            clearInterval(intervalHandler.current)\r\n        }\r\n    }, [intervalHandler]);\r\n\r\n    return (\r\n        <span className=\"time-left\" ref={container}/>\r\n    )\r\n}\r\n\r\nconst mapsStateToProps = (state, ownProps) => ({\r\n    duration: state.console.channel[ownProps.name].track.duration,\r\n    playback: state.console.channel[ownProps.name].playBackState.paused,\r\n})\r\n\r\nexport default connect(mapsStateToProps)(TimeLeft);"]},"metadata":{},"sourceType":"module"}