{"ast":null,"code":"import _classCallCheck from\"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import store from\"./../../../../../../store\";import{setChannelReady,setLoadingProgress,setTimeLeft,togglePlay,setLoop}from\"./../../../../../../actions\";var EventHandler=/*#__PURE__*/function(){function EventHandler(){_classCallCheck(this,EventHandler);this.startSync=function(channel){channel.syncHandle=setInterval(function(){channel.slave.drawer.progress(channel.master.backend.getPlayedPercents());},500);};this.dispatch=store.dispatch;}_createClass(EventHandler,[{key:\"CreateEventHandling\",value:function CreateEventHandling(channel){this.onLoad(channel);this.onLoading(channel);this.onReady(channel);// this.onPlay(channel);\nthis.onStop(channel);this.onSlaveSeek(channel);this.onMasterSeek(channel);this.onFinish(channel);}// --- events below\n},{key:\"onLoad\",value:function onLoad(channel){var _this=this;channel.master.on(\"load\",function(){_this.clearState(channel);});}},{key:\"onLoading\",value:function onLoading(channel){var _this2=this;channel.master.on(\"loading\",function(progress){_this2.dispatch(setLoadingProgress(channel.channelName,progress));});}},{key:\"onReady\",value:function onReady(channel){var _this3=this;channel.master.on(\"ready\",function(){channel.currentDuration=channel.master.getDuration();//resolution value is taken from manual test\n// const resolution = 280;\n// channel.slave.load(\n//     null, \n//     channel.master.backend.getPeaks(resolution, 0, resolution) \n//   );\nvar resolution=280;var peaks=channel.master.backend.getPeaks(resolution,0,resolution);var start=0;var end=peaks.length/2;var width=channel.slave.params.container.getBoundingClientRect().width;channel.slave.drawer.drawPeaks(peaks,width,start,end);_this3.dispatch(setLoadingProgress(channel.channelName,100));_this3.dispatch(setChannelReady(true,channel.channelName));_this3.startSync(channel);});}// onPlay(channel){\n//   channel.master.on(\"play\", ()=>{\n//       channel._clockHandle = setInterval(()=>{\n//         const timeLeft = parseInt(channel.master.getDuration() - channel.master.getCurrentTime());\n//         this.dispatch(setTimeLeft(channel.channelName, timeLeft))\n//       }, 500)\n//   })\n// }\n},{key:\"onStop\",value:function onStop(channel){channel.master.on('pause',function(){clearInterval(channel._clockHandle);});}},{key:\"onSlaveSeek\",value:function onSlaveSeek(channel){var _this4=this;channel.slave.on(\"seek\",function(progress){var wasPlaying=channel.master.isPlaying();channel.master.backend.seekTo(progress*channel.currentDuration);channel.master.drawer.progress(progress);channel.master.fireEvent(\"seek\",progress);channel.slave.drawer.progress(progress);var timeLeft=parseInt(channel.master.getDuration()-channel.master.getDuration()*progress);_this4.dispatch(setTimeLeft(channel.channelName,timeLeft));if(wasPlaying){channel.master.play();}});}},{key:\"onMasterSeek\",value:function onMasterSeek(channel){var _this5=this;// updating time Left value\n///Because on seek event is called a 1000 time per second, is created watcher witch update\n// value after 500 ms with last progress value\nvar watcher=null;var lastCall={time:new Date().getTime(),value:null};channel.master.on(\"seek\",function(progress){lastCall.time=new Date().getTime();lastCall.progress=progress;if(!watcher){watcher=setTimeout(function(){if(new Date().getTime()-lastCall.time>=100){var timeLeft=parseInt(channel.master.getDuration()*lastCall.progress);_this5.dispatch(setTimeLeft(channel.channelName,timeLeft));clearTimeout(watcher);watcher=null;}},500);}});this.dispatch(setLoop(channel.channelName,false));}},{key:\"onFinish\",value:function onFinish(channel){var _this6=this;channel.master.on(\"finish\",function(){_this6.dispatch(togglePlay(channel.channelName));clearInterval(channel._clockHandle);});}//---------------------------------------\n},{key:\"clearState\",value:function clearState(channel){channel.slave.drawer.drawPeaks([],0,0,0);if(channel.barsElements){channel.barsElements.forEach(function(htmlElement){return htmlElement.remove();});}}}]);return EventHandler;}();export{EventHandler as default};","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/pages/console/core/console/channels/channelEvnetHandler/channelEvnetHandler.js"],"names":["store","setChannelReady","setLoadingProgress","setTimeLeft","togglePlay","setLoop","EventHandler","startSync","channel","syncHandle","setInterval","slave","drawer","progress","master","backend","getPlayedPercents","dispatch","onLoad","onLoading","onReady","onStop","onSlaveSeek","onMasterSeek","onFinish","on","clearState","channelName","currentDuration","getDuration","resolution","peaks","getPeaks","start","end","length","width","params","container","getBoundingClientRect","drawPeaks","clearInterval","_clockHandle","wasPlaying","isPlaying","seekTo","fireEvent","timeLeft","parseInt","play","watcher","lastCall","time","Date","getTime","value","setTimeout","clearTimeout","barsElements","forEach","htmlElement","remove"],"mappings":"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","sourcesContent":["import store from \"./../../../../../../store\";\r\n\r\nimport {\r\n  setChannelReady,\r\n  setLoadingProgress,\r\n  setTimeLeft,\r\n  togglePlay,\r\n  setLoop\r\n} from \"./../../../../../../actions\";\r\n\r\nexport default class EventHandler {\r\n  constructor() {\r\n    this.dispatch = store.dispatch;\r\n  }\r\n\r\n  CreateEventHandling(channel) {\r\n    this.onLoad(channel);\r\n    this.onLoading(channel);\r\n    this.onReady(channel);\r\n   // this.onPlay(channel);\r\n    this.onStop(channel);\r\n\r\n    this.onSlaveSeek(channel);\r\n    this.onMasterSeek(channel);\r\n    this.onFinish(channel);\r\n  }\r\n  // --- events below\r\n\r\n  onLoad(channel) {\r\n    channel.master.on(\"load\", () => {\r\n      this.clearState(channel);\r\n    });\r\n  }\r\n\r\n  onLoading(channel) {\r\n    channel.master.on(\"loading\", progress => {\r\n      this.dispatch(setLoadingProgress(channel.channelName, progress));\r\n    });\r\n  }\r\n\r\n  onReady(channel) {\r\n    channel.master.on(\"ready\", () => {\r\n      channel.currentDuration = channel.master.getDuration();\r\n      //resolution value is taken from manual test\r\n      // const resolution = 280;\r\n      // channel.slave.load(\r\n      //     null, \r\n      //     channel.master.backend.getPeaks(resolution, 0, resolution) \r\n      //   );\r\n      const resolution = 280;\r\n      const peaks = channel.master.backend.getPeaks(resolution, 0 , resolution);\r\n      const start = 0;\r\n      const end = peaks.length / 2;\r\n      const width = channel.slave.params.container.getBoundingClientRect().width\r\n      channel.slave.drawer.drawPeaks(peaks, width, start, end);\r\n      \r\n\r\n      this.dispatch(setLoadingProgress(channel.channelName, 100));\r\n      this.dispatch(setChannelReady(true, channel.channelName));\r\n\r\n      this.startSync(channel);\r\n\r\n    });\r\n  }\r\n\r\n\r\n  // onPlay(channel){\r\n  //   channel.master.on(\"play\", ()=>{\r\n  //       channel._clockHandle = setInterval(()=>{\r\n  //         const timeLeft = parseInt(channel.master.getDuration() - channel.master.getCurrentTime());\r\n  //         this.dispatch(setTimeLeft(channel.channelName, timeLeft))\r\n  //       }, 500)\r\n  //   })\r\n  // }\r\n\r\n  onStop(channel){\r\n    channel.master.on('pause', ()=>{\r\n      clearInterval(channel._clockHandle)\r\n    })\r\n  }\r\n\r\n  onSlaveSeek(channel) {\r\n    channel.slave.on(\"seek\", progress => {\r\n      const wasPlaying = channel.master.isPlaying();\r\n\r\n      channel.master.backend.seekTo(progress * channel.currentDuration);\r\n      channel.master.drawer.progress(progress);\r\n      channel.master.fireEvent(\"seek\", progress);\r\n\r\n      channel.slave.drawer.progress(progress);\r\n\r\n      const timeLeft = parseInt(channel.master.getDuration() - channel.master.getDuration() * progress);\r\n      this.dispatch(setTimeLeft(channel.channelName, timeLeft));\r\n\r\n      if (wasPlaying) {\r\n        channel.master.play();\r\n      }\r\n    });\r\n  }\r\n\r\n  onMasterSeek(channel) {\r\n    // updating time Left value\r\n    ///Because on seek event is called a 1000 time per second, is created watcher witch update\r\n    // value after 500 ms with last progress value\r\n    let watcher = null;\r\n    let lastCall = {\r\n      time: new Date().getTime(),\r\n      value: null\r\n    };\r\n\r\n    channel.master.on(\"seek\", progress => {\r\n      lastCall.time = new Date().getTime();\r\n      lastCall.progress = progress;\r\n      if (!watcher) {\r\n        watcher = setTimeout(() => {\r\n          if (new Date().getTime() - lastCall.time >= 100) {\r\n            const timeLeft = parseInt(channel.master.getDuration() * lastCall.progress);\r\n            this.dispatch(setTimeLeft(channel.channelName, timeLeft));\r\n            clearTimeout(watcher);\r\n            watcher = null;\r\n          }\r\n        }, 500);\r\n      }\r\n    });\r\n\r\n    this.dispatch(setLoop(channel.channelName, false));\r\n  }\r\n\r\n\r\n  onFinish(channel) {\r\n    channel.master.on(\"finish\", () => {\r\n      this.dispatch(togglePlay(channel.channelName));\r\n      clearInterval(channel._clockHandle);\r\n    });\r\n  }\r\n\r\n  //---------------------------------------\r\n  clearState(channel) {\r\n    channel.slave.drawer.drawPeaks([], 0, 0, 0);\r\n    if (channel.barsElements) {\r\n      channel.barsElements.forEach(htmlElement => htmlElement.remove());\r\n    }\r\n  }\r\n\r\n  startSync = channel => {\r\n    channel.syncHandle = setInterval(() => {\r\n      channel.slave.drawer.progress(\r\n        channel.master.backend.getPlayedPercents()\r\n      );\r\n    }, 500);\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}