{"ast":null,"code":"import store from \"./../../../../../store\";\nimport { setAvailableEffects } from \"./../../../../../actions\";\nimport Reverb from \"./effects/reverb/reverb\";\nimport Delay from \"./effects/delay/delay\";\nexport default class Effector {\n  constructor(audioContext) {\n    this.config = store.getState().configuration.effector;\n    this.mainAC = audioContext;\n    this.channels = new Array(this.config.channels).fill(null).map(() => Object.create(null));\n    this.effects = {\n      \"reverb\": {\n        create: Reverb,\n        params: Reverb.defaultParams().params\n      },\n      \"delay\": {\n        create: Delay,\n        params: Delay.defaultParams().params\n      }\n    };\n    const exportEffects = {};\n    Object.entries(this.effects).forEach(([key, element]) => exportEffects[key] = element.params);\n    store.dispatch(setAvailableEffects(exportEffects));\n  }\n\n  connect(inputs) {\n    const outputs = inputs.map(() => this.mainAC.createGain());\n    inputs.forEach((inputNode, channelNumber) => {\n      const dryNode = this.mainAC.createGain();\n      inputNode.connect(dryNode);\n      dryNode.connect(outputs[channelNumber]);\n      this.channels[channelNumber].inputNode = inputNode;\n      this.channels[channelNumber].dryNode = dryNode;\n      this.channels[channelNumber].outputNode = outputs[channelNumber];\n    });\n    return outputs;\n  }\n\n  setDryWet(channelNumber, value) {\n    console.log(\"set dry wet\", channelNumber + \" val:\", value);\n  }\n\n  setEffect(channelNumber, effect) {\n    console.log(this.effects);\n    let params; // = {...this.effects[effect].params};\n\n    const channel = store.getState().effector.channels;\n\n    if (channel && channel[channelNumber]) {\n      params = { ...channel[channelNumber].effects[effect]\n      };\n    }\n\n    console.log(params); //  const params = {...channelEffects[effect]};\n    //  console.log(params);\n    //this.channels[channelNumber].currentEffect = this.effects[effect].create();\n  }\n\n  setParam(channelNumber, effect, param) {\n    console.log(\"set param : \" + channelNumber, \"effect: \" + effect, \" pram: \" + param);\n  }\n\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/pages/app/core/console/effector/effector.js"],"names":["store","setAvailableEffects","Reverb","Delay","Effector","constructor","audioContext","config","getState","configuration","effector","mainAC","channels","Array","fill","map","Object","create","effects","params","defaultParams","exportEffects","entries","forEach","key","element","dispatch","connect","inputs","outputs","createGain","inputNode","channelNumber","dryNode","outputNode","setDryWet","value","console","log","setEffect","effect","channel","setParam","param"],"mappings":"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","sourcesContent":["\r\nimport store from \"./../../../../../store\";\r\nimport { setAvailableEffects } from \"./../../../../../actions\";\r\n\r\nimport Reverb from \"./effects/reverb/reverb\";\r\nimport Delay from \"./effects/delay/delay\";\r\n\r\n\r\n\r\nexport default class Effector {\r\n    constructor(audioContext) {\r\n        this.config = store.getState().configuration.effector;\r\n        this.mainAC = audioContext;\r\n\r\n        this.channels = new Array(this.config.channels)\r\n                         .fill(null).map(() => Object.create(null));\r\n        \r\n        this.effects = {\r\n            \"reverb\": {\r\n                create: Reverb,\r\n                params: Reverb.defaultParams().params,\r\n            },\r\n            \"delay\": {\r\n                create: Delay,\r\n                params: Delay.defaultParams().params\r\n            }\r\n        }\r\n\r\n        const exportEffects = {};\r\n        Object.entries(this.effects).forEach(([key, element]) =>\r\n                exportEffects[key] = element.params\r\n            );\r\n        store.dispatch(setAvailableEffects(exportEffects));\r\n    }\r\n\r\n    connect(inputs) {\r\n        const outputs = inputs.map(() => this.mainAC.createGain())\r\n\r\n        inputs.forEach((inputNode, channelNumber) => {\r\n            const dryNode = this.mainAC.createGain();\r\n\r\n            inputNode.connect(dryNode);\r\n            dryNode.connect(outputs[channelNumber]);\r\n\r\n            this.channels[channelNumber].inputNode = inputNode;\r\n            this.channels[channelNumber].dryNode = dryNode;\r\n            this.channels[channelNumber].outputNode = outputs[channelNumber];\r\n        });\r\n\r\n        return outputs;\r\n    }\r\n\r\n\r\n    setDryWet(channelNumber, value){\r\n        console.log(\"set dry wet\", channelNumber + \" val:\", value);\r\n    }\r\n       \r\n    setEffect(channelNumber, effect){ \r\n        console.log(this.effects)\r\n        let params// = {...this.effects[effect].params};\r\n        const channel =  store.getState().effector.channels;\r\n        if(channel && channel[channelNumber]){\r\n            params = {...channel[channelNumber].effects[effect]}\r\n        }\r\n        console.log(params)\r\n      //  const params = {...channelEffects[effect]};\r\n      //  console.log(params);\r\n        //this.channels[channelNumber].currentEffect = this.effects[effect].create();\r\n    }\r\n\r\n    setParam(channelNumber, effect, param){\r\n        console.log(\"set param : \"+ channelNumber, \"effect: \" + effect, \" pram: \" + param);\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}