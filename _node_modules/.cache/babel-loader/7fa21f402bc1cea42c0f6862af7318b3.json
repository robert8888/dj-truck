{"ast":null,"code":"import { ACTIONS } from \"../../../actions\";\nimport { produce } from \"imer\";\nimport { unset, set, get } from \"lodash/object\";\nimport { findClosesDir, generateTemplateName } from \"./utils\";\nconst initState = {\n  list: [],\n  currentPlaylist: [],\n  // path to play list \n  currentSelection: ['root'],\n  // path to dir or playlist current selected\n  root: {},\n  // root dir for play list \n  //mock\n  root: {\n    \"Techno\": {\n      _open: true,\n      \"ZetTempo\": [],\n      \"empty dir\": {},\n      \"HardCore\": [],\n      \"Special\": {\n        _open: true,\n        \"DubTechno\": [],\n        \"Clasic 90\": []\n      }\n    },\n    \"Mini mal\": {\n      \"HighTech\": [],\n      \"Classic\": [],\n      \"EmptyFolder\": {}\n    }\n  }\n};\n\nfunction playListReducer(state = initState, action) {\n  switch (action.type) {\n    case ACTIONS.PL_PUSH_DIR_CONTENT:\n      {\n        //console.log(action.dirContent)\n        const {\n          dris: dbDirs = [],\n          plalists: dbPlaylists = []\n        } = action.dirContent;\n        const dirs = {};\n        console.log(action.dirContent, dbDirs);\n        dbDirs.map(dir => {\n          dirs[dir.name] = {\n            _id: dir.id\n          };\n        });\n        const playlists = {};\n        dbPlaylists.map(pl => {\n          let newPlaylist = [];\n          newPlaylist._id = pl.id;\n          playlists[pl.name] = newPlaylist;\n        });\n\n        if (action.isRoot) {\n          return { ...state,\n            root: {\n              _id: action.dirContent.dir.id,\n              ...dirs,\n              ...playlists\n            }\n          };\n        } else {\n          console.log(action);\n          const path = action.path;\n          return produce(state, draftState => {\n            set(draftState, [path, action.dirContent.dir.name], {\n              _loaded: true,\n              ...dirs,\n              ...playlists\n            });\n          });\n        }\n      }\n\n    case ACTIONS.PUSH_TRACK:\n      {\n        if (state.currentPlaylist.length === 0) {\n          //if is not seelect any play list - create new\n          let pathToDir = [\"root\"];\n\n          if (state.currentSelection.length > 1) {\n            pathToDir = findClosesDir(state, state.currentSelection);\n          }\n\n          const name = generateTemplateName(state, pathToDir, \"New Playlist\");\n          const fullPath = [...pathToDir, name];\n          return produce(state, draftState => {\n            set(draftState, fullPath, []);\n            set(draftState, [...pathToDir, \"_open\"], true);\n            draftState.currentSelection = fullPath;\n            draftState.currentPlaylist = fullPath;\n            const playlist = Array.from(get(draftState, fullPath));\n            playlist.push(action.track);\n            draftState.list = playlist;\n            set(draftState, fullPath, playlist);\n          });\n        }\n\n        return produce(state, draftState => {\n          const list = Array.from(draftState.list);\n          list.push(action.track);\n          draftState.list = list;\n          set(draftState, state.currentPlaylist, Array.from(draftState.list));\n        });\n      }\n\n    case ACTIONS.SET_BPM_AND_OFFSET:\n      {\n        let {\n          id,\n          playlist,\n          bpm,\n          offset\n        } = action;\n        let isCurrent = false;\n\n        if (playlist === undefined || playlist.length === 0) {\n          isCurrent = true;\n          playlist = state.currentPlaylist;\n        }\n\n        const list = Array.from(get(state, playlist));\n        const index = list.findIndex(element => element._id === id);\n\n        if (index === -1) {\n          return state;\n        }\n\n        list[index].bpm = bpm;\n\n        if (offset) {\n          list[index].offset = offset;\n        }\n\n        return produce(state, draftState => {\n          set(draftState, playlist, list);\n\n          if (isCurrent) {\n            draftState.list = list;\n          }\n\n          draftState.refreshFalg = Math.random();\n        });\n      }\n\n    case ACTIONS.PL_TOGGLE_DIR:\n      {\n        const open = get(state, [...action.path, \"_open\"]);\n        return produce(state, draftState => set(draftState, [...action.path, \"_open\"], !open));\n      }\n\n    case ACTIONS.PL_SET_SELECTION:\n      {\n        return produce(state, draftState => draftState.currentSelection = action.path);\n      }\n\n    case ACTIONS.PL_SET_CURRENT_PLAYLIST:\n      {\n        return produce(state, draftState => {\n          draftState.currentPlayList = action.path;\n          draftState.list = Array.from(get(state, [action.path]));\n        });\n      }\n\n    case ACTIONS.PL_RENAME_SELECTED:\n      {\n        const content = get(state, state.currentSelection);\n        return produce(state, draftState => {\n          unset(draftState, state.currentSelection);\n          const newCurrent = draftState.currentSelection;\n          newCurrent.pop();\n          newCurrent.push(action.name);\n          draftState.currentSelection = newCurrent;\n          set(draftState, newCurrent, content);\n        });\n      }\n\n    case ACTIONS.PL_DELETE_SELECTED:\n      {\n        return produce(state, draftState => {\n          unset(draftState, state.currentSelection);\n          draftState.currentSelection = [];\n        });\n      }\n\n    case ACTIONS.PL_MOVE_TO:\n      {\n        const {\n          pathFrom,\n          pathTo\n        } = action;\n        const content = get(state, pathFrom);\n        const name = pathFrom.pop(); //if target and source are the same don't do anything\n\n        if (pathFrom.length === pathTo.length && pathFrom.every((e, i) => e === pathTo[i])) {\n          return state;\n        }\n\n        return produce(state, draftState => {\n          set(draftState, [...pathTo, name], content);\n          unset(draftState, [...pathFrom, name]);\n        });\n      }\n\n    case ACTIONS.PL_DELETE_TRACK:\n      {\n        return produce(state, draftState => {\n          const newList = [...state.list];\n          newList.splice(action.index, 1);\n          draftState.list = newList;\n          set(draftState, draftState.currentPlaylist, newList);\n        });\n      }\n\n    case ACTIONS.PL_SWAP_TRACK_ON_CURRENT:\n      {\n        return produce(state, draftState => {\n          const newList = [...state.list];\n          let trackFrom = newList[action.from];\n          newList[action.from] = newList[action.to];\n          newList[action.to] = trackFrom;\n          draftState.list = newList;\n          set(draftState, draftState.currentPlaylist, newList);\n        });\n      }\n\n    case ACTIONS.PL_ADD_TRACK_TO_LIST:\n      {\n        const list = get(state, action.path);\n        if (!list) return state;\n        return produce(state, draftState => {\n          list.push(action.track);\n          set(draftState, action.fullPath, list);\n        });\n      }\n    // case ACTIONS.PL_CREATE_DIR: {\n    //     console.log(action.name)\n    //     let name = action.name;\n    //     const pathToDir = findClosesDir(state, state.currentSelection);\n    //     if (!name) {\n    //         name = generateTemplateName(state, pathToDir, \"New Folder\");\n    //         console.log(\"new name\", name)\n    //     }\n    //     return produce(state, draftState => {\n    //         set(draftState, [...pathToDir, name], {})\n    //         set(draftState, [...pathToDir, \"_open\"], true);\n    //         draftState.currentSelection = [...pathToDir, name];\n    //     })\n    // }\n    //updated\n\n    case ACTIONS.PL_CREATE_DIR:\n      {\n        const {\n          id,\n          name\n        } = action;\n        const pathToDir = findClosesDir(state, state.currentSelection);\n        return produce(state, draftState => {\n          set(draftState, [...pathToDir, name], {\n            _id: id\n          });\n          set(draftState, [...pathToDir, \"_open\"], true);\n          draftState.currentSelection = [...pathToDir, name];\n        });\n      }\n\n    case ACTIONS.PL_CREATE_PLAYLIST:\n      {\n        let name = action.name;\n        const pathToDir = findClosesDir(state, state.currentSelection);\n\n        if (!name) {\n          name = generateTemplateName(state, pathToDir, \"New Playlist\");\n        }\n\n        return produce(state, draftState => {\n          set(draftState, [...pathToDir, name], []);\n          set(draftState, [...pathToDir, \"_open\"], true);\n          draftState.currentSelection = [...pathToDir, name];\n        });\n      }\n\n    case ACTIONS.PL_OPEN_CURRENT_PLAY_LIST:\n      {\n        return produce(state, draftState => {\n          draftState.list = Array.from(get(state, state.currentSelection));\n          draftState.currentPlaylist = state.currentSelection;\n        });\n      }\n\n    default:\n      return state;\n  }\n}\n\nexport default playListReducer;","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/reducers/console/playlist/playlistReducer.js"],"names":["ACTIONS","produce","unset","set","get","findClosesDir","generateTemplateName","initState","list","currentPlaylist","currentSelection","root","_open","playListReducer","state","action","type","PL_PUSH_DIR_CONTENT","dris","dbDirs","plalists","dbPlaylists","dirContent","dirs","console","log","map","dir","name","_id","id","playlists","pl","newPlaylist","isRoot","path","draftState","_loaded","PUSH_TRACK","length","pathToDir","fullPath","playlist","Array","from","push","track","SET_BPM_AND_OFFSET","bpm","offset","isCurrent","undefined","index","findIndex","element","refreshFalg","Math","random","PL_TOGGLE_DIR","open","PL_SET_SELECTION","PL_SET_CURRENT_PLAYLIST","currentPlayList","PL_RENAME_SELECTED","content","newCurrent","pop","PL_DELETE_SELECTED","PL_MOVE_TO","pathFrom","pathTo","every","e","i","PL_DELETE_TRACK","newList","splice","PL_SWAP_TRACK_ON_CURRENT","trackFrom","to","PL_ADD_TRACK_TO_LIST","PL_CREATE_DIR","PL_CREATE_PLAYLIST","PL_OPEN_CURRENT_PLAY_LIST"],"mappings":"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","sourcesContent":["import { ACTIONS } from \"../../../actions\";\r\nimport { produce } from \"imer\";\r\nimport { unset, set, get } from \"lodash/object\";\r\nimport { findClosesDir, generateTemplateName } from \"./utils\"\r\n\r\nconst initState = {\r\n    list: [],\r\n\r\n    currentPlaylist: [],// path to play list \r\n    currentSelection: ['root'], // path to dir or playlist current selected\r\n    root: {}, // root dir for play list \r\n\r\n    //mock\r\n    root: {\r\n        \"Techno\": {\r\n            _open: true,\r\n            \"ZetTempo\": [],\r\n            \"empty dir\": {},\r\n            \"HardCore\": [],\r\n            \"Special\": {\r\n                _open: true,\r\n                \"DubTechno\": [],\r\n                \"Clasic 90\": []\r\n            }\r\n        },\r\n        \"Mini mal\": {\r\n            \"HighTech\": [],\r\n            \"Classic\": [],\r\n            \"EmptyFolder\": {}\r\n        }\r\n    }\r\n}\r\n\r\nfunction playListReducer(state = initState, action) {\r\n    switch (action.type) {\r\n        case ACTIONS.PL_PUSH_DIR_CONTENT: {\r\n            //console.log(action.dirContent)\r\n            const { dris: dbDirs = [], plalists: dbPlaylists = [] } = action.dirContent;\r\n            const dirs = {};\r\n            console.log(action.dirContent, dbDirs)\r\n            dbDirs.map((dir) => {\r\n                dirs[dir.name] = { _id: dir.id }\r\n            })\r\n            const playlists = {};\r\n            dbPlaylists.map((pl) => {\r\n                let newPlaylist = [];\r\n                newPlaylist._id = pl.id;\r\n                playlists[pl.name] = newPlaylist;\r\n            })\r\n            if (action.isRoot) {\r\n                return {\r\n                    ...state,\r\n                    root: {\r\n                        _id: action.dirContent.dir.id,\r\n                        ...dirs,\r\n                        ...playlists,\r\n                    }\r\n                }\r\n            } else {\r\n                console.log(action)\r\n                const path = action.path;\r\n                return produce(state, draftState => {\r\n                    set(draftState, [path, action.dirContent.dir.name], {\r\n                        _loaded: true,\r\n                        ...dirs,\r\n                        ...playlists\r\n                    })\r\n                })\r\n            }\r\n        }\r\n\r\n\r\n\r\n        case ACTIONS.PUSH_TRACK: {\r\n            if (state.currentPlaylist.length === 0) {\r\n                //if is not seelect any play list - create new\r\n                let pathToDir = [\"root\"]\r\n                if (state.currentSelection.length > 1) {\r\n                    pathToDir = findClosesDir(state, state.currentSelection);\r\n                }\r\n                const name = generateTemplateName(state, pathToDir, \"New Playlist\");\r\n                const fullPath = [...pathToDir, name];\r\n                return produce(state, draftState => {\r\n                    set(draftState, fullPath, [])\r\n                    set(draftState, [...pathToDir, \"_open\"], true);\r\n                    draftState.currentSelection = fullPath\r\n                    draftState.currentPlaylist = fullPath;\r\n                    const playlist = Array.from(get(draftState, fullPath));\r\n                    playlist.push(action.track);\r\n                    draftState.list = playlist;\r\n                    set(draftState, fullPath, playlist);\r\n                })\r\n            }\r\n            return produce(state, draftState => {\r\n                const list = Array.from(draftState.list);\r\n                list.push(action.track)\r\n                draftState.list = list;\r\n                set(draftState, state.currentPlaylist, Array.from(draftState.list));\r\n            })\r\n        }\r\n\r\n        case ACTIONS.SET_BPM_AND_OFFSET: {\r\n            let { id, playlist, bpm, offset } = action;\r\n            let isCurrent = false;\r\n            if (playlist === undefined || playlist.length === 0) {\r\n                isCurrent = true;\r\n                playlist = state.currentPlaylist;\r\n            }\r\n            const list = Array.from(get(state, playlist));\r\n            const index = list.findIndex(element => element._id === id);\r\n            if (index === -1) {\r\n                return state;\r\n            }\r\n            list[index].bpm = bpm;\r\n            if (offset) {\r\n                list[index].offset = offset;\r\n            }\r\n            return produce(state, draftState => {\r\n                set(draftState, playlist, list);\r\n                if (isCurrent) {\r\n                    draftState.list = list;\r\n                }\r\n                draftState.refreshFalg = Math.random();\r\n            })\r\n        }\r\n        case ACTIONS.PL_TOGGLE_DIR: {\r\n            const open = get(state, [...action.path, \"_open\"])\r\n            return produce(state, draftState => set(draftState, [...action.path, \"_open\"], !open))\r\n        }\r\n\r\n        case ACTIONS.PL_SET_SELECTION: {\r\n            return produce(state, draftState => draftState.currentSelection = action.path)\r\n        }\r\n\r\n        case ACTIONS.PL_SET_CURRENT_PLAYLIST: {\r\n            return produce(state, draftState => {\r\n                draftState.currentPlayList = action.path;\r\n                draftState.list = Array.from(get(state, [action.path]));\r\n            })\r\n        }\r\n\r\n        case ACTIONS.PL_RENAME_SELECTED: {\r\n            const content = get(state, state.currentSelection);\r\n            return produce(state, draftState => {\r\n                unset(draftState, state.currentSelection);\r\n                const newCurrent = draftState.currentSelection;\r\n                newCurrent.pop();\r\n                newCurrent.push(action.name);\r\n                draftState.currentSelection = newCurrent;\r\n                set(draftState, newCurrent, content)\r\n            })\r\n        }\r\n\r\n        case ACTIONS.PL_DELETE_SELECTED: {\r\n            return produce(state, draftState => {\r\n                unset(draftState, state.currentSelection);\r\n                draftState.currentSelection = [];\r\n            })\r\n        }\r\n\r\n        case ACTIONS.PL_MOVE_TO: {\r\n            const { pathFrom, pathTo } = action;\r\n            const content = get(state, pathFrom);\r\n            const name = pathFrom.pop();\r\n            //if target and source are the same don't do anything\r\n            if (pathFrom.length === pathTo.length &&\r\n                pathFrom.every((e, i) => e === pathTo[i])) {\r\n                return state;\r\n            }\r\n            return produce(state, draftState => {\r\n                set(draftState, [...pathTo, name], content);\r\n                unset(draftState, [...pathFrom, name]);\r\n            })\r\n        }\r\n\r\n        case ACTIONS.PL_DELETE_TRACK: {\r\n            return produce(state, draftState => {\r\n                const newList = [...state.list];\r\n                newList.splice(action.index, 1);\r\n                draftState.list = newList\r\n                set(draftState, draftState.currentPlaylist, newList)\r\n            })\r\n        }\r\n\r\n        case ACTIONS.PL_SWAP_TRACK_ON_CURRENT: {\r\n            return produce(state, draftState => {\r\n                const newList = [...state.list];\r\n                let trackFrom = newList[action.from];\r\n                newList[action.from] = newList[action.to];\r\n                newList[action.to] = trackFrom;\r\n                draftState.list = newList;\r\n                set(draftState, draftState.currentPlaylist, newList)\r\n            })\r\n        }\r\n\r\n        case ACTIONS.PL_ADD_TRACK_TO_LIST: {\r\n            const list = get(state, action.path);\r\n            if (!list) return state;\r\n            return produce(state, draftState => {\r\n                list.push(action.track);\r\n                set(draftState, action.fullPath, list);\r\n            })\r\n        }\r\n\r\n        // case ACTIONS.PL_CREATE_DIR: {\r\n        //     console.log(action.name)\r\n        //     let name = action.name;\r\n        //     const pathToDir = findClosesDir(state, state.currentSelection);\r\n        //     if (!name) {\r\n        //         name = generateTemplateName(state, pathToDir, \"New Folder\");\r\n        //         console.log(\"new name\", name)\r\n        //     }\r\n        //     return produce(state, draftState => {\r\n        //         set(draftState, [...pathToDir, name], {})\r\n        //         set(draftState, [...pathToDir, \"_open\"], true);\r\n        //         draftState.currentSelection = [...pathToDir, name];\r\n        //     })\r\n        // }\r\n\r\n        //updated\r\n        case ACTIONS.PL_CREATE_DIR: {\r\n            const { id, name } = action;\r\n            const pathToDir = findClosesDir(state, state.currentSelection);\r\n            return produce(state, draftState => {\r\n                set(draftState, [...pathToDir, name], { _id: id });\r\n                set(draftState, [...pathToDir, \"_open\"], true);\r\n                draftState.currentSelection = [...pathToDir, name];\r\n            })\r\n        }\r\n\r\n        case ACTIONS.PL_CREATE_PLAYLIST: {\r\n            let name = action.name;\r\n            const pathToDir = findClosesDir(state, state.currentSelection);\r\n            if (!name) {\r\n                name = generateTemplateName(state, pathToDir, \"New Playlist\");\r\n            }\r\n            return produce(state, draftState => {\r\n                set(draftState, [...pathToDir, name], [])\r\n                set(draftState, [...pathToDir, \"_open\"], true);\r\n                draftState.currentSelection = [...pathToDir, name];\r\n            })\r\n        }\r\n\r\n        case ACTIONS.PL_OPEN_CURRENT_PLAY_LIST: {\r\n            return produce(state, draftState => {\r\n                draftState.list = Array.from(get(state, state.currentSelection))\r\n                draftState.currentPlaylist = state.currentSelection;\r\n            })\r\n        }\r\n\r\n\r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport default playListReducer;\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}