{"ast":null,"code":"import STATUS from \"./../observer/STATUS\";\nimport io from \"socket.io-client\";\nconst recorder_api_url = process.env.REACT_APP_RECORDER_API;\nexport default class Recorder {\n  constructor(mixer) {\n    this.mixer = mixer;\n    const streamDestination = this.mixer.audioNodes.channels['main'].recorderStremDestination;\n    this.mediaRecorder = new MediaRecorder(streamDestination.stream, {\n      mimeType: 'audio/webm;codecs=opus'\n    });\n    console.log(recorder_api_url);\n  }\n\n  action(status, param) {\n    switch (status) {\n      case STATUS.RECORD_START:\n        {\n          this.startRecording(param);\n          break;\n        }\n\n      case STATUS.RECORD_END:\n        {\n          this.endRecording();\n          break;\n        }\n    }\n  }\n\n  startRecording(param) {\n    console.log(\"im start recording\", param); //\"audio/webm;codecs=opus\"\n\n    const socket = io.connect(recorder_api_url.replace('http', 'ws').replace('https', 'wss'));\n    socket.on(\"connect\", () => {\n      console.log(\"we have connection\");\n\n      this.mediaRecorder.ondataavailable = e => {\n        console.log(e.data);\n        socket.emit('record_chunk', e.data);\n      };\n\n      this.mediaRecorder.addEventListener('stop', () => {\n        socket.close();\n      });\n      this.mediaRecorder.start(1000);\n    });\n  }\n\n  endRecording() {\n    console.log(\"im finish recoriding\");\n    if (this.mediaRecorder.state !== 'inactive') this.mediaRecorder.stop();\n  }\n\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/pages/console/core/console/mixer/recorder.js"],"names":["STATUS","io","recorder_api_url","process","env","REACT_APP_RECORDER_API","Recorder","constructor","mixer","streamDestination","audioNodes","channels","recorderStremDestination","mediaRecorder","MediaRecorder","stream","mimeType","console","log","action","status","param","RECORD_START","startRecording","RECORD_END","endRecording","socket","connect","replace","on","ondataavailable","e","data","emit","addEventListener","close","start","state","stop"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,sBAAnB;AACA,OAAOC,EAAP,MAAe,kBAAf;AACA,MAAMC,gBAAgB,GAAGC,OAAO,CAACC,GAAR,CAAYC,sBAArC;AAGA,eAAe,MAAMC,QAAN,CAAc;AACzBC,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,SAAKA,KAAL,GAAaA,KAAb;AAEA,UAAMC,iBAAiB,GAAI,KAAKD,KAAL,CAAWE,UAAX,CAAsBC,QAAtB,CAA+B,MAA/B,EAAuCC,wBAAlE;AACA,SAAKC,aAAL,GAAqB,IAAIC,aAAJ,CAAkBL,iBAAiB,CAACM,MAApC,EAA4C;AAC7DC,MAAAA,QAAQ,EAAE;AADmD,KAA5C,CAArB;AAIAC,IAAAA,OAAO,CAACC,GAAR,CAAYhB,gBAAZ;AACH;;AAIDiB,EAAAA,MAAM,CAACC,MAAD,EAASC,KAAT,EAAe;AACjB,YAAOD,MAAP;AACI,WAAKpB,MAAM,CAACsB,YAAZ;AAA2B;AACvB,eAAKC,cAAL,CAAoBF,KAApB;AACA;AACH;;AACD,WAAKrB,MAAM,CAACwB,UAAZ;AAAyB;AACrB,eAAKC,YAAL;AACA;AACH;AARL;AAUH;;AAEDF,EAAAA,cAAc,CAACF,KAAD,EAAO;AACjBJ,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCG,KAAlC,EADiB,CAEjB;;AAEA,UAAMK,MAAM,GAAGzB,EAAE,CAAC0B,OAAH,CAAWzB,gBAAgB,CAAC0B,OAAjB,CAAyB,MAAzB,EAAiC,IAAjC,EAAuCA,OAAvC,CAA+C,OAA/C,EAAwD,KAAxD,CAAX,CAAf;AACAF,IAAAA,MAAM,CAACG,EAAP,CAAU,SAAV,EAAqB,MAAI;AACrBZ,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;;AAEA,WAAKL,aAAL,CAAmBiB,eAAnB,GAAsCC,CAAD,IAAO;AACxCd,QAAAA,OAAO,CAACC,GAAR,CAAYa,CAAC,CAACC,IAAd;AACAN,QAAAA,MAAM,CAACO,IAAP,CAAY,cAAZ,EAA4BF,CAAC,CAACC,IAA9B;AACH,OAHD;;AAKA,WAAKnB,aAAL,CAAmBqB,gBAAnB,CAAoC,MAApC,EAA4C,MAAI;AAC5CR,QAAAA,MAAM,CAACS,KAAP;AACH,OAFD;AAIA,WAAKtB,aAAL,CAAmBuB,KAAnB,CAAyB,IAAzB;AACH,KAbD;AAcH;;AAEDX,EAAAA,YAAY,GAAE;AACVR,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACA,QAAG,KAAKL,aAAL,CAAmBwB,KAAnB,KAA6B,UAAhC,EACA,KAAKxB,aAAL,CAAmByB,IAAnB;AACH;;AApDwB","sourcesContent":["import STATUS from \"./../observer/STATUS\";\r\nimport io from \"socket.io-client\";\r\nconst recorder_api_url = process.env.REACT_APP_RECORDER_API\r\n\r\n\r\nexport default class Recorder{\r\n    constructor(mixer){\r\n        this.mixer = mixer;\r\n\r\n        const streamDestination =  this.mixer.audioNodes.channels['main'].recorderStremDestination;\r\n        this.mediaRecorder = new MediaRecorder(streamDestination.stream, {\r\n            mimeType: 'audio/webm;codecs=opus',\r\n        });\r\n\r\n        console.log(recorder_api_url)\r\n    }\r\n\r\n\r\n\r\n    action(status, param){\r\n        switch(status){\r\n            case STATUS.RECORD_START : {\r\n                this.startRecording(param);\r\n                break;\r\n            } \r\n            case STATUS.RECORD_END : {\r\n                this.endRecording()\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    startRecording(param){\r\n        console.log(\"im start recording\", param);\r\n        //\"audio/webm;codecs=opus\"\r\n\r\n        const socket = io.connect(recorder_api_url.replace('http', 'ws').replace('https', 'wss'));\r\n        socket.on(\"connect\", ()=>{\r\n            console.log(\"we have connection\")\r\n\r\n            this.mediaRecorder.ondataavailable = (e) => {\r\n                console.log(e.data)\r\n                socket.emit('record_chunk', e.data)\r\n            }\r\n\r\n            this.mediaRecorder.addEventListener('stop', ()=>{\r\n                socket.close()\r\n            })\r\n\r\n            this.mediaRecorder.start(1000);\r\n        })\r\n    }\r\n\r\n    endRecording(){\r\n        console.log(\"im finish recoriding\")\r\n        if(this.mediaRecorder.state !== 'inactive')\r\n        this.mediaRecorder.stop();\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}