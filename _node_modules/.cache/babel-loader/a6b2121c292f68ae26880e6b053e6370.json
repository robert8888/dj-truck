{"ast":null,"code":"import { createPlaylist, ACTIONS } from \"../../actions\";\nimport { takeEvery, select, put, call } from \"redux-saga/effects\";\nimport { getApi } from \"./../../apis/apiProvider\"; // import query from \"./../../qlQueries/createPlaylist\";\n\nimport { generateTemplateName as generateName, findClosesDir } from \"./../../reducers/console/playlist/utils\";\nimport { get } from \"lodash/object\";\nimport { handel as loadDirSagaHanedl } from \"./loadDirRequestSaga\";\nimport UUID from \"uuidjs\";\nexport default function* createDirRequestSaga() {\n  yield takeEvery(ACTIONS.PL_CREATE_PLAYLIST_REQUEST, handle);\n}\n\nconst getToken = state => state.user.token;\n\nconst getCurrentSelection = state => state.playList.currentSelection;\n\nconst getParentPath = (state, currentSelection) => findClosesDir(state, currentSelection);\n\nconst generatePlaylistName = (state, parrentPath, base) => generateName(state.playList, parrentPath, base);\n\nconst getParrentDir = (state, path) => get(state.playList, path);\n\nexport function* handle(action) {\n  var _result$data;\n\n  const {\n    callQuery\n  } = getApi(\"UserAssets\");\n  const token = yield select(getToken);\n  let renameMode = false;\n\n  if (!token) {\n    if (!action.name) {\n      renameMode = true;\n    }\n\n    return yield put(action.name, UUID.getV1().toString(), renameMode, true);\n  }\n\n  const currentSelection = yield select(getCurrentSelection);\n  const parrentPath = yield select(getParentPath, currentSelection);\n  let playlistName;\n\n  if (!action.name) {\n    playlistName = yield select(generatePlaylistName, parrentPath, \"New playlist\");\n    renameMode = true;\n  } else {\n    playlistName = yield select(generatePlaylistName, parrentPath, action.name);\n  }\n\n  const parrentDir = yield select(getParrentDir, parrentPath);\n\n  if (!parrentDir._loaded) {\n    yield call(loadDirSagaHanedl, {\n      path: parrentPath\n    });\n  }\n\n  let result = yield callQuery(query(parrentDir._id, playlistName), token);\n\n  if (!result || !((_result$data = result.data) === null || _result$data === void 0 ? void 0 : _result$data.createPlaylist)) {\n    return;\n  }\n\n  const id = result.data.createPlaylist.id;\n  renameMode = action.renameMode !== undefined ? action.renameMode : renameMode;\n  yield put(createPlaylist(playlistName, id, renameMode, action.setCurrent));\n  return id;\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/sagas/playlists/createPlaylistRequestSaga.js"],"names":["createPlaylist","ACTIONS","takeEvery","select","put","call","getApi","generateTemplateName","generateName","findClosesDir","get","handel","loadDirSagaHanedl","UUID","createDirRequestSaga","PL_CREATE_PLAYLIST_REQUEST","handle","getToken","state","user","token","getCurrentSelection","playList","currentSelection","getParentPath","generatePlaylistName","parrentPath","base","getParrentDir","path","action","callQuery","renameMode","name","getV1","toString","playlistName","parrentDir","_loaded","result","query","_id","data","id","undefined","setCurrent"],"mappings":"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","sourcesContent":["import { createPlaylist, ACTIONS } from \"../../actions\";\r\nimport { takeEvery, select, put, call } from \"redux-saga/effects\"\r\nimport { getApi } from \"./../../apis/apiProvider\";\r\n// import query from \"./../../qlQueries/createPlaylist\";\r\nimport { generateTemplateName as generateName, findClosesDir } from \"./../../reducers/console/playlist/utils\";\r\nimport { get } from \"lodash/object\";\r\nimport {handel as loadDirSagaHanedl} from \"./loadDirRequestSaga\";\r\nimport UUID from \"uuidjs\"\r\nexport default function* createDirRequestSaga() {\r\n    yield takeEvery(ACTIONS.PL_CREATE_PLAYLIST_REQUEST, handle)\r\n}\r\n\r\nconst getToken = state => state.user.token;\r\n\r\nconst getCurrentSelection = state => state.playList.currentSelection;\r\n\r\nconst getParentPath = (state, currentSelection) =>\r\n    findClosesDir(state, currentSelection)\r\n\r\nconst generatePlaylistName = (state, parrentPath, base) => \r\n    generateName(state.playList, parrentPath, base);\r\n\r\nconst getParrentDir = (state, path) => get(state.playList, path);\r\n\r\n\r\nexport function* handle(action) {\r\n    const { callQuery } = getApi(\"UserAssets\");\r\n    const token = yield select(getToken);\r\n    let renameMode = false;\r\n    if(!token){\r\n        if(!action.name){\r\n            renameMode = true;\r\n        }\r\n        return yield put(action.name, UUID.getV1().toString(), renameMode, true);\r\n    }\r\n    const currentSelection = yield select(getCurrentSelection);\r\n    const parrentPath = yield select(getParentPath, currentSelection);\r\n\r\n\r\n    let playlistName;\r\n    if(!action.name){\r\n        playlistName = yield select(generatePlaylistName, parrentPath, \"New playlist\");\r\n        renameMode = true;\r\n    } else {\r\n        playlistName = yield select(generatePlaylistName, parrentPath, action.name);\r\n    }\r\n    \r\n    const parrentDir = yield select(getParrentDir, parrentPath);\r\n    if(!parrentDir._loaded){\r\n        yield call(loadDirSagaHanedl, {path: parrentPath})\r\n    }\r\n\r\n    let result = yield callQuery(query(parrentDir._id, playlistName), token);\r\n    if(!result || !result.data?.createPlaylist){\r\n        return ;\r\n    }\r\n    const id = result.data.createPlaylist.id;\r\n\r\n    renameMode = (action.renameMode !== undefined) ? action.renameMode : renameMode; \r\n\r\n    yield put(createPlaylist(playlistName, id, renameMode, action.setCurrent));\r\n    return id;\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}