{"ast":null,"code":"import store from \"./../../../../store\";\nimport { getBeatLength } from \"./../../../../utils/bpm/converter\";\nimport { setChannelReady, setLoadingProgress, setTimeLeft } from \"./../../../../actions\";\nexport default class EventHandler {\n  constructor() {\n    this.startSync = channel => {\n      channel.syncHandle = setInterval(() => {\n        channel.slave.drawer.progress(channel.master.getCurrentTime() / channel.currentDuration);\n      }, 100);\n    };\n\n    this.dispatch = store.dispatch;\n  }\n\n  CreateEventHandling(channel) {\n    channel.master.on(\"load\", () => {\n      console.log(\"fire load\");\n      this.clearState(channel);\n    });\n    channel.master.on(\"loading\", progress => {\n      this.dispatch(setLoadingProgress(channel.channelName, progress));\n    });\n    channel.master.on(\"ready\", () => {\n      channel.currentDuration = channel.master.getDuration();\n      let resolution = 430;\n      channel.slave.load(null, channel.master.backend.getPeaks(resolution, 0, resolution));\n      this.dispatch(setLoadingProgress(channel.channelName, 100));\n      this.dispatch(setChannelReady(true, channel.channelName));\n      this.startSync(channel);\n    });\n    channel.slave.on(\"seek\", progress => {\n      const wasPlaying = channel.master.isPlaying();\n      channel.master.backend.seekTo(progress * channel.currentDuration);\n      channel.master.drawer.progress(progress);\n      channel.master.fireEvent(\"seek\", progress);\n      channel.slave.drawer.progress(progress);\n      const timeLeft = parseInt(channel.master.getDuration() - channel.master.getDuration() * progress);\n      this.dispatch(setTimeLeft(channel.channelName, timeLeft));\n\n      if (wasPlaying) {\n        channel.master.play();\n      }\n    });\n  }\n\n  clearState(channel) {\n    channel.slave.load(null, []);\n\n    if (channel.barsElements) {\n      channel.barsElements.forEach(htmlElement => htmlElement.remove());\n    }\n  }\n\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/core/console/channels/channelEvnetHandler/channelEvnetHandler.js"],"names":["store","getBeatLength","setChannelReady","setLoadingProgress","setTimeLeft","EventHandler","constructor","startSync","channel","syncHandle","setInterval","slave","drawer","progress","master","getCurrentTime","currentDuration","dispatch","CreateEventHandling","on","console","log","clearState","channelName","getDuration","resolution","load","backend","getPeaks","wasPlaying","isPlaying","seekTo","fireEvent","timeLeft","parseInt","play","barsElements","forEach","htmlElement","remove"],"mappings":"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","sourcesContent":["import store from \"./../../../../store\";\r\n\r\nimport { getBeatLength } from \"./../../../../utils/bpm/converter\";\r\nimport {\r\n  setChannelReady,\r\n  setLoadingProgress,\r\n  setTimeLeft\r\n} from \"./../../../../actions\";\r\n\r\nexport default class EventHandler {\r\n  constructor() {\r\n    this.dispatch = store.dispatch;\r\n  }\r\n\r\n  CreateEventHandling(channel) {\r\n    channel.master.on(\"load\", () => {\r\n      console.log(\"fire load\");\r\n      this.clearState(channel);\r\n    });\r\n\r\n    channel.master.on(\"loading\", progress => {\r\n      this.dispatch(setLoadingProgress(channel.channelName, progress));\r\n    });\r\n\r\n    channel.master.on(\"ready\", () => {\r\n      channel.currentDuration = channel.master.getDuration();\r\n      let resolution = 430;\r\n      channel.slave.load(\r\n        null,\r\n        channel.master.backend.getPeaks(resolution, 0, resolution)\r\n      );\r\n      this.dispatch(setLoadingProgress(channel.channelName, 100));\r\n\r\n      this.dispatch(setChannelReady(true, channel.channelName));\r\n      this.startSync(channel);\r\n    });\r\n\r\n    channel.slave.on(\"seek\", progress => {\r\n      const wasPlaying = channel.master.isPlaying();\r\n\r\n      channel.master.backend.seekTo(progress * channel.currentDuration);\r\n      channel.master.drawer.progress(progress);\r\n      channel.master.fireEvent(\"seek\", progress);\r\n\r\n      channel.slave.drawer.progress(progress);\r\n\r\n      const timeLeft = parseInt(\r\n        channel.master.getDuration() - channel.master.getDuration() * progress\r\n      );\r\n      this.dispatch(setTimeLeft(channel.channelName, timeLeft));\r\n      if (wasPlaying) {\r\n        channel.master.play();\r\n      }\r\n    });\r\n  }\r\n\r\n  clearState(channel) {\r\n    channel.slave.load(null, []);\r\n    if (channel.barsElements) {\r\n      channel.barsElements.forEach(htmlElement => htmlElement.remove());\r\n    }\r\n  }\r\n\r\n  startSync = channel => {\r\n    channel.syncHandle = setInterval(() => {\r\n      channel.slave.drawer.progress(\r\n        channel.master.getCurrentTime() / channel.currentDuration\r\n      );\r\n    }, 100);\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}