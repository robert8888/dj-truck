{"ast":null,"code":"import { produce } from \"imer\";\nimport { ACTIONS } from \"./../../actions\";\nimport { LOG_TYPES } from \"./../../utils/logger/logger\";\nconst initState = {\n  // shape of logs:\n  // logs:[{\n  //     createdAt: \"timestamp\",\n  //     type: \"log/ debug / error\",\n  //     path: [],\n  //     message: {\n  //         public: \"For user view, in logbox component\",\n  //         protected: \"Only for administrator/ developer view\",\n  //     },\n  //     error\n  // }],\n  //\n  logs: [],\n  // last: {\n  //     message: \"Hello this is error message\",\n  //     type: LOG_TYPES.ERROR,\n  //     path: ['controler', 'conosle', 'deck', 'knob']\n  // }\n  last: null\n};\nexport default function loggerReducer(state = initState, action) {\n  console.log(aciton);\n\n  switch (action.type) {\n    case ACTIONS.LOG_PUSH:\n      {\n        const {\n          log\n        } = action;\n\n        if (!log) {\n          return state;\n        }\n\n        log.createdAt = new Date().getTime();\n        return produce(state, draftState => {\n          const logs = state.logs;\n          logs.push(log);\n          draftState.logs = logs;\n\n          if (log.message.public) {\n            draftState.last = {\n              message: log.message.public,\n              type: log.type\n            };\n          }\n\n          if (log.path && (log.type === LOG_TYPES.DEBUG || log.type === LOG_TYPES.WARNING)) {\n            draftState.last.path = log.path;\n          }\n        });\n      }\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/reducers/logger/loggerReducer.js"],"names":["produce","ACTIONS","LOG_TYPES","initState","logs","last","loggerReducer","state","action","console","log","aciton","type","LOG_PUSH","createdAt","Date","getTime","draftState","push","message","public","path","DEBUG","WARNING"],"mappings":"AAAA,SAASA,OAAT,QAAwB,MAAxB;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,SAASC,SAAT,QAA0B,6BAA1B;AAEA,MAAMC,SAAS,GAAG;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,EAAAA,IAAI,EAAG,EAbO;AAcd;AACA;AACA;AACA;AACA;AACAC,EAAAA,IAAI,EAAE;AAnBQ,CAAlB;AAsBA,eAAe,SAASC,aAAT,CAAuBC,KAAK,GAAGJ,SAA/B,EAA0CK,MAA1C,EAAiD;AAC5DC,EAAAA,OAAO,CAACC,GAAR,CAAYC,MAAZ;;AACA,UAAOH,MAAM,CAACI,IAAd;AACI,SAAKX,OAAO,CAACY,QAAb;AAAwB;AACpB,cAAM;AAACH,UAAAA;AAAD,YAAQF,MAAd;;AACA,YAAG,CAACE,GAAJ,EAAQ;AACJ,iBAAOH,KAAP;AACH;;AACDG,QAAAA,GAAG,CAACI,SAAJ,GAAiB,IAAIC,IAAJ,EAAD,CAAaC,OAAb,EAAhB;AAEA,eAAOhB,OAAO,CAACO,KAAD,EAAQU,UAAU,IAAG;AAC/B,gBAAMb,IAAI,GAAGG,KAAK,CAACH,IAAnB;AACAA,UAAAA,IAAI,CAACc,IAAL,CAAUR,GAAV;AAEAO,UAAAA,UAAU,CAACb,IAAX,GAAkBA,IAAlB;;AACA,cAAGM,GAAG,CAACS,OAAJ,CAAYC,MAAf,EAAsB;AAClBH,YAAAA,UAAU,CAACZ,IAAX,GAAkB;AACdc,cAAAA,OAAO,EAAET,GAAG,CAACS,OAAJ,CAAYC,MADP;AAEdR,cAAAA,IAAI,EAAEF,GAAG,CAACE;AAFI,aAAlB;AAIH;;AACD,cAAGF,GAAG,CAACW,IAAJ,KACAX,GAAG,CAACE,IAAJ,KAAaV,SAAS,CAACoB,KAAvB,IACAZ,GAAG,CAACE,IAAJ,KAAYV,SAAS,CAACqB,OAFtB,CAAH,EAEkC;AAC9BN,YAAAA,UAAU,CAACZ,IAAX,CAAgBgB,IAAhB,GAAuBX,GAAG,CAACW,IAA3B;AACH;AACJ,SAhBa,CAAd;AAiBH;;AAED;AAAU,aAAOd,KAAP;AA3Bd;AA6BH","sourcesContent":["import { produce } from \"imer\";\r\nimport { ACTIONS } from \"./../../actions\";\r\nimport { LOG_TYPES } from \"./../../utils/logger/logger\";\r\n\r\nconst initState = {\r\n    // shape of logs:\r\n    // logs:[{\r\n    //     createdAt: \"timestamp\",\r\n    //     type: \"log/ debug / error\",\r\n    //     path: [],\r\n    //     message: {\r\n    //         public: \"For user view, in logbox component\",\r\n    //         protected: \"Only for administrator/ developer view\",\r\n    //     },\r\n    //     error\r\n    // }],\r\n    //\r\n    logs : [],\r\n    // last: {\r\n    //     message: \"Hello this is error message\",\r\n    //     type: LOG_TYPES.ERROR,\r\n    //     path: ['controler', 'conosle', 'deck', 'knob']\r\n    // }\r\n    last: null,\r\n}\r\n\r\nexport default function loggerReducer(state = initState, action){\r\n    console.log(aciton)\r\n    switch(action.type){\r\n        case ACTIONS.LOG_PUSH : {\r\n            const {log} = action;\r\n            if(!log){\r\n                return state;\r\n            }\r\n            log.createdAt = (new Date()).getTime();\r\n            \r\n            return produce(state, draftState =>{\r\n                const logs = state.logs;\r\n                logs.push(log);\r\n\r\n                draftState.logs = logs;\r\n                if(log.message.public){\r\n                    draftState.last = {\r\n                        message: log.message.public,\r\n                        type: log.type,\r\n                    }\r\n                }\r\n                if(log.path && \r\n                  (log.type === LOG_TYPES.DEBUG || \r\n                   log.type ===LOG_TYPES.WARNING)){\r\n                    draftState.last.path = log.path; \r\n                }\r\n            })\r\n        }\r\n        \r\n        default : return state;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}