{"ast":null,"code":"import _wrapRegExp from \"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/wrapRegExp\";\nvar _jsxFileName = \"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\src\\\\Router\\\\PrivateRedirectWithUser.js\";\nimport React, { useCallback } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { useAuth0 } from \"./../auth0/react-auth0-spa\";\n\nconst RedirectWithUser = ({\n  from,\n  path,\n  recTo,\n  user,\n  ...rest\n}) => {\n  const {\n    loading,\n    isAuthenticated,\n    loginWithRedirect\n  } = useAuth0();\n  const redirect = useCallback(async () => {\n    if (loading) {\n      return;\n    }\n\n    await loginWithRedirect({\n      appState: {\n        targetUrl: window.location.pathname\n      }\n    });\n  }, [loading, loginWithRedirect]);\n\n  const render = () => {\n    if (isAuthenticated) {\n      const findVars = _wrapRegExp(/\\[([\\0-Z\\\\\\^-\\uFFFF]*)\\]/, {\n        variable: 1\n      });\n\n      const vars = recTo.match(findVars).groups.variable;\n      console.log(vars);\n      let to = recTo;\n\n      for (let varName of vars) {\n        to = to.replace(\"[\" + varName + \"]\", user[varName]);\n      }\n\n      console.log(\"to is\", to);\n      return React.createElement(Redirect, Object.assign({\n        from: from,\n        to: to\n      }, rest, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }));\n    } else {\n      redirect();\n    }\n  };\n\n  return React.createElement(Route, Object.assign({\n    path: path,\n    render: render\n  }, rest, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }));\n};\n\nconst mapStateToProps = state => ({\n  nickname: state.user\n});\n\nexport default connect(mapStateToProps)(RedirectWithUser);","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/Router/PrivateRedirectWithUser.js"],"names":["React","useCallback","connect","Route","Redirect","useAuth0","RedirectWithUser","from","path","recTo","user","rest","loading","isAuthenticated","loginWithRedirect","redirect","appState","targetUrl","window","location","pathname","render","findVars","vars","match","groups","variable","console","log","to","varName","replace","mapStateToProps","state","nickname"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,QAAmC,OAAnC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,kBAAhC;AACA,SAASC,QAAT,QAAyB,4BAAzB;;AAEA,MAAMC,gBAAgB,GAAG,CAAC;AAAGC,EAAAA,IAAH;AAASC,EAAAA,IAAT;AAAeC,EAAAA,KAAf;AAAsBC,EAAAA,IAAtB;AAA4B,KAAGC;AAA/B,CAAD,KAA0C;AAC/D,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,eAAX;AAA4BC,IAAAA;AAA5B,MAAkDT,QAAQ,EAAhE;AAGA,QAAMU,QAAQ,GAAGd,WAAW,CAAC,YAAY;AACrC,QAAIW,OAAJ,EAAa;AACT;AACH;;AAED,UAAME,iBAAiB,CAAC;AACpBE,MAAAA,QAAQ,EAAE;AAAEC,QAAAA,SAAS,EAAEC,MAAM,CAACC,QAAP,CAAgBC;AAA7B;AADU,KAAD,CAAvB;AAGH,GAR2B,EAQzB,CAACR,OAAD,EAAUE,iBAAV,CARyB,CAA5B;;AAUA,QAAMO,MAAM,GAAG,MAAM;AACjB,QAAIR,eAAJ,EAAqB;AACjB,YAAMS,QAAQ,eAAG,0BAAH;AAAA;AAAA,QAAd;;AACA,YAAMC,IAAI,GAAGd,KAAK,CAACe,KAAN,CAAYF,QAAZ,EAAsBG,MAAtB,CAA6BC,QAA1C;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYL,IAAZ;AACA,UAAIM,EAAE,GAAGpB,KAAT;;AACA,WAAI,IAAIqB,OAAR,IAAmBP,IAAnB,EAAwB;AACpBM,QAAAA,EAAE,GAAGA,EAAE,CAACE,OAAH,CAAW,MAAID,OAAJ,GAAY,GAAvB,EAA4BpB,IAAI,CAACoB,OAAD,CAAhC,CAAL;AACH;;AACDH,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAsBC,EAAtB;AACA,aAAO,oBAAC,QAAD;AAAU,QAAA,IAAI,EAAEtB,IAAhB;AAAsB,QAAA,EAAE,EAAEsB;AAA1B,SAAkClB,IAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;AACH,KAVD,MAUO;AACHI,MAAAA,QAAQ;AACX;AACJ,GAdD;;AAeA,SAAO,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAEP,IAAb;AAAmB,IAAA,MAAM,EAAEa;AAA3B,KAAuCV,IAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AAEH,CA/BD;;AAiCA,MAAMqB,eAAe,GAAGC,KAAK,KAAI;AAC7BC,EAAAA,QAAQ,EAAGD,KAAK,CAACvB;AADY,CAAJ,CAA7B;;AAIA,eAAeR,OAAO,CAAC8B,eAAD,CAAP,CAAyB1B,gBAAzB,CAAf","sourcesContent":["import React, { useCallback } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport { useAuth0 } from \"./../auth0/react-auth0-spa\";\r\n\r\nconst RedirectWithUser = ({  from, path, recTo, user, ...rest}) => {\r\n    const { loading, isAuthenticated, loginWithRedirect } = useAuth0();\r\n\r\n\r\n    const redirect = useCallback(async () => {\r\n        if (loading) {\r\n            return;\r\n        }\r\n\r\n        await loginWithRedirect({\r\n            appState: { targetUrl: window.location.pathname }\r\n        });\r\n    }, [loading, loginWithRedirect])\r\n\r\n    const render = () => {\r\n        if (isAuthenticated) {\r\n            const findVars = /\\[(?<variable>[^\\[\\]]*)\\]/\r\n            const vars = recTo.match(findVars).groups.variable;\r\n            console.log(vars)\r\n            let to = recTo\r\n            for(let varName of vars){\r\n                to = to.replace(\"[\"+varName+\"]\", user[varName])\r\n            }\r\n            console.log(\"to is\" , to)\r\n            return <Redirect from={from} to={to} {...rest} />;\r\n        } else {\r\n            redirect();\r\n        }\r\n    }\r\n    return <Route path={path} render={render} {...rest} />;\r\n    \r\n};\r\n\r\nconst mapStateToProps = state =>({\r\n    nickname : state.user\r\n})\r\n\r\nexport default connect(mapStateToProps)(RedirectWithUser);"]},"metadata":{},"sourceType":"module"}