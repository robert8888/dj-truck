{"ast":null,"code":"import _regeneratorRuntime from\"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\node_modules\\\\@babel\\\\runtime/regenerator\";var _marked=/*#__PURE__*/_regeneratorRuntime.mark(requestDeleteRecord),_marked2=/*#__PURE__*/_regeneratorRuntime.mark(handel);import{put,select,takeEvery}from\"redux-saga/effects\";import{ACTIONS,pushLog,setRecDeleteStatus}from\"../../actions\";import{getApi}from\"./../../apis/apiProvider\";import{Log}from\"./../../utils/logger/logger\";import errorParser from\"./../../utils/serverErrorParser/errorParser\";export default function requestDeleteRecord(){return _regeneratorRuntime.wrap(function requestDeleteRecord$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return takeEvery(ACTIONS.RECS_REQ_DELETE,handel);case 2:case\"end\":return _context.stop();}}},_marked);}var getToken=function getToken(state){return state.user.token;};function handel(action){var path,token,_response$data,_getApi,callQuery,queries,_getApi2,deleteRecordFromStore,status,query,response,success;return _regeneratorRuntime.wrap(function handel$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:path=['saga','record','request delete record'];_context2.next=3;return select(getToken);case 3:token=_context2.sent;_context2.prev=4;_getApi=getApi(\"UserAssets\"),callQuery=_getApi.callQuery,queries=_getApi.queries;_getApi2=getApi('RecordsStore'),deleteRecordFromStore=_getApi2.deleteRecord;_context2.next=9;return deleteRecordFromStore(action.recordId);case 9:status=_context2.sent;if(!(status!==\"success\")){_context2.next=12;break;}throw new Error(\"Can't delete reacords from record store database\");case 12:;query=queries.deleteRecordQl(action.recordId);_context2.next=16;return callQuery(query,token);case 16:response=_context2.sent;if(!response.errors){_context2.next=19;break;}throw new Error(\"Server response contains errors \"+errorParser(response.errors));case 19:success=response===null||response===void 0?void 0:(_response$data=response.data)===null||_response$data===void 0?void 0:_response$data.deleteRecord;// if (success) {\n//     const status =( yield deleteRecordFromStore(action.recordId) === \"success\");\n//     console.log(\"status\", status)\n//     success = (status === 'success')\n// }\nif(success){_context2.next=22;break;}throw new Error(\"Can't delete reacords from record store database\");case 22:_context2.next=24;return put(setRecDeleteStatus(\"SUCCESS\"));case 24:_context2.next=26;return put(pushLog(new Log(\"Record successfully deleted in database, record id: \".concat(action.recordId),path)));case 26:_context2.next=34;break;case 28:_context2.prev=28;_context2.t0=_context2[\"catch\"](4);_context2.next=32;return put(setRecDeleteStatus(\"FAIL\"));case 32:_context2.next=34;return put(pushLog(Log.Error(path,\"Can't delete record in database\",\"Sorry. During process of deleteing record from database occurred a problem\",_context2.t0)));case 34:case\"end\":return _context2.stop();}}},_marked2,null,[[4,28]]);}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/sagas/records/reqDeleteRecord.js"],"names":["requestDeleteRecord","handel","put","select","takeEvery","ACTIONS","pushLog","setRecDeleteStatus","getApi","Log","errorParser","RECS_REQ_DELETE","getToken","state","user","token","action","path","callQuery","queries","deleteRecordFromStore","deleteRecord","recordId","status","Error","query","deleteRecordQl","response","errors","success","data"],"mappings":"2JAOyBA,mB,iDAMfC,M,EAbV,OAASC,GAAT,CAAcC,MAAd,CAAsBC,SAAtB,KAAuC,oBAAvC,CACA,OAASC,OAAT,CAAkBC,OAAlB,CAA2BC,kBAA3B,KAAqD,eAArD,CACA,OAASC,MAAT,KAAuB,0BAAvB,CACA,OAASC,GAAT,KAAoB,6BAApB,CACA,MAAOC,CAAAA,WAAP,KAAwB,6CAAxB,CAGA,cAAe,SAAUV,CAAAA,mBAAV,+IACX,MAAMI,CAAAA,SAAS,CAACC,OAAO,CAACM,eAAT,CAA0BV,MAA1B,CAAf,CADW,sDAIf,GAAMW,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAAAC,KAAK,QAAIA,CAAAA,KAAK,CAACC,IAAN,CAAWC,KAAf,EAAtB,CAEA,QAAUd,CAAAA,MAAV,CAAiBe,MAAjB,yOACUC,IADV,CACiB,CAAC,MAAD,CAAS,QAAT,CAAmB,uBAAnB,CADjB,kBAEkB,MAAMd,CAAAA,MAAM,CAACS,QAAD,CAAZ,CAFlB,OAEUG,KAFV,yCAKuCP,MAAM,CAAC,YAAD,CAL7C,CAKgBU,SALhB,SAKgBA,SALhB,CAK2BC,OAL3B,SAK2BA,OAL3B,UAMwDX,MAAM,CAAC,cAAD,CAN9D,CAM8BY,qBAN9B,UAMgBC,YANhB,kBAQuB,MAAMD,CAAAA,qBAAqB,CAACJ,MAAM,CAACM,QAAR,CAA3B,CARvB,OAQcC,MARd,qBASWA,MAAM,GAAK,SATtB,iCAUkB,IAAIC,CAAAA,KAAJ,CAAU,kDAAV,CAVlB,SAWS,CAEKC,KAbd,CAasBN,OAAO,CAACO,cAAR,CAAuBV,MAAM,CAACM,QAA9B,CAbtB,mBAcyB,MAAMJ,CAAAA,SAAS,CAACO,KAAD,CAAQV,KAAR,CAAf,CAdzB,QAccY,QAdd,oBAeYA,QAAQ,CAACC,MAfrB,gCAgBkB,IAAIJ,CAAAA,KAAJ,CAAU,mCAAqCd,WAAW,CAACiB,QAAQ,CAACC,MAAV,CAA1D,CAhBlB,SAmBYC,OAnBZ,CAmBsBF,QAnBtB,SAmBsBA,QAnBtB,iCAmBsBA,QAAQ,CAAEG,IAnBhC,yCAmBsB,eAAgBT,YAnBtC,CAoBQ;AACA;AACA;AACA;AACA;AAxBR,GA2BaQ,OA3Bb,gCA4BkB,IAAIL,CAAAA,KAAJ,CAAU,kDAAV,CA5BlB,2BA+BQ,MAAMtB,CAAAA,GAAG,CAACK,kBAAkB,CAAC,SAAD,CAAnB,CAAT,CA/BR,0BAiCQ,MAAML,CAAAA,GAAG,CAACI,OAAO,CAAC,GAAIG,CAAAA,GAAJ,+DAA+DO,MAAM,CAACM,QAAtE,EAAkFL,IAAlF,CAAD,CAAR,CAAT,CAjCR,+GAmCQ,MAAMf,CAAAA,GAAG,CAACK,kBAAkB,CAAC,MAAD,CAAnB,CAAT,CAnCR,0BAoCQ,MAAML,CAAAA,GAAG,CAACI,OAAO,CAACG,GAAG,CAACe,KAAJ,CACdP,IADc,CAEd,iCAFc,CAGd,4EAHc,cAAD,CAAR,CAAT,CApCR","sourcesContent":["import { put, select, takeEvery } from \"redux-saga/effects\";\r\nimport { ACTIONS, pushLog, setRecDeleteStatus } from \"../../actions\";\r\nimport { getApi } from \"./../../apis/apiProvider\";\r\nimport { Log } from \"./../../utils/logger/logger\";\r\nimport errorParser from \"./../../utils/serverErrorParser/errorParser\";\r\n\r\n\r\nexport default function* requestDeleteRecord() {\r\n    yield takeEvery(ACTIONS.RECS_REQ_DELETE, handel)\r\n}\r\n\r\nconst getToken = state => state.user.token\r\n\r\nfunction* handel(action) {\r\n    const path = ['saga', 'record', 'request delete record']\r\n    const token = yield select(getToken);\r\n\r\n    try {\r\n        const { callQuery, queries } = getApi(\"UserAssets\");\r\n        const { deleteRecord: deleteRecordFromStore } = getApi('RecordsStore');\r\n\r\n        const status = yield deleteRecordFromStore(action.recordId)\r\n        if(status !== \"success\"){\r\n            throw new Error(\"Can't delete reacords from record store database\")\r\n        };\r\n\r\n        const query = queries.deleteRecordQl(action.recordId);\r\n        const response = yield callQuery(query, token);\r\n        if (response.errors) {\r\n            throw new Error(\"Server response contains errors \" + errorParser(response.errors));\r\n        }\r\n\r\n        let success = response?.data?.deleteRecord;\r\n        // if (success) {\r\n        //     const status =( yield deleteRecordFromStore(action.recordId) === \"success\");\r\n        //     console.log(\"status\", status)\r\n        //     success = (status === 'success')\r\n        // }\r\n\r\n\r\n        if (!success) {\r\n            throw new Error(\"Can't delete reacords from record store database\")\r\n        } \r\n\r\n        yield put(setRecDeleteStatus(\"SUCCESS\"))\r\n\r\n        yield put(pushLog(new Log(`Record successfully deleted in database, record id: ${action.recordId}`, path)))\r\n    } catch (error) {\r\n        yield put(setRecDeleteStatus(\"FAIL\"))\r\n        yield put(pushLog(Log.Error(\r\n            path,\r\n            \"Can't delete record in database\",\r\n            \"Sorry. During process of deleteing record from database occurred a problem\",\r\n            error\r\n        )))\r\n    }\r\n\r\n\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}