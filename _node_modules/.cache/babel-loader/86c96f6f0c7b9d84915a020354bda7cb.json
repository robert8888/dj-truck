{"ast":null,"code":"import _regeneratorRuntime from\"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\node_modules\\\\@babel\\\\runtime/regenerator\";var _marked=/*#__PURE__*/_regeneratorRuntime.mark(watcher),_marked2=/*#__PURE__*/_regeneratorRuntime.mark(calcBpmAsync);import{call,put,takeEvery}from'redux-saga/effects';import{ACTIONS,pushLog,setBpmAndOffset}from\"../actions\";import{getApi}from\"./../apis/apiProvider\";import{calcAccurateBpmAndOffset}from'./../utils/bpm/analyzer';import{Log}from\"./../utils/logger/logger\";export default function watcher(){return _regeneratorRuntime.wrap(function watcher$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return takeEvery(ACTIONS.PL_INIT_CALC_BPM,calcBpmAsync);case 2:_context.next=4;return takeEvery(ACTIONS.PL_PUSH_TRACK,calcBpmAsync);case 4:case\"end\":return _context.stop();}}},_marked);}function calcBpmAsync(action){var path,_action$track,id,source,duration,priv,logArgs,pub,api,url,_ref,offset,bpm;return _regeneratorRuntime.wrap(function calcBpmAsync$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:path=['saga','calcBpm','calculatin bpm'];_context2.prev=1;_action$track=action.track,id=_action$track.sourceId,source=_action$track.source,duration=_action$track.duration;if(!(duration>60*20)){_context2.next=10;break;}priv=\"Can't calculating bpm track duration is to big: \"+duration;logArgs=[path,priv];if(action.type===ACTIONS.PL_INIT_CALC_BPM){pub=\"Sorry. Bpm calculation is possible only for track which duration is up to 20 minutes\";logArgs.push(pub);}_context2.next=9;return put(pushLog(Log.Error(logArgs)));case 9:return _context2.abrupt(\"return\");case 10:api=getApi(source);url=api.getUrl(id);// console.log(action)\n_context2.next=14;return put(setBpmAndOffset(action.track.id,action.playlist,\"calculating\",null));case 14:_context2.next=16;return call(calcAccurateBpmAndOffset,url);case 16:_ref=_context2.sent;offset=_ref.offset;bpm=_ref.bpm;_context2.next=21;return put(setBpmAndOffset(action.track.id,action.playlist,bpm,offset));case 21:_context2.next=23;return put(pushLog(new Log(\"Track id: \".concat(id,\" bpm and offset successful updated\"),path)));case 23:_context2.next=29;break;case 25:_context2.prev=25;_context2.t0=_context2[\"catch\"](1);_context2.next=29;return put(pushLog(Log.Error(path,\"Can't calculating bpm. \"+_context2.t0.message,\"Sorry. During calculating bpm occured problem\",_context2.t0)));case 29:case\"end\":return _context2.stop();}}},_marked2,null,[[1,25]]);}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/sagas/calcBpmSaga.js"],"names":["watcher","calcBpmAsync","call","put","takeEvery","ACTIONS","pushLog","setBpmAndOffset","getApi","calcAccurateBpmAndOffset","Log","PL_INIT_CALC_BPM","PL_PUSH_TRACK","action","path","track","id","sourceId","source","duration","priv","logArgs","type","pub","push","Error","api","url","getUrl","playlist","offset","bpm","message"],"mappings":"2JAMyBA,O,iDAOfC,Y,EAbV,OAASC,IAAT,CAAeC,GAAf,CAAoBC,SAApB,KAAqC,oBAArC,CACA,OAASC,OAAT,CAAkBC,OAAlB,CAA2BC,eAA3B,KAAkD,YAAlD,CACA,OAASC,MAAT,KAAuB,uBAAvB,CACA,OAASC,wBAAT,KAAyC,yBAAzC,CACA,OAASC,GAAT,KAAoB,0BAApB,CAEA,cAAe,SAAUV,CAAAA,OAAV,mIACX,MAAMI,CAAAA,SAAS,CAACC,OAAO,CAACM,gBAAT,CAA2BV,YAA3B,CAAf,CADW,uBAEX,MAAMG,CAAAA,SAAS,CAACC,OAAO,CAACO,aAAT,CAAwBX,YAAxB,CAAf,CAFW,sDAOf,QAAUA,CAAAA,YAAV,CAAuBY,MAAvB,6MACUC,IADV,CACiB,CAAC,MAAD,CAAS,SAAT,CAAoB,gBAApB,CADjB,gCAGiDD,MAAM,CAACE,KAHxD,CAGyBC,EAHzB,eAGeC,QAHf,CAG6BC,MAH7B,eAG6BA,MAH7B,CAGqCC,QAHrC,eAGqCA,QAHrC,MAIWA,QAAQ,CAAG,GAAK,EAJ3B,4BAMkBC,IANlB,CAMyB,mDAAqDD,QAN9E,CAOkBE,OAPlB,CAO4B,CAACP,IAAD,CAAOM,IAAP,CAP5B,CAQY,GAAGP,MAAM,CAACS,IAAP,GAAgBjB,OAAO,CAACM,gBAA3B,CAA6C,CACnCY,GADmC,CAC7B,sFAD6B,CAEzCF,OAAO,CAACG,IAAR,CAAaD,GAAb,EACH,CAXb,iBAYY,MAAMpB,CAAAA,GAAG,CAACG,OAAO,CAACI,GAAG,CAACe,KAAJ,CAAUJ,OAAV,CAAD,CAAR,CAAT,CAZZ,iDAecK,GAfd,CAeoBlB,MAAM,CAACU,MAAD,CAf1B,CAgBcS,GAhBd,CAgBoBD,GAAG,CAACE,MAAJ,CAAWZ,EAAX,CAhBpB,CAkBQ;AAlBR,kBAmBQ,MAAMb,CAAAA,GAAG,CAACI,eAAe,CAACM,MAAM,CAACE,KAAP,CAAaC,EAAd,CAAkBH,MAAM,CAACgB,QAAzB,CAAmC,aAAnC,CAAkD,IAAlD,CAAhB,CAAT,CAnBR,0BAoB8B,MAAM3B,CAAAA,IAAI,CAACO,wBAAD,CAA2BkB,GAA3B,CAAV,CApB9B,4BAoBcG,MApBd,MAoBcA,MApBd,CAoBsBC,GApBtB,MAoBsBA,GApBtB,mBAqBQ,MAAM5B,CAAAA,GAAG,CAACI,eAAe,CAACM,MAAM,CAACE,KAAP,CAAaC,EAAd,CAAkBH,MAAM,CAACgB,QAAzB,CAAmCE,GAAnC,CAAwCD,MAAxC,CAAhB,CAAT,CArBR,0BAuBQ,MAAM3B,CAAAA,GAAG,CAACG,OAAO,CAAC,GAAII,CAAAA,GAAJ,qBAAqBM,EAArB,uCAA6DF,IAA7D,CAAD,CAAR,CAAT,CAvBR,+GAyBQ,MAAMX,CAAAA,GAAG,CAACG,OAAO,CAACI,GAAG,CAACe,KAAJ,CACdX,IADc,CAEd,0BAA4B,aAAMkB,OAFpB,CAGd,+CAHc,cAAD,CAAR,CAAT,CAzBR","sourcesContent":["import { call, put, takeEvery } from 'redux-saga/effects';\r\nimport { ACTIONS, pushLog, setBpmAndOffset } from \"../actions\";\r\nimport { getApi } from \"./../apis/apiProvider\";\r\nimport { calcAccurateBpmAndOffset } from './../utils/bpm/analyzer';\r\nimport { Log } from \"./../utils/logger/logger\";\r\n\r\nexport default function* watcher() {\r\n    yield takeEvery(ACTIONS.PL_INIT_CALC_BPM, calcBpmAsync);\r\n    yield takeEvery(ACTIONS.PL_PUSH_TRACK, calcBpmAsync);\r\n}\r\n\r\n\r\n\r\nfunction* calcBpmAsync(action) {\r\n    const path = ['saga', 'calcBpm', 'calculatin bpm']\r\n    try{\r\n        const {sourceId: id, source, duration} = action.track;\r\n        if(duration > 60 * 20) // 20 min;\r\n        {\r\n            const priv = \"Can't calculating bpm track duration is to big: \" + duration;\r\n            const logArgs = [path, priv];\r\n            if(action.type === ACTIONS.PL_INIT_CALC_BPM) {\r\n                const pub = \"Sorry. Bpm calculation is possible only for track which duration is up to 20 minutes\";\r\n                logArgs.push(pub)\r\n            }\r\n            yield put(pushLog(Log.Error(logArgs)))\r\n            return;\r\n        }\r\n        const api = getApi(source);\r\n        const url = api.getUrl(id);\r\n\r\n        // console.log(action)\r\n        yield put(setBpmAndOffset(action.track.id, action.playlist, \"calculating\", null))\r\n        let { offset, bpm } = yield call(calcAccurateBpmAndOffset, url);\r\n        yield put(setBpmAndOffset(action.track.id, action.playlist, bpm, offset))\r\n        \r\n        yield put(pushLog(new Log(`Track id: ${id} bpm and offset successful updated`, path)))\r\n    } catch (error){\r\n        yield put(pushLog(Log.Error(\r\n            path,\r\n            \"Can't calculating bpm. \" + error.message,\r\n            \"Sorry. During calculating bpm occured problem\",\r\n            error\r\n        )))\r\n    }  \r\n\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}