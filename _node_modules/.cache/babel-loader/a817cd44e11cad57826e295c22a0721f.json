{"ast":null,"code":"import { hideLoading, showLoading } from 'react-redux-loading-bar';\nimport { put, select, takeEvery } from \"redux-saga/effects\";\nimport { ACTIONS, deleteTrack, pushLog } from \"../../actions\";\nimport { getApi } from \"./../../apis/apiProvider\";\nimport { Log } from \"./../../utils/logger/logger\";\nexport default function* deleteTrackRequestSaga() {\n  yield takeEvery(ACTIONS.PL_DELETE_TRACK_REQUEST, handel);\n}\n\nconst getToken = state => state.user.token;\n\nfunction* handel(action) {\n  const path = ['saga', 'playlist', 'request delete track'];\n  const token = yield select(getToken);\n\n  if (!token) {\n    return yield put(deleteTrack(action.index));\n  }\n\n  try {\n    yield put(showLoading());\n    const {\n      callQuery,\n      queries\n    } = getApi(\"UserAssets\");\n    let response = yield callQuery(queries.deleteQl.deleteTrack(action.id), token);\n\n    if (response.errors) {\n      throw new Error('Server response contains errors ' + errorParser(response.errors));\n    }\n\n    if (!response.data.deleteTrack) {\n      throw new Error();\n    }\n\n    yield put(deleteTrack(action.index));\n    yield put(pushLog(new Log(\"Track deleted from database\", path)));\n  } catch (error) {\n    yield put(pushLog(Log.Error(path, \"Can't delete track\" + error.message, \"Sorry. During process deleting track occurred a problem\", error)));\n  } finally {\n    yield put(hideLoading());\n  }\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/sagas/playlists/reqDeleteTrackSaga.js"],"names":["hideLoading","showLoading","put","select","takeEvery","ACTIONS","deleteTrack","pushLog","getApi","Log","deleteTrackRequestSaga","PL_DELETE_TRACK_REQUEST","handel","getToken","state","user","token","action","path","index","callQuery","queries","response","deleteQl","id","errors","Error","errorParser","data","error","message"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,WAAtB,QAAyC,yBAAzC;AACA,SAASC,GAAT,EAAcC,MAAd,EAAsBC,SAAtB,QAAuC,oBAAvC;AACA,SAASC,OAAT,EAAkBC,WAAlB,EAA+BC,OAA/B,QAA8C,eAA9C;AACA,SAASC,MAAT,QAAuB,0BAAvB;AACA,SAASC,GAAT,QAAoB,6BAApB;AAEA,eAAe,UAAUC,sBAAV,GAAmC;AAC9C,QAAMN,SAAS,CAACC,OAAO,CAACM,uBAAT,EAAkCC,MAAlC,CAAf;AACH;;AAED,MAAMC,QAAQ,GAAGC,KAAK,IAAIA,KAAK,CAACC,IAAN,CAAWC,KAArC;;AAEA,UAAUJ,MAAV,CAAiBK,MAAjB,EAAyB;AACrB,QAAMC,IAAI,GAAG,CAAC,MAAD,EAAS,UAAT,EAAqB,sBAArB,CAAb;AACA,QAAMF,KAAK,GAAG,MAAMb,MAAM,CAACU,QAAD,CAA1B;;AAEA,MAAI,CAACG,KAAL,EAAY;AACR,WAAO,MAAMd,GAAG,CAACI,WAAW,CAACW,MAAM,CAACE,KAAR,CAAZ,CAAhB;AACH;;AACD,MAAI;AACA,UAAMjB,GAAG,CAACD,WAAW,EAAZ,CAAT;AACA,UAAM;AAAEmB,MAAAA,SAAF;AAAaC,MAAAA;AAAb,QAAyBb,MAAM,CAAC,YAAD,CAArC;AACA,QAAIc,QAAQ,GAAG,MAAMF,SAAS,CAACC,OAAO,CAACE,QAAR,CAAiBjB,WAAjB,CAA6BW,MAAM,CAACO,EAApC,CAAD,EAA0CR,KAA1C,CAA9B;;AAEA,QAAGM,QAAQ,CAACG,MAAZ,EAAmB;AACf,YAAM,IAAIC,KAAJ,CAAU,qCAAoCC,WAAW,CAACL,QAAQ,CAACG,MAAV,CAAzD,CAAN;AACH;;AACD,QAAI,CAACH,QAAQ,CAACM,IAAT,CAActB,WAAnB,EAAgC;AAC5B,YAAM,IAAIoB,KAAJ,EAAN;AACH;;AAED,UAAMxB,GAAG,CAACI,WAAW,CAACW,MAAM,CAACE,KAAR,CAAZ,CAAT;AAEA,UAAMjB,GAAG,CAACK,OAAO,CAAC,IAAIE,GAAJ,CAAQ,6BAAR,EAAuCS,IAAvC,CAAD,CAAR,CAAT;AACH,GAfD,CAeE,OAAOW,KAAP,EAAc;AACZ,UAAM3B,GAAG,CAACK,OAAO,CAACE,GAAG,CAACiB,KAAJ,CACdR,IADc,EAEd,uBAAuBW,KAAK,CAACC,OAFf,EAGd,yDAHc,EAIdD,KAJc,CAAD,CAAR,CAAT;AAMH,GAtBD,SAsBU;AACN,UAAM3B,GAAG,CAACF,WAAW,EAAZ,CAAT;AACH;AACJ","sourcesContent":["import { hideLoading, showLoading } from 'react-redux-loading-bar';\r\nimport { put, select, takeEvery } from \"redux-saga/effects\";\r\nimport { ACTIONS, deleteTrack, pushLog } from \"../../actions\";\r\nimport { getApi } from \"./../../apis/apiProvider\";\r\nimport { Log } from \"./../../utils/logger/logger\";\r\n\r\nexport default function* deleteTrackRequestSaga() {\r\n    yield takeEvery(ACTIONS.PL_DELETE_TRACK_REQUEST, handel)\r\n}\r\n\r\nconst getToken = state => state.user.token;\r\n\r\nfunction* handel(action) {\r\n    const path = ['saga', 'playlist', 'request delete track'];\r\n    const token = yield select(getToken);\r\n\r\n    if (!token) {\r\n        return yield put(deleteTrack(action.index));\r\n    }\r\n    try {\r\n        yield put(showLoading());\r\n        const { callQuery, queries } = getApi(\"UserAssets\");\r\n        let response = yield callQuery(queries.deleteQl.deleteTrack(action.id), token);\r\n\r\n        if(response.errors){\r\n            throw new Error('Server response contains errors '+ errorParser(response.errors))\r\n        }\r\n        if (!response.data.deleteTrack) {\r\n            throw new Error();\r\n        }\r\n\r\n        yield put(deleteTrack(action.index));\r\n        \r\n        yield put(pushLog(new Log(\"Track deleted from database\", path)))\r\n    } catch (error) {\r\n        yield put(pushLog(Log.Error(\r\n            path,\r\n            \"Can't delete track\" + error.message,\r\n            \"Sorry. During process deleting track occurred a problem\",\r\n            error\r\n        )))\r\n    } finally {\r\n        yield put(hideLoading())\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}