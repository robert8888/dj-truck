{"ast":null,"code":"import React, { useMemo, useState, useEffect, useCallback, useContext } from \"react\";\nimport { getApi } from \"./../../../../apis/apiProvider\";\nimport { PLAYBACK_STATE } from \"./ListItem/PlaybackButton/PlaybackButton\"; //getRecordUrl\n\nexport const PlayerContext = React.createContext({\n  btnStateHandlers: {},\n  setProgressHandlers: [],\n  getProgressDataHandler: [],\n\n  setBtnCtrlHandler(id, handler) {\n    this.btnStateHandlers[id] = handler;\n  },\n\n  setBtnState(id, state) {\n    this.btnStateHandlers[id](state);\n  },\n\n  setProgressHandler(id, handler) {\n    if (this.setProgressHandlers[id]) {\n      this.setProgressHandlers[id].push(handler);\n    }\n\n    this.setProgressHandlers[id] = [handler];\n  },\n\n  setProgress(id, progress) {\n    for (let handler of this.setProgressHandlers[id]) {\n      handler(progress);\n    }\n  },\n\n  setProgressDataHandler(id, handler) {\n    this.getProgressDataHandler[id] = handler;\n  },\n\n  getProgress(id) {\n    return this.getProgressDataHandler[id]();\n  }\n\n});\nexport function useRecordPlayer() {\n  const [mediaElement, setMediaElement] = useState(null); // const [current, setCurrent] = useState(null);\n  // const [currentStart, setCurrentStart] = useState(0);\n\n  const [current, setCurrent] = useState({\n    id: null,\n    start: 0,\n    duration: 0\n  });\n  const [progressUpdater, setProgressUpdater] = useState(null);\n  const ctrContext = useContext(PlayerContext);\n  const api = useMemo(() => {\n    return getApi('RecordsStore');\n  }, [getApi]);\n  useEffect(() => {\n    const medEl = document.createElement('audio');\n    medEl.autoplay = true;\n    medEl.preload = 'metadata';\n    setMediaElement(medEl);\n  }, [setMediaElement]);\n  const startUpdateProg = useCallback(() => {\n    const handler = setInterval(() => {}, 500);\n    setProgressUpdater(handler);\n  }, [setProgressUpdater, current]);\n  const stopUpdateProg = useCallback(() => {\n    clearInterval(progressUpdater);\n  }, [progressUpdater]);\n  const playback = useCallback((id, pbState) => {\n    if (pbState === PLAYBACK_STATE.PLAY) {\n      mediaElement.src = api.getRecordUrl(id);\n      mediaElement.play();\n\n      if (current.id) {\n        ctrContext.setBtnState(current, PLAYBACK_STATE.PAUSE);\n      }\n\n      setCurrent({ ...current,\n        id\n      });\n    } else if (pbState === PLAYBACK_STATE.PAUSE) {\n      mediaElement.pause();\n    }\n  }, [mediaElement, api]);\n\n  function seek({\n    id,\n    filePosition,\n    progress,\n    duration\n  }) {\n    mediaElement.src = api.getRecordUrl(id, filePosition);\n    ctrContext.setBtnState(id, PLAYBACK_STATE.PLAY);\n    ctrContext.setProgress(id, progress);\n    setCurrent({\n      id,\n      start: progress,\n      duration\n    }); // console.log(\"seek \", id , position)\n  }\n\n  return [playback, seek];\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/pages/common/components/RecordList/useRecordPlayer.js"],"names":["React","useMemo","useState","useEffect","useCallback","useContext","getApi","PLAYBACK_STATE","PlayerContext","createContext","btnStateHandlers","setProgressHandlers","getProgressDataHandler","setBtnCtrlHandler","id","handler","setBtnState","state","setProgressHandler","push","setProgress","progress","setProgressDataHandler","getProgress","useRecordPlayer","mediaElement","setMediaElement","current","setCurrent","start","duration","progressUpdater","setProgressUpdater","ctrContext","api","medEl","document","createElement","autoplay","preload","startUpdateProg","setInterval","stopUpdateProg","clearInterval","playback","pbState","PLAY","src","getRecordUrl","play","PAUSE","pause","seek","filePosition"],"mappings":"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","sourcesContent":["import React, { useMemo, useState, useEffect, useCallback, useContext } from \"react\"\r\nimport { getApi } from \"./../../../../apis/apiProvider\";\r\nimport {PLAYBACK_STATE} from \"./ListItem/PlaybackButton/PlaybackButton\";\r\n\r\n//getRecordUrl\r\nexport const PlayerContext = React.createContext({\r\n    btnStateHandlers: {},\r\n    setProgressHandlers:[],\r\n    getProgressDataHandler: [],\r\n\r\n    setBtnCtrlHandler(id, handler){\r\n        this.btnStateHandlers[id] = handler;\r\n    },\r\n\r\n    setBtnState(id, state){\r\n        this.btnStateHandlers[id](state)\r\n    },\r\n\r\n    setProgressHandler(id, handler){\r\n        if(this.setProgressHandlers[id]){\r\n            this.setProgressHandlers[id].push(handler);\r\n        }\r\n        this.setProgressHandlers[id] = [handler];\r\n    },\r\n\r\n    setProgress(id, progress){\r\n        for(let handler of this.setProgressHandlers[id]){\r\n            handler(progress)\r\n        }\r\n    },\r\n  \r\n    setProgressDataHandler(id, handler){\r\n        this.getProgressDataHandler[id] = handler;\r\n    },\r\n\r\n    getProgress(id){\r\n        return this.getProgressDataHandler[id]();\r\n    }\r\n})\r\n\r\nexport function useRecordPlayer(){\r\n    const [mediaElement, setMediaElement] = useState(null);\r\n    // const [current, setCurrent] = useState(null);\r\n    // const [currentStart, setCurrentStart] = useState(0);\r\n    const [current, setCurrent] = useState({\r\n        id: null,\r\n        start: 0,\r\n        duration: 0\r\n    })\r\n    const [progressUpdater, setProgressUpdater] = useState(null);\r\n    const ctrContext = useContext(PlayerContext);\r\n\r\n    const api = useMemo(()=>{\r\n        return getApi('RecordsStore');\r\n    }, [getApi])\r\n\r\n    useEffect(()=>{\r\n        const medEl = document.createElement('audio');\r\n        medEl.autoplay = true;\r\n        medEl.preload = 'metadata'\r\n        setMediaElement(medEl)\r\n    }, [setMediaElement])\r\n\r\n    const startUpdateProg = useCallback(()=>{\r\n        const handler = setInterval(()=>{\r\n\r\n        }, 500)\r\n        setProgressUpdater(handler)\r\n    }, [setProgressUpdater, current])\r\n\r\n    const stopUpdateProg = useCallback(()=>{\r\n        clearInterval(progressUpdater);\r\n    }, [progressUpdater])\r\n\r\n    const playback = useCallback((id, pbState)=>{\r\n        if(pbState === PLAYBACK_STATE.PLAY){\r\n            mediaElement.src = api.getRecordUrl(id);\r\n            mediaElement.play();\r\n            if(current.id){\r\n                ctrContext.setBtnState(current, PLAYBACK_STATE.PAUSE)\r\n            } \r\n            setCurrent({\r\n                ...current,\r\n                id\r\n            });\r\n        } else if(pbState === PLAYBACK_STATE.PAUSE){\r\n            mediaElement.pause(); \r\n        }\r\n    }, [mediaElement, api])\r\n\r\n    function seek({id, filePosition, progress, duration}){\r\n\r\n        mediaElement.src = api.getRecordUrl(id, filePosition);\r\n        ctrContext.setBtnState(id, PLAYBACK_STATE.PLAY);\r\n        ctrContext.setProgress(id, progress);\r\n        setCurrent({\r\n            id,\r\n            start: progress,\r\n            duration\r\n        })\r\n        // console.log(\"seek \", id , position)\r\n    }\r\n\r\n\r\n\r\n    return [playback, seek ]\r\n}"]},"metadata":{},"sourceType":"module"}