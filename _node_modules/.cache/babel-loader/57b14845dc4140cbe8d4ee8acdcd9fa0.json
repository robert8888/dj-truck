{"ast":null,"code":"import { ACTIONS } from \"../../actions\";\nimport { takeEvery, select, put, fork } from \"redux-saga/effects\";\nimport { getApi } from \"./../../apis/apiProvider\";\nexport default function* renameSelectedRequestSaga() {\n  yield takeEvery(ACTIONS.SET_BPM_AND_OFFSET, handel);\n}\n\nfunction* handel(action) {\n  if (typeof action.bpm === \"number\") {\n    yield fork(sendDataToApi, action);\n  }\n}\n\nconst getToken = state => state.user.token;\n\nfunction* sendDataToApi(action) {\n  const {\n    callQuery,\n    queries\n  } = getApi(\"UserAssets\");\n  const token = yield select(getToken);\n  console.log(action.id);\n\n  if (token) {\n    try {\n      const result = yield callQuery(queries.updateTrackQl, token, {\n        id: action.id,\n        bpm: action.bpm,\n        offset: action.offset\n      });\n\n      if (result.errors) {\n        throw new Error(result.errors);\n      }\n    } catch (err) {\n      console.log(\"Can't update bpm in database\");\n      console.log(err.message);\n    }\n  }\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/sagas/playlists/setBpmRequestSaga.js"],"names":["ACTIONS","takeEvery","select","put","fork","getApi","renameSelectedRequestSaga","SET_BPM_AND_OFFSET","handel","action","bpm","sendDataToApi","getToken","state","user","token","callQuery","queries","console","log","id","result","updateTrackQl","offset","errors","Error","err","message"],"mappings":"AAAA,SAASA,OAAT,QAAwB,eAAxB;AACA,SAASC,SAAT,EAAoBC,MAApB,EAA4BC,GAA5B,EAAiCC,IAAjC,QAA6C,oBAA7C;AACA,SAASC,MAAT,QAAuB,0BAAvB;AAEA,eAAe,UAAUC,yBAAV,GAAsC;AACjD,QAAML,SAAS,CAACD,OAAO,CAACO,kBAAT,EAA6BC,MAA7B,CAAf;AACH;;AAED,UAAUA,MAAV,CAAiBC,MAAjB,EAAwB;AACpB,MAAG,OAAOA,MAAM,CAACC,GAAd,KAAsB,QAAzB,EAAkC;AAC9B,UAAMN,IAAI,CAACO,aAAD,EAAgBF,MAAhB,CAAV;AACH;AACJ;;AAED,MAAMG,QAAQ,GAAGC,KAAK,IAAIA,KAAK,CAACC,IAAN,CAAWC,KAArC;;AAEA,UAAUJ,aAAV,CAAwBF,MAAxB,EAAgC;AAC5B,QAAM;AAAEO,IAAAA,SAAF;AAAcC,IAAAA;AAAd,MAA0BZ,MAAM,CAAC,YAAD,CAAtC;AACA,QAAMU,KAAK,GAAG,MAAMb,MAAM,CAACU,QAAD,CAA1B;AACAM,EAAAA,OAAO,CAACC,GAAR,CAAYV,MAAM,CAACW,EAAnB;;AACA,MAAGL,KAAH,EAAS;AACL,QAAG;AACC,YAAMM,MAAM,GAAG,MAAML,SAAS,CAACC,OAAO,CAACK,aAAT,EAAwBP,KAAxB,EAAgC;AAC1DK,QAAAA,EAAE,EAAEX,MAAM,CAACW,EAD+C;AAE1DV,QAAAA,GAAG,EAAED,MAAM,CAACC,GAF8C;AAG1Da,QAAAA,MAAM,EAAEd,MAAM,CAACc;AAH2C,OAAhC,CAA9B;;AAKA,UAAGF,MAAM,CAACG,MAAV,EAAiB;AACb,cAAM,IAAIC,KAAJ,CAAUJ,MAAM,CAACG,MAAjB,CAAN;AACH;AACJ,KATD,CASE,OAAOE,GAAP,EAAW;AACTR,MAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYO,GAAG,CAACC,OAAhB;AACH;AACJ;AACJ","sourcesContent":["import { ACTIONS } from \"../../actions\";\r\nimport { takeEvery, select, put, fork } from \"redux-saga/effects\"\r\nimport { getApi } from \"./../../apis/apiProvider\";\r\n\r\nexport default function* renameSelectedRequestSaga() {\r\n    yield takeEvery(ACTIONS.SET_BPM_AND_OFFSET, handel)\r\n}\r\n\r\nfunction* handel(action){\r\n    if(typeof action.bpm === \"number\"){\r\n        yield fork(sendDataToApi, action)\r\n    }\r\n}\r\n\r\nconst getToken = state => state.user.token;\r\n\r\nfunction* sendDataToApi(action) {\r\n    const { callQuery , queries } = getApi(\"UserAssets\");\r\n    const token = yield select(getToken);\r\n    console.log(action.id)\r\n    if(token){\r\n        try{\r\n            const result = yield callQuery(queries.updateTrackQl, token,  {\r\n                id: action.id,\r\n                bpm: action.bpm,\r\n                offset: action.offset\r\n            })\r\n            if(result.errors){\r\n                throw new Error(result.errors);\r\n            }\r\n        } catch (err){\r\n            console.log(\"Can't update bpm in database\")\r\n            console.log(err.message);\r\n        }\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}