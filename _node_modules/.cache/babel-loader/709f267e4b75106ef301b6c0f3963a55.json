{"ast":null,"code":"import { ACTIONS } from \"./../../../actions\";\nimport STATES from \"./stateDef\";\nconst initState = {\n  recName: \"\",\n  recId: null,\n  recordingState: STATES.IDLE,\n  startTime: null,\n  tracklist: []\n};\nexport default function headerState(state = initState, action) {\n  switch (action.type) {\n    case ACTIONS.R_START_RECORDING:\n      {\n        return { ...state,\n          recordingState: STATES.INIT,\n          recName: action.recName,\n          recId: action.id,\n          startTime: new Date().getTime()\n        };\n      }\n\n    case ACTIONS.R_END_RECORDING:\n      {\n        return { ...state,\n          recordingState: STATES.IDLE,\n          recName: \"\",\n          tracklist: []\n        };\n      }\n\n    case ACTIONS.R_RECORDING:\n      {\n        return { ...state,\n          recordingState: STATES.RECORDING\n        };\n      }\n\n    case ACTIONS.R_RECORDING_FAIL:\n      {\n        return { ...state,\n          recordingState: STATES.FAIL,\n          recName: \"\",\n          tracklist: []\n        };\n      }\n    //------------\n\n    case ACTIONS.LOAD_TRACK:\n      {\n        if (state.recordingState !== STATES.RECORDING) {\n          return state;\n        }\n\n        const nextTracklist = state.tracklist;\n        nextTracklist.push({\n          id: action.track.id,\n          destination: action.destination,\n          time: null\n        });\n        return { ...state,\n          tracklist: nextTracklist\n        };\n      }\n\n    case ACTIONS.TOGGLE_PLAY:\n      {\n        if (state.recordingState !== STATES.RECORDING) {\n          return state;\n        }\n\n        const nextTracklist = state.tracklist.slice().reverse.map(track => {\n          if (track.destination === action.destination) {\n            track.time = new Date().getTime() - state.startTime;\n          }\n\n          return track;\n        });\n        return { ...state,\n          tracklist: nextTracklist\n        };\n      }\n\n    case ACTIONS.CANCEL_CUE_AND_PLAY:\n      {\n        if (state.recordingState !== STATES.RECORDING) {\n          return state;\n        }\n      }\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/reducers/console/recorder/recorderReducer.js"],"names":["ACTIONS","STATES","initState","recName","recId","recordingState","IDLE","startTime","tracklist","headerState","state","action","type","R_START_RECORDING","INIT","id","Date","getTime","R_END_RECORDING","R_RECORDING","RECORDING","R_RECORDING_FAIL","FAIL","LOAD_TRACK","nextTracklist","push","track","destination","time","TOGGLE_PLAY","slice","reverse","map","CANCEL_CUE_AND_PLAY"],"mappings":"AAAA,SAASA,OAAT,QAAwB,oBAAxB;AACA,OAAOC,MAAP,MAAmB,YAAnB;AAEA,MAAMC,SAAS,GAAG;AACdC,EAAAA,OAAO,EAAE,EADK;AAEdC,EAAAA,KAAK,EAAE,IAFO;AAGdC,EAAAA,cAAc,EAAEJ,MAAM,CAACK,IAHT;AAIdC,EAAAA,SAAS,EAAE,IAJG;AAKdC,EAAAA,SAAS,EAAE;AALG,CAAlB;AAQA,eAAe,SAASC,WAAT,CAAqBC,KAAK,GAAGR,SAA7B,EAAwCS,MAAxC,EAAgD;AAC3D,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKZ,OAAO,CAACa,iBAAb;AAAgC;AAC5B,eAAO,EACH,GAAGH,KADA;AAEHL,UAAAA,cAAc,EAAEJ,MAAM,CAACa,IAFpB;AAGHX,UAAAA,OAAO,EAAEQ,MAAM,CAACR,OAHb;AAIHC,UAAAA,KAAK,EAAEO,MAAM,CAACI,EAJX;AAKHR,UAAAA,SAAS,EAAE,IAAIS,IAAJ,GAAWC,OAAX;AALR,SAAP;AAOH;;AAED,SAAKjB,OAAO,CAACkB,eAAb;AAA8B;AAC1B,eAAO,EACH,GAAGR,KADA;AAEHL,UAAAA,cAAc,EAAEJ,MAAM,CAACK,IAFpB;AAGHH,UAAAA,OAAO,EAAE,EAHN;AAIHK,UAAAA,SAAS,EAAE;AAJR,SAAP;AAMH;;AAED,SAAKR,OAAO,CAACmB,WAAb;AAA0B;AACtB,eAAO,EACH,GAAGT,KADA;AAEHL,UAAAA,cAAc,EAAEJ,MAAM,CAACmB;AAFpB,SAAP;AAIH;;AAED,SAAKpB,OAAO,CAACqB,gBAAb;AAA+B;AAC3B,eAAO,EACH,GAAGX,KADA;AAEHL,UAAAA,cAAc,EAAEJ,MAAM,CAACqB,IAFpB;AAGHnB,UAAAA,OAAO,EAAE,EAHN;AAIHK,UAAAA,SAAS,EAAE;AAJR,SAAP;AAMH;AAED;;AACA,SAAKR,OAAO,CAACuB,UAAb;AAAyB;AACrB,YAAGb,KAAK,CAACL,cAAN,KAAyBJ,MAAM,CAACmB,SAAnC,EAA6C;AACzC,iBAAOV,KAAP;AACH;;AAED,cAAMc,aAAa,GAAGd,KAAK,CAACF,SAA5B;AACAgB,QAAAA,aAAa,CAACC,IAAd,CAAmB;AACfV,UAAAA,EAAE,EAAEJ,MAAM,CAACe,KAAP,CAAaX,EADF;AAEfY,UAAAA,WAAW,EAAEhB,MAAM,CAACgB,WAFL;AAGfC,UAAAA,IAAI,EAAE;AAHS,SAAnB;AAKA,eAAO,EACH,GAAGlB,KADA;AAEHF,UAAAA,SAAS,EAAEgB;AAFR,SAAP;AAIH;;AAED,SAAKxB,OAAO,CAAC6B,WAAb;AAAyB;AACrB,YAAGnB,KAAK,CAACL,cAAN,KAAyBJ,MAAM,CAACmB,SAAnC,EAA6C;AACzC,iBAAOV,KAAP;AACH;;AACD,cAAMc,aAAa,GAAGd,KAAK,CAACF,SAAN,CAAgBsB,KAAhB,GAAwBC,OAAxB,CAAgCC,GAAhC,CAAqCN,KAAK,IAAI;AAChE,cAAGA,KAAK,CAACC,WAAN,KAAsBhB,MAAM,CAACgB,WAAhC,EAA4C;AACxCD,YAAAA,KAAK,CAACE,IAAN,GAAa,IAAIZ,IAAJ,GAAWC,OAAX,KAAuBP,KAAK,CAACH,SAA1C;AACH;;AACD,iBAAOmB,KAAP;AACH,SALqB,CAAtB;AAMA,eAAO,EACH,GAAGhB,KADA;AAEHF,UAAAA,SAAS,EAAEgB;AAFR,SAAP;AAIH;;AAED,SAAKxB,OAAO,CAACiC,mBAAb;AAAiC;AAC7B,YAAGvB,KAAK,CAACL,cAAN,KAAyBJ,MAAM,CAACmB,SAAnC,EAA6C;AACzC,iBAAOV,KAAP;AACH;AACJ;;AAED;AAAS,aAAOA,KAAP;AA5Eb;AA8EH","sourcesContent":["import { ACTIONS } from \"./../../../actions\";\r\nimport STATES from \"./stateDef\";\r\n\r\nconst initState = {\r\n    recName: \"\",\r\n    recId: null,\r\n    recordingState: STATES.IDLE,\r\n    startTime: null,\r\n    tracklist: [],\r\n}\r\n\r\nexport default function headerState(state = initState, action) {\r\n    switch (action.type) {\r\n        case ACTIONS.R_START_RECORDING: {\r\n            return {\r\n                ...state,\r\n                recordingState: STATES.INIT,\r\n                recName: action.recName,\r\n                recId: action.id,\r\n                startTime: new Date().getTime(),\r\n            }\r\n        }\r\n\r\n        case ACTIONS.R_END_RECORDING: {\r\n            return {\r\n                ...state,\r\n                recordingState: STATES.IDLE,\r\n                recName: \"\",\r\n                tracklist: []\r\n            }\r\n        }\r\n\r\n        case ACTIONS.R_RECORDING: {\r\n            return {\r\n                ...state,\r\n                recordingState: STATES.RECORDING,\r\n            }\r\n        }\r\n\r\n        case ACTIONS.R_RECORDING_FAIL: {\r\n            return {\r\n                ...state,\r\n                recordingState: STATES.FAIL,\r\n                recName: \"\",\r\n                tracklist: []\r\n            }\r\n        }\r\n\r\n        //------------\r\n        case ACTIONS.LOAD_TRACK: {\r\n            if(state.recordingState !== STATES.RECORDING){\r\n                return state;\r\n            }\r\n\r\n            const nextTracklist = state.tracklist;\r\n            nextTracklist.push({\r\n                id: action.track.id,\r\n                destination: action.destination,\r\n                time: null\r\n            })\r\n            return {\r\n                ...state,\r\n                tracklist: nextTracklist\r\n            }\r\n        }\r\n\r\n        case ACTIONS.TOGGLE_PLAY:{\r\n            if(state.recordingState !== STATES.RECORDING){\r\n                return state;\r\n            }\r\n            const nextTracklist = state.tracklist.slice().reverse.map( track => {\r\n                if(track.destination === action.destination){\r\n                    track.time = new Date().getTime() - state.startTime;\r\n                }\r\n                return track;\r\n            });\r\n            return {\r\n                ...state,\r\n                tracklist: nextTracklist\r\n            }\r\n        }\r\n\r\n        case ACTIONS.CANCEL_CUE_AND_PLAY:{\r\n            if(state.recordingState !== STATES.RECORDING){\r\n                return state;\r\n            }\r\n        }\r\n\r\n        default: return state;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}