{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\src\\\\pages\\\\common\\\\components\\\\Logger\\\\Logger.js\";\nimport { faTimesCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport classNames from \"classnames\";\nimport React, { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { Button, Col, Container, Row } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { LOG_TYPES } from \"./../../../../utils/logger/logger\";\nimport \"./logger.scss\";\n\nconst Logger = ({\n  log\n}) => {\n  const [hidden, setHidden] = useState(true);\n  useEffect(() => {\n    if (!log) {\n      return;\n    }\n\n    setHidden(false);\n  }, [log]);\n  const createHeader = useCallback((text, className = \"\") => {\n    return React.createElement(\"h6\", {\n      className: \"logger-header \" + className,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, text);\n  }, []);\n  const header = useMemo(() => {\n    switch (log.type) {\n      case LOG_TYPES.ERROR:\n        {\n          return createHeader(\"Error:\", \"logger-header-error\");\n        }\n\n      case LOG_TYPES.WARNING:\n        {\n          return createHeader(\"Warning:\", \"logger-header-warning\");\n        }\n\n      case LOG_TYPES.DEBUG:\n        {\n          return createHeader(\"Debug:\", \"logger-header-debug\");\n        }\n\n      case LOG_TYPES.LOG:\n        {\n          return createHeader(\"Logger:\");\n        }\n\n      default:\n        return null;\n    }\n  }, [log, createHeader]);\n  const content = useMemo(() => {\n    switch (log.type) {\n      case LOG_TYPES.DEBUG:\n        {\n          return React.createElement(\"pre\", {\n            className: \"logger-message logger-pre\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 48\n            },\n            __self: this\n          }, log.message);\n        }\n\n      default:\n        return React.createElement(\"p\", {\n          className: \"logger-message\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 54\n          },\n          __self: this\n        }, log.message);\n    }\n  }, [log]);\n  const path = useMemo(() => {\n    if (!log.path) {\n      return null;\n    }\n\n    return React.createElement(\"ul\", {\n      className: \"logger-path\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, log.path && log.path.length && log.path.map((part, index) => React.createElement(\"li\", {\n      key: part + index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, \" \", part, \" \")));\n  }, [log]);\n  const loggerClasses = useMemo(() => {\n    return classNames('logger', {\n      'logger--hidden': hidden\n    });\n  }, [hidden]);\n  return React.createElement(Container, {\n    className: \"app layout container-xl\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, React.createElement(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, React.createElement(Col, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: loggerClasses,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, React.createElement(Button, {\n    className: \"btn-close\",\n    onClick: setHidden.bind(null, true),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, React.createElement(FontAwesomeIcon, {\n    icon: faTimesCircle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  })), header, content, path))));\n};\n\nconst mapStateToProps = state => ({\n  log: state.logger.last || {}\n});\n\nexport default connect(mapStateToProps)(Logger);","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/pages/common/components/Logger/Logger.js"],"names":["faTimesCircle","FontAwesomeIcon","classNames","React","useCallback","useEffect","useMemo","useState","Button","Col","Container","Row","connect","LOG_TYPES","Logger","log","hidden","setHidden","createHeader","text","className","header","type","ERROR","WARNING","DEBUG","LOG","content","message","path","length","map","part","index","loggerClasses","bind","mapStateToProps","state","logger","last"],"mappings":"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","sourcesContent":["import { faTimesCircle } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport classNames from \"classnames\";\r\nimport React, { useCallback, useEffect, useMemo, useState } from \"react\";\r\nimport { Button, Col, Container, Row } from \"react-bootstrap\";\r\nimport { connect } from \"react-redux\";\r\nimport { LOG_TYPES } from \"./../../../../utils/logger/logger\";\r\nimport \"./logger.scss\";\r\n\r\n\r\n\r\nconst Logger = ({ log }) => {\r\n    const [hidden, setHidden] = useState(true);\r\n\r\n    useEffect(()=>{\r\n        if(!log){\r\n            return;\r\n        }\r\n        setHidden(false);\r\n    },[log])\r\n\r\n    const createHeader = useCallback((text, className = \"\") => {\r\n        return <h6 className={\"logger-header \" + className}>{text}</h6>\r\n    }, []);\r\n\r\n    const header = useMemo(()=>{\r\n        switch(log.type){\r\n            case LOG_TYPES.ERROR : {\r\n                return createHeader(\"Error:\", \"logger-header-error\");\r\n            }\r\n            case LOG_TYPES.WARNING: {\r\n                return createHeader(\"Warning:\", \"logger-header-warning\")\r\n            }\r\n            case LOG_TYPES.DEBUG: {\r\n                return createHeader(\"Debug:\", \"logger-header-debug\");\r\n            }\r\n            case LOG_TYPES.LOG : {\r\n                return createHeader(\"Logger:\");\r\n            }\r\n            default: return null;\r\n        }\r\n    }, [log, createHeader])\r\n\r\n    const content = useMemo(()=>{\r\n        switch(log.type){\r\n            case LOG_TYPES.DEBUG: {\r\n                return (\r\n                    <pre className=\"logger-message logger-pre\">\r\n                        {log.message}\r\n                    </pre>\r\n                )\r\n            }\r\n            default: return (\r\n                <p className=\"logger-message\">\r\n                    {log.message}\r\n                </p>\r\n            )\r\n        }\r\n    }, [log])\r\n\r\n    const path = useMemo(()=>{\r\n        if(!log.path){\r\n            return null;\r\n        }\r\n        return (\r\n            <ul className=\"logger-path\">\r\n                {log.path && log.path.length && log.path.map( (part , index) => \r\n                    <li key={part + index} > {part} </li>\r\n                )}\r\n            </ul>\r\n        )\r\n    }, [log])\r\n  \r\n    const loggerClasses = useMemo(()=>{\r\n        return classNames(\r\n            'logger',\r\n            {'logger--hidden': hidden}\r\n        )\r\n    }, [hidden])\r\n    \r\n    return (\r\n        <Container className=\"app layout container-xl\" >\r\n            <Row><Col>\r\n                <div className={loggerClasses}>\r\n                    <Button className=\"btn-close\" onClick={setHidden.bind(null, true)}>\r\n                        <FontAwesomeIcon icon={faTimesCircle}/>\r\n                    </Button>\r\n                    {header}\r\n                    {content}\r\n                    {path}\r\n                </div>\r\n            </Col></Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    log: state.logger.last || {},\r\n})\r\n\r\nexport default connect(mapStateToProps)(Logger);"]},"metadata":{},"sourceType":"module"}