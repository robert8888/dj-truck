{"ast":null,"code":"import store from \"./../../../../../../store\";\nimport { recording, recordingRquestFail, recordFinalUpdate, roolbackRecord } from \"./../../../../../../actions\";\nimport STATUS from \"./../../observer/STATUS\";\nimport io from \"socket.io-client\";\nimport { getApi } from \"./../../../../../../apis/apiProvider\";\nimport { Logger, Log } from \"./../../../../../../utils/logger/logger\";\nexport default class Recorder {\n  constructor(mixer) {\n    this.mixer = mixer;\n    const streamDestination = this.mixer.audioNodes.channels['main'].recorderStremDestination;\n    this.mediaRecorder = new MediaRecorder(streamDestination.stream, {\n      mimeType: 'audio/webm;codecs=opus'\n    });\n    const api = getApi(\"RecordsStore\");\n    this.wsUrl = api.getSocketUrl();\n    this.currentRec = Recorder.initRecState();\n    this.peaksUpdateIntervalHandle = null;\n    this.peaksUpdateIntervalTime = 100; //ms\n\n    this.peaksBoundary = {\n      min: 1000,\n      max: 2000\n    };\n  }\n\n  action(status, param) {\n    switch (status) {\n      case STATUS.RECORD_START:\n        {\n          this.startRecording(param);\n          break;\n        }\n\n      case STATUS.RECORD_END:\n        {\n          this.endRecording();\n          break;\n        }\n\n      default:\n        return;\n    }\n  }\n\n  startRecording({\n    recId,\n    recName\n  }) {\n    const token = store.getState().user.token;\n\n    if (!token) {\n      Logger.push(Log.Error({\n        private: \"Attempt to start recordin not' authorized user\",\n        path: ['pages', 'console', 'core', 'mixxer', 'recorder', 'startRecording']\n      }));\n      return;\n    }\n\n    if (this.mediaRecorder.state === \"recording\") {\n      Logger.push(Log.Error({\n        private: \"Attempt to start recordin during active recording\",\n        path: ['pages', 'console', 'core', 'mixxer', 'recorder', 'startRecording']\n      }));\n      return;\n    }\n\n    const socket = io.connect(this.wsUrl);\n    socket.on(\"connect\", () => {\n      socket.emit('authentication', {\n        token: token\n      });\n      socket.on('authenticated', () => {\n        socket.emit(\"record_details\", {\n          recId,\n          recName\n        });\n      });\n      socket.on('recorder_ready', () => {\n        this.currentRec.id = recId;\n        this.currentRec.title = recName;\n\n        this.mediaRecorder.ondataavailable = e => {\n          socket.emit('record_chunk', e.data);\n        };\n\n        this.mediaRecorder.addEventListener('stop', () => {\n          socket.emit('record_stop');\n        });\n        this.mediaRecorder.start(1000);\n        this.currentRec.duration = new Date().getTime();\n        this.peaksUpdateIntervalHandle = setInterval(this.updatePeaks.bind(this), 100);\n        store.dispatch(recording());\n      });\n      socket.on('connect_error', () => {\n        store.dispatch(recordingRquestFail());\n      });\n      socket.on('recording_finished', ({\n        fileSize\n      }) => {\n        this.currentRec.fileSize = fileSize;\n        const {\n          id,\n          duration,\n          peaks\n        } = this.currentRec;\n        this.updateRecord({\n          id,\n          duration,\n          fileSize,\n          peaks\n        });\n        socket.close();\n      });\n      socket.on(\"recording_error\", () => {\n        store.dispatch(roolbackRecord(this.currentRec.id));\n      });\n    });\n  }\n\n  endRecording() {\n    if (this.mediaRecorder.state === \"inactive\") {\n      return;\n    }\n\n    clearInterval(this.peaksUpdateIntervalHandle);\n    this.mediaRecorder.stop();\n    this.currentRec.duration = new Date().getTime() - this.currentRec.duration;\n  }\n\n  updatePeaks() {\n    try {\n      const len = this.currentRec.peaks.length;\n      this.currentRec.peaks[len] = this.mixer.currentPeakMinMax[0];\n      this.currentRec.peaks[len + 1] = this.mixer.currentPeakMinMax[1];\n\n      if (this.currentRec.peaks.length > this.peaksBoundary.max) {\n        this.currentRec.peaks = this.reducePeaks(this.currentRec.peaks);\n        clearInterval(this.peaksUpdateIntervalHandle);\n        this.peaksUpdateIntervalTime *= 2;\n        this.peaksUpdateIntervalHandle(this.updatePeaks.bind(this), this.peaksUpdateIntervalTime);\n      }\n    } catch (error) {\n      Logger.push(Log.Error({\n        private: \"Error durign updating record peaks, Can't udpate record waveform\",\n        path: ['pages', 'console', 'core', 'mixxer', 'recorder', 'updatePeaks'],\n        error\n      }));\n    }\n  }\n\n  updateRecord(data) {\n    const {\n      id,\n      peaks,\n      duration,\n      fileSize\n    } = data;\n    store.dispatch(recordFinalUpdate(id, peaks, duration, fileSize));\n    this.currentRec = Recorder.initRecState();\n  }\n\n  reducePeaks(input, boundary = this.peaksBoundary) {\n    let output = [];\n    const targetBoundary = boundary || {\n      min: 1000,\n      max: 2000\n    };\n    const inputSize = input.length;\n\n    if (inputSize < targetBoundary.min) {\n      return input;\n    }\n\n    const ratio = Math.floor(inputSize / targetBoundary.max);\n    const outputSize = Math.ceil(inputSize / ratio);\n\n    for (let i = 0; i < outputSize / 2; i++) {\n      output[2 * i] = input[2 * (i * ratio)];\n      output[2 * i + 1] = input[2 * (i * ratio) + 1];\n    }\n\n    return output;\n  }\n\n}\n\nRecorder.initRecState = () => ({\n  id: null,\n  title: \"\",\n  peaks: [],\n  duration: 0\n});","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/pages/console/core/console/mixer/recorder/recorder.js"],"names":["store","recording","recordingRquestFail","recordFinalUpdate","roolbackRecord","STATUS","io","getApi","Logger","Log","Recorder","constructor","mixer","streamDestination","audioNodes","channels","recorderStremDestination","mediaRecorder","MediaRecorder","stream","mimeType","api","wsUrl","getSocketUrl","currentRec","initRecState","peaksUpdateIntervalHandle","peaksUpdateIntervalTime","peaksBoundary","min","max","action","status","param","RECORD_START","startRecording","RECORD_END","endRecording","recId","recName","token","getState","user","push","Error","private","path","state","socket","connect","on","emit","id","title","ondataavailable","e","data","addEventListener","start","duration","Date","getTime","setInterval","updatePeaks","bind","dispatch","fileSize","peaks","updateRecord","close","clearInterval","stop","len","length","currentPeakMinMax","reducePeaks","error","input","boundary","output","targetBoundary","inputSize","ratio","Math","floor","outputSize","ceil","i"],"mappings":"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","sourcesContent":["import store from \"./../../../../../../store\";\r\nimport { recording, recordingRquestFail, recordFinalUpdate, roolbackRecord } from \"./../../../../../../actions\"\r\nimport STATUS from \"./../../observer/STATUS\";\r\nimport io from \"socket.io-client\";\r\nimport { getApi } from \"./../../../../../../apis/apiProvider\";\r\nimport { Logger, Log } from \"./../../../../../../utils/logger/logger\";\r\n\r\n\r\nexport default class Recorder {\r\n    static initRecState = () => ({\r\n        id: null,\r\n        title: \"\",\r\n        peaks: [],\r\n        duration: 0,\r\n    })\r\n\r\n    constructor(mixer) {\r\n        this.mixer = mixer;\r\n\r\n        const streamDestination = this.mixer.audioNodes.channels['main'].recorderStremDestination;\r\n        this.mediaRecorder = new MediaRecorder(streamDestination.stream, {\r\n            mimeType: 'audio/webm;codecs=opus',\r\n        });\r\n\r\n        const api = getApi(\"RecordsStore\");\r\n        this.wsUrl = api.getSocketUrl();\r\n\r\n        this.currentRec = Recorder.initRecState();\r\n\r\n\r\n        this.peaksUpdateIntervalHandle = null;\r\n        this.peaksUpdateIntervalTime = 100; //ms\r\n        this.peaksBoundary = {\r\n            min: 1000,\r\n            max: 2000,\r\n        }\r\n    }\r\n\r\n\r\n    action(status, param) {\r\n        switch (status) {\r\n            case STATUS.RECORD_START: {\r\n                this.startRecording(param);\r\n                break;\r\n            }\r\n            case STATUS.RECORD_END: {\r\n                this.endRecording()\r\n                break;\r\n            }\r\n            default: return;\r\n        }\r\n    }\r\n\r\n    startRecording({ recId, recName }) {\r\n        const token = store.getState().user.token;\r\n        if (!token) {\r\n            Logger.push(Log.Error(\r\n                {\r\n                    private: \"Attempt to start recordin not' authorized user\",\r\n                    path: ['pages', 'console', 'core', 'mixxer', 'recorder', 'startRecording']\r\n                }))\r\n            return;\r\n        }\r\n        if (this.mediaRecorder.state === \"recording\") {\r\n            Logger.push(Log.Error(\r\n                {\r\n                    private: \"Attempt to start recordin during active recording\",\r\n                    path: ['pages', 'console', 'core', 'mixxer', 'recorder', 'startRecording']\r\n                }))\r\n            return;\r\n        }\r\n\r\n        const socket = io.connect(this.wsUrl);\r\n\r\n        socket.on(\"connect\", () => {\r\n            socket.emit('authentication', { token: token });\r\n            socket.on('authenticated', () => {\r\n                socket.emit(\"record_details\", { recId, recName })\r\n            })\r\n            socket.on('recorder_ready', () => {\r\n                this.currentRec.id = recId;\r\n                this.currentRec.title = recName;\r\n\r\n                this.mediaRecorder.ondataavailable = (e) => {\r\n                    socket.emit('record_chunk', e.data)\r\n                }\r\n\r\n                this.mediaRecorder.addEventListener('stop', () => {\r\n                    socket.emit('record_stop')\r\n                })\r\n\r\n                this.mediaRecorder.start(1000);\r\n\r\n                this.currentRec.duration = new Date().getTime();\r\n\r\n                this.peaksUpdateIntervalHandle = setInterval(this.updatePeaks.bind(this), 100);\r\n\r\n                store.dispatch(recording());\r\n            });\r\n\r\n            socket.on('connect_error', () => {\r\n                store.dispatch(recordingRquestFail())\r\n            })\r\n\r\n            socket.on('recording_finished', ({ fileSize }) => {\r\n                this.currentRec.fileSize = fileSize;\r\n                const { id, duration, peaks } = this.currentRec;\r\n                this.updateRecord({\r\n                    id, duration, fileSize, peaks\r\n                })\r\n                socket.close();\r\n            })\r\n\r\n            socket.on(\"recording_error\", () => {\r\n                store.dispatch(roolbackRecord(this.currentRec.id))\r\n            })\r\n        })\r\n    }\r\n\r\n    endRecording() {\r\n        if(this.mediaRecorder.state === \"inactive\"){\r\n            return;\r\n        }\r\n\r\n        clearInterval(this.peaksUpdateIntervalHandle);\r\n        this.mediaRecorder.stop();\r\n        this.currentRec.duration = new Date().getTime() - this.currentRec.duration;\r\n    }\r\n\r\n    updatePeaks() {\r\n        try {\r\n            const len = this.currentRec.peaks.length;\r\n            this.currentRec.peaks[len] = this.mixer.currentPeakMinMax[0];\r\n            this.currentRec.peaks[len + 1] = this.mixer.currentPeakMinMax[1];\r\n            if (this.currentRec.peaks.length > this.peaksBoundary.max) {\r\n                this.currentRec.peaks = this.reducePeaks(this.currentRec.peaks)\r\n                clearInterval(this.peaksUpdateIntervalHandle);\r\n                this.peaksUpdateIntervalTime *= 2;\r\n                this.peaksUpdateIntervalHandle(this.updatePeaks.bind(this), this.peaksUpdateIntervalTime);\r\n            }\r\n        } catch(error){\r\n            Logger.push(Log.Error(\r\n                {\r\n                    private: \"Error durign updating record peaks, Can't udpate record waveform\",\r\n                    path: ['pages', 'console', 'core', 'mixxer', 'recorder', 'updatePeaks'],\r\n                    error\r\n                }))\r\n        }\r\n    }\r\n\r\n    updateRecord(data) {\r\n        const { id, peaks, duration, fileSize } = data;\r\n        store.dispatch(recordFinalUpdate(\r\n            id, peaks, duration, fileSize\r\n        ))\r\n        this.currentRec = Recorder.initRecState();\r\n    }\r\n\r\n    reducePeaks(input, boundary = this.peaksBoundary) {\r\n        let output = [];\r\n        const targetBoundary = boundary || {\r\n            min: 1000,\r\n            max: 2000,\r\n        }\r\n\r\n        const inputSize = input.length;\r\n\r\n        if (inputSize < targetBoundary.min) {\r\n            return input;\r\n        }\r\n\r\n        const ratio = Math.floor(inputSize / targetBoundary.max);\r\n        const outputSize = Math.ceil(inputSize / ratio);\r\n\r\n        for (let i = 0; i < outputSize / 2; i++) {\r\n            output[2 * i] = input[2 * (i * ratio)];\r\n            output[2 * i + 1] = input[(2 * (i * ratio)) + 1];\r\n\r\n        }\r\n        return output;\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}