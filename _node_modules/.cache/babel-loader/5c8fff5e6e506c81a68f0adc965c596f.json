{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\src\\\\pages\\\\common\\\\components\\\\RecordComments\\\\Comment\\\\Comment.js\";\nimport React, { Fragment, useCallback, useMemo, useRef, useState } from \"react\";\nimport { Button, Form } from \"react-bootstrap\";\nimport useAutoHeightTextarea from \"../../../Hooks/useAutoHeightTextarea\";\nimport useEmoticons from \"../../../Hooks/useEmoticons\";\nimport { useFormatRelative } from \"./../../../Hooks/useFormatDate\";\nimport IconBar from \"./../../IconBar/IconBar\";\nimport \"./comment.scss\";\n\nconst CommentContent = ({\n  header,\n  text,\n  date: timestamp,\n  editable,\n  onChange,\n  onDelete = () => null,\n  creationMode\n}) => {\n  const content = useRef();\n  const [editMode, setEditMode] = useState(false);\n  const [autoHeight] = useAutoHeightTextarea();\n  const [emotiControl, Emoticons] = useEmoticons();\n  const [formatRelative] = useFormatRelative();\n  const dateFormated = useMemo(() => {\n    if (!timestamp) return \"\";\n    return formatRelative(timestamp, {\n      timezone: true\n    });\n  }, [timestamp, formatRelative]);\n  const setContentRef = useCallback(ref => {\n    content.current = ref;\n    emotiControl.current = ref;\n\n    if (text && content.current) {\n      content.current.value = text;\n    }\n\n    if (!creationMode) {\n      autoHeight(ref);\n    }\n  }, [text, content, autoHeight, creationMode, emotiControl]); // const onBlur = useCallback(() => {\n  //      (content.current.value === \"\") ? setEditMode(false) : setEditMode(true);\n  // }, [content, setEditMode])\n\n  const onSubmit = useCallback(e => {\n    e.preventDefault();\n    if (!onChange) return;\n    setEditMode(false);\n    onChange(content.current.value);\n\n    if (creationMode) {\n      content.current.value = \"\";\n    }\n  }, [content, onChange, setEditMode, creationMode]);\n  return React.createElement(Form, {\n    onSubmit: onSubmit,\n    onFocus: setEditMode.bind(null, true) // onBlur={onBlur}\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, React.createElement(Form.Group, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, React.createElement(\"header\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, React.createElement(Form.Label, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, header), React.createElement(\"aside\", {\n    className: editable ? \"editable\" : \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"comment-publish-date\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, \" \", dateFormated), editable && !creationMode && React.createElement(IconBar, {\n    items: {\n      edit: setEditMode.bind(null, true),\n      delete: onDelete.bind(null)\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }))), React.createElement(Form.Control, {\n    className: \"record-comments-control\",\n    type: \"textarea\",\n    as: \"textarea\",\n    name: \"comment-conntent\",\n    disabled: !editMode && !creationMode,\n    ref: setContentRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }), editMode && React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, React.createElement(Button, {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, \"Post\"), React.createElement(Emoticons, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }))));\n};\n\nexport default CommentContent;","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/pages/common/components/RecordComments/Comment/Comment.js"],"names":["React","Fragment","useCallback","useMemo","useRef","useState","Button","Form","useAutoHeightTextarea","useEmoticons","useFormatRelative","IconBar","CommentContent","header","text","date","timestamp","editable","onChange","onDelete","creationMode","content","editMode","setEditMode","autoHeight","emotiControl","Emoticons","formatRelative","dateFormated","timezone","setContentRef","ref","current","value","onSubmit","e","preventDefault","bind","edit","delete"],"mappings":"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","sourcesContent":["import React, { Fragment, useCallback, useMemo, useRef, useState } from \"react\";\r\nimport { Button, Form } from \"react-bootstrap\";\r\nimport useAutoHeightTextarea from \"../../../Hooks/useAutoHeightTextarea\";\r\nimport useEmoticons from \"../../../Hooks/useEmoticons\";\r\nimport { useFormatRelative } from \"./../../../Hooks/useFormatDate\";\r\nimport IconBar from \"./../../IconBar/IconBar\";\r\nimport \"./comment.scss\";\r\n\r\nconst CommentContent = ({\r\n    header,\r\n    text,\r\n    date: timestamp,\r\n    editable,\r\n    onChange,\r\n    onDelete = () => null,\r\n    creationMode }) => {\r\n\r\n    const content = useRef();\r\n    const [editMode, setEditMode] = useState(false);\r\n\r\n    const [autoHeight] = useAutoHeightTextarea();\r\n    const [emotiControl, Emoticons] = useEmoticons();\r\n\r\n    const [formatRelative] = useFormatRelative();\r\n    const dateFormated = useMemo(() => {\r\n        if (!timestamp) return \"\";\r\n        return formatRelative(timestamp, { timezone: true })\r\n    }, [timestamp, formatRelative])\r\n\r\n\r\n\r\n\r\n    const setContentRef = useCallback(ref => {\r\n        content.current = ref;\r\n        emotiControl.current = ref;\r\n\r\n        if (text && content.current) {\r\n            content.current.value = text;\r\n        }\r\n        if(!creationMode){\r\n            autoHeight(ref)\r\n        }\r\n    }, [text, content, autoHeight, creationMode, emotiControl])\r\n\r\n\r\n    // const onBlur = useCallback(() => {\r\n    //      (content.current.value === \"\") ? setEditMode(false) : setEditMode(true);\r\n    // }, [content, setEditMode])\r\n\r\n\r\n    const onSubmit = useCallback((e) => {\r\n        e.preventDefault();\r\n        if (!onChange) return;\r\n        setEditMode(false)\r\n        onChange(content.current.value)\r\n        if (creationMode) {\r\n            content.current.value = \"\";\r\n        }\r\n    }, [content, onChange, setEditMode, creationMode])\r\n\r\n    return (\r\n        <Form onSubmit={onSubmit}\r\n            onFocus={setEditMode.bind(null, true)}\r\n            // onBlur={onBlur}\r\n            >\r\n            <Form.Group>\r\n                <header>\r\n                    <Form.Label>\r\n                        {header}\r\n                    </Form.Label>\r\n                    <aside className={(editable ? \"editable\" : \"\")}>\r\n                        <span className='comment-publish-date'> {dateFormated}</span>\r\n                        {editable && !creationMode &&\r\n                            <IconBar items={{\r\n                                edit: setEditMode.bind(null, true),\r\n                                delete: onDelete.bind(null)\r\n                            }}\r\n                            />}\r\n                    </aside>\r\n                </header>\r\n\r\n                <Form.Control\r\n                    className=\"record-comments-control\"\r\n                    type=\"textarea\"\r\n                    as=\"textarea\"\r\n                    name=\"comment-conntent\"\r\n                    disabled={!editMode && !creationMode}\r\n                    ref = {setContentRef} />\r\n                {editMode && (\r\n                    <Fragment>\r\n                        <Button type=\"submit\">Post</Button>\r\n                        <Emoticons />\r\n                    </Fragment>\r\n                )}\r\n            </Form.Group>\r\n\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default CommentContent;"]},"metadata":{},"sourceType":"module"}