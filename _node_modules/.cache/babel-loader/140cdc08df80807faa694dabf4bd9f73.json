{"ast":null,"code":"import { pushTrackToList, ACTIONS, startCalcBpm } from \"../../actions\";\nimport { takeEvery, select, put, call } from \"redux-saga/effects\";\nimport { getApi } from \"./../../apis/apiProvider\"; // import createTrackQuery from \"./../../qlQueries/createTrack\";\n\nimport { generateTemplateName as generateName, findClosesDir } from \"./../../reducers/console/playlist/utils\";\nimport { get } from \"lodash/object\";\nimport { handle as createNewPlaylist } from \"./createPlaylistRequestSaga\";\nimport UUID from \"uuidjs\";\nimport foramter, { formater } from \"./../../utils/time/timeFromater\";\nexport default function* pushTrackToListSaga() {\n  yield takeEvery(ACTIONS.PL_PUSH_TRACK_REQUEST, handle);\n}\n\nconst getToken = state => state.user.token;\n\nconst getPlaylistPath = state => state.playList.currentPlaylist;\n\nconst getCurrent = (state, path) => get(state.playList, state.playList.currentPlaylist);\n\nfunction* handle(action) {\n  const {\n    callQuery,\n    queries\n  } = getApi(\"UserAssets\");\n  const token = yield select(getToken);\n\n  if (!token) {\n    action.track.id = UUID.genV1().toString();\n    yield put(pushTrackToList(action.track, action.playlist));\n    yield put(startCalcBpm(action.track, action.playlist));\n    return;\n  }\n\n  try {\n    const currentPlaylist = yield select(getCurrent);\n    let playlistId = currentPlaylist._id;\n    let playlistLength = currentPlaylist._content.length;\n\n    if (!playlistId) {\n      playlistId = yield call(createNewPlaylist, {\n        setCurrent: true,\n        renameMode: false\n      });\n      playlistLength = 0;\n    }\n\n    const result = yield callQuery(queries.createTrackQl, token, {\n      playlist: playlistId,\n      title: action.track.title,\n      source: action.track.source,\n      sourceId: action.track.sourceId,\n      quality: action.track.quality,\n      duration: typeof action.track.duration === \"string\" ? formater.ytToSeconds(action.track.duration) : action.track.duration,\n      thumbnails: action.track.thumbnails,\n      position: playlistLength\n    });\n\n    if (!result.errors) {\n      const trackId = result.data.createTrack.id;\n      yield put(pushTrackToList({ ...action.track,\n        id: trackId\n      }, action.playlist));\n      const currentPlaylistPath = yield select(getPlaylistPath);\n      action.track.id = trackId;\n      yield put(startCalcBpm(action.track, currentPlaylistPath));\n    } else {\n      throw new Error(JSON.stringify(result.errors));\n    }\n  } catch (err) {\n    console.log(\"Can't push track to playlist in database\");\n    console.log(err.message);\n  }\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/sagas/playlists/pushTrackToListRequestSaga.js"],"names":["pushTrackToList","ACTIONS","startCalcBpm","takeEvery","select","put","call","getApi","generateTemplateName","generateName","findClosesDir","get","handle","createNewPlaylist","UUID","foramter","formater","pushTrackToListSaga","PL_PUSH_TRACK_REQUEST","getToken","state","user","token","getPlaylistPath","playList","currentPlaylist","getCurrent","path","action","callQuery","queries","track","id","genV1","toString","playlist","playlistId","_id","playlistLength","_content","length","setCurrent","renameMode","result","createTrackQl","title","source","sourceId","quality","duration","ytToSeconds","thumbnails","position","errors","trackId","data","createTrack","currentPlaylistPath","Error","JSON","stringify","err","console","log","message"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,OAA1B,EAAmCC,YAAnC,QAAuD,eAAvD;AACA,SAASC,SAAT,EAAoBC,MAApB,EAA4BC,GAA5B,EAAiCC,IAAjC,QAA6C,oBAA7C;AACA,SAASC,MAAT,QAAuB,0BAAvB,C,CACA;;AACA,SAASC,oBAAoB,IAAIC,YAAjC,EAA+CC,aAA/C,QAAoE,yCAApE;AACA,SAASC,GAAT,QAAoB,eAApB;AACA,SAASC,MAAM,IAAIC,iBAAnB,QAA4C,6BAA5C;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,QAAP,IAAmBC,QAAnB,QAAmC,iCAAnC;AAEA,eAAe,UAAUC,mBAAV,GAAgC;AAC3C,QAAMd,SAAS,CAACF,OAAO,CAACiB,qBAAT,EAAgCN,MAAhC,CAAf;AACH;;AAED,MAAMO,QAAQ,GAAGC,KAAK,IAAIA,KAAK,CAACC,IAAN,CAAWC,KAArC;;AAEA,MAAMC,eAAe,GAAGH,KAAK,IAAIA,KAAK,CAACI,QAAN,CAAeC,eAAhD;;AAEA,MAAMC,UAAU,GAAG,CAACN,KAAD,EAAQO,IAAR,KAAiBhB,GAAG,CAACS,KAAK,CAACI,QAAP,EAAiBJ,KAAK,CAACI,QAAN,CAAeC,eAAhC,CAAvC;;AAEA,UAAUb,MAAV,CAAiBgB,MAAjB,EAAyB;AACrB,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA;AAAb,MAAyBvB,MAAM,CAAC,YAAD,CAArC;AACA,QAAMe,KAAK,GAAG,MAAMlB,MAAM,CAACe,QAAD,CAA1B;;AACA,MAAI,CAACG,KAAL,EAAY;AACRM,IAAAA,MAAM,CAACG,KAAP,CAAaC,EAAb,GAAkBlB,IAAI,CAACmB,KAAL,GAAaC,QAAb,EAAlB;AACA,UAAM7B,GAAG,CAACL,eAAe,CAAC4B,MAAM,CAACG,KAAR,EAAeH,MAAM,CAACO,QAAtB,CAAhB,CAAT;AACA,UAAM9B,GAAG,CAACH,YAAY,CAAC0B,MAAM,CAACG,KAAR,EAAeH,MAAM,CAACO,QAAtB,CAAb,CAAT;AACA;AACH;;AAED,MAAI;AACA,UAAMV,eAAe,GAAG,MAAMrB,MAAM,CAACsB,UAAD,CAApC;AACA,QAAIU,UAAU,GAAGX,eAAe,CAACY,GAAjC;AACA,QAAIC,cAAc,GAAGb,eAAe,CAACc,QAAhB,CAAyBC,MAA9C;;AAEA,QAAI,CAACJ,UAAL,EAAiB;AACbA,MAAAA,UAAU,GAAG,MAAM9B,IAAI,CAACO,iBAAD,EAAoB;AAAE4B,QAAAA,UAAU,EAAE,IAAd;AAAoBC,QAAAA,UAAU,EAAE;AAAhC,OAApB,CAAvB;AACAJ,MAAAA,cAAc,GAAG,CAAjB;AACH;;AAED,UAAMK,MAAM,GAAG,MAAMd,SAAS,CAACC,OAAO,CAACc,aAAT,EAAwBtB,KAAxB,EAA+B;AACzDa,MAAAA,QAAQ,EAAEC,UAD+C;AAEzDS,MAAAA,KAAK,EAAEjB,MAAM,CAACG,KAAP,CAAac,KAFqC;AAGzDC,MAAAA,MAAM,EAAElB,MAAM,CAACG,KAAP,CAAae,MAHoC;AAIzDC,MAAAA,QAAQ,EAAEnB,MAAM,CAACG,KAAP,CAAagB,QAJkC;AAKzDC,MAAAA,OAAO,EAAEpB,MAAM,CAACG,KAAP,CAAaiB,OALmC;AAMzDC,MAAAA,QAAQ,EAAG,OAAOrB,MAAM,CAACG,KAAP,CAAakB,QAApB,KAAiC,QAAlC,GACNjC,QAAQ,CAACkC,WAAT,CAAqBtB,MAAM,CAACG,KAAP,CAAakB,QAAlC,CADM,GAENrB,MAAM,CAACG,KAAP,CAAakB,QARwC;AASzDE,MAAAA,UAAU,EAAEvB,MAAM,CAACG,KAAP,CAAaoB,UATgC;AAUzDC,MAAAA,QAAQ,EAAEd;AAV+C,KAA/B,CAA9B;;AAaA,QAAI,CAACK,MAAM,CAACU,MAAZ,EAAoB;AAChB,YAAMC,OAAO,GAAGX,MAAM,CAACY,IAAP,CAAYC,WAAZ,CAAwBxB,EAAxC;AACA,YAAM3B,GAAG,CAACL,eAAe,CAAC,EACtB,GAAG4B,MAAM,CAACG,KADY;AAEtBC,QAAAA,EAAE,EAAEsB;AAFkB,OAAD,EAGtB1B,MAAM,CAACO,QAHe,CAAhB,CAAT;AAKA,YAAMsB,mBAAmB,GAAG,MAAMrD,MAAM,CAACmB,eAAD,CAAxC;AACAK,MAAAA,MAAM,CAACG,KAAP,CAAaC,EAAb,GAAkBsB,OAAlB;AACA,YAAMjD,GAAG,CAACH,YAAY,CAAC0B,MAAM,CAACG,KAAR,EAAe0B,mBAAf,CAAb,CAAT;AAEH,KAXD,MAWO;AACH,YAAM,IAAIC,KAAJ,CAAUC,IAAI,CAACC,SAAL,CAAejB,MAAM,CAACU,MAAtB,CAAV,CAAN;AACH;AACJ,GArCD,CAqCE,OAAOQ,GAAP,EAAY;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAY,0CAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,OAAhB;AACH;AACJ","sourcesContent":["import { pushTrackToList, ACTIONS, startCalcBpm } from \"../../actions\";\r\nimport { takeEvery, select, put, call } from \"redux-saga/effects\"\r\nimport { getApi } from \"./../../apis/apiProvider\";\r\n// import createTrackQuery from \"./../../qlQueries/createTrack\";\r\nimport { generateTemplateName as generateName, findClosesDir } from \"./../../reducers/console/playlist/utils\";\r\nimport { get } from \"lodash/object\";\r\nimport { handle as createNewPlaylist } from \"./createPlaylistRequestSaga\";\r\nimport UUID from \"uuidjs\";\r\nimport foramter, { formater } from \"./../../utils/time/timeFromater\";\r\n\r\nexport default function* pushTrackToListSaga() {\r\n    yield takeEvery(ACTIONS.PL_PUSH_TRACK_REQUEST, handle)\r\n}\r\n\r\nconst getToken = state => state.user.token;\r\n\r\nconst getPlaylistPath = state => state.playList.currentPlaylist;\r\n\r\nconst getCurrent = (state, path) => get(state.playList, state.playList.currentPlaylist);\r\n\r\nfunction* handle(action) {\r\n    const { callQuery, queries } = getApi(\"UserAssets\");\r\n    const token = yield select(getToken);\r\n    if (!token) {\r\n        action.track.id = UUID.genV1().toString();\r\n        yield put(pushTrackToList(action.track, action.playlist));\r\n        yield put(startCalcBpm(action.track, action.playlist));\r\n        return;\r\n    }\r\n\r\n    try {\r\n        const currentPlaylist = yield select(getCurrent);\r\n        let playlistId = currentPlaylist._id;\r\n        let playlistLength = currentPlaylist._content.length;\r\n\r\n        if (!playlistId) {\r\n            playlistId = yield call(createNewPlaylist, { setCurrent: true, renameMode: false });\r\n            playlistLength = 0;\r\n        }\r\n\r\n        const result = yield callQuery(queries.createTrackQl, token, {\r\n            playlist: playlistId,\r\n            title: action.track.title,\r\n            source: action.track.source,\r\n            sourceId: action.track.sourceId,\r\n            quality: action.track.quality,\r\n            duration: (typeof action.track.duration === \"string\") ?\r\n                formater.ytToSeconds(action.track.duration) :\r\n                action.track.duration,\r\n            thumbnails: action.track.thumbnails,\r\n            position: playlistLength,\r\n        });\r\n\r\n        if (!result.errors) {\r\n            const trackId = result.data.createTrack.id;\r\n            yield put(pushTrackToList({\r\n                ...action.track,\r\n                id: trackId\r\n            }, action.playlist));\r\n\r\n            const currentPlaylistPath = yield select(getPlaylistPath);\r\n            action.track.id = trackId;\r\n            yield put(startCalcBpm(action.track, currentPlaylistPath));\r\n\r\n        } else {\r\n            throw new Error(JSON.stringify(result.errors))\r\n        }\r\n    } catch (err) {\r\n        console.log(\"Can't push track to playlist in database\");\r\n        console.log(err.message);\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}