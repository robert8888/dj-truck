{"ast":null,"code":"import { createDir, ACTIONS } from \"../../actions\";\nimport { takeEvery, select, put } from \"redux-saga/effects\";\nimport { getApi } from \"./../../apis/apiProvider\";\nimport query from \"./../../qlQueries/createDir\";\nimport { generateTemplateName, findClosesDir } from \"./../../reducers/console/playlist/utils\";\nimport { get } from \"lodash/object\";\nexport default function* createDirRequestSaga() {\n  yield takeEvery(ACTIONS.PL_CREATE_DIR_REQEST, callApi);\n}\n\nconst getToken = state => state.user.token;\n\nconst getCurrentSelection = state => state.playList.currentSelection;\n\nconst getParentPath = (state, currentSelection) => findClosesDir(state, currentSelection);\n\nconst generateDirName = (state, parrentPath) => generateTemplateName(state.playList, parrentPath, \"New folder\");\n\nconst getParrentId = (state, path) => get(state.playList, path)._id;\n\nfunction* callApi(action) {\n  const {\n    callQuery\n  } = getApi(\"UserAssets\");\n  const token = yield select(getToken);\n  const currentSelection = yield select(getCurrentSelection);\n  const parrentPath = yield select(getParentPath, currentSelection);\n  let dirName = action.name;\n\n  if (!dirName) {\n    dirName = yield select(generateDirName, parrentPath);\n  }\n\n  const parrentId = yield select(getParrentId, parrentPath);\n  let result = yield callQuery(query(parrentId, dirName), token);\n  const id = result.data.createDir.id;\n  const renameMode = true;\n  yield put(createDir(dirName, id, renameMode));\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/sagas/playlists/createDirRequestSaga.js"],"names":["createDir","ACTIONS","takeEvery","select","put","getApi","query","generateTemplateName","findClosesDir","get","createDirRequestSaga","PL_CREATE_DIR_REQEST","callApi","getToken","state","user","token","getCurrentSelection","playList","currentSelection","getParentPath","generateDirName","parrentPath","getParrentId","path","_id","action","callQuery","dirName","name","parrentId","result","id","data","renameMode"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,OAApB,QAAmC,eAAnC;AACA,SAASC,SAAT,EAAoBC,MAApB,EAA4BC,GAA5B,QAAuC,oBAAvC;AACA,SAASC,MAAT,QAAuB,0BAAvB;AACA,OAAOC,KAAP,MAAkB,6BAAlB;AACA,SAASC,oBAAT,EAA+BC,aAA/B,QAAoD,yCAApD;AACA,SAASC,GAAT,QAAoB,eAApB;AACA,eAAe,UAAUC,oBAAV,GAAiC;AAC5C,QAAMR,SAAS,CAACD,OAAO,CAACU,oBAAT,EAA+BC,OAA/B,CAAf;AACH;;AAED,MAAMC,QAAQ,GAAGC,KAAK,IAAIA,KAAK,CAACC,IAAN,CAAWC,KAArC;;AAEA,MAAMC,mBAAmB,GAAGH,KAAK,IAAIA,KAAK,CAACI,QAAN,CAAeC,gBAApD;;AAEA,MAAMC,aAAa,GAAG,CAACN,KAAD,EAAQK,gBAAR,KAClBX,aAAa,CAACM,KAAD,EAAQK,gBAAR,CADjB;;AAGA,MAAME,eAAe,GAAG,CAACP,KAAD,EAAQQ,WAAR,KACpBf,oBAAoB,CAACO,KAAK,CAACI,QAAP,EAAiBI,WAAjB,EAA8B,YAA9B,CADxB;;AAGA,MAAMC,YAAY,GAAG,CAACT,KAAD,EAAQU,IAAR,KAAiBf,GAAG,CAACK,KAAK,CAACI,QAAP,EAAiBM,IAAjB,CAAH,CAA0BC,GAAhE;;AAIA,UAAUb,OAAV,CAAkBc,MAAlB,EAA0B;AACtB,QAAM;AAAEC,IAAAA;AAAF,MAAgBtB,MAAM,CAAC,YAAD,CAA5B;AACA,QAAMW,KAAK,GAAG,MAAMb,MAAM,CAACU,QAAD,CAA1B;AACA,QAAMM,gBAAgB,GAAG,MAAMhB,MAAM,CAACc,mBAAD,CAArC;AACA,QAAMK,WAAW,GAAG,MAAMnB,MAAM,CAACiB,aAAD,EAAgBD,gBAAhB,CAAhC;AACA,MAAIS,OAAO,GAAGF,MAAM,CAACG,IAArB;;AACA,MAAG,CAACD,OAAJ,EAAY;AACRA,IAAAA,OAAO,GAAG,MAAMzB,MAAM,CAACkB,eAAD,EAAkBC,WAAlB,CAAtB;AACH;;AACD,QAAMQ,SAAS,GAAG,MAAM3B,MAAM,CAACoB,YAAD,EAAeD,WAAf,CAA9B;AAEA,MAAIS,MAAM,GAAG,MAAMJ,SAAS,CAACrB,KAAK,CAACwB,SAAD,EAAYF,OAAZ,CAAN,EAA4BZ,KAA5B,CAA5B;AACA,QAAMgB,EAAE,GAAGD,MAAM,CAACE,IAAP,CAAYjC,SAAZ,CAAsBgC,EAAjC;AAEA,QAAME,UAAU,GAAG,IAAnB;AACA,QAAM9B,GAAG,CAACJ,SAAS,CAAC4B,OAAD,EAAUI,EAAV,EAAcE,UAAd,CAAV,CAAT;AACH","sourcesContent":["import { createDir, ACTIONS } from \"../../actions\";\r\nimport { takeEvery, select, put } from \"redux-saga/effects\"\r\nimport { getApi } from \"./../../apis/apiProvider\";\r\nimport query from \"./../../qlQueries/createDir\";\r\nimport { generateTemplateName, findClosesDir } from \"./../../reducers/console/playlist/utils\";\r\nimport { get } from \"lodash/object\";\r\nexport default function* createDirRequestSaga() {\r\n    yield takeEvery(ACTIONS.PL_CREATE_DIR_REQEST, callApi)\r\n}\r\n\r\nconst getToken = state => state.user.token;\r\n\r\nconst getCurrentSelection = state => state.playList.currentSelection;\r\n\r\nconst getParentPath = (state, currentSelection) =>\r\n    findClosesDir(state, currentSelection)\r\n\r\nconst generateDirName = (state, parrentPath) => \r\n    generateTemplateName(state.playList, parrentPath, \"New folder\");\r\n\r\nconst getParrentId = (state, path) => get(state.playList, path)._id;\r\n\r\n\r\n\r\nfunction* callApi(action) {\r\n    const { callQuery } = getApi(\"UserAssets\");\r\n    const token = yield select(getToken);\r\n    const currentSelection = yield select(getCurrentSelection);\r\n    const parrentPath = yield select(getParentPath, currentSelection);\r\n    let dirName = action.name;\r\n    if(!dirName){\r\n        dirName = yield select(generateDirName, parrentPath);\r\n    } \r\n    const parrentId = yield select(getParrentId, parrentPath);\r\n\r\n    let result = yield callQuery(query(parrentId, dirName), token);\r\n    const id = result.data.createDir.id;\r\n\r\n    const renameMode = true;\r\n    yield put(createDir(dirName, id, renameMode));\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}