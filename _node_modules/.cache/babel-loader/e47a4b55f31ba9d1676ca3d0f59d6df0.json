{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\src\\\\pages\\\\common\\\\components\\\\UserProfile\\\\Edit\\\\Edit.js\";\nimport { faPen } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport classNames from \"classnames\";\nimport React, { useCallback, useMemo, useState } from \"react\";\nimport { Button, Form } from \"react-bootstrap\";\nimport \"./edit.scss\";\n\nconst Edit = ({\n  active,\n  type,\n  children,\n  onChange = ifEmpty => null\n}) => {\n  const [editMode, setEditMode] = useState(false);\n  const buttonClasses = useMemo(() => classNames('edit-btn', {\n    \"edit-btn--active\": active,\n    \"edit-btn-before\": type.startsWith(\"text\"),\n    \"edit-btn-over\": type === \"image\"\n  }), [active, type]);\n  const catchBtnRef = useCallback(ref => {\n    if (!ref) {\n      return;\n    }\n\n    ref.parentElement.classList.add(\"relative\");\n  }, []); //onsole.log(\"chioldren\", children)\n\n  const content = useMemo(() => {\n    if (!editMode) {\n      return children;\n    } else {\n      switch (type) {\n        case \"image\":\n          {\n            return React.createElement(React.Fragment, null, React.createElement(\"input\", {\n              type: \"file\",\n              accept: \"image/png, image/jpeg\",\n              style: {\n                display: \"none\"\n              },\n              ref: ref => ref && ref.click(),\n              onChange: event => {\n                const file = event.target.files[0];\n                onChange(file);\n                setEditMode(false);\n              },\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 37\n              },\n              __self: this\n            }), React.createElement(\"button\", {\n              className: buttonClasses,\n              ref: catchBtnRef,\n              onClick: setEditMode.bind(null, edit => !edit),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 47\n              },\n              __self: this\n            }, React.createElement(FontAwesomeIcon, {\n              icon: faPen,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 51\n              },\n              __self: this\n            })), children);\n          }\n\n        case \"text\":\n          return React.createElement(Form.Control, {\n            type: type,\n            className: \"edit-text-control\",\n            defaultValue: children.props.children,\n            onKeyDown: e => {\n              if (e.key !== \"Enter\") {\n                return;\n              }\n\n              onChange(e.target.value);\n              setEditMode(false);\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 59\n            },\n            __self: this\n          });\n\n        case \"textarea\":\n          let input;\n          return React.createElement(React.Fragment, null, React.createElement(Form.Control, {\n            type: type,\n            as: \"textarea\",\n            className: \"edit-text-control\",\n            defaultValue: children.props.children,\n            ref: ref => input = ref,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 75\n            },\n            __self: this\n          }), React.createElement(Button, {\n            className: \"edit-btn-save\",\n            onClick: () => {\n              setEditMode(false);\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 81\n            },\n            __self: this\n          }, \"Cancel\"), React.createElement(Button, {\n            className: \"edit-btn-save\",\n            onClick: () => {\n              onChange(input.value);\n              setEditMode(false);\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 87\n            },\n            __self: this\n          }, \"Save\"));\n\n        default:\n          return null;\n      }\n    }\n  }, [children, editMode, onChange, setEditMode, buttonClasses, catchBtnRef, type]);\n  return React.createElement(React.Fragment, null, active && !editMode && React.createElement(\"button\", {\n    className: buttonClasses,\n    ref: catchBtnRef,\n    onClick: setEditMode.bind(null, edit => !edit),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, React.createElement(FontAwesomeIcon, {\n    icon: faPen,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  })), content);\n};\n\nexport default Edit;","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/pages/common/components/UserProfile/Edit/Edit.js"],"names":["faPen","FontAwesomeIcon","classNames","React","useCallback","useMemo","useState","Button","Form","Edit","active","type","children","onChange","ifEmpty","editMode","setEditMode","buttonClasses","startsWith","catchBtnRef","ref","parentElement","classList","add","content","display","click","event","file","target","files","bind","edit","props","e","key","value","input"],"mappings":"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","sourcesContent":["import { faPen } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport classNames from \"classnames\";\r\nimport React, { useCallback, useMemo, useState } from \"react\";\r\nimport { Button, Form } from \"react-bootstrap\";\r\nimport \"./edit.scss\";\r\n\r\nconst Edit = ({ active, type, children, onChange = ifEmpty => null }) => {\r\n    const [editMode, setEditMode] = useState(false);\r\n\r\n    const buttonClasses = useMemo(() => classNames(\r\n        'edit-btn',\r\n        {\r\n            \"edit-btn--active\": active,\r\n            \"edit-btn-before\": (type.startsWith(\"text\")),\r\n            \"edit-btn-over\": (type === \"image\"),\r\n        }\r\n    ), [active, type])\r\n\r\n    const catchBtnRef = useCallback((ref) => {\r\n        if (!ref) {\r\n            return;\r\n        }\r\n\r\n        ref.parentElement.classList.add(\"relative\");\r\n    }, [])\r\n    //onsole.log(\"chioldren\", children)\r\n\r\n    const content = useMemo(() => {\r\n        if (!editMode) {\r\n            return children;\r\n        } else {\r\n            switch (type) {\r\n                case \"image\": {\r\n                    return (\r\n                        <>\r\n                            <input\r\n                                type=\"file\"\r\n                                accept=\"image/png, image/jpeg\"\r\n                                style={{ display: \"none\" }}\r\n                                ref={ref => ref && ref.click()}\r\n                                onChange={event => {\r\n                                    const file = event.target.files[0];\r\n                                    onChange(file);\r\n                                    setEditMode(false)\r\n                                }}/>\r\n                            <button\r\n                                className={buttonClasses}\r\n                                ref={catchBtnRef}\r\n                                onClick={setEditMode.bind(null, edit => !edit)}>\r\n                                <FontAwesomeIcon icon={faPen} />\r\n                            </button>\r\n                            {children}\r\n                        </>\r\n                    )\r\n                }\r\n\r\n                case \"text\": return (\r\n                    <Form.Control\r\n                        type={type}\r\n                        className=\"edit-text-control\"\r\n                        defaultValue={children.props.children}\r\n                        onKeyDown={e => {\r\n                            if (e.key !== \"Enter\") {\r\n                                return;\r\n                            }\r\n                            onChange(e.target.value);\r\n                            setEditMode(false)\r\n                        }} />\r\n                )\r\n                case \"textarea\":\r\n                    let input;\r\n                    return (\r\n                        <>\r\n                            <Form.Control\r\n                                type={type}\r\n                                as=\"textarea\"\r\n                                className=\"edit-text-control\"\r\n                                defaultValue={children.props.children}\r\n                                ref={ref => input = ref} />\r\n                            <Button className={\"edit-btn-save\"} \r\n                                onClick={() => {\r\n                                    setEditMode(false)}\r\n                                }>\r\n                                    Cancel\r\n                            </Button>\r\n                            <Button className={\"edit-btn-save\"} \r\n                                onClick={() => {\r\n                                    onChange(input.value);\r\n                                    setEditMode(false)}\r\n                                }>\r\n                                    Save\r\n                            </Button>\r\n                        </>\r\n                    )\r\n                default: return null;\r\n\r\n            }\r\n\r\n        }\r\n    }, [\r\n        children, \r\n        editMode, \r\n        onChange, \r\n        setEditMode,\r\n        buttonClasses,\r\n        catchBtnRef,\r\n        type\r\n    ])\r\n\r\n    return (\r\n        <>\r\n            {active && !editMode &&\r\n                <button\r\n                    className={buttonClasses}\r\n                    ref={catchBtnRef}\r\n                    onClick={setEditMode.bind(null, edit => !edit)}>\r\n                    <FontAwesomeIcon icon={faPen} />\r\n                </button>\r\n            }\r\n            {content}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Edit;"]},"metadata":{},"sourceType":"module"}