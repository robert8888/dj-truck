{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJEKTY\\\\APKI\\\\DjTruck\\\\djtruck\\\\src\\\\pages\\\\app\\\\components\\\\PlayListExplorer\\\\Explorer\\\\ExplorerTree\\\\ExplorerTree.js\";\nimport React, { useCallback, Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport \"./explorer-tree.scss\";\nimport { isEmpty } from \"./../../../../../../utils/objects/helpers\";\nimport UUID from \"uuidjs\";\n\nconst ExplorerTree = props => {\n  const getDirElement = useCallback((name, path, open) => {\n    return React.createElement(\"li\", {\n      \"data-path\": path.join(\"/\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11\n      },\n      __self: this\n    }, name);\n  });\n  const getFileElement = useCallback((name, path) => {\n    return React.createElement(\"li\", {\n      \"data-path\": path.join(\"/\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    }, name);\n  });\n  console.log(props.root);\n\n  const renderDirElements = (name, content, path) => {\n    switch (typeof content) {\n      case \"object\":\n        {\n          if (content._open === true) {\n            return React.createElement(Fragment, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 32\n              },\n              __self: this\n            }, getDirElement(name, path, true), renderDir(content, path.push(name)));\n          } else {\n            return getDirElement(name, path, false);\n          }\n\n          break;\n        }\n\n      case \"array\":\n        {\n          return getFileElement(name, path);\n          break;\n        }\n    }\n  };\n\n  const renderDir = (dir, path) => {\n    return Object.entries(dir).map(([name, content]) => {\n      if (name === \"_open\") {\n        return null;\n      }\n\n      return React.createElement(\"ul\", {\n        className: \"dir-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, renderDirElements(name, content, path));\n    });\n  };\n\n  return React.createElement(\"div\", {\n    className: \"explorer-tree\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, renderDir(props.root, ['root']));\n};\n\nconst mapStateToProps = state => ({\n  root: state.playList.root\n});\n\nexport default connect(mapStateToProps)(ExplorerTree);","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/pages/app/components/PlayListExplorer/Explorer/ExplorerTree/ExplorerTree.js"],"names":["React","useCallback","Fragment","connect","isEmpty","UUID","ExplorerTree","props","getDirElement","name","path","open","join","getFileElement","console","log","root","renderDirElements","content","_open","renderDir","push","dir","Object","entries","map","mapStateToProps","state","playList"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,QAA7B,QAA6C,OAA7C;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAO,sBAAP;AACA,SAASC,OAAT,QAAwB,2CAAxB;AACA,OAAOC,IAAP,MAAiB,QAAjB;;AAEA,MAAMC,YAAY,GAAGC,KAAK,IAAI;AAE1B,QAAMC,aAAa,GAAGP,WAAW,CAAC,CAACQ,IAAD,EAAOC,IAAP,EAAaC,IAAb,KAAsB;AACpD,WACQ;AACI,mBAAWD,IAAI,CAACE,IAAL,CAAU,GAAV,CADf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAESH,IAFT,CADR;AAMH,GAPgC,CAAjC;AAQA,QAAMI,cAAc,GAAGZ,WAAW,CAAC,CAACQ,IAAD,EAAOC,IAAP,KAAgB;AAC/C,WACI;AACI,mBAAWA,IAAI,CAACE,IAAL,CAAU,GAAV,CADf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAESH,IAFT,CADJ;AAMH,GAPiC,CAAlC;AAQAK,EAAAA,OAAO,CAACC,GAAR,CAAYR,KAAK,CAACS,IAAlB;;AAEA,QAAMC,iBAAiB,GAAG,CAACR,IAAD,EAAOS,OAAP,EAAgBR,IAAhB,KAAyB;AAC/C,YAAQ,OAAOQ,OAAf;AACI,WAAK,QAAL;AAAe;AACX,cAAIA,OAAO,CAACC,KAAR,KAAkB,IAAtB,EAA4B;AACxB,mBACI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eACKX,aAAa,CAACC,IAAD,EAAOC,IAAP,EAAa,IAAb,CADlB,EAEKU,SAAS,CAACF,OAAD,EAAUR,IAAI,CAACW,IAAL,CAAUZ,IAAV,CAAV,CAFd,CADJ;AAMH,WAPD,MAOO;AACH,mBAAOD,aAAa,CAACC,IAAD,EAAOC,IAAP,EAAa,KAAb,CAApB;AACH;;AACD;AACH;;AACD,WAAK,OAAL;AAAc;AACL,iBAAOG,cAAc,CAACJ,IAAD,EAAOC,IAAP,CAArB;AACL;AACH;AAjBL;AAmBH,GApBD;;AAsBA,QAAMU,SAAS,GAAG,CAACE,GAAD,EAAMZ,IAAN,KAAe;AAC7B,WAAOa,MAAM,CAACC,OAAP,CAAeF,GAAf,EAAoBG,GAApB,CAAwB,CAAC,CAAChB,IAAD,EAAOS,OAAP,CAAD,KAAqB;AAChD,UAAIT,IAAI,KAAK,OAAb,EAAsB;AAClB,eAAO,IAAP;AACH;;AACD,aACI;AAAI,QAAA,SAAS,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACMQ,iBAAiB,CAACR,IAAD,EAAOS,OAAP,EAAgBR,IAAhB,CADvB,CADJ;AAKH,KATM,CAAP;AAUH,GAXD;;AAaA,SACI;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKU,SAAS,CAACb,KAAK,CAACS,IAAP,EAAa,CAAC,MAAD,CAAb,CADd,CADJ;AAKH,CA5DD;;AA8DA,MAAMU,eAAe,GAAGC,KAAK,KAAK;AAC9BX,EAAAA,IAAI,EAAEW,KAAK,CAACC,QAAN,CAAeZ;AADS,CAAL,CAA7B;;AAIA,eAAeb,OAAO,CAACuB,eAAD,CAAP,CAAyBpB,YAAzB,CAAf","sourcesContent":["import React, { useCallback, Fragment } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport \"./explorer-tree.scss\";\r\nimport { isEmpty } from \"./../../../../../../utils/objects/helpers\";\r\nimport UUID from \"uuidjs\";\r\n\r\nconst ExplorerTree = props => {\r\n\r\n    const getDirElement = useCallback((name, path, open) => {\r\n        return (\r\n                <li \r\n                    data-path={path.join(\"/\")}>\r\n                        {name}\r\n                </li>\r\n            )\r\n    })\r\n    const getFileElement = useCallback((name, path) => {\r\n        return (\r\n            <li \r\n                data-path={path.join(\"/\")}>\r\n                    {name}\r\n            </li>\r\n        );\r\n    })\r\n    console.log(props.root)\r\n\r\n    const renderDirElements = (name, content, path) => {\r\n        switch (typeof content) {\r\n            case \"object\": {\r\n                if (content._open === true) {\r\n                    return (\r\n                        <Fragment>\r\n                            {getDirElement(name, path, true)}\r\n                            {renderDir(content, path.push(name))}\r\n                        </Fragment>\r\n                    )\r\n                } else {\r\n                    return getDirElement(name, path, false)\r\n                }\r\n                break;\r\n            }\r\n            case \"array\": {\r\n                     return getFileElement(name, path)\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    const renderDir = (dir, path) => {\r\n        return Object.entries(dir).map(([name, content]) => {\r\n            if (name === \"_open\") {\r\n                return null;\r\n            }\r\n            return (\r\n                <ul className=\"dir-content\">\r\n                    { renderDirElements(name, content, path) }\r\n                </ul>\r\n            )\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"explorer-tree\">\r\n            {renderDir(props.root, ['root'])}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    root: state.playList.root,\r\n})\r\n\r\nexport default connect(mapStateToProps)(ExplorerTree);"]},"metadata":{},"sourceType":"module"}