{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJEKTY\\\\APKI\\\\DjTruck\\\\djtruck\\\\src\\\\components\\\\Mixer\\\\Channel\\\\PeakLevelMeter\\\\PeakLevelMeter.js\";\nimport React from \"react\";\nimport Console from \"./../../../../core/console/console\";\nimport \"./peak-level-meter.scss\";\nconst zero = 10000;\n\nclass PeakLevelMater extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      ledStates: new Array(16).fill(false),\n      mixerChannelInterface: Console.Get().getMixerChannelInterface(this.props.name)\n    };\n  }\n\n  componentDidMount() {\n    let updateLedStates = () => {\n      console.log(this.state.ledStates.length);\n      let nextLedState = new Array(this.state.ledStates.length).fill(false);\n      let frequnecySum = this.state.mixerChannelInterface.getFrequnecySum();\n      let ledOn = zero / frequnecySum * this.state.ledStates.length;\n\n      for (let i = 0; i < ledOn && i < this.state.ledStates.length; i++) {\n        nextLedState[i] = true;\n      }\n\n      this.setState({ ...this.state,\n        ledState: nextLedState\n      });\n      requestAnimationFrame(updateLedStates);\n    };\n\n    updateLedStates();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"peak-level-meter\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, this.state.ledStates.map((ledState, index) => {\n      return React.createElement(\"div\", {\n        key: index,\n        className: \"level-meter-led led-\" + index + (ledState ? \" led-on\" : \" led-off\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      });\n    }));\n  }\n\n}\n\nexport default PeakLevelMater;","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/components/Mixer/Channel/PeakLevelMeter/PeakLevelMeter.js"],"names":["React","Console","zero","PeakLevelMater","Component","state","ledStates","Array","fill","mixerChannelInterface","Get","getMixerChannelInterface","props","name","componentDidMount","updateLedStates","console","log","length","nextLedState","frequnecySum","getFrequnecySum","ledOn","i","setState","ledState","requestAnimationFrame","render","map","index"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,oCAApB;AACA,OAAO,yBAAP;AAEA,MAAMC,IAAI,GAAG,KAAb;;AAEA,MAAMC,cAAN,SAA6BH,KAAK,CAACI,SAAnC,CAA4C;AAAA;AAAA;AAAA,SAExCC,KAFwC,GAEhC;AACJC,MAAAA,SAAS,EAAI,IAAIC,KAAJ,CAAU,EAAV,CAAD,CAAgBC,IAAhB,CAAqB,KAArB,CADR;AAEJC,MAAAA,qBAAqB,EAAGR,OAAO,CAACS,GAAR,GAAcC,wBAAd,CAAuC,KAAKC,KAAL,CAAWC,IAAlD;AAFpB,KAFgC;AAAA;;AAQxCC,EAAAA,iBAAiB,GAAE;AACf,QAAIC,eAAe,GAAG,MAAK;AACvBC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKZ,KAAL,CAAWC,SAAX,CAAqBY,MAAjC;AACD,UAAIC,YAAY,GAAI,IAAIZ,KAAJ,CAAU,KAAKF,KAAL,CAAWC,SAAX,CAAqBY,MAA/B,CAAD,CAAyCV,IAAzC,CAA8C,KAA9C,CAAnB;AAEC,UAAIY,YAAY,GAAG,KAAKf,KAAL,CAAWI,qBAAX,CAAiCY,eAAjC,EAAnB;AACA,UAAIC,KAAK,GAAIpB,IAAI,GAAGkB,YAAR,GAAyB,KAAKf,KAAL,CAAWC,SAAX,CAAqBY,MAA1D;;AACA,WAAI,IAAIK,CAAC,GAAG,CAAZ,EAAiBA,CAAC,GAAGD,KAAJ,IAAaC,CAAC,GAAG,KAAKlB,KAAL,CAAWC,SAAX,CAAqBY,MAAvD,EAAgEK,CAAC,EAAjE,EAAqE;AACjEJ,QAAAA,YAAY,CAACI,CAAD,CAAZ,GAAkB,IAAlB;AACH;;AACD,WAAKC,QAAL,CAAc,EAAC,GAAG,KAAKnB,KAAT;AAAgBoB,QAAAA,QAAQ,EAAGN;AAA3B,OAAd;AACAO,MAAAA,qBAAqB,CAACX,eAAD,CAArB;AACH,KAXD;;AAaAA,IAAAA,eAAe;AAClB;;AAEDY,EAAAA,MAAM,GAAE;AACJ,WACI;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACM,KAAKtB,KAAL,CAAWC,SAAX,CAAqBsB,GAArB,CAAyB,CAACH,QAAD,EAAWI,KAAX,KAAmB;AACzC,aAAQ;AAAK,QAAA,GAAG,EAAEA,KAAV;AAAiB,QAAA,SAAS,EAAE,yBAAwBA,KAAxB,IAAkCJ,QAAD,GAAa,SAAb,GAAyB,UAA1D,CAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAR;AACJ,KAFC,CADN,CADJ;AAOH;;AAjCuC;;AAqC5C,eAAetB,cAAf","sourcesContent":["import React from \"react\"\r\nimport Console from \"./../../../../core/console/console\";\r\nimport \"./peak-level-meter.scss\";\r\n\r\nconst zero = 10000;\r\n\r\nclass PeakLevelMater extends React.Component{\r\n\r\n    state = {\r\n        ledStates : (new Array(16)).fill(false),\r\n        mixerChannelInterface : Console.Get().getMixerChannelInterface(this.props.name),\r\n\r\n    }\r\n\r\n    componentDidMount(){\r\n        let updateLedStates = () =>{\r\n            console.log(this.state.ledStates.length)\r\n           let nextLedState = (new Array(this.state.ledStates.length)).fill(false);\r\n\r\n            let frequnecySum = this.state.mixerChannelInterface.getFrequnecySum();\r\n            let ledOn = (zero / frequnecySum ) * this.state.ledStates.length;\r\n            for(let i = 0 ; (i < ledOn && i < this.state.ledStates.length); i++) {\r\n                nextLedState[i] = true;\r\n            }\r\n            this.setState({...this.state, ledState : nextLedState})\r\n            requestAnimationFrame(updateLedStates);\r\n        }\r\n        \r\n        updateLedStates();\r\n    }\r\n    \r\n    render(){\r\n        return (\r\n            <div className=\"peak-level-meter\">\r\n                { this.state.ledStates.map((ledState, index)=>{\r\n                     return (<div key={index} className={\"level-meter-led led-\"+ index + ((ledState) ? \" led-on\" : \" led-off\") }/>)\r\n                })}\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default PeakLevelMater;"]},"metadata":{},"sourceType":"module"}