{"ast":null,"code":"import { put, select, takeEvery } from \"redux-saga/effects\";\nimport { ACTIONS, pushLog, setRecData } from \"../../actions\";\nimport { getApi } from \"./../../apis/apiProvider\";\nimport { Log } from \"./../../utils/logger/logger\";\nexport default function* requestUserRecord() {\n  yield takeEvery(ACTIONS.RECS_REQ_DATA, handel);\n}\n\nconst getToken = state => state.user.token;\n\nfunction* handel(action) {\n  const token = yield select(getToken);\n\n  try {\n    var _result$data;\n\n    const {\n      callQuery,\n      queries\n    } = getApi(\"UserAssets\");\n    const query = queries.recordQl(action.recId);\n    const result = yield callQuery(query, token);\n    const recordData = result === null || result === void 0 ? void 0 : (_result$data = result.data) === null || _result$data === void 0 ? void 0 : _result$data.record;\n\n    if (!result.errors && recordData) {\n      yield put(setRecData(recordData));\n    } else {\n      throw new Error(\"Can't load record data from database\");\n    }\n\n    yield put(pushLog(new Log(`Record successfully downloaded from database record id : ${action.recId}`)));\n  } catch (error) {\n    yield pushLog(Log.Error(['saga', 'record', 'request record'], \"Can't load record from database\", error));\n  }\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/sagas/records/reqRecord.js"],"names":["put","select","takeEvery","ACTIONS","pushLog","setRecData","getApi","Log","requestUserRecord","RECS_REQ_DATA","handel","getToken","state","user","token","action","callQuery","queries","query","recordQl","recId","result","recordData","data","record","errors","Error","error"],"mappings":"AAAA,SAASA,GAAT,EAAcC,MAAd,EAAsBC,SAAtB,QAAuC,oBAAvC;AACA,SAASC,OAAT,EAAkBC,OAAlB,EAA2BC,UAA3B,QAA6C,eAA7C;AACA,SAASC,MAAT,QAAuB,0BAAvB;AACA,SAASC,GAAT,QAAoB,6BAApB;AAEA,eAAe,UAAUC,iBAAV,GAA8B;AAEzC,QAAMN,SAAS,CAACC,OAAO,CAACM,aAAT,EAAwBC,MAAxB,CAAf;AACH;;AAED,MAAMC,QAAQ,GAAGC,KAAK,IAAIA,KAAK,CAACC,IAAN,CAAWC,KAArC;;AAEA,UAAUJ,MAAV,CAAiBK,MAAjB,EAAyB;AACrB,QAAMD,KAAK,GAAG,MAAMb,MAAM,CAACU,QAAD,CAA1B;;AAEA,MAAI;AAAA;;AACA,UAAM;AAAEK,MAAAA,SAAF;AAAaC,MAAAA;AAAb,QAAyBX,MAAM,CAAC,YAAD,CAArC;AAEA,UAAMY,KAAK,GAAGD,OAAO,CAACE,QAAR,CAAiBJ,MAAM,CAACK,KAAxB,CAAd;AACA,UAAMC,MAAM,GAAG,MAAML,SAAS,CAACE,KAAD,EAAQJ,KAAR,CAA9B;AACA,UAAMQ,UAAU,GAAGD,MAAH,aAAGA,MAAH,uCAAGA,MAAM,CAAEE,IAAX,iDAAG,aAAcC,MAAjC;;AAEA,QAAI,CAACH,MAAM,CAACI,MAAR,IAAkBH,UAAtB,EAAkC;AAC9B,YAAMtB,GAAG,CAACK,UAAU,CAACiB,UAAD,CAAX,CAAT;AACH,KAFD,MAEO;AACH,YAAM,IAAII,KAAJ,CAAU,sCAAV,CAAN;AACH;;AAED,UAAM1B,GAAG,CAACI,OAAO,CAAC,IAAIG,GAAJ,CAAS,4DAA2DQ,MAAM,CAACK,KAAM,EAAjF,CAAD,CAAR,CAAT;AACH,GAdD,CAcE,OAAOO,KAAP,EAAc;AACZ,UAAMvB,OAAO,CAACG,GAAG,CAACmB,KAAJ,CACV,CAAC,MAAD,EAAS,QAAT,EAAmB,gBAAnB,CADU,EAEV,iCAFU,EAGVC,KAHU,CAAD,CAAb;AAKH;AACJ","sourcesContent":["import { put, select, takeEvery } from \"redux-saga/effects\";\r\nimport { ACTIONS, pushLog, setRecData } from \"../../actions\";\r\nimport { getApi } from \"./../../apis/apiProvider\";\r\nimport { Log } from \"./../../utils/logger/logger\";\r\n\r\nexport default function* requestUserRecord() {\r\n\r\n    yield takeEvery(ACTIONS.RECS_REQ_DATA, handel)\r\n}\r\n\r\nconst getToken = state => state.user.token\r\n\r\nfunction* handel(action) {\r\n    const token = yield select(getToken);\r\n\r\n    try {\r\n        const { callQuery, queries } = getApi(\"UserAssets\");\r\n\r\n        const query = queries.recordQl(action.recId);\r\n        const result = yield callQuery(query, token);\r\n        const recordData = result?.data?.record;\r\n        \r\n        if (!result.errors && recordData) {\r\n            yield put(setRecData(recordData))\r\n        } else {\r\n            throw new Error(\"Can't load record data from database\")\r\n        }\r\n\r\n        yield put(pushLog(new Log(`Record successfully downloaded from database record id : ${action.recId}`)))\r\n    } catch (error) {\r\n        yield pushLog(Log.Error(\r\n            ['saga', 'record', 'request record'],\r\n            \"Can't load record from database\",\r\n            error\r\n        ))\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}