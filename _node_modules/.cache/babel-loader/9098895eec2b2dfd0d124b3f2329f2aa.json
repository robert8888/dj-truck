{"ast":null,"code":"import { moveTo, ACTIONS } from \"../../actions\";\nimport { takeEvery, select, put } from \"redux-saga/effects\";\nimport { showLoading, hideLoading } from 'react-redux-loading-bar';\nimport { getApi } from \"./../../apis/apiProvider\";\nimport { get } from \"lodash/object\";\nexport default function* renameSelectedRequestSaga() {\n  yield takeEvery(ACTIONS.PL_MOVE_TO_REQUEST, callApi);\n}\n\nconst getToken = state => state.user.token;\n\nconst getElement = (state, path) => get(state.playList, path);\n\nconst getTargetId = (state, path) => get(state.playList, path)._id;\n\nfunction* callApi(action) {\n  const token = yield select(getToken);\n\n  if (!token) {\n    yield put(moveTo(action.pathFrom, action.pathTo));\n    return;\n  }\n\n  try {\n    yield put(showLoading());\n    const {\n      callQuery,\n      queries\n    } = getApi(\"UserAssets\");\n    const element = yield select(getElement, action.pathFrom);\n    const targetId = yield select(getTargetId, aciton.pathTo);\n    let query;\n\n    if (element._type === \"dir\") {\n      query = queries.moveQl.moveDir(element._id, targetId);\n    } else if (element._type === \"playlist\") {\n      query = queries.moveQl.movePlaylist(element._id, targetId);\n    }\n\n    let res = yield callQuery(query, token);\n\n    if (!res.erorrs) {\n      yield put(moveTo(action.pathFrom, action.pathTo));\n    } else {\n      throw new Error(JSON.stringify(res.errors));\n    }\n  } catch (err) {\n    console.log(\"Can't update data in database. Api call problem\");\n    console.log(err.message);\n  } finally {\n    yield put(hideLoading());\n  }\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/sagas/playlists/moveElementToRequestSaga.js"],"names":["moveTo","ACTIONS","takeEvery","select","put","showLoading","hideLoading","getApi","get","renameSelectedRequestSaga","PL_MOVE_TO_REQUEST","callApi","getToken","state","user","token","getElement","path","playList","getTargetId","_id","action","pathFrom","pathTo","callQuery","queries","element","targetId","aciton","query","_type","moveQl","moveDir","movePlaylist","res","erorrs","Error","JSON","stringify","errors","err","console","log","message"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,OAAjB,QAAgC,eAAhC;AACA,SAASC,SAAT,EAAoBC,MAApB,EAA4BC,GAA5B,QAAuC,oBAAvC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,yBAAzC;AACA,SAASC,MAAT,QAAuB,0BAAvB;AACA,SAASC,GAAT,QAAoB,eAApB;AAEA,eAAe,UAAUC,yBAAV,GAAsC;AACjD,QAAMP,SAAS,CAACD,OAAO,CAACS,kBAAT,EAA6BC,OAA7B,CAAf;AACH;;AAED,MAAMC,QAAQ,GAAGC,KAAK,IAAIA,KAAK,CAACC,IAAN,CAAWC,KAArC;;AAEA,MAAMC,UAAU,GAAG,CAACH,KAAD,EAAQI,IAAR,KAAiBT,GAAG,CAACK,KAAK,CAACK,QAAP,EAAiBD,IAAjB,CAAvC;;AAEA,MAAME,WAAW,GAAG,CAACN,KAAD,EAAQI,IAAR,KAAiBT,GAAG,CAACK,KAAK,CAACK,QAAP,EAAiBD,IAAjB,CAAH,CAA0BG,GAA/D;;AAEA,UAAUT,OAAV,CAAkBU,MAAlB,EAA0B;AACtB,QAAMN,KAAK,GAAG,MAAMZ,MAAM,CAACS,QAAD,CAA1B;;AACA,MAAI,CAACG,KAAL,EAAY;AACR,UAAMX,GAAG,CAACJ,MAAM,CAACqB,MAAM,CAACC,QAAR,EAAkBD,MAAM,CAACE,MAAzB,CAAP,CAAT;AACA;AACH;;AACD,MAAI;AACA,UAAMnB,GAAG,CAACC,WAAW,EAAZ,CAAT;AACA,UAAM;AAAEmB,MAAAA,SAAF;AAAaC,MAAAA;AAAb,QAAyBlB,MAAM,CAAC,YAAD,CAArC;AACA,UAAMmB,OAAO,GAAG,MAAMvB,MAAM,CAACa,UAAD,EAAaK,MAAM,CAACC,QAApB,CAA5B;AACA,UAAMK,QAAQ,GAAG,MAAMxB,MAAM,CAACgB,WAAD,EAAcS,MAAM,CAACL,MAArB,CAA7B;AACA,QAAIM,KAAJ;;AACA,QAAGH,OAAO,CAACI,KAAR,KAAkB,KAArB,EAA2B;AACvBD,MAAAA,KAAK,GAAGJ,OAAO,CAACM,MAAR,CAAeC,OAAf,CAAuBN,OAAO,CAACN,GAA/B,EAAoCO,QAApC,CAAR;AACH,KAFD,MAEO,IAAGD,OAAO,CAACI,KAAR,KAAkB,UAArB,EAAgC;AACnCD,MAAAA,KAAK,GAAGJ,OAAO,CAACM,MAAR,CAAeE,YAAf,CAA4BP,OAAO,CAACN,GAApC,EAAyCO,QAAzC,CAAR;AACH;;AAED,QAAIO,GAAG,GAAG,MAAMV,SAAS,CAACK,KAAD,EAAQd,KAAR,CAAzB;;AACA,QAAI,CAACmB,GAAG,CAACC,MAAT,EAAiB;AACd,YAAM/B,GAAG,CAACJ,MAAM,CAACqB,MAAM,CAACC,QAAR,EAAkBD,MAAM,CAACE,MAAzB,CAAP,CAAT;AACF,KAFD,MAEO;AACH,YAAM,IAAIa,KAAJ,CAAUC,IAAI,CAACC,SAAL,CAAeJ,GAAG,CAACK,MAAnB,CAAV,CAAN;AACH;AACJ,GAlBD,CAkBE,OAAOC,GAAP,EAAY;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAY,iDAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,OAAhB;AACH,GArBD,SAqBS;AACP,UAAMvC,GAAG,CAACE,WAAW,EAAZ,CAAT;AACD;AACJ","sourcesContent":["import { moveTo, ACTIONS } from \"../../actions\";\r\nimport { takeEvery, select, put } from \"redux-saga/effects\";\r\nimport { showLoading, hideLoading } from 'react-redux-loading-bar'\r\nimport { getApi } from \"./../../apis/apiProvider\";\r\nimport { get } from \"lodash/object\";\r\n\r\nexport default function* renameSelectedRequestSaga() {\r\n    yield takeEvery(ACTIONS.PL_MOVE_TO_REQUEST, callApi)\r\n}\r\n\r\nconst getToken = state => state.user.token;\r\n\r\nconst getElement = (state, path) => get(state.playList, path);\r\n\r\nconst getTargetId = (state, path) => get(state.playList, path)._id;\r\n\r\nfunction* callApi(action) {\r\n    const token = yield select(getToken);\r\n    if (!token) {\r\n        yield put(moveTo(action.pathFrom, action.pathTo));\r\n        return;\r\n    }\r\n    try {\r\n        yield put(showLoading());\r\n        const { callQuery, queries } = getApi(\"UserAssets\");\r\n        const element = yield select(getElement, action.pathFrom);\r\n        const targetId = yield select(getTargetId, aciton.pathTo);\r\n        let query;\r\n        if(element._type === \"dir\"){\r\n            query = queries.moveQl.moveDir(element._id, targetId);\r\n        } else if(element._type === \"playlist\"){\r\n            query = queries.moveQl.movePlaylist(element._id, targetId);\r\n        }\r\n\r\n        let res = yield callQuery(query, token);\r\n        if (!res.erorrs) {\r\n           yield put(moveTo(action.pathFrom, action.pathTo))\r\n        } else {\r\n            throw new Error(JSON.stringify(res.errors))\r\n        }\r\n    } catch (err) {\r\n        console.log(\"Can't update data in database. Api call problem\");\r\n        console.log(err.message);\r\n    } finally{\r\n      yield put(hideLoading())\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}