{"ast":null,"code":"import { ACTIONS } from \"./../actions/actions.js\";\nimport { produce } from \"imer\";\nconst deck = {\n  track: {\n    title: \"\",\n    bmp: 0,\n    quality: \"\",\n    duration: \"\",\n    source: \"\",\n    id: \"\",\n    thumbnail: {}\n  },\n  // \n  playBackState: {\n    paused: true,\n    cuePoint: 0,\n    cueActive: false,\n    pitch: 0,\n    timeLeft: null\n  }\n};\nconst chanel = {\n  volume: 100,\n  low: 100,\n  mid: 100,\n  high: 100,\n  gain: 100\n};\nconst initState = {\n  chanel: {\n    A: { ...deck\n    },\n    B: { ...deck\n    }\n  },\n  mikser: {\n    chanelA: { ...chanel\n    },\n    chanelB: { ...chanel\n    },\n    fader: {\n      position: 50 //A: 0 <-> B:100\n\n    }\n  }\n};\n\nfunction consoleReducer(state = initState, action) {\n  switch (action.type) {\n    case ACTIONS.LOAD_TRACK:\n      {\n        let destination = action.destination;\n        let track = action.track;\n        let newState = { ...state\n        };\n\n        if (newState.chanel[destination]) {\n          newState.chanel[destination].track = {\n            title: track.title,\n            bmp: track.bpm || 0,\n            quality: track.quality,\n            duration: track.duration,\n            source: track.source,\n            id: track.id,\n            thumbnail: track.thumbnail\n          };\n        }\n\n        return newState;\n      }\n\n    case ACTIONS.SET_PITCH:\n      {\n        const _state = { ...state\n        };\n\n        if (_state.chanel[action.destination]) {\n          _state.chanel[action.destination].playBackState.pitch = action.pitch;\n        }\n\n        return _state;\n      }\n\n    case ACTIONS.TOGGLE_PLAY:\n      {\n        if (!state.chanel[action.destination]) return state;\n        const prevPause = state.chanel[action.destination].playBackState.paused;\n        const nextState = produce(state, draftState => {\n          draftState.chanel[action.destination].playBackState.paused = !prevPause;\n        });\n        return nextState;\n        /*\r\n        if(!state.chanel[action.destination])\r\n        return state;\r\n          const _state = {...state}\r\n        _state.chanel[action.destination].playBackState = \r\n        {...state.chanel[action.destination].playBackState}\r\n          \r\n        _state.chanel[action.destination].playBackState.paused =\r\n         !state.chanel[action.destination].playBackState.paused; \r\n        \r\n        return state;*/\n      }\n\n    case ACTIONS.TOGGLE_CUE:\n      {\n        const _state = { ...state\n        };\n\n        if (_state.chanel[action.destination]) {\n          _state.chanel[action.destination].playBackState.cueActive = !state.chanel[action.destination].playBackState.cueActive;\n        }\n\n        return _state;\n      }\n\n    default:\n      return state;\n  }\n}\n\nexport default consoleReducer;","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/reducers/consoleReducer.js"],"names":["ACTIONS","produce","deck","track","title","bmp","quality","duration","source","id","thumbnail","playBackState","paused","cuePoint","cueActive","pitch","timeLeft","chanel","volume","low","mid","high","gain","initState","A","B","mikser","chanelA","chanelB","fader","position","consoleReducer","state","action","type","LOAD_TRACK","destination","newState","bpm","SET_PITCH","_state","TOGGLE_PLAY","prevPause","nextState","draftState","TOGGLE_CUE"],"mappings":"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","sourcesContent":["import {  ACTIONS } from \"./../actions/actions.js\";\r\nimport { produce } from \"imer\";\r\n\r\nconst deck = {\r\n    track : {\r\n        title : \"\",\r\n        bmp : 0,\r\n        quality : \"\",\r\n        duration : \"\",\r\n        source : \"\",\r\n        id: \"\",\r\n        thumbnail : {}\r\n    }, // \r\n    playBackState : {\r\n        paused: true,\r\n        cuePoint: 0,\r\n        cueActive: false,\r\n        pitch: 0,\r\n        timeLeft : null\r\n    }\r\n}\r\n\r\nconst chanel = {\r\n    volume: 100,\r\n    low: 100,\r\n    mid : 100,\r\n    high : 100,\r\n    gain: 100\r\n}\r\n\r\nconst initState = {\r\n    chanel: {\r\n        A:{\r\n            ...deck\r\n        },\r\n        B:{\r\n            ...deck\r\n        }\r\n    },\r\n   \r\n    mikser : {\r\n        chanelA : {\r\n            ...chanel,\r\n        },\r\n        chanelB : {\r\n            ...chanel,\r\n        },\r\n        fader : {\r\n            position : 50 //A: 0 <-> B:100\r\n        }\r\n    }\r\n}\r\n\r\nfunction consoleReducer(state = initState, action){\r\n    switch(action.type){\r\n        case ACTIONS.LOAD_TRACK : {\r\n            let destination = action.destination;\r\n            let track = action.track;\r\n            let newState = {...state};\r\n            if(newState.chanel[destination]){\r\n                newState.chanel[destination].track = {\r\n                    title : track.title,\r\n                    bmp : track.bpm || 0,\r\n                    quality : track.quality,\r\n                    duration : track.duration,\r\n                    source : track.source,\r\n                    id : track.id,\r\n                    thumbnail : track.thumbnail,\r\n                }\r\n            }\r\n            return newState;\r\n        }\r\n\r\n        case ACTIONS.SET_PITCH : {\r\n            const _state = {...state};\r\n            if(_state.chanel[action.destination]){\r\n                _state.chanel[action.destination].playBackState.pitch = action.pitch;\r\n            }\r\n            return _state;\r\n        }\r\n\r\n        case ACTIONS.TOGGLE_PLAY : {\r\n            if(!state.chanel[action.destination]) return state;\r\n            const prevPause = state.chanel[action.destination].playBackState.paused;\r\n\r\n            const nextState = produce(state, (draftState) => {\r\n                draftState.chanel[action.destination].playBackState.paused = !prevPause;\r\n            })\r\n            return nextState;\r\n\r\n            /*\r\n            if(!state.chanel[action.destination])\r\n            return state;\r\n\r\n            const _state = {...state}\r\n            _state.chanel[action.destination].playBackState = \r\n            {...state.chanel[action.destination].playBackState}\r\n\r\n            \r\n            _state.chanel[action.destination].playBackState.paused =\r\n             !state.chanel[action.destination].playBackState.paused; \r\n            \r\n            return state;*/\r\n        }\r\n\r\n        case ACTIONS.TOGGLE_CUE : {\r\n            const _state = {...state}\r\n            if(_state.chanel[action.destination]){\r\n                _state.chanel[action.destination]\r\n                .playBackState.cueActive = !state.chanel[action.destination]\r\n                                .playBackState.cueActive; \r\n            }\r\n            return _state;\r\n        }\r\n\r\n        default : return state;\r\n    }\r\n}\r\n\r\nexport default consoleReducer;"]},"metadata":{},"sourceType":"module"}