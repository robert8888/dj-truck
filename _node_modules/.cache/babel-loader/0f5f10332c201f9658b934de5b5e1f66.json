{"ast":null,"code":"export default class Mixer {\n  constructor(channels) {\n    this.channels = channels;\n    this.audioNodes = {\n      channels: {\n        A: {},\n        B: {}\n      }\n    };\n  }\n\n  setGain(channelName, knobValue) {\n    var _this$audioNodes$chan;\n\n    if (knobValue === 0) return; // idl run\n\n    let gain = 1 + knobValue / 100;\n    let audioCtx = this.channels.getChannel(channelName).backend.ac;\n    let gainNode = (_this$audioNodes$chan = this.audioNodes.channels[channelName]) === null || _this$audioNodes$chan === void 0 ? void 0 : _this$audioNodes$chan.gainNode;\n\n    if (!gainNode) {\n      gainNode = audioCtx.createGain();\n      this.channels.getChannel(channelName).backend.setFilter(gainNode);\n      this.audioNodes.channels[channelName].gainNode = gainNode;\n    }\n\n    gainNode.gain.setValueAtTime(parseFloat(gain), audioCtx.currentTime);\n  }\n\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/core/console/mixer/mixer.js"],"names":["Mixer","constructor","channels","audioNodes","A","B","setGain","channelName","knobValue","gain","audioCtx","getChannel","backend","ac","gainNode","createGain","setFilter","setValueAtTime","parseFloat","currentTime"],"mappings":"AAGA,eAAe,MAAMA,KAAN,CAAW;AACtBC,EAAAA,WAAW,CAACC,QAAD,EAAU;AACjB,SAAKA,QAAL,GAAgBA,QAAhB;AAEA,SAAKC,UAAL,GAAkB;AACdD,MAAAA,QAAQ,EAAG;AACPE,QAAAA,CAAC,EAAC,EADK;AAEPC,QAAAA,CAAC,EAAC;AAFK;AADG,KAAlB;AAMH;;AAGDC,EAAAA,OAAO,CAACC,WAAD,EAAcC,SAAd,EAAwB;AAAA;;AAE3B,QAAGA,SAAS,KAAK,CAAjB,EAAoB,OAFO,CAEC;;AAC5B,QAAIC,IAAI,GAAG,IAAID,SAAS,GAAE,GAA1B;AAEA,QAAIE,QAAQ,GAAG,KAAKR,QAAL,CAAcS,UAAd,CAAyBJ,WAAzB,EAAsCK,OAAtC,CAA8CC,EAA7D;AACA,QAAIC,QAAQ,4BAAG,KAAKX,UAAL,CAAgBD,QAAhB,CAAyBK,WAAzB,CAAH,0DAAG,sBAAuCO,QAAtD;;AAEA,QAAG,CAACA,QAAJ,EAAa;AACTA,MAAAA,QAAQ,GAAGJ,QAAQ,CAACK,UAAT,EAAX;AACA,WAAKb,QAAL,CAAcS,UAAd,CAAyBJ,WAAzB,EAAsCK,OAAtC,CAA8CI,SAA9C,CAAwDF,QAAxD;AACA,WAAKX,UAAL,CAAgBD,QAAhB,CAAyBK,WAAzB,EAAsCO,QAAtC,GAAiDA,QAAjD;AACH;;AACDA,IAAAA,QAAQ,CAACL,IAAT,CAAcQ,cAAd,CAA8BC,UAAU,CAACT,IAAD,CAAxC,EAAiDC,QAAQ,CAACS,WAA1D;AACH;;AA3BqB","sourcesContent":["\r\n\r\n\r\nexport default class Mixer{\r\n    constructor(channels){\r\n        this.channels = channels;\r\n\r\n        this.audioNodes = {\r\n            channels : {\r\n                A:{},\r\n                B:{}\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    setGain(channelName, knobValue){\r\n\r\n        if(knobValue === 0) return; // idl run\r\n        let gain = 1 + knobValue /100;\r\n\r\n        let audioCtx = this.channels.getChannel(channelName).backend.ac;\r\n        let gainNode = this.audioNodes.channels[channelName]?.gainNode;\r\n\r\n        if(!gainNode){\r\n            gainNode = audioCtx.createGain();\r\n            this.channels.getChannel(channelName).backend.setFilter(gainNode);\r\n            this.audioNodes.channels[channelName].gainNode = gainNode;\r\n        }\r\n        gainNode.gain.setValueAtTime( parseFloat(gain) , audioCtx.currentTime)\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}