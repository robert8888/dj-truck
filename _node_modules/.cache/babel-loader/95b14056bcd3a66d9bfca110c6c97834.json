{"ast":null,"code":"import React from\"react\";export default function useRecordSearchUrl(){var getUrl=function getUrl(queryStr,opt){var params=\"\";var searchOpt=opt.searchOpt,searchParams=opt.searchParams;params=\"\";for(var optName in searchOpt){if(!searchOpt[optName]){params+='no-'+optName+',';}}if(params.length>1){params=\"&searchOpt=\"+params;params=params.substr(0,params.length-1);}var search=[];for(var paramName in searchParams){var value=searchParams[paramName];switch(typeof value){case\"boolean\":{search.push(paramName+\"=\"+value.toString());}case\"string\":{search.push(paramName+'='+value);}case\"object\":{if(value instanceof Array&&value.length&&value.some(function(item){return item;})){search.push(paramName+\"=\"+value.join(\",\"));}}}}if(search.length){if(!params){params+=\"?\";}params+=search.join(\"&\");}return'/records?search='+queryStr+params;};return[getUrl];}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/pages/common/Hooks/useRecordSearchURL.js"],"names":["React","useRecordSearchUrl","getUrl","queryStr","opt","params","searchOpt","searchParams","optName","length","substr","search","paramName","value","push","toString","Array","some","item","join"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CAEA,cAAe,SAASC,CAAAA,kBAAT,EAA6B,CACxC,GAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,CAACC,QAAD,CAAWC,GAAX,CAAkB,CAC7B,GAAIC,CAAAA,MAAM,CAAG,EAAb,CAD6B,GAEtBC,CAAAA,SAFsB,CAEKF,GAFL,CAEtBE,SAFsB,CAEXC,YAFW,CAEKH,GAFL,CAEXG,YAFW,CAI7BF,MAAM,CAAG,EAAT,CACA,IAAK,GAAIG,CAAAA,OAAT,GAAoBF,CAAAA,SAApB,CAA+B,CAC3B,GAAI,CAACA,SAAS,CAACE,OAAD,CAAd,CAAyB,CACrBH,MAAM,EAAI,MAAQG,OAAR,CAAkB,GAA5B,CACH,CACJ,CACD,GAAIH,MAAM,CAACI,MAAP,CAAgB,CAApB,CAAuB,CACnBJ,MAAM,CAAG,cAAgBA,MAAzB,CACAA,MAAM,CAAGA,MAAM,CAACK,MAAP,CAAc,CAAd,CAAiBL,MAAM,CAACI,MAAP,CAAgB,CAAjC,CAAT,CACH,CAED,GAAME,CAAAA,MAAM,CAAG,EAAf,CACA,IAAI,GAAIC,CAAAA,SAAR,GAAqBL,CAAAA,YAArB,CAAkC,CAC9B,GAAMM,CAAAA,KAAK,CAAIN,YAAY,CAACK,SAAD,CAA3B,CACA,OAAO,MAAOC,CAAAA,KAAd,EACI,IAAK,SAAL,CAAgB,CACZF,MAAM,CAACG,IAAP,CAAYF,SAAS,CAAG,GAAZ,CAAkBC,KAAK,CAACE,QAAN,EAA9B,EACH,CACD,IAAK,QAAL,CAAgB,CACZJ,MAAM,CAACG,IAAP,CAAYF,SAAS,CAAG,GAAZ,CAAkBC,KAA9B,EACH,CACD,IAAK,QAAL,CAAe,CACX,GAAGA,KAAK,WAAYG,CAAAA,KAAjB,EAA0BH,KAAK,CAACJ,MAAhC,EAA0CI,KAAK,CAACI,IAAN,CAAY,SAAAC,IAAI,QAAKA,CAAAA,IAAL,EAAhB,CAA7C,CAAyE,CACrEP,MAAM,CAACG,IAAP,CAAaF,SAAS,CAAG,GAAZ,CAAkBC,KAAK,CAACM,IAAN,CAAW,GAAX,CAA/B,EACH,CACJ,CAXL,CAaH,CAED,GAAGR,MAAM,CAACF,MAAV,CAAiB,CACb,GAAG,CAACJ,MAAJ,CAAY,CACRA,MAAM,EAAI,GAAV,CACH,CACDA,MAAM,EAAIM,MAAM,CAACQ,IAAP,CAAY,GAAZ,CAAV,CACH,CAED,MAAO,mBAAqBhB,QAArB,CAAgCE,MAAvC,CACH,CAzCD,CA2CA,MAAO,CAACH,MAAD,CAAP,CACH","sourcesContent":["import React from \"react\";\r\n\r\nexport default function useRecordSearchUrl(){\r\n    const getUrl = (queryStr, opt) =>{\r\n        let params = \"\";\r\n        const {searchOpt, searchParams} = opt; \r\n\r\n        params = \"\";\r\n        for (let optName in searchOpt) {\r\n            if (!searchOpt[optName]) {\r\n                params += 'no-' + optName + ',';\r\n            }\r\n        }\r\n        if (params.length > 1) {\r\n            params = \"&searchOpt=\" + params\r\n            params = params.substr(0, params.length - 1)\r\n        }\r\n\r\n        const search = [];\r\n        for(let paramName in searchParams){\r\n            const value =  searchParams[paramName];\r\n            switch(typeof value){\r\n                case \"boolean\": {\r\n                    search.push(paramName + \"=\" + value.toString()) \r\n                }\r\n                case \"string\" : {\r\n                    search.push(paramName + '=' + value)\r\n                }\r\n                case \"object\" :{\r\n                    if(value instanceof Array && value.length && value.some( item => (item))){\r\n                        search.push( paramName + \"=\" + value.join(\",\"));\r\n                    }\r\n                }\r\n            } \r\n        }\r\n        \r\n        if(search.length){\r\n            if(!params) {\r\n                params += \"?\"\r\n            } \r\n            params += search.join(\"&\")\r\n        }\r\n\r\n        return '/records?search=' + queryStr + params;\r\n    }\r\n\r\n    return [getUrl];\r\n}"]},"metadata":{},"sourceType":"module"}