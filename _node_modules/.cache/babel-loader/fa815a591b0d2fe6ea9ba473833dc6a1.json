{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\src\\\\pages\\\\common\\\\components\\\\RecordComments\\\\Comment\\\\Comment.js\";\nimport React, { useState, useCallback, useMemo, Fragment, useEffect, useRef } from \"react\";\nimport IconBar from \"./../../IconBar/IconBar\";\nimport { useFormatRelative } from \"./../../../Hooks/useFormatDate\";\nimport \"./comment.scss\";\nimport { Form, Button } from \"react-bootstrap\";\nimport useAutoHeightTextarea from \"../../../Hooks/useAutoHeightTextarea\";\nimport useEmoticons from \"../../../Hooks/Emoticons/useEmoticons\";\n\nconst CommentContent = ({\n  header,\n  text,\n  date: timestamp,\n  editable,\n  onChange,\n  onDelete = () => null,\n  creationMode\n}) => {\n  // const [content, setConntent] = useState(text || \"\")\n  const content = useRef();\n  const [editMode, setEditMode] = useState(false);\n  const [useAutoHeight] = useAutoHeightTextarea();\n  const [emotiControl, Emoticons] = useEmoticons();\n  const [formatRelative] = useFormatRelative();\n  const dateFormated = useMemo(() => {\n    if (!timestamp) return \"\";\n    return formatRelative(timestamp, {\n      timezone: true\n    });\n  }, [timestamp, formatRelative]);\n  const setContentRef = useCallback(ref => {\n    content.curent = ref;\n\n    if (text) {\n      content.current.value = text;\n    }\n  }, [text, content]); // const updateComment = useCallback((e) => {\n  //     setConntent(e.target.value);\n  //     if (e.target.value === \"\") {\n  //         setEditMode(false)\n  //     }\n  // }, [setConntent, setEditMode])\n\n  const onBlur = useCallback(() => {// (content === \"\") ? setEditMode(false) : setEditMode(true);\n  }, [content, setEditMode]);\n  const onSubmit = useCallback(e => {\n    e.preventDefault();\n    if (!onChange) return;\n\n    if (creationMode) {\n      content.curent.value = \"\";\n    }\n\n    setEditMode(false);\n    onChange(content.current.value);\n  }, [content, onChange, setEditMode]);\n  return React.createElement(Form, {\n    onSubmit: onSubmit,\n    onFocus: setEditMode.bind(null, true),\n    onBlur: onBlur,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, React.createElement(Form.Group, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, React.createElement(\"header\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, React.createElement(Form.Label, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, header), React.createElement(\"aside\", {\n    className: editable ? \"editable\" : \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"comment-publish-date\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, \" \", dateFormated), editable && !creationMode && React.createElement(IconBar, {\n    items: {\n      edit: setEditMode.bind(null, true),\n      delete: onDelete.bind(null)\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }))), React.createElement(Form.Control, Object.assign({\n    className: \"record-comments-control\",\n    type: \"textarea\",\n    as: \"textarea\",\n    name: \"comment-conntent\",\n    disabled: !editMode && !creationMode,\n    ref: setContentRef,\n    ref: emotiControl\n  }, !creationMode ? {\n    ref: useAutoHeight\n  } : {}, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }))), editMode && React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, React.createElement(Button, {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, \"Post\"), React.createElement(Emoticons, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  })));\n};\n\nexport default CommentContent;","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/pages/common/components/RecordComments/Comment/Comment.js"],"names":["React","useState","useCallback","useMemo","Fragment","useEffect","useRef","IconBar","useFormatRelative","Form","Button","useAutoHeightTextarea","useEmoticons","CommentContent","header","text","date","timestamp","editable","onChange","onDelete","creationMode","content","editMode","setEditMode","useAutoHeight","emotiControl","Emoticons","formatRelative","dateFormated","timezone","setContentRef","ref","curent","current","value","onBlur","onSubmit","e","preventDefault","bind","edit","delete"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useMemo, Fragment, useEffect, useRef } from \"react\";\r\nimport IconBar from \"./../../IconBar/IconBar\"\r\nimport { useFormatRelative } from \"./../../../Hooks/useFormatDate\";\r\nimport \"./comment.scss\";\r\nimport { Form, Button } from \"react-bootstrap\";\r\nimport useAutoHeightTextarea from \"../../../Hooks/useAutoHeightTextarea\";\r\nimport useEmoticons from \"../../../Hooks/Emoticons/useEmoticons\";\r\n\r\nconst CommentContent = ({\r\n    header,\r\n    text,\r\n    date: timestamp,\r\n    editable,\r\n    onChange,\r\n    onDelete = () => null,\r\n    creationMode }) => {\r\n    // const [content, setConntent] = useState(text || \"\")\r\n    const content = useRef();\r\n    const [editMode, setEditMode] = useState(false);\r\n\r\n    const [useAutoHeight] = useAutoHeightTextarea();\r\n    const [emotiControl, Emoticons] = useEmoticons();\r\n\r\n    const [formatRelative] = useFormatRelative();\r\n    const dateFormated = useMemo(() => {\r\n        if (!timestamp) return \"\";\r\n        return formatRelative(timestamp, { timezone: true })\r\n    }, [timestamp, formatRelative])\r\n\r\n\r\n\r\n\r\n    const setContentRef = useCallback(ref => {\r\n        content.curent = ref;\r\n        if (text) {\r\n            content.current.value = text;\r\n        }\r\n    }, [text, content])\r\n\r\n    // const updateComment = useCallback((e) => {\r\n    //     setConntent(e.target.value);\r\n    //     if (e.target.value === \"\") {\r\n    //         setEditMode(false)\r\n    //     }\r\n    // }, [setConntent, setEditMode])\r\n\r\n    const onBlur = useCallback(() => {\r\n        // (content === \"\") ? setEditMode(false) : setEditMode(true);\r\n    }, [content, setEditMode])\r\n\r\n\r\n    const onSubmit = useCallback((e) => {\r\n        e.preventDefault();\r\n        if (!onChange) return;\r\n        if (creationMode) {\r\n            content.curent.value = \"\";\r\n        }\r\n        setEditMode(false)\r\n        onChange(content.current.value)\r\n    }, [content, onChange, setEditMode])\r\n\r\n\r\n\r\n    return (\r\n        <Form onSubmit={onSubmit}\r\n            onFocus={setEditMode.bind(null, true)}\r\n            onBlur={onBlur}>\r\n            <Form.Group>\r\n                <header>\r\n                    <Form.Label>\r\n                        {header}\r\n                    </Form.Label>\r\n                    <aside className={(editable ? \"editable\" : \"\")}>\r\n                        <span className='comment-publish-date'> {dateFormated}</span>\r\n                        {editable && !creationMode &&\r\n                            <IconBar items={{\r\n                                edit: setEditMode.bind(null, true),\r\n                                delete: onDelete.bind(null)\r\n                            }}\r\n                            />}\r\n                    </aside>\r\n                </header>\r\n\r\n\r\n                <Form.Control\r\n                    className=\"record-comments-control\"\r\n                    type=\"textarea\"\r\n                    as=\"textarea\"\r\n                    name=\"comment-conntent\"\r\n                    disabled={!editMode && !creationMode}\r\n                    ref={setContentRef}\r\n                    ref={emotiControl}\r\n                    {...(!creationMode ? { ref: useAutoHeight } : {})}\r\n                // value={content}\r\n                // onChange={updateComment}\r\n                />\r\n            </Form.Group>\r\n            {editMode && (\r\n                <Fragment>\r\n                    <Button type=\"submit\">Post</Button>\r\n                    <Emoticons />\r\n                </Fragment>\r\n            )}\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default CommentContent;"]},"metadata":{},"sourceType":"module"}