{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\src\\\\pages\\\\common\\\\components\\\\RecordTracklist\\\\RecordTracklist.js\";\nimport React, { useEffect, useState, useMemo } from \"react\";\nimport { connect } from \"react-redux\";\nimport Tracklist from \"./../TrackTable/TrackTable\";\nimport { formater } from \"./../../../../utils/time/timeFromater\";\nimport \"./record-track-list.scss\";\n\nconst RecordTracklist = ({\n  record\n}) => {\n  const [tracklist, setTracklist] = useState(null);\n  const cols = useMemo(() => ({\n    \"#\": {\n      map: \"index\"\n    },\n    // \"Source\": \"source\",\n    \"Title\": {\n      map: \"title\",\n      class: 'overflow'\n    },\n    \"Start\": {\n      map: \"start\"\n    },\n    \"End\": {\n      map: \"end\"\n    }\n  }), []);\n  useEffect(() => {\n    if (!record) return;\n    setTracklist(record.tracks.map(item => ({\n      start: formater.secondsToStr(item.start),\n      end: formater.secondsToStr(item.end),\n      id: item.track.id,\n      title: item.track.title,\n      source: item.track.source,\n      sourceId: item.track.sourceId\n    })));\n  }, [record, setTracklist]);\n  return React.createElement(Tracklist, {\n    className: \"record-track-list\",\n    cols: cols,\n    items: tracklist,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  });\n};\n\nconst mapStateToProps = state => ({\n  record: state.records.currentRecord\n});\n\nexport default connect(mapStateToProps)(RecordTracklist);","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/pages/common/components/RecordTracklist/RecordTracklist.js"],"names":["React","useEffect","useState","useMemo","connect","Tracklist","formater","RecordTracklist","record","tracklist","setTracklist","cols","map","class","tracks","item","start","secondsToStr","end","id","track","title","source","sourceId","mapStateToProps","state","records","currentRecord"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,OAArC,QAAoD,OAApD;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,4BAAtB;AACA,SAASC,QAAT,QAAyB,uCAAzB;AACA,OAAO,0BAAP;;AAEA,MAAMC,eAAe,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAgB;AACpC,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,IAAD,CAA1C;AAEA,QAAMS,IAAI,GAAGR,OAAO,CAAC,OAAO;AACxB,SAAK;AAAES,MAAAA,GAAG,EAAE;AAAP,KADmB;AAExB;AACA,aAAS;AAAEA,MAAAA,GAAG,EAAE,OAAP;AAAkBC,MAAAA,KAAK,EAAE;AAAzB,KAHe;AAIxB,aAAS;AAAED,MAAAA,GAAG,EAAE;AAAP,KAJe;AAKxB,WAAO;AAAEA,MAAAA,GAAG,EAAE;AAAP;AALiB,GAAP,CAAD,EAMhB,EANgB,CAApB;AAQAX,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI,CAACO,MAAL,EAAa;AACbE,IAAAA,YAAY,CAACF,MAAM,CAACM,MAAP,CAAcF,GAAd,CAAkBG,IAAI,KAAK;AACpCC,MAAAA,KAAK,EAAEV,QAAQ,CAACW,YAAT,CAAsBF,IAAI,CAACC,KAA3B,CAD6B;AAEpCE,MAAAA,GAAG,EAAEZ,QAAQ,CAACW,YAAT,CAAsBF,IAAI,CAACG,GAA3B,CAF+B;AAGpCC,MAAAA,EAAE,EAAEJ,IAAI,CAACK,KAAL,CAAWD,EAHqB;AAIpCE,MAAAA,KAAK,EAAEN,IAAI,CAACK,KAAL,CAAWC,KAJkB;AAKpCC,MAAAA,MAAM,EAAEP,IAAI,CAACK,KAAL,CAAWE,MALiB;AAMpCC,MAAAA,QAAQ,EAAER,IAAI,CAACK,KAAL,CAAWG;AANe,KAAL,CAAtB,CAAD,CAAZ;AAQH,GAVQ,EAUN,CAACf,MAAD,EAASE,YAAT,CAVM,CAAT;AAYA,SACI,oBAAC,SAAD;AAAW,IAAA,SAAS,EAAC,mBAArB;AACI,IAAA,IAAI,EAAEC,IADV;AAEI,IAAA,KAAK,EAAEF,SAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAMH,CA7BD;;AA+BA,MAAMe,eAAe,GAAGC,KAAK,KAAK;AAC9BjB,EAAAA,MAAM,EAAEiB,KAAK,CAACC,OAAN,CAAcC;AADQ,CAAL,CAA7B;;AAIA,eAAevB,OAAO,CAACoB,eAAD,CAAP,CAAyBjB,eAAzB,CAAf","sourcesContent":["import React, { useEffect, useState, useMemo } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Tracklist from \"./../TrackTable/TrackTable\";\r\nimport { formater } from \"./../../../../utils/time/timeFromater\";\r\nimport \"./record-track-list.scss\";\r\n\r\nconst RecordTracklist = ({ record }) => {\r\n    const [tracklist, setTracklist] = useState(null);\r\n\r\n    const cols = useMemo(() => ({\r\n        \"#\": { map: \"index\" },\r\n        // \"Source\": \"source\",\r\n        \"Title\": { map: \"title\"  , class: 'overflow'},\r\n        \"Start\": { map: \"start\" },\r\n        \"End\": { map: \"end\" }\r\n    }), []);\r\n\r\n    useEffect(() => {\r\n        if (!record) return;\r\n        setTracklist(record.tracks.map(item => ({\r\n            start: formater.secondsToStr(item.start),\r\n            end: formater.secondsToStr(item.end),\r\n            id: item.track.id,\r\n            title: item.track.title,\r\n            source: item.track.source,\r\n            sourceId: item.track.sourceId,\r\n        })))\r\n    }, [record, setTracklist])\r\n\r\n    return (\r\n        <Tracklist className=\"record-track-list\"\r\n            cols={cols}\r\n            items={tracklist}\r\n        />\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    record: state.records.currentRecord,\r\n})\r\n\r\nexport default connect(mapStateToProps)(RecordTracklist);"]},"metadata":{},"sourceType":"module"}