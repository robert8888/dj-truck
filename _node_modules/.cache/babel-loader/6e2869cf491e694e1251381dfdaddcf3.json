{"ast":null,"code":"import { renameSelected, ACTIONS } from \"../../actions\";\nimport { takeEvery, select, put } from \"redux-saga/effects\";\nimport { getApi } from \"./../../apis/apiProvider\";\nimport { renameDir, renamePlaylist } from \"./../../qlQueries/rename\";\nimport { generateTemplateName, findClosesDir } from \"./../../reducers/console/playlist/utils\";\nimport { get } from \"lodash/object\";\nexport default function* createDirRequestSaga() {\n  yield takeEvery(ACTIONS.PL_RENAME_SELECTED_REQUEST, callApi);\n}\n\nconst getToken = state => state.user.token;\n\nconst getCurrentSelection = state => state.playList.currentSelection; // const getParentPath = (state, currentSelection) =>\n//     findClosesDir(state, currentSelection)\n// const generateDirName = (state, parrentPath) => \n//     generateTemplateName(state.playList, parrentPath, \"New folder\");\n\n\nconst getCurrent = (state, path) => get(state.playList, path);\n\nfunction* callApi(action) {\n  const {\n    callQuery\n  } = getApi(\"UserAssets\");\n  const token = yield select(getToken);\n  const currentSelection = yield select(getCurrentSelection);\n  const current = yield select(getCurrent, currentSelection); //palylist\n\n  const id = current._id;\n  let query;\n\n  if (current instanceof Array) {\n    query = renamePlaylist(id, action.name);\n  } else {\n    query = renameDir(id, action.name);\n  }\n\n  let res = yield callQuery(query, token);\n\n  if (res.data.renameDir) {\n    yield put(renameSelected(action.name));\n  }\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/sagas/playlists/renameSelectedSaga.js"],"names":["renameSelected","ACTIONS","takeEvery","select","put","getApi","renameDir","renamePlaylist","generateTemplateName","findClosesDir","get","createDirRequestSaga","PL_RENAME_SELECTED_REQUEST","callApi","getToken","state","user","token","getCurrentSelection","playList","currentSelection","getCurrent","path","action","callQuery","current","id","_id","query","Array","name","res","data"],"mappings":"AAAA,SAASA,cAAT,EAAyBC,OAAzB,QAAwC,eAAxC;AACA,SAASC,SAAT,EAAoBC,MAApB,EAA4BC,GAA5B,QAAuC,oBAAvC;AACA,SAASC,MAAT,QAAuB,0BAAvB;AACA,SAAQC,SAAR,EAAmBC,cAAnB,QAAwC,0BAAxC;AACA,SAASC,oBAAT,EAA+BC,aAA/B,QAAoD,yCAApD;AACA,SAASC,GAAT,QAAoB,eAApB;AAIA,eAAe,UAAUC,oBAAV,GAAiC;AAC5C,QAAMT,SAAS,CAACD,OAAO,CAACW,0BAAT,EAAqCC,OAArC,CAAf;AACH;;AAED,MAAMC,QAAQ,GAAGC,KAAK,IAAIA,KAAK,CAACC,IAAN,CAAWC,KAArC;;AAEA,MAAMC,mBAAmB,GAAGH,KAAK,IAAIA,KAAK,CAACI,QAAN,CAAeC,gBAApD,C,CAEA;AACA;AAEA;AACA;;;AAEC,MAAMC,UAAU,GAAG,CAACN,KAAD,EAAQO,IAAR,KAAiBZ,GAAG,CAACK,KAAK,CAACI,QAAP,EAAiBG,IAAjB,CAAvC;;AAID,UAAUT,OAAV,CAAkBU,MAAlB,EAA0B;AACtB,QAAM;AAAEC,IAAAA;AAAF,MAAgBnB,MAAM,CAAC,YAAD,CAA5B;AACA,QAAMY,KAAK,GAAG,MAAMd,MAAM,CAACW,QAAD,CAA1B;AACA,QAAMM,gBAAgB,GAAG,MAAMjB,MAAM,CAACe,mBAAD,CAArC;AACA,QAAMO,OAAO,GAAG,MAAMtB,MAAM,CAACkB,UAAD,EAAaD,gBAAb,CAA5B,CAJsB,CAKtB;;AACA,QAAMM,EAAE,GAAGD,OAAO,CAACE,GAAnB;AACA,MAAIC,KAAJ;;AACA,MAAGH,OAAO,YAAYI,KAAtB,EAA4B;AACxBD,IAAAA,KAAK,GAAGrB,cAAc,CAACmB,EAAD,EAAKH,MAAM,CAACO,IAAZ,CAAtB;AACH,GAFD,MAEO;AACHF,IAAAA,KAAK,GAAGtB,SAAS,CAACoB,EAAD,EAAKH,MAAM,CAACO,IAAZ,CAAjB;AACH;;AACD,MAAIC,GAAG,GAAG,MAAMP,SAAS,CAACI,KAAD,EAAQX,KAAR,CAAzB;;AACA,MAAGc,GAAG,CAACC,IAAJ,CAAS1B,SAAZ,EAAsB;AAClB,UAAMF,GAAG,CAACJ,cAAc,CAACuB,MAAM,CAACO,IAAR,CAAf,CAAT;AACH;AACJ","sourcesContent":["import { renameSelected, ACTIONS } from \"../../actions\";\r\nimport { takeEvery, select, put } from \"redux-saga/effects\"\r\nimport { getApi } from \"./../../apis/apiProvider\";\r\nimport {renameDir, renamePlaylist} from \"./../../qlQueries/rename\";\r\nimport { generateTemplateName, findClosesDir } from \"./../../reducers/console/playlist/utils\";\r\nimport { get } from \"lodash/object\";\r\n\r\n\r\n\r\nexport default function* createDirRequestSaga() {\r\n    yield takeEvery(ACTIONS.PL_RENAME_SELECTED_REQUEST, callApi)\r\n}\r\n\r\nconst getToken = state => state.user.token;\r\n\r\nconst getCurrentSelection = state => state.playList.currentSelection;\r\n\r\n// const getParentPath = (state, currentSelection) =>\r\n//     findClosesDir(state, currentSelection)\r\n\r\n// const generateDirName = (state, parrentPath) => \r\n//     generateTemplateName(state.playList, parrentPath, \"New folder\");\r\n\r\n const getCurrent = (state, path) => get(state.playList, path);\r\n\r\n\r\n\r\nfunction* callApi(action) {\r\n    const { callQuery } = getApi(\"UserAssets\");\r\n    const token = yield select(getToken);\r\n    const currentSelection = yield select(getCurrentSelection);\r\n    const current = yield select(getCurrent, currentSelection);\r\n    //palylist\r\n    const id = current._id;\r\n    let query;\r\n    if(current instanceof Array){\r\n        query = renamePlaylist(id, action.name)\r\n    } else {\r\n        query = renameDir(id, action.name)\r\n    }\r\n    let res = yield callQuery(query, token);\r\n    if(res.data.renameDir){\r\n        yield put(renameSelected(action.name));\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}