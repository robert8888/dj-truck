{"ast":null,"code":"import store from \"./../../../store/\";\nimport getApi from \"./../../../apis/apiProvider\";\nimport { setCuePoint, setChannelReady } from \"./../../../actions\";\nexport default class Channels {\n  constructor() {\n    this.dispatch = store.dispatch;\n    this.channels = {\n      A: null,\n      B: null\n    };\n  }\n\n  getChannelNames() {\n    return Object.keys(this.channels);\n  }\n\n  setChannel(channelName, player) {\n    this.channels[channelName] = player;\n  }\n\n  getChannel(channelName) {\n    return this.channels[channelName];\n  } //--------------------------------------------\n\n\n  loadTrack(channelName, track) {\n    let api = getApi(track.source);\n    let url = api && api.getUrl(track.id) || null;\n    this.dispatch(setChannelReady(false, channelName));\n    let player = this.channels[channelName];\n\n    if (player.loadWithEvent) {\n      player.loadWithEvent(url);\n    } else {\n      player.load(url);\n    }\n  }\n\n  updatePosition(channelName, curretTime) {}\n\n  togglePlay(channelName, currentValue) {\n    if (currentValue) {\n      this.channels[channelName].pause();\n    } else {\n      this.channels[channelName].play();\n    }\n  }\n\n  toggleCue(channelName, currentValue) {\n    const player = this.channels[channelName];\n    const isPaused = store.getState().console.channel[channelName].playBackState.paused;\n\n    if (!currentValue && isPaused) {\n      // back to cue point and pause\n      let cuePoint = store.getState().console.channel[channelName].playBackState.cuePoint; //in seconds\n      //seek to\n\n      player.pause();\n      player.backend.seekTo(cuePoint);\n      player.drawer.progress(cuePoint / player.getDuration());\n      player.drawer.recenter(cuePoint / player.getDuration());\n    } else if (!currentValue) {\n      //Cancel cue and play\n      if (!player.isPlaying()) {\n        player.play();\n      }\n    } else {\n      const cuePoint = this.channels[channelName].getCurrentTime();\n      this.channels[channelName].play();\n      this.dispatch(setCuePoint(channelName, cuePoint)); // in float seconds\n    }\n  }\n\n  adjustPitch(channelName, currentValue) {\n    this.channels[channelName].setPlaybackRate(1 + currentValue / 100);\n  }\n\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/core/console/channels/channels.js"],"names":["store","getApi","setCuePoint","setChannelReady","Channels","constructor","dispatch","channels","A","B","getChannelNames","Object","keys","setChannel","channelName","player","getChannel","loadTrack","track","api","source","url","getUrl","id","loadWithEvent","load","updatePosition","curretTime","togglePlay","currentValue","pause","play","toggleCue","isPaused","getState","console","channel","playBackState","paused","cuePoint","backend","seekTo","drawer","progress","getDuration","recenter","isPlaying","getCurrentTime","adjustPitch","setPlaybackRate"],"mappings":"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","sourcesContent":["import store from \"./../../../store/\";\r\nimport getApi from \"./../../../apis/apiProvider\";\r\nimport { setCuePoint, setChannelReady }\r\n    from \"./../../../actions\";\r\n\r\nexport default class Channels{\r\n    constructor(){\r\n        this.dispatch = store.dispatch;\r\n        this.channels = {\r\n            A: null, \r\n            B: null\r\n        }\r\n    }\r\n\r\n    getChannelNames(){\r\n        return Object.keys(this.channels);\r\n    }\r\n\r\n    setChannel(channelName, player){\r\n        this.channels[channelName] = player;\r\n    }\r\n\r\n    getChannel(channelName){\r\n        return this.channels[channelName];\r\n    }\r\n    \r\n    //--------------------------------------------\r\n\r\n    loadTrack(channelName, track){\r\n        let api = getApi(track.source);\r\n        let url = (api && api.getUrl(track.id)) || null;\r\n\r\n        this.dispatch(setChannelReady(false, channelName));\r\n\r\n        let player = this.channels[channelName];\r\n\r\n        if(player.loadWithEvent){\r\n            player.loadWithEvent(url);\r\n        } else {\r\n            player.load(url)\r\n        }\r\n\r\n    }\r\n\r\n    updatePosition(channelName, curretTime){\r\n\r\n    }\r\n\r\n    togglePlay(channelName, currentValue){\r\n        if(currentValue){\r\n            this.channels[channelName].pause();\r\n        } else {\r\n            this.channels[channelName].play();\r\n        }\r\n    }\r\n\r\n    toggleCue(channelName, currentValue){\r\n        const player = this.channels[channelName]\r\n        const isPaused = store.getState().console.channel[channelName].playBackState.paused;\r\n        if(!currentValue && isPaused){ // back to cue point and pause\r\n            let cuePoint =  store.getState().console.channel[channelName].playBackState.cuePoint; //in seconds\r\n            //seek to\r\n            player.pause();\r\n            player.backend.seekTo(cuePoint);\r\n            player.drawer.progress(cuePoint / player.getDuration());\r\n            player.drawer.recenter(cuePoint / player.getDuration());\r\n        } else if(!currentValue) { //Cancel cue and play\r\n            if(!player.isPlaying()){\r\n                player.play();\r\n            }\r\n        }\r\n        else {\r\n            const cuePoint = this.channels[channelName].getCurrentTime();\r\n            this.channels[channelName].play();\r\n            this.dispatch(setCuePoint(channelName, cuePoint)) // in float seconds\r\n        }\r\n    }\r\n\r\n    adjustPitch(channelName, currentValue){\r\n        this.channels[channelName].setPlaybackRate( 1 + currentValue/100 )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}