{"ast":null,"code":"import { pushTrackToList, ACTIONS } from \"../../actions\";\nimport { takeEvery, select, put, call } from \"redux-saga/effects\";\nimport { getApi } from \"./../../apis/apiProvider\";\nimport createTrackQuery from \"./../../qlQueries/createTrack\";\nimport { generateTemplateName as generateName, findClosesDir } from \"./../../reducers/console/playlist/utils\";\nimport { get } from \"lodash/object\";\nimport { handle as createNewPlaylist } from \"./createPlaylistRequestSaga\";\nimport UUID from \"uuidjs\";\nexport default function* pushTrackToListSaga() {\n  yield takeEvery(ACTIONS.PL_PUSH_TRACK_REQUEST, handle);\n}\n\nconst getToken = state => state.user.token;\n\nconst getCurrent = state => state.playList.list;\n\nfunction* handle(action) {\n  const {\n    callQuery\n  } = getApi(\"UserAssets\");\n  const token = yield select(getToken); //current playlist id \n\n  const currentPlaylist = yield select(getCurrent);\n\n  if (!currentPlaylist._id) {\n    //create new \n    console.log(\"creating new playlist\");\n    yield call(createNewPlaylist, {});\n    currentPlaylist = yield select(getCurrent);\n  }\n\n  console.log(currentPlaylist); // const data = {};\n  //  ({\n  //     title: data.title,\n  //     source: data.source,\n  //     sourceId: data.sourceId,\n  //     quality: data.quality,\n  //     duration: data.duration\n  // } = action.track);\n  // data.playlist = currentPlaylist._id;\n  // data.thumbnails = JSON.stringify(action.track.thumbnails);\n  // data.position = currentPlaylist.length;\n  // const query = createTrackQuery(data)\n  // console.log(\"the query\", query);\n\n  const result = yield callQuery(createTrackQuery, token, {\n    playlist: currentPlaylist._id,\n    title: action.track.title,\n    source: action.track.source,\n    sourceId: action.track.sourceId,\n    quality: action.track.quality,\n    duration: action.track.duration,\n    thumbnails: action.track.thumbnails,\n    position: currentPlaylist.length\n  });\n  console.log(\"result of query\", result); //if(result?.data?.createTrack?.track?.id){\n\n  yield put(pushTrackToList({ ...action.track,\n    //id:result.data.createTrack.track.id\n    id: UUID.genV1().toString()\n  }, action.playList)); // }\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/sagas/playlists/pushTrackToListRequestSaga.js"],"names":["pushTrackToList","ACTIONS","takeEvery","select","put","call","getApi","createTrackQuery","generateTemplateName","generateName","findClosesDir","get","handle","createNewPlaylist","UUID","pushTrackToListSaga","PL_PUSH_TRACK_REQUEST","getToken","state","user","token","getCurrent","playList","list","action","callQuery","currentPlaylist","_id","console","log","result","playlist","title","track","source","sourceId","quality","duration","thumbnails","position","length","id","genV1","toString"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,OAA1B,QAAyC,eAAzC;AACA,SAASC,SAAT,EAAoBC,MAApB,EAA4BC,GAA5B,EAAiCC,IAAjC,QAA6C,oBAA7C;AACA,SAASC,MAAT,QAAuB,0BAAvB;AACA,OAAOC,gBAAP,MAA6B,+BAA7B;AACA,SAASC,oBAAoB,IAAIC,YAAjC,EAA+CC,aAA/C,QAAoE,yCAApE;AACA,SAASC,GAAT,QAAoB,eAApB;AACA,SAAQC,MAAM,IAAIC,iBAAlB,QAA0C,6BAA1C;AACA,OAAOC,IAAP,MAAiB,QAAjB;AAGA,eAAe,UAAUC,mBAAV,GAAgC;AAC3C,QAAMb,SAAS,CAACD,OAAO,CAACe,qBAAT,EAAgCJ,MAAhC,CAAf;AACH;;AAED,MAAMK,QAAQ,GAAGC,KAAK,IAAIA,KAAK,CAACC,IAAN,CAAWC,KAArC;;AAGA,MAAMC,UAAU,GAAGH,KAAK,IAAIA,KAAK,CAACI,QAAN,CAAeC,IAA3C;;AAEA,UAAUX,MAAV,CAAiBY,MAAjB,EAAyB;AACrB,QAAM;AAAEC,IAAAA;AAAF,MAAgBnB,MAAM,CAAC,YAAD,CAA5B;AACA,QAAMc,KAAK,GAAG,MAAMjB,MAAM,CAACc,QAAD,CAA1B,CAFqB,CAIrB;;AACA,QAAMS,eAAe,GAAG,MAAMvB,MAAM,CAACkB,UAAD,CAApC;;AAEA,MAAG,CAACK,eAAe,CAACC,GAApB,EAAwB;AACpB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACA,UAAMxB,IAAI,CAACQ,iBAAD,EAAoB,EAApB,CAAV;AACAa,IAAAA,eAAe,GAAI,MAAMvB,MAAM,CAACkB,UAAD,CAA/B;AACH;;AACDO,EAAAA,OAAO,CAACC,GAAR,CAAYH,eAAZ,EAbqB,CAgBrB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;;AAEA,QAAMI,MAAM,GAAG,MAAML,SAAS,CAAClB,gBAAD,EAAmBa,KAAnB,EAA0B;AACpDW,IAAAA,QAAQ,EAAEL,eAAe,CAACC,GAD0B;AAEpDK,IAAAA,KAAK,EAAER,MAAM,CAACS,KAAP,CAAaD,KAFgC;AAGpDE,IAAAA,MAAM,EAAEV,MAAM,CAACS,KAAP,CAAaC,MAH+B;AAIpDC,IAAAA,QAAQ,EAAEX,MAAM,CAACS,KAAP,CAAaE,QAJ6B;AAKpDC,IAAAA,OAAO,EAAEZ,MAAM,CAACS,KAAP,CAAaG,OAL8B;AAMpDC,IAAAA,QAAQ,EAAEb,MAAM,CAACS,KAAP,CAAaI,QAN6B;AAOpDC,IAAAA,UAAU,EAAEd,MAAM,CAACS,KAAP,CAAaK,UAP2B;AAQpDC,IAAAA,QAAQ,EAAEb,eAAe,CAACc;AAR0B,GAA1B,CAA9B;AAUAZ,EAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BC,MAA/B,EA3CqB,CA4CrB;;AACI,QAAM1B,GAAG,CAACJ,eAAe,CAAC,EACtB,GAAGwB,MAAM,CAACS,KADY;AAEtB;AACAQ,IAAAA,EAAE,EAAE3B,IAAI,CAAC4B,KAAL,GAAaC,QAAb;AAHkB,GAAD,EAItBnB,MAAM,CAACF,QAJe,CAAhB,CAAT,CA7CiB,CAkDtB;AAGF","sourcesContent":["import { pushTrackToList, ACTIONS } from \"../../actions\";\r\nimport { takeEvery, select, put, call } from \"redux-saga/effects\"\r\nimport { getApi } from \"./../../apis/apiProvider\";\r\nimport createTrackQuery from \"./../../qlQueries/createTrack\";\r\nimport { generateTemplateName as generateName, findClosesDir } from \"./../../reducers/console/playlist/utils\";\r\nimport { get } from \"lodash/object\";\r\nimport {handle as createNewPlaylist} from \"./createPlaylistRequestSaga\";\r\nimport UUID from \"uuidjs\";\r\n\r\n\r\nexport default function* pushTrackToListSaga() {\r\n    yield takeEvery(ACTIONS.PL_PUSH_TRACK_REQUEST, handle)\r\n}\r\n\r\nconst getToken = state => state.user.token;\r\n\r\n\r\nconst getCurrent = state => state.playList.list;\r\n\r\nfunction* handle(action) {\r\n    const { callQuery } = getApi(\"UserAssets\");\r\n    const token = yield select(getToken);\r\n\r\n    //current playlist id \r\n    const currentPlaylist = yield select(getCurrent);\r\n\r\n    if(!currentPlaylist._id){\r\n        //create new \r\n        console.log(\"creating new playlist\")\r\n        yield call(createNewPlaylist, {});\r\n        currentPlaylist  = yield select(getCurrent);\r\n    }\r\n    console.log(currentPlaylist)\r\n\r\n\r\n    // const data = {};\r\n\r\n    //  ({\r\n    //     title: data.title,\r\n    //     source: data.source,\r\n    //     sourceId: data.sourceId,\r\n    //     quality: data.quality,\r\n    //     duration: data.duration\r\n    // } = action.track);\r\n\r\n    // data.playlist = currentPlaylist._id;\r\n    // data.thumbnails = JSON.stringify(action.track.thumbnails);\r\n    // data.position = currentPlaylist.length;\r\n\r\n    // const query = createTrackQuery(data)\r\n    // console.log(\"the query\", query);\r\n    \r\n    const result = yield callQuery(createTrackQuery, token, {\r\n        playlist: currentPlaylist._id,\r\n        title: action.track.title,\r\n        source: action.track.source,\r\n        sourceId: action.track.sourceId,\r\n        quality: action.track.quality,\r\n        duration: action.track.duration,\r\n        thumbnails: action.track.thumbnails,\r\n        position: currentPlaylist.length\r\n    });\r\n    console.log(\"result of query\", result);\r\n    //if(result?.data?.createTrack?.track?.id){\r\n        yield put(pushTrackToList({\r\n            ...action.track,\r\n            //id:result.data.createTrack.track.id\r\n            id: UUID.genV1().toString(),\r\n        }, action.playList));\r\n   // }\r\n\r\n\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}