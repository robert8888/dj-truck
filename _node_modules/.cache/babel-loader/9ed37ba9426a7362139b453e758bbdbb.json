{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\src\\\\pages\\\\common\\\\components\\\\RecordComments\\\\RecordComments.js\";\nimport React, { useState, useCallback, Fragment } from \"react\";\nimport { reqPostComment, reqUpdateComment, reqDeleteComment } from \"./../../../../actions\";\nimport { connect } from \"react-redux\";\nimport CommentContent from \"./Comment/Comment\";\nimport { useRecordPlayer } from \"./../../Hooks/useRecordPlayer\";\nimport \"./record-comments.scss\";\n\nconst RecordComments = ({\n  userId,\n  record,\n  postComment,\n  updateComment,\n  deleteComment\n}) => {\n  const [, player] = useRecordPlayer();\n  const post = useCallback(text => {\n    if (!postComment || !record || !userId) return;\n    const timeOfComment = 0;\n    const currentPlayback = player.getCurrent();\n\n    if (currentPlayback.id === record.id) {\n      timeOfComment = currentPlayback.progress * currentPlayback.duration;\n    }\n\n    const commentData = {\n      recordId: record.id,\n      userId: userId,\n      text: text,\n      time: timeOfComment\n    };\n    postComment(commentData);\n  }, [postComment, record, userId]);\n  const edit = useCallback((id, text) => {\n    if (!userId || !record) return;\n    const commentData = {\n      commentId: id,\n      text: text\n    };\n    updateComment(commentData);\n  }, [updateComment, userId, record]);\n  const onDelete = useCallback(id => {\n    if (!userId) return;\n    deleteComment(id);\n  }, [userId, deleteComment]);\n  const onCommentChange = useCallback((id, text) => {\n    if (!text) return;\n\n    if (!id) {\n      post(text);\n    } else {\n      edit(id, text);\n    }\n  }, [post, edit]);\n  return React.createElement(\"div\", {\n    className: \"record-comments\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, userId && React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, React.createElement(\"h6\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, \"Create new comment: \"), React.createElement(\"div\", {\n    className: \"comment-post-form\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, React.createElement(CommentContent, {\n    creationMode: true,\n    onChange: onCommentChange.bind(null, null),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }))), record && record.comments && record.comments.length && React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, React.createElement(\"h6\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, \"Comments: \"), record.comments.map(comment => React.createElement(CommentContent, {\n    key: 'comment - ' + comment.id,\n    header: comment.user.nickname,\n    editable: comment.user.id === userId,\n    onChange: onCommentChange.bind(null, comment.id),\n    onDelete: onDelete.bind(null, comment.id),\n    date: comment.createdAt,\n    text: comment.text,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }))));\n};\n\nconst mapStateToProps = state => ({\n  record: state.records.currentRecord,\n  userId: state.user.dbId\n});\n\nconst mapDispatchToProps = dispatch => ({\n  postComment: data => dispatch(reqPostComment(data)),\n  updateComment: data => dispatch(reqUpdateComment(data)),\n  deleteComment: id => dispatch(reqDeleteComment(id))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RecordComments);","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/pages/common/components/RecordComments/RecordComments.js"],"names":["React","useState","useCallback","Fragment","reqPostComment","reqUpdateComment","reqDeleteComment","connect","CommentContent","useRecordPlayer","RecordComments","userId","record","postComment","updateComment","deleteComment","player","post","text","timeOfComment","currentPlayback","getCurrent","id","progress","duration","commentData","recordId","time","edit","commentId","onDelete","onCommentChange","bind","comments","length","map","comment","user","nickname","createdAt","mapStateToProps","state","records","currentRecord","dbId","mapDispatchToProps","dispatch","data"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, Fragment } from \"react\";\r\nimport {reqPostComment, reqUpdateComment, reqDeleteComment} from \"./../../../../actions\";\r\nimport {connect} from \"react-redux\";\r\nimport CommentContent from \"./Comment/Comment\";\r\n\r\nimport {useRecordPlayer} from \"./../../Hooks/useRecordPlayer\";\r\nimport \"./record-comments.scss\";\r\n\r\n\r\nconst RecordComments = ({\r\n        userId,\r\n        record, \r\n        postComment,\r\n        updateComment,\r\n        deleteComment, \r\n    }) =>{\r\n    const [, player] = useRecordPlayer();\r\n\r\n    const post = useCallback((text) => {\r\n        if(!postComment || !record || !userId) return;\r\n\r\n        const timeOfComment = 0;\r\n        const currentPlayback = player.getCurrent();\r\n        if(currentPlayback.id === record.id){\r\n            timeOfComment = currentPlayback.progress * currentPlayback.duration;\r\n        }\r\n\r\n        const commentData = {\r\n            recordId : record.id,\r\n            userId: userId,\r\n            text: text,\r\n            time: timeOfComment,\r\n        }\r\n        postComment(commentData)\r\n    },[postComment, record, userId])\r\n\r\n    const edit = useCallback((id, text) => {\r\n        if(!userId || !record) return;\r\n        const commentData = {\r\n            commentId : id,\r\n            text : text,\r\n\r\n        }\r\n        updateComment(commentData)\r\n    }, [updateComment, userId, record])\r\n\r\n    const onDelete = useCallback( id => {\r\n        if(!userId) return;\r\n        deleteComment(id)\r\n    }, [userId, deleteComment])\r\n\r\n    const onCommentChange = useCallback((id, text) => {\r\n        if(!text) return;\r\n        \r\n        if(!id){\r\n            post(text);\r\n        } else {\r\n            edit(id, text)\r\n        }\r\n    },[ post, edit ])\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"record-comments\">\r\n            {/* Creating new post field */}\r\n\r\n            {userId && \r\n                <Fragment>\r\n                    <h6>Create new comment: </h6>\r\n                    <div className=\"comment-post-form\">\r\n                    <CommentContent \r\n                        creationMode\r\n                        onChange={ onCommentChange.bind(null, null)}/>\r\n                    </div>\r\n                </Fragment>\r\n            }\r\n            {/* Comments list */}\r\n            \r\n            { record && record.comments && record.comments.length &&\r\n              <Fragment>\r\n                <h6>Comments: </h6>\r\n                {record.comments.map( comment => (\r\n                    <CommentContent key={'comment - ' + comment.id}\r\n                        header={comment.user.nickname}\r\n                        editable={comment.user.id === userId}\r\n                        onChange={onCommentChange.bind(null, comment.id)}\r\n                        onDelete={onDelete.bind(null, comment.id)}\r\n                        date={comment.createdAt}\r\n                        text={comment.text}/>\r\n                ))}\r\n              </Fragment>\r\n            }\r\n\r\n                       \r\n        </div>\r\n    )\r\n}\r\nconst mapStateToProps = state => ({\r\n    record: state.records.currentRecord,\r\n    userId: state.user.dbId,\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    postComment: (data) => dispatch(reqPostComment(data)),\r\n    updateComment : (data) => dispatch(reqUpdateComment(data)),\r\n    deleteComment: (id) => dispatch(reqDeleteComment(id)),\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(RecordComments)"]},"metadata":{},"sourceType":"module"}