{"ast":null,"code":"import { ACTIONS } from \"./../actions\";\nimport { produce } from \"imer\";\nconst channelNumber = 2;\n\nconst initState = () => {\n  const channel = {\n    dryWet: 0,\n    effects: {\n      /*reverb: {\r\n          decay: 5\r\n      },\r\n      echo: {\r\n          time: 4\r\n      }*/\n    }\n  };\n  const state = {\n    effects: {},\n    channels: {}\n  };\n\n  for (let i = 1; i <= channelNumber; i++) {\n    state.channels[i] = channel;\n  }\n\n  return state;\n};\n\nconst nextParameterState = (state, channel, effect, param) => {\n  console.log(state, channel, effect, param);\n  return produce(state, nextState => {\n    var _state$channels$chann;\n\n    const effectParam = (state === null || state === void 0 ? void 0 : (_state$channels$chann = state.channels[channel]) === null || _state$channels$chann === void 0 ? void 0 : _state$channels$chann.effects[effect]) || {};\n    nextState.channels[channel].effects[effect] = { ...effectParam,\n      ...param\n    };\n  });\n};\n\nexport default function effectorReducer(state = initState(), action) {\n  switch (action.type) {\n    case ACTIONS.SET_AVAILABLE_EFFECTS:\n      {\n        return produce(state, nextState => nextState.effects = action.effects);\n      }\n\n    case ACTIONS.SET_EFFECT_PARAMETER:\n      {\n        return nextParameterState(state, action.channel, action.effect, {\n          [action.name]: action.value\n        });\n      }\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/reducers/effectorReducer.js"],"names":["ACTIONS","produce","channelNumber","initState","channel","dryWet","effects","state","channels","i","nextParameterState","effect","param","console","log","nextState","effectParam","effectorReducer","action","type","SET_AVAILABLE_EFFECTS","SET_EFFECT_PARAMETER","name","value"],"mappings":"AAAA,SAASA,OAAT,QAAwB,cAAxB;AACA,SAASC,OAAT,QAAwB,MAAxB;AAIA,MAAMC,aAAa,GAAG,CAAtB;;AACA,MAAMC,SAAS,GAAG,MAAM;AACpB,QAAMC,OAAO,GAAG;AACZC,IAAAA,MAAM,EAAE,CADI;AAEZC,IAAAA,OAAO,EAAE;AACL;;;;;;AADK;AAFG,GAAhB;AAYA,QAAMC,KAAK,GAAG;AACVD,IAAAA,OAAO,EAAE,EADC;AAEVE,IAAAA,QAAQ,EAAE;AAFA,GAAd;;AAKA,OAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,IAAIP,aAApB,EAAmCO,CAAC,EAApC,EAAuC;AACnCF,IAAAA,KAAK,CAACC,QAAN,CAAeC,CAAf,IAAoBL,OAApB;AACH;;AAED,SAAOG,KAAP;AACH,CAvBD;;AAyBA,MAAMG,kBAAkB,GAAG,CAACH,KAAD,EAAQH,OAAR,EAAiBO,MAAjB,EAAyBC,KAAzB,KAAmC;AAC1DC,EAAAA,OAAO,CAACC,GAAR,CAAYP,KAAZ,EAAmBH,OAAnB,EAA4BO,MAA5B,EAAoCC,KAApC;AACA,SAAOX,OAAO,CAACM,KAAD,EAAQQ,SAAS,IAAI;AAAA;;AAC/B,UAAMC,WAAW,GAAG,CAAAT,KAAK,SAAL,IAAAA,KAAK,WAAL,qCAAAA,KAAK,CAAEC,QAAP,CAAgBJ,OAAhB,iFAA0BE,OAA1B,CAAkCK,MAAlC,MAA6C,EAAjE;AACAI,IAAAA,SAAS,CAACP,QAAV,CAAmBJ,OAAnB,EAA4BE,OAA5B,CAAoCK,MAApC,IAA8C,EAAE,GAAGK,WAAL;AAAkB,SAAGJ;AAArB,KAA9C;AACH,GAHa,CAAd;AAIH,CAND;;AAQA,eAAe,SAASK,eAAT,CAAyBV,KAAK,GAAGJ,SAAS,EAA1C,EAA8Ce,MAA9C,EAAsD;AACjE,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKnB,OAAO,CAACoB,qBAAb;AAAoC;AAChC,eAAOnB,OAAO,CAACM,KAAD,EAAQQ,SAAS,IAAIA,SAAS,CAACT,OAAV,GAAoBY,MAAM,CAACZ,OAAhD,CAAd;AACH;;AAED,SAAKN,OAAO,CAACqB,oBAAb;AAAmC;AAC/B,eAAOX,kBAAkB,CAACH,KAAD,EAAQW,MAAM,CAACd,OAAf,EAAwBc,MAAM,CAACP,MAA/B,EAAuC;AAAE,WAACO,MAAM,CAACI,IAAR,GAAeJ,MAAM,CAACK;AAAxB,SAAvC,CAAzB;AACH;;AAED;AAAS,aAAOhB,KAAP;AATb;AAWH","sourcesContent":["import { ACTIONS } from \"./../actions\";\r\nimport { produce } from \"imer\";\r\n\r\n\r\n\r\nconst channelNumber = 2;\r\nconst initState = () => {\r\n    const channel = {\r\n        dryWet: 0,\r\n        effects: {\r\n            /*reverb: {\r\n                decay: 5\r\n            },\r\n            echo: {\r\n                time: 4\r\n            }*/\r\n        }\r\n    };\r\n\r\n    const state = {\r\n        effects: { },\r\n        channels: {},\r\n    }\r\n\r\n    for(let i = 1; i <= channelNumber; i++){\r\n        state.channels[i] = channel;\r\n    }\r\n\r\n    return state;\r\n}\r\n\r\nconst nextParameterState = (state, channel, effect, param) => {\r\n    console.log(state, channel, effect, param)\r\n    return produce(state, nextState => {\r\n        const effectParam = state?.channels[channel]?.effects[effect] || {};\r\n        nextState.channels[channel].effects[effect] = { ...effectParam, ...param };\r\n    })\r\n}\r\n\r\nexport default function effectorReducer(state = initState(), action) {\r\n    switch (action.type) {\r\n        case ACTIONS.SET_AVAILABLE_EFFECTS: {\r\n            return produce(state, nextState => nextState.effects = action.effects)\r\n        }\r\n\r\n        case ACTIONS.SET_EFFECT_PARAMETER: {\r\n            return nextParameterState(state, action.channel, action.effect, { [action.name]: action.value })\r\n        }\r\n\r\n        default: return state;\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}