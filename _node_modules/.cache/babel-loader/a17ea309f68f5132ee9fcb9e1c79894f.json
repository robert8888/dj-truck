{"ast":null,"code":"const {\n  tokenizeHtmlClass\n} = require(\"./tokenizeCssClass\"); //const {tokenizeHtmlClassBlock} = require(\"./tokenizeHtmlClassBlock\")\n\n\nmodule.exports = parseCssClass;\n\nfunction parseCssClass() {\n  let Parser = this.Parser;\n  let inlineTokenizers = Parser.prototype.inlineTokenizers; //  let blockTokenizers = Parser.prototype.blockTokenizers;\n\n  let inlineMethods = Parser.prototype.inlineMethods; //  let blockMethods = Parser.prototype.blockMethods;\n  // console.log('inline methods', inlineMethods);\n  // console.log('block methods', blockMethods)\n  // Add an inline tokenizer (defined in the following example).\n\n  inlineTokenizers.cssClass = tokenizeCssClass; //blockTokenizers.interruptParagraph = tokenizeHtmlClassBlock;\n  // Run it just before `text`.\n\n  inlineMethods.splice(inlineMethods.indexOf('text'), 0, 'cssClass'); //  blockMethods.splice(blockMethods.indexOf('paragraph'), 0, 'interruptParagraph')\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/pages/introduction/MarkDonwExtesnion/htmlClass.js"],"names":["tokenizeHtmlClass","require","module","exports","parseCssClass","Parser","inlineTokenizers","prototype","inlineMethods","cssClass","tokenizeCssClass","splice","indexOf"],"mappings":"AACA,MAAM;AAACA,EAAAA;AAAD,IAAsBC,OAAO,CAAC,oBAAD,CAAnC,C,CACA;;;AACAC,MAAM,CAACC,OAAP,GAAiBC,aAAjB;;AAEA,SAASA,aAAT,GAAyB;AACrB,MAAIC,MAAM,GAAG,KAAKA,MAAlB;AACA,MAAIC,gBAAgB,GAAGD,MAAM,CAACE,SAAP,CAAiBD,gBAAxC,CAFqB,CAGvB;;AACE,MAAIE,aAAa,GAAGH,MAAM,CAACE,SAAP,CAAiBC,aAArC,CAJqB,CAKvB;AAEC;AACA;AACC;;AAGAF,EAAAA,gBAAgB,CAACG,QAAjB,GAA4BC,gBAA5B,CAZqB,CAarB;AAEA;;AACAF,EAAAA,aAAa,CAACG,MAAd,CAAqBH,aAAa,CAACI,OAAd,CAAsB,MAAtB,CAArB,EAAoD,CAApD,EAAuD,UAAvD,EAhBqB,CAiBvB;AACD","sourcesContent":["\r\nconst {tokenizeHtmlClass} = require(\"./tokenizeCssClass\");\r\n//const {tokenizeHtmlClassBlock} = require(\"./tokenizeHtmlClassBlock\")\r\nmodule.exports = parseCssClass;\r\n\r\nfunction parseCssClass() {\r\n    let Parser = this.Parser\r\n    let inlineTokenizers = Parser.prototype.inlineTokenizers\r\n  //  let blockTokenizers = Parser.prototype.blockTokenizers;\r\n    let inlineMethods = Parser.prototype.inlineMethods\r\n  //  let blockMethods = Parser.prototype.blockMethods;\r\n\r\n   // console.log('inline methods', inlineMethods);\r\n   // console.log('block methods', blockMethods)\r\n    // Add an inline tokenizer (defined in the following example).\r\n\r\n\r\n    inlineTokenizers.cssClass = tokenizeCssClass;\r\n    //blockTokenizers.interruptParagraph = tokenizeHtmlClassBlock;\r\n\r\n    // Run it just before `text`.\r\n    inlineMethods.splice(inlineMethods.indexOf('text'), 0, 'cssClass')\r\n  //  blockMethods.splice(blockMethods.indexOf('paragraph'), 0, 'interruptParagraph')\r\n}"]},"metadata":{},"sourceType":"module"}