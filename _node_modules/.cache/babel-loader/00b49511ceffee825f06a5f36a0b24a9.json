{"ast":null,"code":"import { ACTIONS } from \"./../actions\";\nimport { produce } from \"imer\";\nconst deck = {\n  track: {\n    title: \"\",\n    bpm: 0,\n    quality: \"\",\n    duration: \"\",\n    source: \"\",\n    id: \"\",\n    thumbnail: {}\n  },\n  // \n  playBackState: {\n    ready: false,\n    paused: true,\n    cuePoint: 0,\n    cueActive: false,\n    pitch: 0,\n    timeLeft: null\n  }\n};\nconst initState = {\n  channel: {\n    A: { ...deck\n    },\n    B: { ...deck\n    }\n  }\n};\n\nfunction nextState(part) {\n  return (state, destination, haveToBeReady, variables) => {\n    if (!state.channel[destination]) return state;\n    if (haveToBeReady && !state.channel[destination].playBackState.ready) return state;\n    const nextState = produce(state, draftState => {\n      for (let [variable, value] of Object.entries(variables)) {\n        if (part === \"playBackState\") {\n          draftState.channel[destination].playBackState[variable] = value;\n        } else if (part === \"track\") {\n          draftState.channel[destination].track[variable] = value;\n        }\n      }\n    });\n    return nextState;\n  };\n}\n\nconst nextPlayBackState = nextState('playBackState');\nconst nextTrackState = nextState('track');\n\nfunction consoleReducer(state = initState, action) {\n  switch (action.type) {\n    case ACTIONS.LOAD_TRACK:\n      {\n        const nextTrack = action.track;\n        return produce(state, draftState => {\n          draftState.channel[action.destination].track = {\n            title: nextTrack.title,\n            bpm: nextTrack.bpm || 0,\n            quality: nextTrack.quality,\n            duration: nextTrack.duration,\n            source: nextTrack.source,\n            id: nextTrack.id,\n            thumbnail: nextTrack.thumbnail\n          };\n        });\n      }\n\n    case ACTIONS.SET_READY:\n      {\n        return nextPlayBackState(state, action.destination, false, {\n          ready: action.value\n        });\n      }\n\n    case ACTIONS.SET_PITCH:\n      {\n        return nextPlayBackState(state, action.destination, false, {\n          pitch: action.pitch\n        });\n      }\n\n    case ACTIONS.INCREASE_BPM:\n      {\n        var _state$channel$action, _state$channel$action2;\n\n        let prevPitch = (_state$channel$action = state.channel[action.destination]) === null || _state$channel$action === void 0 ? void 0 : (_state$channel$action2 = _state$channel$action.playBackState) === null || _state$channel$action2 === void 0 ? void 0 : _state$channel$action2.pitch;\n        if (prevPitch === undefined) return state;\n        return nextPlayBackState(state, action.destination, false, {\n          pitch: prevPitch + action.amount\n        });\n      }\n\n    case ACTIONS.DECREASE_BPM:\n      {\n        var _state$channel$action3, _state$channel$action4;\n\n        let prevPitch = (_state$channel$action3 = state.channel[action.destination]) === null || _state$channel$action3 === void 0 ? void 0 : (_state$channel$action4 = _state$channel$action3.playBackState) === null || _state$channel$action4 === void 0 ? void 0 : _state$channel$action4.pitch;\n        if (prevPitch === undefined) return state;\n        return nextPlayBackState(state, action.destination, false, {\n          pitch: prevPitch - action.amount\n        });\n      }\n\n    case ACTIONS.TOGGLE_PLAY:\n      {\n        var _state$channel$action5, _state$channel$action6;\n\n        let prevPause = (_state$channel$action5 = state.channel[action.destination]) === null || _state$channel$action5 === void 0 ? void 0 : (_state$channel$action6 = _state$channel$action5.playBackState) === null || _state$channel$action6 === void 0 ? void 0 : _state$channel$action6.paused;\n        prevPause = prevPause === undefined ? true : prevPause;\n        return nextPlayBackState(state, action.destination, true, {\n          paused: !prevPause\n        });\n      }\n\n    case ACTIONS.SET_TIME_LEFT:\n      {\n        return nextPlayBackState(state, action.destination, true, {\n          timeLeft: action.timeLeft\n        });\n      }\n\n    case ACTIONS.TOGGLE_CUE:\n      {\n        var _state$channel$action7, _state$channel$action8;\n\n        let prevCue = (_state$channel$action7 = state.channel[action.destination]) === null || _state$channel$action7 === void 0 ? void 0 : (_state$channel$action8 = _state$channel$action7.playBackState) === null || _state$channel$action8 === void 0 ? void 0 : _state$channel$action8.cueActive;\n        prevCue = prevCue === undefined ? false : prevCue;\n        return nextPlayBackState(state, action.destination, true, {\n          cueActive: !prevCue\n        });\n      }\n\n    case ACTIONS.CANCEL_CUE_AND_PLAY:\n      {\n        return nextPlayBackState(state, action.destination, true, {\n          cueActive: false,\n          paused: false\n        });\n      }\n\n    case ACTIONS.SET_CUE_POINT:\n      {\n        return nextPlayBackState(state, action.destination, true, {\n          cuePoint: action.position\n        });\n      }\n\n    case ACTIONS.SET_BPM:\n      {\n        const bpm = action.bpm;\n        const source = action.source;\n        const id = action.id;\n        let channels = [];\n\n        for (let channelName of Object.keys(state.channel)) {\n          if (state.channel[channelName].track.id === id && state.channel[channelName].track.source === source) {\n            channels.push(channelName);\n          }\n        }\n\n        if (channels.length === 0) return state;\n        return channels.reduce((prevState, channelName) => {\n          return nextTrackState(prevState, channelName, false, {\n            bpm: bpm\n          });\n        }, state);\n      }\n\n    default:\n      return state;\n  }\n}\n\nexport default consoleReducer;\n/*\r\nfunction nextPlayBackState(state, destination, haveToBeReady, variables){\r\n    if(!state.channel[destination]) return state;\r\n    if(haveToBeReady && !state.channel[destination].playBackState.ready) return state;\r\n\r\n    const nextState = produce(state, (draftState) => {\r\n        for(let [variable, value] of Object.entries(variables)){\r\n            draftState.channel[destination].playBackState[variable] = value;\r\n        }\r\n    })\r\n    return nextState;\r\n}\r\n\r\nfunction nextTrackState(state, destination, haveToBeReady, variables){\r\n    if(!state.channel[destination]) return state;\r\n    if(haveToBeReady && !state.channel[destination].playBackState.ready) return state;\r\n\r\n    const nextState = produce(state, (draftState) => {\r\n        for(let [variable, value] of Object.entries(variables)){\r\n            draftState.channel[destination].track[variable] = value;\r\n        }\r\n    })\r\n    return nextState;\r\n}*/","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/reducers/decksReducer.js"],"names":["ACTIONS","produce","deck","track","title","bpm","quality","duration","source","id","thumbnail","playBackState","ready","paused","cuePoint","cueActive","pitch","timeLeft","initState","channel","A","B","nextState","part","state","destination","haveToBeReady","variables","draftState","variable","value","Object","entries","nextPlayBackState","nextTrackState","consoleReducer","action","type","LOAD_TRACK","nextTrack","SET_READY","SET_PITCH","INCREASE_BPM","prevPitch","undefined","amount","DECREASE_BPM","TOGGLE_PLAY","prevPause","SET_TIME_LEFT","TOGGLE_CUE","prevCue","CANCEL_CUE_AND_PLAY","SET_CUE_POINT","position","SET_BPM","channels","channelName","keys","push","length","reduce","prevState"],"mappings":"AAAA,SAAUA,OAAV,QAAyB,cAAzB;AACA,SAASC,OAAT,QAAwB,MAAxB;AAEA,MAAMC,IAAI,GAAG;AACTC,EAAAA,KAAK,EAAG;AACJC,IAAAA,KAAK,EAAG,EADJ;AAEJC,IAAAA,GAAG,EAAG,CAFF;AAGJC,IAAAA,OAAO,EAAG,EAHN;AAIJC,IAAAA,QAAQ,EAAG,EAJP;AAKJC,IAAAA,MAAM,EAAG,EALL;AAMJC,IAAAA,EAAE,EAAE,EANA;AAOJC,IAAAA,SAAS,EAAG;AAPR,GADC;AASN;AACHC,EAAAA,aAAa,EAAG;AACZC,IAAAA,KAAK,EAAE,KADK;AAEZC,IAAAA,MAAM,EAAE,IAFI;AAGZC,IAAAA,QAAQ,EAAE,CAHE;AAIZC,IAAAA,SAAS,EAAE,KAJC;AAKZC,IAAAA,KAAK,EAAE,CALK;AAMZC,IAAAA,QAAQ,EAAG;AANC;AAVP,CAAb;AAqBA,MAAMC,SAAS,GAAG;AACdC,EAAAA,OAAO,EAAE;AACLC,IAAAA,CAAC,EAAC,EACE,GAAGlB;AADL,KADG;AAILmB,IAAAA,CAAC,EAAC,EACE,GAAGnB;AADL;AAJG;AADK,CAAlB;;AAWA,SAASoB,SAAT,CAAmBC,IAAnB,EAAwB;AACpB,SAAO,CAACC,KAAD,EAAQC,WAAR,EAAqBC,aAArB,EAAoCC,SAApC,KAAgD;AACnD,QAAG,CAACH,KAAK,CAACL,OAAN,CAAcM,WAAd,CAAJ,EAAgC,OAAOD,KAAP;AAChC,QAAGE,aAAa,IAAI,CAACF,KAAK,CAACL,OAAN,CAAcM,WAAd,EAA2Bd,aAA3B,CAAyCC,KAA9D,EAAqE,OAAOY,KAAP;AAErE,UAAMF,SAAS,GAAGrB,OAAO,CAACuB,KAAD,EAASI,UAAD,IAAgB;AAC7C,WAAI,IAAI,CAACC,QAAD,EAAWC,KAAX,CAAR,IAA6BC,MAAM,CAACC,OAAP,CAAeL,SAAf,CAA7B,EAAuD;AACnD,YAAGJ,IAAI,KAAK,eAAZ,EAA4B;AACxBK,UAAAA,UAAU,CAACT,OAAX,CAAmBM,WAAnB,EAAgCd,aAAhC,CAA8CkB,QAA9C,IAA0DC,KAA1D;AACH,SAFD,MAEO,IAAGP,IAAI,KAAI,OAAX,EAAmB;AACtBK,UAAAA,UAAU,CAACT,OAAX,CAAmBM,WAAnB,EAAgCtB,KAAhC,CAAsC0B,QAAtC,IAAkDC,KAAlD;AACH;AACJ;AACJ,KARwB,CAAzB;AASA,WAAOR,SAAP;AACH,GAdD;AAeH;;AAED,MAAMW,iBAAiB,GAAGX,SAAS,CAAC,eAAD,CAAnC;AACA,MAAMY,cAAc,GAAGZ,SAAS,CAAC,OAAD,CAAhC;;AAIA,SAASa,cAAT,CAAwBX,KAAK,GAAGN,SAAhC,EAA2CkB,MAA3C,EAAkD;AAC9C,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKrC,OAAO,CAACsC,UAAb;AAA0B;AACtB,cAAMC,SAAS,GAAGH,MAAM,CAACjC,KAAzB;AACA,eAAOF,OAAO,CAACuB,KAAD,EAAQI,UAAU,IAAI;AAChCA,UAAAA,UAAU,CAACT,OAAX,CAAmBiB,MAAM,CAACX,WAA1B,EAAuCtB,KAAvC,GAA+C;AAC3CC,YAAAA,KAAK,EAAGmC,SAAS,CAACnC,KADyB;AAE3CC,YAAAA,GAAG,EAAGkC,SAAS,CAAClC,GAAV,IAAiB,CAFoB;AAG3CC,YAAAA,OAAO,EAAGiC,SAAS,CAACjC,OAHuB;AAI3CC,YAAAA,QAAQ,EAAGgC,SAAS,CAAChC,QAJsB;AAK3CC,YAAAA,MAAM,EAAG+B,SAAS,CAAC/B,MALwB;AAM3CC,YAAAA,EAAE,EAAG8B,SAAS,CAAC9B,EAN4B;AAO3CC,YAAAA,SAAS,EAAG6B,SAAS,CAAC7B;AAPqB,WAA/C;AASH,SAVa,CAAd;AAWH;;AAED,SAAKV,OAAO,CAACwC,SAAb;AAAyB;AACrB,eAAOP,iBAAiB,CAACT,KAAD,EAAQY,MAAM,CAACX,WAAf,EAA4B,KAA5B,EAAmC;AAAEb,UAAAA,KAAK,EAAGwB,MAAM,CAACN;AAAjB,SAAnC,CAAxB;AACH;;AAED,SAAK9B,OAAO,CAACyC,SAAb;AAAyB;AACrB,eAAOR,iBAAiB,CAACT,KAAD,EAAQY,MAAM,CAACX,WAAf,EAA4B,KAA5B,EAAmC;AAAET,UAAAA,KAAK,EAAGoB,MAAM,CAACpB;AAAjB,SAAnC,CAAxB;AACH;;AAED,SAAKhB,OAAO,CAAC0C,YAAb;AAA4B;AAAA;;AACxB,YAAIC,SAAS,4BAAGnB,KAAK,CAACL,OAAN,CAAciB,MAAM,CAACX,WAArB,CAAH,oFAAG,sBAAmCd,aAAtC,2DAAG,uBAAkDK,KAAlE;AACA,YAAG2B,SAAS,KAAKC,SAAjB,EAA6B,OAAOpB,KAAP;AAC7B,eAAOS,iBAAiB,CAACT,KAAD,EAAQY,MAAM,CAACX,WAAf,EAA4B,KAA5B,EAAmC;AAAET,UAAAA,KAAK,EAAG2B,SAAS,GAAGP,MAAM,CAACS;AAA7B,SAAnC,CAAxB;AACH;;AAED,SAAK7C,OAAO,CAAC8C,YAAb;AAA4B;AAAA;;AACxB,YAAIH,SAAS,6BAAGnB,KAAK,CAACL,OAAN,CAAciB,MAAM,CAACX,WAArB,CAAH,qFAAG,uBAAmCd,aAAtC,2DAAG,uBAAkDK,KAAlE;AACA,YAAG2B,SAAS,KAAKC,SAAjB,EAA6B,OAAOpB,KAAP;AAC7B,eAAOS,iBAAiB,CAACT,KAAD,EAAQY,MAAM,CAACX,WAAf,EAA4B,KAA5B,EAAmC;AAAET,UAAAA,KAAK,EAAG2B,SAAS,GAAGP,MAAM,CAACS;AAA7B,SAAnC,CAAxB;AACH;;AAGD,SAAK7C,OAAO,CAAC+C,WAAb;AAA2B;AAAA;;AACvB,YAAIC,SAAS,6BAAGxB,KAAK,CAACL,OAAN,CAAciB,MAAM,CAACX,WAArB,CAAH,qFAAG,uBAAmCd,aAAtC,2DAAG,uBAAkDE,MAAlE;AACAmC,QAAAA,SAAS,GAAIA,SAAS,KAAKJ,SAAf,GAA4B,IAA5B,GAAmCI,SAA/C;AACA,eAAOf,iBAAiB,CAACT,KAAD,EAAQY,MAAM,CAACX,WAAf,EAA4B,IAA5B,EAAkC;AAAEZ,UAAAA,MAAM,EAAG,CAACmC;AAAZ,SAAlC,CAAxB;AACH;;AAED,SAAKhD,OAAO,CAACiD,aAAb;AAA6B;AACzB,eAAOhB,iBAAiB,CAACT,KAAD,EAAQY,MAAM,CAACX,WAAf,EAA4B,IAA5B,EAAkC;AAACR,UAAAA,QAAQ,EAAEmB,MAAM,CAACnB;AAAlB,SAAlC,CAAxB;AACH;;AAED,SAAKjB,OAAO,CAACkD,UAAb;AAA0B;AAAA;;AACtB,YAAIC,OAAO,6BAAG3B,KAAK,CAACL,OAAN,CAAciB,MAAM,CAACX,WAArB,CAAH,qFAAG,uBAAmCd,aAAtC,2DAAG,uBAAkDI,SAAhE;AACAoC,QAAAA,OAAO,GAAIA,OAAO,KAAKP,SAAb,GAA0B,KAA1B,GAAiCO,OAA3C;AACA,eAAOlB,iBAAiB,CAACT,KAAD,EAAQY,MAAM,CAACX,WAAf,EAA4B,IAA5B,EAAkC;AAAEV,UAAAA,SAAS,EAAG,CAACoC;AAAf,SAAlC,CAAxB;AACH;;AAED,SAAKnD,OAAO,CAACoD,mBAAb;AAAmC;AAC/B,eAAOnB,iBAAiB,CAACT,KAAD,EAAQY,MAAM,CAACX,WAAf,EAA4B,IAA5B,EAAkC;AACtDV,UAAAA,SAAS,EAAE,KAD2C;AAEtDF,UAAAA,MAAM,EAAE;AAF8C,SAAlC,CAAxB;AAIH;;AAED,SAAKb,OAAO,CAACqD,aAAb;AAA6B;AACzB,eAAOpB,iBAAiB,CAACT,KAAD,EAAQY,MAAM,CAACX,WAAf,EAA4B,IAA5B,EAAkC;AAAEX,UAAAA,QAAQ,EAAGsB,MAAM,CAACkB;AAApB,SAAlC,CAAxB;AACH;;AAED,SAAKtD,OAAO,CAACuD,OAAb;AAAuB;AACnB,cAAMlD,GAAG,GAAG+B,MAAM,CAAC/B,GAAnB;AACA,cAAMG,MAAM,GAAG4B,MAAM,CAAC5B,MAAtB;AACA,cAAMC,EAAE,GAAG2B,MAAM,CAAC3B,EAAlB;AACA,YAAI+C,QAAQ,GAAG,EAAf;;AACA,aAAI,IAAIC,WAAR,IAAuB1B,MAAM,CAAC2B,IAAP,CAAYlC,KAAK,CAACL,OAAlB,CAAvB,EAAkD;AAC9C,cAAGK,KAAK,CAACL,OAAN,CAAcsC,WAAd,EAA2BtD,KAA3B,CAAiCM,EAAjC,KAAwCA,EAAxC,IACIe,KAAK,CAACL,OAAN,CAAcsC,WAAd,EAA2BtD,KAA3B,CAAiCK,MAAjC,KAA4CA,MADnD,EAEI;AACIgD,YAAAA,QAAQ,CAACG,IAAT,CAAcF,WAAd;AACH;AAER;;AACD,YAAGD,QAAQ,CAACI,MAAT,KAAoB,CAAvB,EAA0B,OAAOpC,KAAP;AAE1B,eAAOgC,QAAQ,CAACK,MAAT,CAAgB,CAACC,SAAD,EAAYL,WAAZ,KAA4B;AAC/C,iBAAOvB,cAAc,CAAC4B,SAAD,EAAYL,WAAZ,EAAyB,KAAzB,EAAgC;AAACpD,YAAAA,GAAG,EAAGA;AAAP,WAAhC,CAArB;AACH,SAFM,EAEJmB,KAFI,CAAP;AAGH;;AAED;AAAU,aAAOA,KAAP;AApFd;AAsFH;;AAED,eAAeW,cAAf;AAKA","sourcesContent":["import {  ACTIONS } from \"./../actions\";\r\nimport { produce } from \"imer\";\r\n\r\nconst deck = {\r\n    track : {\r\n        title : \"\",\r\n        bpm : 0,\r\n        quality : \"\",\r\n        duration : \"\",\r\n        source : \"\",\r\n        id: \"\",\r\n        thumbnail : {}\r\n    }, // \r\n    playBackState : {\r\n        ready: false,\r\n        paused: true,\r\n        cuePoint: 0,\r\n        cueActive: false,\r\n        pitch: 0,\r\n        timeLeft : null\r\n    }\r\n}\r\n\r\n\r\nconst initState = {\r\n    channel: {\r\n        A:{\r\n            ...deck\r\n        },\r\n        B:{\r\n            ...deck\r\n        }\r\n    },\r\n}\r\n\r\nfunction nextState(part){\r\n    return (state, destination, haveToBeReady, variables)=>{\r\n        if(!state.channel[destination]) return state;\r\n        if(haveToBeReady && !state.channel[destination].playBackState.ready) return state;\r\n    \r\n        const nextState = produce(state, (draftState) => {\r\n            for(let [variable, value] of Object.entries(variables)){\r\n                if(part === \"playBackState\"){\r\n                    draftState.channel[destination].playBackState[variable] = value;\r\n                } else if(part ===\"track\"){\r\n                    draftState.channel[destination].track[variable] = value;\r\n                }\r\n            }\r\n        })\r\n        return nextState;\r\n    }\r\n}\r\n\r\nconst nextPlayBackState = nextState('playBackState');\r\nconst nextTrackState = nextState('track');\r\n\r\n\r\n\r\nfunction consoleReducer(state = initState, action){\r\n    switch(action.type){\r\n        case ACTIONS.LOAD_TRACK : {\r\n            const nextTrack = action.track;\r\n            return produce(state, draftState => {\r\n                draftState.channel[action.destination].track = {\r\n                    title : nextTrack.title,\r\n                    bpm : nextTrack.bpm || 0,\r\n                    quality : nextTrack.quality,\r\n                    duration : nextTrack.duration,\r\n                    source : nextTrack.source,\r\n                    id : nextTrack.id,\r\n                    thumbnail : nextTrack.thumbnail,\r\n                }\r\n            })\r\n        }\r\n\r\n        case ACTIONS.SET_READY : {\r\n            return nextPlayBackState(state, action.destination, false, { ready : action.value })\r\n        }\r\n\r\n        case ACTIONS.SET_PITCH : {\r\n            return nextPlayBackState(state, action.destination, false, { pitch : action.pitch })\r\n        }\r\n\r\n        case ACTIONS.INCREASE_BPM : {\r\n            let prevPitch = state.channel[action.destination]?.playBackState?.pitch;\r\n            if(prevPitch === undefined ) return state;\r\n            return nextPlayBackState(state, action.destination, false, { pitch : prevPitch + action.amount })\r\n        }\r\n\r\n        case ACTIONS.DECREASE_BPM : {\r\n            let prevPitch = state.channel[action.destination]?.playBackState?.pitch;\r\n            if(prevPitch === undefined ) return state;\r\n            return nextPlayBackState(state, action.destination, false, { pitch : prevPitch - action.amount })\r\n        }\r\n\r\n\r\n        case ACTIONS.TOGGLE_PLAY : {\r\n            let prevPause = state.channel[action.destination]?.playBackState?.paused;\r\n            prevPause = (prevPause === undefined) ? true : prevPause;\r\n            return nextPlayBackState(state, action.destination, true, { paused : !prevPause })\r\n        }\r\n\r\n        case ACTIONS.SET_TIME_LEFT : {\r\n            return nextPlayBackState(state, action.destination, true, {timeLeft: action.timeLeft})\r\n        }\r\n\r\n        case ACTIONS.TOGGLE_CUE : {\r\n            let prevCue = state.channel[action.destination]?.playBackState?.cueActive;\r\n            prevCue = (prevCue === undefined) ? false: prevCue;\r\n            return nextPlayBackState(state, action.destination, true, { cueActive : !prevCue })\r\n        }\r\n\r\n        case ACTIONS.CANCEL_CUE_AND_PLAY : {\r\n            return nextPlayBackState(state, action.destination, true, {\r\n                cueActive: false,\r\n                paused: false,\r\n            })\r\n        }\r\n\r\n        case ACTIONS.SET_CUE_POINT : {\r\n            return nextPlayBackState(state, action.destination, true, { cuePoint : action.position })\r\n        }\r\n\r\n        case ACTIONS.SET_BPM : {\r\n            const bpm = action.bpm;\r\n            const source = action.source;\r\n            const id = action.id;\r\n            let channels = [];\r\n            for(let channelName of Object.keys(state.channel)){\r\n                if(state.channel[channelName].track.id === id \r\n                    && state.channel[channelName].track.source === source)\r\n                    {\r\n                        channels.push(channelName);\r\n                    }\r\n\r\n            }\r\n            if(channels.length === 0) return state;\r\n\r\n            return channels.reduce((prevState, channelName) => {\r\n                return nextTrackState(prevState, channelName, false, {bpm : bpm})\r\n            }, state);\r\n        }\r\n\r\n        default : return state;\r\n    }\r\n}\r\n\r\nexport default consoleReducer;\r\n\r\n\r\n\r\n\r\n/*\r\nfunction nextPlayBackState(state, destination, haveToBeReady, variables){\r\n    if(!state.channel[destination]) return state;\r\n    if(haveToBeReady && !state.channel[destination].playBackState.ready) return state;\r\n\r\n    const nextState = produce(state, (draftState) => {\r\n        for(let [variable, value] of Object.entries(variables)){\r\n            draftState.channel[destination].playBackState[variable] = value;\r\n        }\r\n    })\r\n    return nextState;\r\n}\r\n\r\nfunction nextTrackState(state, destination, haveToBeReady, variables){\r\n    if(!state.channel[destination]) return state;\r\n    if(haveToBeReady && !state.channel[destination].playBackState.ready) return state;\r\n\r\n    const nextState = produce(state, (draftState) => {\r\n        for(let [variable, value] of Object.entries(variables)){\r\n            draftState.channel[destination].track[variable] = value;\r\n        }\r\n    })\r\n    return nextState;\r\n}*/\r\n\r\n"]},"metadata":{},"sourceType":"module"}