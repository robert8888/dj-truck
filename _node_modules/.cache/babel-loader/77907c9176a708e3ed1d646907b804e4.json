{"ast":null,"code":"import store from \"./../../../store\";\nexport default class Mixer {\n  constructor(channels) {\n    this.config = store.getState().configuration.mixer;\n    this.channels = channels;\n    this.audioNodes = {\n      channels: {}\n    };\n\n    for (let channelName of this.channels.getChannelNames()) {\n      this.audioNodes.channels = { ...this.audioNodes.channels,\n        [channelName]: {}\n      };\n    }\n  }\n\n  setUpAudioNodes(channelName) {\n    let audioCtx = this.channels.getChannel(channelName).backend.ac;\n    this.audioNodes.channels[channelName] = {\n      gainNode: audioCtx.createGain(),\n      eqHiFilterNode: audioCtx.createBiquadFilter(),\n      eqMidFilterNode: audioCtx.createBiquadFilter(),\n      eqLowFilterNode: audioCtx.createBiquadFilter()\n    };\n    const channel = this.audioNodes.channels[channelName]; //\n\n    channel.eqLowFilterNode.type = \"lowshelf\";\n    channel.eqLowFilterNode.frequency.setValueAtTime(this.config.low.frequency, audioCtx.currentTime);\n    channel.eqHiFilterNode.type = \"highshelf\";\n    channel.eqHiFilterNode.frequency.setValueAtTime(this.config.hi.frequency, audioCtx.currentTime);\n    channel.eqMidFilterNode.type = \"peaking\";\n    channel.eqMidFilterNode.frequency.setValueAtTime(this.config.mid.frequency, audioCtx.currentTime);\n    channel.eqMidFilterNode.Q.setValueAtTime(this.config.mid.Q, audioCtx.currentTime);\n    this.channels.getChannel(channelName).backend.setFilters([channel.eqLowFilterNode, channel.eqMidFilterNode, channel.eqHiFilterNode, channel.gainNode]);\n    console.log(this.channels.getChannel(channelName).getFilters());\n  }\n\n  setGainValue(channelName, knobValue, nodeName) {\n    let gain = 1 + knobValue / 100;\n    let audioCtx = this.channels.getChannel(channelName).backend.ac;\n    let channel = this.audioNodes.channels[channelName];\n    channel[nodeName].gain.setValueAtTime(parseFloat(gain), audioCtx.currentTime);\n  }\n\n  setFilterValue(channelName, knobValue, nodeName) {\n    let audioCtx = this.channels.getChannel(channelName).backend.ac;\n    let channel = this.audioNodes.channels[channelName];\n    channel[nodeName].gain.setValueAtTime(knobValue, audioCtx.currentTime);\n  }\n\n  setGain(channelName, knobValue) {\n    this.setGainValue(channelName, knobValue, 'gainNode');\n  }\n\n  setEqHigh(channelName, knobValue) {\n    this.setFilterValue(channelName, knobValue, 'eqHiFilterNode');\n  }\n\n  setEqMid(channelName, knobValue) {\n    this.setFilterValue(channelName, knobValue, 'eqMidFilterNode');\n    let fader = store.getState().mixer.fader.position;\n    let audioCtx = this.channels.getChannel(channelName).backend.ac;\n    let channel = this.audioNodes.channels[channelName];\n    console.log(20 * Math.log10(fader));\n    channel['eqMidFilterNode'].Q.setValueAtTime(1.04, audioCtx.currentTime);\n    console.log(channel['eqMidFilterNode']);\n  }\n\n  setEqLow(channelName, knobValue) {\n    this.setFilterValue(channelName, knobValue, 'eqLowFilterNode');\n  }\n\n}\n/*\r\nfunction equalPowerCrossfade(percent) {\r\n    // Use an equal-power crossfading curve:\r\n    var gain1 = Math.cos(percent * 0.5*Math.PI);\r\n    var gain2 = Math.cos((1.0 - percent) * 0.5*Math.PI);\r\n    this.ctl1.gainNode.gain.value = gain1;\r\n    this.ctl2.gainNode.gain.value = gain2;\r\n   }\r\n*/","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/core/console/mixer/mixer.js"],"names":["store","Mixer","constructor","channels","config","getState","configuration","mixer","audioNodes","channelName","getChannelNames","setUpAudioNodes","audioCtx","getChannel","backend","ac","gainNode","createGain","eqHiFilterNode","createBiquadFilter","eqMidFilterNode","eqLowFilterNode","channel","type","frequency","setValueAtTime","low","currentTime","hi","mid","Q","setFilters","console","log","getFilters","setGainValue","knobValue","nodeName","gain","parseFloat","setFilterValue","setGain","setEqHigh","setEqMid","fader","position","Math","log10","setEqLow"],"mappings":"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","sourcesContent":["import store from \"./../../../store\";\r\n\r\n\r\nexport default class Mixer{\r\n    constructor(channels){\r\n        this.config = store.getState().configuration.mixer;\r\n        this.channels = channels;\r\n        this.audioNodes = {\r\n            channels : {\r\n            }\r\n        }\r\n\r\n        for(let channelName of this.channels.getChannelNames()){\r\n            this.audioNodes.channels = { \r\n                ...this.audioNodes.channels,\r\n                [channelName] : {},\r\n            }\r\n        }\r\n    }\r\n\r\n    setUpAudioNodes(channelName){\r\n        let audioCtx = this.channels.getChannel(channelName).backend.ac;\r\n\r\n        this.audioNodes.channels[channelName] = {\r\n            gainNode : audioCtx.createGain(),\r\n            eqHiFilterNode : audioCtx.createBiquadFilter(),\r\n            eqMidFilterNode : audioCtx.createBiquadFilter(),\r\n            eqLowFilterNode : audioCtx.createBiquadFilter(),\r\n        }\r\n        const channel = this.audioNodes.channels[channelName];\r\n        //\r\n        channel.eqLowFilterNode.type = \"lowshelf\";\r\n        channel.eqLowFilterNode.frequency.setValueAtTime(this.config.low.frequency, audioCtx.currentTime);\r\n\r\n        channel.eqHiFilterNode.type = \"highshelf\";\r\n        channel.eqHiFilterNode.frequency.setValueAtTime(this.config.hi.frequency, audioCtx.currentTime);\r\n\r\n        channel.eqMidFilterNode.type = \"peaking\";\r\n        channel.eqMidFilterNode.frequency.setValueAtTime(this.config.mid.frequency, audioCtx.currentTime);\r\n        channel.eqMidFilterNode.Q.setValueAtTime(this.config.mid.Q, audioCtx.currentTime);  \r\n\r\n        this.channels.getChannel(channelName).backend.setFilters([\r\n            channel.eqLowFilterNode, \r\n            channel.eqMidFilterNode, \r\n            channel.eqHiFilterNode, \r\n            channel.gainNode,])\r\n\r\n        console.log(this.channels.getChannel(channelName).getFilters());\r\n    }\r\n\r\n    setGainValue(channelName, knobValue, nodeName){\r\n        let gain = 1 + knobValue / 100 ;\r\n        let audioCtx = this.channels.getChannel(channelName).backend.ac;\r\n\r\n        let channel = this.audioNodes.channels[channelName];\r\n        channel[nodeName].gain.setValueAtTime( parseFloat(gain) , audioCtx.currentTime);\r\n    }\r\n\r\n    setFilterValue(channelName, knobValue, nodeName){\r\n        let audioCtx = this.channels.getChannel(channelName).backend.ac;\r\n\r\n        let channel = this.audioNodes.channels[channelName];\r\n        channel[nodeName].gain.setValueAtTime( knobValue , audioCtx.currentTime);\r\n    }\r\n\r\n\r\n    setGain(channelName, knobValue){\r\n        this.setGainValue(channelName, knobValue, 'gainNode');\r\n    }\r\n\r\n    setEqHigh(channelName, knobValue){\r\n        this.setFilterValue(channelName, knobValue, 'eqHiFilterNode');\r\n    }\r\n\r\n    setEqMid(channelName, knobValue){\r\n        this.setFilterValue(channelName, knobValue, 'eqMidFilterNode');\r\n\r\n        let fader = store.getState().mixer.fader.position;\r\n        let audioCtx = this.channels.getChannel(channelName).backend.ac;\r\n        let channel = this.audioNodes.channels[channelName];\r\n        console.log(20*Math.log10(fader))\r\n        channel['eqMidFilterNode'].Q.setValueAtTime( 1.04, audioCtx.currentTime);\r\n        console.log(channel['eqMidFilterNode'])\r\n    }\r\n\r\n    setEqLow(channelName, knobValue){\r\n        this.setFilterValue(channelName, knobValue, 'eqLowFilterNode');\r\n    }\r\n}\r\n\r\n/*\r\nfunction equalPowerCrossfade(percent) {\r\n    // Use an equal-power crossfading curve:\r\n    var gain1 = Math.cos(percent * 0.5*Math.PI);\r\n    var gain2 = Math.cos((1.0 - percent) * 0.5*Math.PI);\r\n    this.ctl1.gainNode.gain.value = gain1;\r\n    this.ctl2.gainNode.gain.value = gain2;\r\n   }\r\n*/   "]},"metadata":{},"sourceType":"module"}