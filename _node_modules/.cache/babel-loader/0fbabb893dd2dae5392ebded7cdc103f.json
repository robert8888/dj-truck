{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\src\\\\pages\\\\common\\\\components\\\\RecordComments\\\\RecordComments.js\";\nimport React, { useState, useCallback } from \"react\";\nimport { reqPostComment, reqUpdateComment, reqDeleteComment } from \"./../../../../actions\";\nimport { connect } from \"react-redux\";\nimport CommentContent from \"./Comment/Comment\";\nimport { useRecordPlayer } from \"./../../Hooks/useRecordPlayer\";\nimport \"./record-comments.scss\";\n\nconst RecordComments = ({\n  userId,\n  record,\n  postComment,\n  updateComment,\n  deleteComment\n}) => {\n  const [, player] = useRecordPlayer();\n  const post = useCallback(text => {\n    if (!postComment || !record || !userId) return;\n    const timeOfComment = 0;\n    const currentPlayback = player.getCurrent();\n\n    if (currentPlayback.id === record.id) {\n      timeOfComment = currentPlayback.progress * currentPlayback.duration;\n    }\n\n    const commentData = {\n      recordId: record.id,\n      userId: userId,\n      text: text,\n      time: timeOfComment\n    };\n    postComment(commentData);\n  }, [postComment, record, userId]);\n  const edit = useCallback((id, text) => {\n    if (!userId || !record) return;\n    const commentData = {\n      commentId: id,\n      text: text\n    };\n    updateComment(commentData);\n  }, [updateComment, userId, record]);\n\n  const _delete = useCallback(id => {\n    if (!userId) return;\n    deleteComment(id);\n  }, [userId, deleteComment]);\n\n  const onCommentChange = useCallback((id, text) => {\n    if (!text) return;\n\n    if (!id) {\n      post(text);\n    } else {\n      edit(id, text);\n    }\n  }, [post, edit]);\n  return React.createElement(\"div\", {\n    className: \"record-comments\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, userId && React.createElement(\"div\", {\n    className: \"comment-post-form\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, React.createElement(CommentContent, {\n    header: \"Post your comment:\",\n    creationMode: true,\n    onChange: onCommentChange.bind(null, null),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  })), record && record.comments && record.coments.map(comment => React.createElement(CommentContent, {\n    header: comment.user.nickname,\n    editable: comment.user.id === userId,\n    onChange: onCommentChange.bind(null, comment.id),\n    onDelete: onDelete.bind(null, comment.id),\n    date: comment.createdAt,\n    text: comment.text,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  })));\n};\n\nconst mapStateToProps = state => ({\n  record: state.records.currentRecord,\n  userId: state.user.dbId\n});\n\nconst mapDispatchToProps = dispatch => ({\n  postComment: data => dispatch(reqPostComment(data)),\n  updateComment: data => dispatch(reqUpdateComment(data)),\n  deleteComment: id => dispatch(reqDeleteComment(id))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RecordComments);","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/pages/common/components/RecordComments/RecordComments.js"],"names":["React","useState","useCallback","reqPostComment","reqUpdateComment","reqDeleteComment","connect","CommentContent","useRecordPlayer","RecordComments","userId","record","postComment","updateComment","deleteComment","player","post","text","timeOfComment","currentPlayback","getCurrent","id","progress","duration","commentData","recordId","time","edit","commentId","_delete","onCommentChange","bind","comments","coments","map","comment","user","nickname","onDelete","createdAt","mapStateToProps","state","records","currentRecord","dbId","mapDispatchToProps","dispatch","data"],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from \"react\";\r\nimport {reqPostComment, reqUpdateComment, reqDeleteComment} from \"./../../../../actions\";\r\nimport {connect} from \"react-redux\";\r\nimport CommentContent from \"./Comment/Comment\";\r\n\r\nimport {useRecordPlayer} from \"./../../Hooks/useRecordPlayer\";\r\nimport \"./record-comments.scss\";\r\n\r\n\r\nconst RecordComments = ({\r\n        userId,\r\n        record, \r\n        postComment,\r\n        updateComment,\r\n        deleteComment, \r\n    }) =>{\r\n    const [, player] = useRecordPlayer();\r\n\r\n    const post = useCallback((text) => {\r\n        if(!postComment || !record || !userId) return;\r\n\r\n        const timeOfComment = 0;\r\n        const currentPlayback = player.getCurrent();\r\n        if(currentPlayback.id === record.id){\r\n            timeOfComment = currentPlayback.progress * currentPlayback.duration;\r\n        }\r\n\r\n        const commentData = {\r\n            recordId : record.id,\r\n            userId: userId,\r\n            text: text,\r\n            time: timeOfComment,\r\n        }\r\n        postComment(commentData)\r\n    },[postComment, record, userId])\r\n\r\n    const edit = useCallback((id, text) => {\r\n        if(!userId || !record) return;\r\n        const commentData = {\r\n            commentId : id,\r\n            text : text,\r\n        }\r\n        updateComment(commentData)\r\n    }, [updateComment, userId, record])\r\n\r\n    const _delete = useCallback( id => {\r\n        if(!userId) return;\r\n        deleteComment(id)\r\n    }, [userId, deleteComment])\r\n\r\n    const onCommentChange = useCallback((id, text) => {\r\n        if(!text) return;\r\n        \r\n        if(!id){\r\n            post(text);\r\n        } else {\r\n            edit(id, text)\r\n        }\r\n    },[ post, edit ])\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"record-comments\">\r\n            {/* Creating new post field */}\r\n            {userId && <div className=\"comment-post-form\">\r\n                <CommentContent \r\n                    header=\"Post your comment:\" \r\n                    creationMode\r\n                    onChange={ onCommentChange.bind(null, null)}/>\r\n            </div>}\r\n            {/* Comments list */}\r\n            { record && record.comments &&\r\n              record.coments.map( comment => (\r\n                  <CommentContent\r\n                    header={comment.user.nickname}\r\n                    editable={comment.user.id === userId}\r\n                    onChange={onCommentChange.bind(null, comment.id)}\r\n                    onDelete={onDelete.bind(null, comment.id)}\r\n                    date={comment.createdAt}\r\n                    text={comment.text}/>\r\n              ))\r\n\r\n            }\r\n\r\n                       \r\n        </div>\r\n    )\r\n}\r\nconst mapStateToProps = state => ({\r\n    record: state.records.currentRecord,\r\n    userId: state.user.dbId,\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    postComment: (data) => dispatch(reqPostComment(data)),\r\n    updateComment : (data) => dispatch(reqUpdateComment(data)),\r\n    deleteComment: (id) => dispatch(reqDeleteComment(id)),\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(RecordComments)"]},"metadata":{},"sourceType":"module"}