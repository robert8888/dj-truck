{"ast":null,"code":"import { ACTIONS, openCurrentPlaylist, setCurretPlaylistContent } from \"../../actions\";\nimport { takeEvery, select, put, call } from \"redux-saga/effects\";\nimport { getApi } from \"./../../apis/apiProvider\";\nimport loadPlaylist from \"./../../qlQueries/loadPlaylist\";\nimport { get } from \"lodash/object\";\nexport default function* loadPlaylistRequest() {\n  yield takeEvery(ACTIONS.PL_LOAD_CURRENT_PLAYLIST_REQUEST, handel);\n}\n\nconst getToken = state => state.user.token;\n\nconst getCurrentPlaylist = state => {\n  const path = state.playList.currentSelection;\n  return get(state.playList, path);\n};\n\nexport function* handel(action) {\n  const {\n    callQuery\n  } = getApi(\"UserAssets\");\n  const token = yield select(getToken);\n  const playlist = yield select(getCurrentPlaylist);\n\n  if (playlist._loaded || !token) {\n    return yield put(openCurrentPlaylist());\n  } else {\n    var _result$data, _result$data$playlist, _result$data$playlist2;\n\n    //   console.log(\"query\", loadPlaylist(playlist._id))\n    const result = yield call(function* fetch() {\n      return yield callQuery(loadPlaylist(playlist._id), token);\n    }); //        console.log(\"result of loda\", result)\n\n    if (!result.errors && (result === null || result === void 0 ? void 0 : (_result$data = result.data) === null || _result$data === void 0 ? void 0 : (_result$data$playlist = _result$data.playlist) === null || _result$data$playlist === void 0 ? void 0 : (_result$data$playlist2 = _result$data$playlist.tracks) === null || _result$data$playlist2 === void 0 ? void 0 : _result$data$playlist2.length)) {\n      //     console.log(\"we have some tracks\")\n      yield put(setCurretPlaylistContent(result.data.playlist));\n    }\n\n    yield put(openCurrentPlaylist());\n  }\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/sagas/playlists/loadPlaylistRequestSaga.js"],"names":["ACTIONS","openCurrentPlaylist","setCurretPlaylistContent","takeEvery","select","put","call","getApi","loadPlaylist","get","loadPlaylistRequest","PL_LOAD_CURRENT_PLAYLIST_REQUEST","handel","getToken","state","user","token","getCurrentPlaylist","path","playList","currentSelection","action","callQuery","playlist","_loaded","result","fetch","_id","errors","data","tracks","length"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,mBAAlB,EAAuCC,wBAAvC,QAAuE,eAAvE;AACA,SAASC,SAAT,EAAoBC,MAApB,EAA4BC,GAA5B,EAAiCC,IAAjC,QAA6C,oBAA7C;AACA,SAASC,MAAT,QAAuB,0BAAvB;AACA,OAAOC,YAAP,MAAyB,gCAAzB;AACA,SAASC,GAAT,QAAoB,eAApB;AAEA,eAAe,UAAUC,mBAAV,GAAgC;AAC3C,QAAMP,SAAS,CAACH,OAAO,CAACW,gCAAT,EAA2CC,MAA3C,CAAf;AACH;;AAED,MAAMC,QAAQ,GAAGC,KAAK,IAAIA,KAAK,CAACC,IAAN,CAAWC,KAArC;;AAEA,MAAMC,kBAAkB,GAAGH,KAAK,IAAI;AAChC,QAAMI,IAAI,GAAGJ,KAAK,CAACK,QAAN,CAAeC,gBAA5B;AACA,SAAOX,GAAG,CAACK,KAAK,CAACK,QAAP,EAAiBD,IAAjB,CAAV;AACH,CAHD;;AAOA,OAAO,UAAUN,MAAV,CAAiBS,MAAjB,EAAyB;AAC5B,QAAM;AAAEC,IAAAA;AAAF,MAAgBf,MAAM,CAAC,YAAD,CAA5B;AACA,QAAMS,KAAK,GAAG,MAAMZ,MAAM,CAACS,QAAD,CAA1B;AACA,QAAMU,QAAQ,GAAG,MAAMnB,MAAM,CAACa,kBAAD,CAA7B;;AAEA,MAAIM,QAAQ,CAACC,OAAT,IAAoB,CAACR,KAAzB,EAAgC;AAC5B,WAAO,MAAMX,GAAG,CAACJ,mBAAmB,EAApB,CAAhB;AACH,GAFD,MAEO;AAAA;;AACN;AACG,UAAMwB,MAAM,GAAG,MAAMnB,IAAI,CAAC,UAAUoB,KAAV,GAAkB;AACxC,aAAO,MAAMJ,SAAS,CAACd,YAAY,CAACe,QAAQ,CAACI,GAAV,CAAb,EAA6BX,KAA7B,CAAtB;AACH,KAFwB,CAAzB,CAFG,CAKX;;AACQ,QAAI,CAACS,MAAM,CAACG,MAAR,KAAkBH,MAAlB,aAAkBA,MAAlB,uCAAkBA,MAAM,CAAEI,IAA1B,0EAAkB,aAAcN,QAAhC,oFAAkB,sBAAwBO,MAA1C,2DAAkB,uBAAgCC,MAAlD,CAAJ,EAA8D;AAC/D;AACK,YAAM1B,GAAG,CAACH,wBAAwB,CAACuB,MAAM,CAACI,IAAP,CAAYN,QAAb,CAAzB,CAAT;AACH;;AACD,UAAMlB,GAAG,CAACJ,mBAAmB,EAApB,CAAT;AACH;AACJ","sourcesContent":["import { ACTIONS, openCurrentPlaylist, setCurretPlaylistContent } from \"../../actions\";\r\nimport { takeEvery, select, put, call } from \"redux-saga/effects\"\r\nimport { getApi } from \"./../../apis/apiProvider\";\r\nimport loadPlaylist from \"./../../qlQueries/loadPlaylist\";\r\nimport { get } from \"lodash/object\";\r\n\r\nexport default function* loadPlaylistRequest() {\r\n    yield takeEvery(ACTIONS.PL_LOAD_CURRENT_PLAYLIST_REQUEST, handel)\r\n}\r\n\r\nconst getToken = state => state.user.token;\r\n\r\nconst getCurrentPlaylist = state => {\r\n    const path = state.playList.currentSelection;\r\n    return get(state.playList, path);\r\n}\r\n\r\n\r\n\r\nexport function* handel(action) {\r\n    const { callQuery } = getApi(\"UserAssets\");\r\n    const token = yield select(getToken);\r\n    const playlist = yield select(getCurrentPlaylist);\r\n\r\n    if (playlist._loaded || !token) {\r\n        return yield put(openCurrentPlaylist())\r\n    } else {\r\n     //   console.log(\"query\", loadPlaylist(playlist._id))\r\n        const result = yield call(function* fetch() {\r\n            return yield callQuery(loadPlaylist(playlist._id), token)\r\n        });\r\n//        console.log(\"result of loda\", result)\r\n        if (!result.errors && result?.data?.playlist?.tracks?.length) {\r\n       //     console.log(\"we have some tracks\")\r\n            yield put(setCurretPlaylistContent(result.data.playlist));\r\n        }\r\n        yield put(openCurrentPlaylist());\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}