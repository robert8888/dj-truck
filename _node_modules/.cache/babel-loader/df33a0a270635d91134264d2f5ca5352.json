{"ast":null,"code":"import store from \"./../../../../../../store\";\nimport config from \"./../../../../components/Console/Deck/Player/configuration\";\nimport WaveSurfer from \"wavesurfer\";\nimport ChannelEvnetHandler from \"./../channelEvnetHandler/channelEvnetHandler\";\nimport { getBeatLength } from \"./../../../../../../utils/bpm/converter\";\nexport default class ChannelBuilder {\n  constructor() {\n    this.eventHandler = new ChannelEvnetHandler();\n    this.dispatch = store.dispatch;\n  }\n\n  create(channelName, masterContainer, slaveContainer, mainAudioContext) {\n    let channel = {\n      channelName,\n      masterContainer,\n      slaveContainer\n    }; //--configs\n\n    channel.masterConfig = config.master(masterContainer, channelName);\n    channel.slaveConfig = config.slave(slaveContainer, channelName); //--master waveSurfer obj\n\n    channel.masterConfig.audioContext = mainAudioContext;\n    channel.master = WaveSurfer.create(channel.masterConfig);\n\n    channel.master.__proto__.loadWithEvent = function (...args) {\n      this.fireEvent(\"load\");\n      this.load(...args);\n    };\n\n    channel.slave = WaveSurfer.create(channel.slaveConfig);\n    this.eventHandler.CreateEventHandling(channel);\n    return channel;\n  }\n\n  createBars(channel, {\n    bpm,\n    offset\n  }) {\n    let wrapper = channel.master.drawer.wrapper;\n    let styleApply = WaveSurfer.Drawer.style;\n    let minPxPerSec = channel.master.params.minPxPerSec;\n    let bitLength = getBeatLength(bpm);\n    let barPostions = [];\n\n    for (let i = offset; i < channel.master.getDuration(); i += bitLength) {\n      barPostions.push(i);\n    }\n\n    let barStyle = position => ({\n      position: \"absolute\",\n      left: position + \"px\",\n      top: \"0px\",\n      width: \"1px\",\n      maxWidth: \"1px\",\n      height: \"100%\",\n      background: \"rgba(255,255,255, 0.5)\"\n    });\n\n    channel.barsElements = [];\n    barPostions.forEach(position => {\n      let bar = document.createElement(\"div\");\n      let style = barStyle(minPxPerSec * position);\n      styleApply(bar, style);\n      wrapper.appendChild(bar);\n      channel.barsElements.push(bar);\n    });\n  }\n\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/pages/app/core/console/channels/channelBuilder/channelBuilder.js"],"names":["store","config","WaveSurfer","ChannelEvnetHandler","getBeatLength","ChannelBuilder","constructor","eventHandler","dispatch","create","channelName","masterContainer","slaveContainer","mainAudioContext","channel","masterConfig","master","slaveConfig","slave","audioContext","__proto__","loadWithEvent","args","fireEvent","load","CreateEventHandling","createBars","bpm","offset","wrapper","drawer","styleApply","Drawer","style","minPxPerSec","params","bitLength","barPostions","i","getDuration","push","barStyle","position","left","top","width","maxWidth","height","background","barsElements","forEach","bar","document","createElement","appendChild"],"mappings":"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","sourcesContent":["import store from \"./../../../../../../store\";\r\nimport config from \"./../../../../components/Console/Deck/Player/configuration\"\r\n\r\nimport WaveSurfer from \"wavesurfer\";\r\nimport ChannelEvnetHandler from \"./../channelEvnetHandler/channelEvnetHandler\"\r\nimport { getBeatLength } from \"./../../../../../../utils/bpm/converter\";\r\n\r\n\r\n\r\nexport default class ChannelBuilder {\r\n  constructor() {\r\n    this.eventHandler = new ChannelEvnetHandler();\r\n    this.dispatch = store.dispatch;\r\n  }\r\n\r\n  create(channelName, masterContainer, slaveContainer, mainAudioContext) {\r\n    let channel = {channelName, masterContainer, slaveContainer};\r\n\r\n    //--configs\r\n    channel.masterConfig = config.master(masterContainer, channelName);\r\n    channel.slaveConfig = config.slave(slaveContainer, channelName);\r\n\r\n    //--master waveSurfer obj\r\n    channel.masterConfig.audioContext = mainAudioContext;\r\n    channel.master = WaveSurfer.create(channel.masterConfig);\r\n    channel.master.__proto__.loadWithEvent = function(...args) {\r\n      this.fireEvent(\"load\");\r\n      this.load(...args);\r\n    };\r\n\r\n    channel.slave = WaveSurfer.create(channel.slaveConfig);\r\n\r\n    this.eventHandler.CreateEventHandling(channel)\r\n\r\n    return channel;\r\n  }\r\n\r\n  createBars(channel, {bpm, offset}){\r\n    let wrapper = channel.master.drawer.wrapper;\r\n    let styleApply = WaveSurfer.Drawer.style;\r\n    let minPxPerSec = channel.master.params.minPxPerSec;\r\n    let bitLength = getBeatLength(bpm);\r\n\r\n    let barPostions = [];\r\n\r\n    for (let i = offset; i < channel.master.getDuration(); i += bitLength) {\r\n      barPostions.push(i);\r\n    }\r\n\r\n    let barStyle = position => ({\r\n      position: \"absolute\",\r\n      left: position + \"px\",\r\n      top: \"0px\",\r\n      width: \"1px\",\r\n      maxWidth: \"1px\",\r\n      height: \"100%\",\r\n      background: \"rgba(255,255,255, 0.5)\"\r\n    });\r\n\r\n    channel.barsElements = [];\r\n    barPostions.forEach(position => {\r\n      let bar = document.createElement(\"div\");\r\n      let style = barStyle(minPxPerSec * position);\r\n      styleApply(bar, style);\r\n      wrapper.appendChild(bar);\r\n      channel.barsElements.push(bar);\r\n    });\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}