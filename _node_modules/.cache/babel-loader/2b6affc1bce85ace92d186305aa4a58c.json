{"ast":null,"code":"import _regeneratorRuntime from\"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\node_modules\\\\@babel\\\\runtime/regenerator\";var _marked=/*#__PURE__*/_regeneratorRuntime.mark(renameSelectedRequestSaga),_marked2=/*#__PURE__*/_regeneratorRuntime.mark(handel),_marked3=/*#__PURE__*/_regeneratorRuntime.mark(sendDataToApi);import{fork,put,select,takeEvery}from\"redux-saga/effects\";import{ACTIONS,pushLog}from\"../../actions\";import{getApi}from\"./../../apis/apiProvider\";import{Log}from\"./../../utils/logger/logger\";import errorParser from\"./../../utils/serverErrorParser/errorParser\";export default function renameSelectedRequestSaga(){return _regeneratorRuntime.wrap(function renameSelectedRequestSaga$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return takeEvery(ACTIONS.PL_UPDATE_TRACK_POSITION_REQUST,handel);case 2:case\"end\":return _context.stop();}}},_marked);}function handel(action){return _regeneratorRuntime.wrap(function handel$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return fork(sendDataToApi,action);case 2:case\"end\":return _context2.stop();}}},_marked2);}var getToken=function getToken(state){return state.user.token;};function sendDataToApi(action){var path,token,_getApi,callQuery,queries,response;return _regeneratorRuntime.wrap(function sendDataToApi$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:path=['saga','playlist','request updated tracks positios'];_context3.next=3;return select(getToken);case 3:token=_context3.sent;if(!token){_context3.next=20;break;}_context3.prev=5;_getApi=getApi(\"UserAssets\"),callQuery=_getApi.callQuery,queries=_getApi.queries;_context3.next=9;return callQuery(queries.updateTracksPositionsQl,token,{tracksPositions:action.tracksPositions});case 9:response=_context3.sent;if(!response.errors){_context3.next=12;break;}throw new Error('Server response contains errors '+errorParser(response.errors));case 12:_context3.next=14;return put(pushLog(new Log(\"Tracks position on playlist updated\",path)));case 14:_context3.next=20;break;case 16:_context3.prev=16;_context3.t0=_context3[\"catch\"](5);_context3.next=20;return put(pushLog(Log.Error(path,\"Can't update tracks position on playlist in database\"+_context3.t0.message,\"Sorry. During process of updating track position on playlist occurred a problem\",_context3.t0)));case 20:case\"end\":return _context3.stop();}}},_marked3,null,[[5,16]]);}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/sagas/playlists/reqUpdateTrackPositionSaga.js"],"names":["renameSelectedRequestSaga","handel","sendDataToApi","fork","put","select","takeEvery","ACTIONS","pushLog","getApi","Log","errorParser","PL_UPDATE_TRACK_POSITION_REQUST","action","getToken","state","user","token","path","callQuery","queries","updateTracksPositionsQl","tracksPositions","response","errors","Error","message"],"mappings":"2JAMyBA,yB,iDAIfC,M,iDAMAC,a,EAhBV,OAASC,IAAT,CAAeC,GAAf,CAAoBC,MAApB,CAA4BC,SAA5B,KAA6C,oBAA7C,CACA,OAASC,OAAT,CAAkBC,OAAlB,KAAiC,eAAjC,CACA,OAASC,MAAT,KAAuB,0BAAvB,CACA,OAASC,GAAT,KAAoB,6BAApB,CACA,MAAOC,CAAAA,WAAP,KAAwB,6CAAxB,CAEA,cAAe,SAAUX,CAAAA,yBAAV,qJACX,MAAMM,CAAAA,SAAS,CAACC,OAAO,CAACK,+BAAT,CAA0CX,MAA1C,CAAf,CADW,sDAIf,QAAUA,CAAAA,MAAV,CAAiBY,MAAjB,qIACI,MAAMV,CAAAA,IAAI,CAACD,aAAD,CAAgBW,MAAhB,CAAV,CADJ,wDAIA,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAAAC,KAAK,QAAIA,CAAAA,KAAK,CAACC,IAAN,CAAWC,KAAf,EAAtB,CAEA,QAAUf,CAAAA,aAAV,CAAwBW,MAAxB,6KACUK,IADV,CACiB,CAAC,MAAD,CAAS,UAAT,CAAqB,iCAArB,CADjB,kBAEkB,MAAMb,CAAAA,MAAM,CAACS,QAAD,CAAZ,CAFlB,OAEUG,KAFV,oBAGOA,KAHP,oDAK4CR,MAAM,CAAC,YAAD,CALlD,CAKoBU,SALpB,SAKoBA,SALpB,CAKgCC,OALhC,SAKgCA,OALhC,kBAM6B,MAAMD,CAAAA,SAAS,CAACC,OAAO,CAACC,uBAAT,CAAkCJ,KAAlC,CAA0C,CACtEK,eAAe,CAAET,MAAM,CAACS,eAD8C,CAA1C,CAAf,CAN7B,OAMkBC,QANlB,oBAUeA,QAAQ,CAACC,MAVxB,gCAWsB,IAAIC,CAAAA,KAAJ,CAAU,mCAAoCd,WAAW,CAACY,QAAQ,CAACC,MAAV,CAAzD,CAXtB,2BAcY,MAAMpB,CAAAA,GAAG,CAACI,OAAO,CAAC,GAAIE,CAAAA,GAAJ,CAAQ,qCAAR,CAA+CQ,IAA/C,CAAD,CAAR,CAAT,CAdZ,+GAgBY,MAAMd,CAAAA,GAAG,CAACI,OAAO,CAACE,GAAG,CAACe,KAAJ,CACdP,IADc,CAEd,uDAAyD,aAAMQ,OAFjD,CAGd,iFAHc,cAAD,CAAR,CAAT,CAhBZ","sourcesContent":["import { fork, put, select, takeEvery } from \"redux-saga/effects\";\r\nimport { ACTIONS, pushLog } from \"../../actions\";\r\nimport { getApi } from \"./../../apis/apiProvider\";\r\nimport { Log } from \"./../../utils/logger/logger\";\r\nimport errorParser from \"./../../utils/serverErrorParser/errorParser\";\r\n\r\nexport default function* renameSelectedRequestSaga() {\r\n    yield takeEvery(ACTIONS.PL_UPDATE_TRACK_POSITION_REQUST, handel)\r\n}\r\n\r\nfunction* handel(action){\r\n    yield fork(sendDataToApi, action)\r\n}\r\n\r\nconst getToken = state => state.user.token;\r\n\r\nfunction* sendDataToApi(action) {\r\n    const path = ['saga', 'playlist', 'request updated tracks positios']\r\n    const token = yield select(getToken);\r\n    if(token){\r\n        try{\r\n            const { callQuery , queries } = getApi(\"UserAssets\");\r\n            const response = yield callQuery(queries.updateTracksPositionsQl, token , {\r\n                tracksPositions: action.tracksPositions,\r\n            })\r\n\r\n            if(response.errors){\r\n                throw new Error('Server response contains errors '+ errorParser(response.errors))\r\n            }\r\n\r\n            yield put(pushLog(new Log(\"Tracks position on playlist updated\", path)))\r\n        } catch (error){\r\n            yield put(pushLog(Log.Error(\r\n                path,\r\n                \"Can't update tracks position on playlist in database\" + error.message,\r\n                \"Sorry. During process of updating track position on playlist occurred a problem\",\r\n                error\r\n            )))\r\n        }\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}