{"ast":null,"code":"import _regeneratorRuntime from\"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\node_modules\\\\@babel\\\\runtime/regenerator\";var _marked=/*#__PURE__*/_regeneratorRuntime.mark(loadPlaylistRequest),_marked2=/*#__PURE__*/_regeneratorRuntime.mark(handle);import{get}from\"lodash/object\";import{hideLoading,showLoading}from'react-redux-loading-bar';import{call,put,select,takeEvery}from\"redux-saga/effects\";import{ACTIONS,openCurrentPlaylist,pushLog,setPlaylistContent}from\"../../actions\";import{getApi}from\"./../../apis/apiProvider\";import{Log}from\"./../../utils/logger/logger\";import errorParser from\"./../../utils/serverErrorParser/errorParser\";export default function loadPlaylistRequest(){return _regeneratorRuntime.wrap(function loadPlaylistRequest$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return takeEvery(ACTIONS.PL_LOAD_PLAYLIST_REQUEST,handle);case 2:case\"end\":return _context.stop();}}},_marked);}var getToken=function getToken(state){return state.user.token;};var getCurrentPlaylist=function getCurrentPlaylist(state){var path=state.playList.currentSelection;return get(state.playList,path);};export function handle(action){var path,token,playlist,_response$data,_response$data$playli,_response$data$playli2,_getApi,callQuery,queries,response;return _regeneratorRuntime.wrap(function handle$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:path=['saga','playlist','request read playlist'];_context3.next=3;return select(getToken);case 3:token=_context3.sent;_context3.next=6;return select(getCurrentPlaylist);case 6:playlist=_context3.sent;if(!(playlist._loaded||!token)){_context3.next=13;break;}_context3.next=10;return put(openCurrentPlaylist(action.path));case 10:return _context3.abrupt(\"return\",_context3.sent);case 13:_context3.prev=13;_context3.next=16;return put(showLoading());case 16:_getApi=getApi(\"UserAssets\"),callQuery=_getApi.callQuery,queries=_getApi.queries;_context3.next=19;return call(/*#__PURE__*/_regeneratorRuntime.mark(function fetch(){return _regeneratorRuntime.wrap(function fetch$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return callQuery(queries.loadPlaylistQl(playlist._id),token);case 2:return _context2.abrupt(\"return\",_context2.sent);case 3:case\"end\":return _context2.stop();}}},fetch);}));case 19:response=_context3.sent;if(!response.errors){_context3.next=22;break;}throw new Error('Server response contains errors '+errorParser(response.errors));case 22:if(!(response===null||response===void 0?void 0:(_response$data=response.data)===null||_response$data===void 0?void 0:(_response$data$playli=_response$data.playlist)===null||_response$data$playli===void 0?void 0:(_response$data$playli2=_response$data$playli.tracks)===null||_response$data$playli2===void 0?void 0:_response$data$playli2.length)){_context3.next=25;break;}_context3.next=25;return put(setPlaylistContent(response.data.playlist,action.path));case 25:_context3.next=27;return put(openCurrentPlaylist(action.path));case 27:_context3.next=29;return put(pushLog(new Log(\"Playlist sucessful readed from database\",path)));case 29:_context3.next=35;break;case 31:_context3.prev=31;_context3.t0=_context3[\"catch\"](13);_context3.next=35;return put(pushLog(Log.Error(path,\"Can't read playlist\"+_context3.t0.message,\"Sorry. During process renaming occurred a problem\",_context3.t0)));case 35:_context3.prev=35;_context3.next=38;return put(hideLoading());case 38:return _context3.finish(35);case 39:case\"end\":return _context3.stop();}}},_marked2,null,[[13,31,35,39]]);}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/sagas/playlists/reqReadPlaylistSaga.js"],"names":["loadPlaylistRequest","handle","get","hideLoading","showLoading","call","put","select","takeEvery","ACTIONS","openCurrentPlaylist","pushLog","setPlaylistContent","getApi","Log","errorParser","PL_LOAD_PLAYLIST_REQUEST","getToken","state","user","token","getCurrentPlaylist","path","playList","currentSelection","action","playlist","_loaded","callQuery","queries","fetch","loadPlaylistQl","_id","response","errors","Error","data","tracks","length","message"],"mappings":"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","sourcesContent":["import { get } from \"lodash/object\";\r\nimport { hideLoading, showLoading } from 'react-redux-loading-bar';\r\nimport { call, put, select, takeEvery } from \"redux-saga/effects\";\r\nimport { ACTIONS, openCurrentPlaylist, pushLog, setPlaylistContent } from \"../../actions\";\r\nimport { getApi } from \"./../../apis/apiProvider\";\r\nimport { Log } from \"./../../utils/logger/logger\";\r\nimport errorParser from \"./../../utils/serverErrorParser/errorParser\";\r\n\r\nexport default function* loadPlaylistRequest() {\r\n    yield takeEvery(ACTIONS.PL_LOAD_PLAYLIST_REQUEST, handle)\r\n}\r\n\r\nconst getToken = state => state.user.token;\r\n\r\nconst getCurrentPlaylist = state => {\r\n    const path = state.playList.currentSelection;\r\n    return get(state.playList, path);\r\n}\r\n\r\nexport function* handle(action) {\r\n    const path = ['saga', 'playlist', 'request read playlist']\r\n\r\n    const token = yield select(getToken);\r\n    const playlist = yield select(getCurrentPlaylist);\r\n\r\n    if (playlist._loaded || !token) {\r\n        return yield put(openCurrentPlaylist(action.path))\r\n    } else {\r\n        try {\r\n            yield put(showLoading());\r\n            const { callQuery, queries } = getApi(\"UserAssets\");\r\n            const response = yield call(function* fetch() {\r\n                return yield callQuery(queries.loadPlaylistQl(playlist._id), token)\r\n            });\r\n\r\n   \r\n            if(response.errors){\r\n                throw new Error('Server response contains errors '+ errorParser(response.errors))\r\n            }\r\n\r\n            if(response?.data?.playlist?.tracks?.length){\r\n                yield put(setPlaylistContent(response.data.playlist, action.path));\r\n            }\r\n\r\n            yield put(openCurrentPlaylist(action.path));\r\n\r\n            yield put(pushLog(new Log(\"Playlist sucessful readed from database\", path)))\r\n        } catch (error) {\r\n            yield put(pushLog(Log.Error(\r\n                path,\r\n                \"Can't read playlist\" + error.message,\r\n                \"Sorry. During process renaming occurred a problem\",\r\n                error\r\n            )))\r\n        } finally {\r\n            yield put(hideLoading())\r\n        }\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}