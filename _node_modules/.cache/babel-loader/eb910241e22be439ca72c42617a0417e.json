{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJEKTY\\\\APKI\\\\DjTruck\\\\djtruck\\\\src\\\\pages\\\\app\\\\components\\\\Console\\\\Effector\\\\Effector.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport \"./effector-channel.scss\";\nimport DryWetKnob from \"./DryWetKnob/DryWetKnob\";\nimport EffectorButton from \"./EffectorButton/EffectorButton\";\nimport EffectorKnob from \"./EffectorKnob/EffectorKnob\";\nimport { Dropdown, DropdownButton } from \"react-bootstrap\";\nimport { setEffectParametr, setCurrentEffect, setDryWet } from \"./../../../../../actions\";\nimport mapComponentToParameter from \"./utils/mapComponentToParameter\";\n\nconst Effector = props => {\n  const [currentEffect, setCurrentEffect] = useState(undefined);\n  const [effectorParams, setEffectorParams] = useState([]);\n\n  const paramChangeHandle = (param, value) => {\n    props.setParameter(currentEffect, param, value);\n  };\n\n  useEffect(() => {\n    props.setCurrentEffect(currentEffect);\n  }, [currentEffect, props.setCurrentEffect]);\n  useEffect(() => {\n    let currentEffectParams = props.availableEffects[currentEffect];\n\n    if (!currentEffectParams) {\n      setEffectorParams([]);\n      return;\n    }\n\n    setEffectorParams(Object.entries(currentEffectParams).map(([name, param]) => {\n      const effectState = props.channelState.effects[currentEffect];\n      let value = param.defaultValue;\n\n      if (effectState) {\n        value = effectState[name] || value;\n      }\n\n      if (param.type === \"float\") {\n        return React.createElement(EffectorKnob, {\n          key: name + param.description,\n          scale: param.max - param.min,\n          initValue: value,\n          alt: param.description,\n          showValue: true,\n          onChange: paramChangeHandle.bind(null, name),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 42\n          },\n          __self: this\n        });\n      } else if (param.type === \"bool\") {\n        const Button = mapComponentToParameter({\n          channel: props.channel,\n          effect: currentEffect,\n          name: name\n        }, EffectorButton);\n        return React.createElement(Button, {\n          key: currentEffect + name + param.description,\n          onChange: paramChangeHandle.bind(null, name),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 57\n          },\n          __self: this\n        }, param.description);\n      }\n    }));\n  }, [currentEffect, props.effects, props.availableEffects]);\n  const availableEffects = Object.keys(props.availableEffects).map((effect, index) => {\n    return React.createElement(Dropdown.Item, {\n      key: effect + \"-\" + index,\n      onClick: setCurrentEffect.bind(null, effect),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, effect);\n  });\n  return React.createElement(\"div\", {\n    className: \"effector-channel\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"dra-wet-knob\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, React.createElement(DryWetKnob, {\n    alt: \"D/W\",\n    onChange: props.setDryWet,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"effect-selector\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, React.createElement(DropdownButton, {\n    title: currentEffect || \"-----\",\n    className: \"btn-effect-select\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, React.createElement(Dropdown.Item, {\n    key: \"none\",\n    onClick: setCurrentEffect.bind(null, undefined),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, \" ----- \"), availableEffects)), React.createElement(\"div\", {\n    className: \"effector-param\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, effectorParams));\n};\n\nconst mapStateToProps = (state, ownProps) => ({\n  availableEffects: state.effector.effects,\n  channelState: state.effector.channels[ownProps.channel]\n});\n\nconst mapDispachToProps = (dispatch, ownProps) => ({\n  setParameter: (...args) => dispatch(setEffectParametr(ownProps.channel, ...args)),\n  setCurrentEffect: effect => dispatch(setCurrentEffect(ownProps.channel, effect)),\n  setDryWet: value => dispatch(setDryWet(ownProps.channel, value))\n});\n\nexport default connect(mapStateToProps, mapDispachToProps)(Effector);","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/pages/app/components/Console/Effector/Effector.js"],"names":["React","useState","useEffect","connect","DryWetKnob","EffectorButton","EffectorKnob","Dropdown","DropdownButton","setEffectParametr","setCurrentEffect","setDryWet","mapComponentToParameter","Effector","props","currentEffect","undefined","effectorParams","setEffectorParams","paramChangeHandle","param","value","setParameter","currentEffectParams","availableEffects","Object","entries","map","name","effectState","channelState","effects","defaultValue","type","description","max","min","bind","Button","channel","effect","keys","index","mapStateToProps","state","ownProps","effector","channels","mapDispachToProps","dispatch","args"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport \"./effector-channel.scss\";\r\nimport DryWetKnob from \"./DryWetKnob/DryWetKnob\";\r\nimport EffectorButton from \"./EffectorButton/EffectorButton\";\r\nimport EffectorKnob from \"./EffectorKnob/EffectorKnob\";\r\nimport { Dropdown, DropdownButton } from \"react-bootstrap\";\r\nimport { setEffectParametr, setCurrentEffect, setDryWet } from \"./../../../../../actions\";\r\nimport mapComponentToParameter from \"./utils/mapComponentToParameter\";\r\nconst Effector = props => {\r\n\r\n    const [currentEffect, setCurrentEffect] = useState(undefined);\r\n    const [effectorParams, setEffectorParams] = useState([]);\r\n\r\n\r\n    const paramChangeHandle = (param, value) => {\r\n        props.setParameter(currentEffect, param, value);\r\n    }\r\n\r\n    useEffect(() => {\r\n        props.setCurrentEffect(currentEffect);\r\n    }, [currentEffect, props.setCurrentEffect])\r\n\r\n\r\n    useEffect(() => {\r\n        let currentEffectParams = props.availableEffects[currentEffect];\r\n        if (!currentEffectParams) {\r\n            setEffectorParams([]);\r\n            return;\r\n        }\r\n\r\n        setEffectorParams(Object.entries(currentEffectParams).map(([name, param]) => {\r\n            const effectState = props.channelState.effects[currentEffect];\r\n\r\n            let value = param.defaultValue;\r\n            if (effectState) {\r\n                value = effectState[name] || value;\r\n            }\r\n\r\n            if (param.type === \"float\") {\r\n                return (\r\n                    <EffectorKnob\r\n                        key={name + param.description}\r\n                        scale={param.max - param.min}\r\n                        initValue={value}\r\n                        alt={param.description}\r\n                        showValue\r\n                        onChange={paramChangeHandle.bind(null, name)} />\r\n                )\r\n            } else if (param.type === \"bool\") {\r\n                const Button = mapComponentToParameter({\r\n                    channel : props.channel,\r\n                    effect : currentEffect,\r\n                    name : name\r\n                }, EffectorButton);\r\n\r\n                return <Button \r\n                            key={currentEffect + name + param.description}\r\n                            onChange={paramChangeHandle.bind(null, name)}>\r\n                                {param.description}\r\n                        </Button>\r\n            }\r\n        }))\r\n    }, [currentEffect, props.effects, props.availableEffects])\r\n\r\n\r\n    const availableEffects = Object.keys(props.availableEffects).map((effect, index) => {\r\n        return (<Dropdown.Item key={effect + \"-\" + index} onClick={setCurrentEffect.bind(null, effect)}>{effect}</Dropdown.Item>)\r\n    })\r\n\r\n\r\n    return (\r\n        <div className=\"effector-channel\">\r\n            <div className=\"dra-wet-knob\">\r\n                <DryWetKnob alt=\"D/W\" onChange={props.setDryWet} />\r\n            </div>\r\n            <div className=\"effect-selector\">\r\n                <DropdownButton title={currentEffect || \"-----\"} className=\"btn-effect-select\">\r\n                    <Dropdown.Item key={\"none\"} onClick={setCurrentEffect.bind(null, undefined)}> ----- </Dropdown.Item>\r\n                    {availableEffects}\r\n                </DropdownButton>\r\n            </div>\r\n            <div className=\"effector-param\">\r\n                {effectorParams}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => ({\r\n    availableEffects: state.effector.effects,\r\n    channelState: state.effector.channels[ownProps.channel]\r\n})\r\n\r\nconst mapDispachToProps = (dispatch, ownProps) => ({\r\n    setParameter: (...args) => dispatch(setEffectParametr(ownProps.channel, ...args)),\r\n    setCurrentEffect: (effect) => dispatch(setCurrentEffect(ownProps.channel, effect)),\r\n    setDryWet: (value) => dispatch(setDryWet(ownProps.channel, value))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispachToProps)(Effector);\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}