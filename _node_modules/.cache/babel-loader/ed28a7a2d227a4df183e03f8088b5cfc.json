{"ast":null,"code":"import { pushTrackToList, ACTIONS, startCalcBpm } from \"../../actions\";\nimport { takeEvery, select, put, call } from \"redux-saga/effects\";\nimport { getApi } from \"./../../apis/apiProvider\"; // import createTrackQuery from \"./../../qlQueries/createTrack\";\n\nimport { generateTemplateName as generateName, findClosesDir } from \"./../../reducers/console/playlist/utils\";\nimport { get } from \"lodash/object\";\nimport { handle as createNewPlaylist } from \"./createPlaylistRequestSaga\";\nimport UUID from \"uuidjs\";\nimport foramter, { formater } from \"./../../utils/time/timeFromater\";\nexport default function* pushTrackToListSaga() {\n  yield takeEvery(ACTIONS.PL_PUSH_TRACK_REQUEST, handle);\n}\n\nconst getToken = state => state.user.token;\n\nconst getPlaylistPath = state => state.playList.currentPlaylist;\n\nconst getCurrent = (state, path) => get(state.playList, state.playList.currentPlaylist);\n\nfunction* handle(action) {\n  const {\n    callQuery,\n    queries\n  } = getApi(\"UserAssets\");\n  const token = yield select(getToken);\n\n  if (!token) {\n    action.track.id = UUID.genV1().toString();\n    yield put(pushTrackToList(action.track, action.playlist));\n    yield put(startCalcBpm(action.track, action.playlist));\n    return;\n  }\n\n  const currentPlaylist = yield select(getCurrent);\n  let playlistId = currentPlaylist._id;\n  let playlistLength = currentPlaylist._content.length;\n\n  if (!playlistId) {\n    //create new \n    playlistId = yield call(createNewPlaylist, {\n      setCurrent: true,\n      renameMode: false\n    });\n    playlistLength = 0;\n  }\n\n  console.log(currentPlaylist);\n  const result = yield callQuery(queries.createTrackQl, token, {\n    playlist: playlistId,\n    title: action.track.title,\n    source: action.track.source,\n    sourceId: action.track.sourceId,\n    quality: action.track.quality,\n    duration: typeof action.track.duration === \"string\" ? formater.ytToSeconds(action.track.duration) : action.track.duration,\n    thumbnails: action.track.thumbnails,\n    position: playlistLength\n  });\n  console.log(\"result of query\", result);\n\n  if (!result.errors) {\n    const trackId = result.data.createTrack.id;\n    yield put(pushTrackToList({ ...action.track,\n      id: trackId\n    }, action.playlist));\n    const currentPlaylistPath = yield select(getPlaylistPath);\n    action.track.id = trackId;\n    yield put(startCalcBpm(action.track, currentPlaylistPath));\n  }\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/sagas/playlists/pushTrackToListRequestSaga.js"],"names":["pushTrackToList","ACTIONS","startCalcBpm","takeEvery","select","put","call","getApi","generateTemplateName","generateName","findClosesDir","get","handle","createNewPlaylist","UUID","foramter","formater","pushTrackToListSaga","PL_PUSH_TRACK_REQUEST","getToken","state","user","token","getPlaylistPath","playList","currentPlaylist","getCurrent","path","action","callQuery","queries","track","id","genV1","toString","playlist","playlistId","_id","playlistLength","_content","length","setCurrent","renameMode","console","log","result","createTrackQl","title","source","sourceId","quality","duration","ytToSeconds","thumbnails","position","errors","trackId","data","createTrack","currentPlaylistPath"],"mappings":"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","sourcesContent":["import { pushTrackToList, ACTIONS, startCalcBpm } from \"../../actions\";\r\nimport { takeEvery, select, put, call } from \"redux-saga/effects\"\r\nimport { getApi } from \"./../../apis/apiProvider\";\r\n// import createTrackQuery from \"./../../qlQueries/createTrack\";\r\nimport { generateTemplateName as generateName, findClosesDir } from \"./../../reducers/console/playlist/utils\";\r\nimport { get } from \"lodash/object\";\r\nimport { handle as createNewPlaylist } from \"./createPlaylistRequestSaga\";\r\nimport UUID from \"uuidjs\";\r\nimport foramter, { formater } from \"./../../utils/time/timeFromater\";\r\n\r\nexport default function* pushTrackToListSaga() {\r\n    yield takeEvery(ACTIONS.PL_PUSH_TRACK_REQUEST, handle)\r\n}\r\n\r\nconst getToken = state => state.user.token;\r\n\r\nconst getPlaylistPath = state => state.playList.currentPlaylist;\r\n\r\nconst getCurrent = (state, path) => get(state.playList, state.playList.currentPlaylist);\r\n\r\n\r\n\r\n\r\nfunction* handle(action) {\r\n    const { callQuery , queries } = getApi(\"UserAssets\");\r\n    const token = yield select(getToken);\r\n    if(!token){\r\n        action.track.id = UUID.genV1().toString();\r\n        yield put(pushTrackToList(action.track, action.playlist));\r\n        yield put(startCalcBpm(action.track, action.playlist));\r\n        return;\r\n    }\r\n\r\n\r\n    const currentPlaylist = yield select(getCurrent);\r\n    let playlistId = currentPlaylist._id;\r\n    let playlistLength = currentPlaylist._content.length;\r\n\r\n    if (!playlistId) {\r\n        //create new \r\n        playlistId = yield call(createNewPlaylist, { setCurrent: true , renameMode:false});\r\n        playlistLength = 0;\r\n    }\r\n\r\n    console.log(currentPlaylist)\r\n    const result = yield callQuery(queries.createTrackQl, token, {\r\n        playlist: playlistId,\r\n        title: action.track.title,\r\n        source: action.track.source,\r\n        sourceId: action.track.sourceId,\r\n        quality: action.track.quality,\r\n        duration: (typeof action.track.duration === \"string\") ?\r\n            formater.ytToSeconds(action.track.duration) :\r\n            action.track.duration,\r\n        thumbnails: action.track.thumbnails,\r\n        position: playlistLength,\r\n    });\r\n    console.log(\"result of query\", result);\r\n    if (!result.errors) {\r\n        const trackId = result.data.createTrack.id;\r\n        yield put(pushTrackToList({\r\n            ...action.track,\r\n            id: trackId\r\n        }, action.playlist));\r\n\r\n        const currentPlaylistPath = yield select(getPlaylistPath);\r\n        action.track.id = trackId;\r\n        yield put(startCalcBpm(action.track, currentPlaylistPath));\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}