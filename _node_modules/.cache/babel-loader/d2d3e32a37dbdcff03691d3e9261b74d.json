{"ast":null,"code":"import _regeneratorRuntime from\"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\node_modules\\\\@babel\\\\runtime/regenerator\";var _marked=/*#__PURE__*/_regeneratorRuntime.mark(requestRecordUpdate),_marked2=/*#__PURE__*/_regeneratorRuntime.mark(handel);import{put,select,takeEvery}from\"redux-saga/effects\";import{ACTIONS,pushLog,updateRec,updateRecFail}from\"../../actions\";import{getApi}from\"./../../apis/apiProvider\";import{Log}from\"./../../utils/logger/logger\";import errorParser from\"./../../utils/serverErrorParser/errorParser\";export default function requestRecordUpdate(){return _regeneratorRuntime.wrap(function requestRecordUpdate$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return takeEvery(ACTIONS.RECS_REQ_UPDATE,handel);case 2:case\"end\":return _context.stop();}}},_marked);}var getToken=function getToken(state){return state.user.token;};//recordId,  recordChanges\nfunction handel(action){var token,_getApi,callQuery,queries,id,data,variables,query,response,success;return _regeneratorRuntime.wrap(function handel$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return select(getToken);case 2:token=_context2.sent;if(!token){_context2.next=30;break;}_context2.prev=4;_getApi=getApi(\"UserAssets\"),callQuery=_getApi.callQuery,queries=_getApi.queries;id=action.recordId,data=action.recordChanges;variables=data;variables.id=id;query=queries.updateRecordMetaQl;_context2.next=12;return callQuery(query,token,variables);case 12:response=_context2.sent;success=response===null||response===void 0?void 0:response.data;if(!response.errors){_context2.next=16;break;}throw new Error(\"Server response contains errors\"+errorParser(response.errors));case 16:if(success){_context2.next=18;break;}throw new Error(\"Can't update record in database\");case 18:_context2.next=20;return put(updateRec(id,data));case 20:_context2.next=22;return put(pushLog(new Log(\"records variables: \".concat(JSON.stringify(variables)))));case 22:_context2.next=30;break;case 24:_context2.prev=24;_context2.t0=_context2[\"catch\"](4);_context2.next=28;return put(updateRecFail(action.recordChanges.title,_context2.t0.message));case 28:_context2.next=30;return pushLog(Log.Error(['saga','records','reques update record'],\"Can't update records in database\",_context2.t0));case 30:case\"end\":return _context2.stop();}}},_marked2,null,[[4,24]]);}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/sagas/records/reqUpdateRecord.js"],"names":["requestRecordUpdate","handel","put","select","takeEvery","ACTIONS","pushLog","updateRec","updateRecFail","getApi","Log","errorParser","RECS_REQ_UPDATE","getToken","state","user","token","action","callQuery","queries","id","recordId","data","recordChanges","variables","query","updateRecordMetaQl","response","success","errors","Error","JSON","stringify","title","message"],"mappings":"2JAOyBA,mB,iDAOfC,M,EAbV,OAASC,GAAT,CAAcC,MAAd,CAAsBC,SAAtB,KAAuC,oBAAvC,CACA,OAASC,OAAT,CAAkBC,OAAlB,CAA2BC,SAA3B,CAAsCC,aAAtC,KAA2D,eAA3D,CACA,OAASC,MAAT,KAAuB,0BAAvB,CACA,OAASC,GAAT,KAAoB,6BAApB,CACA,MAAOC,CAAAA,WAAP,KAAwB,6CAAxB,CAEA,cAAe,SAAUX,CAAAA,mBAAV,+IAEX,MAAMI,CAAAA,SAAS,CAACC,OAAO,CAACO,eAAT,CAA0BX,MAA1B,CAAf,CAFW,sDAKf,GAAMY,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAAAC,KAAK,QAAIA,CAAAA,KAAK,CAACC,IAAN,CAAWC,KAAf,EAAtB,CACA;AACA,QAAUf,CAAAA,MAAV,CAAiBgB,MAAjB,kNACkB,MAAMd,CAAAA,MAAM,CAACU,QAAD,CAAZ,CADlB,OACUG,KADV,oBAGQA,KAHR,oDAK2CP,MAAM,CAAC,YAAD,CALjD,CAKoBS,SALpB,SAKoBA,SALpB,CAK+BC,OAL/B,SAK+BA,OAL/B,CAM6BC,EAN7B,CAMuDH,MANvD,CAMmBI,QANnB,CAM+CC,IAN/C,CAMuDL,MANvD,CAMiCM,aANjC,CAOkBC,SAPlB,CAO8BF,IAP9B,CAQYE,SAAS,CAACJ,EAAV,CAAeA,EAAf,CAEMK,KAVlB,CAU0BN,OAAO,CAACO,kBAVlC,mBAW6B,MAAMR,CAAAA,SAAS,CAACO,KAAD,CAAQT,KAAR,CAAeQ,SAAf,CAAf,CAX7B,QAWkBG,QAXlB,gBAakBC,OAblB,CAa4BD,QAb5B,SAa4BA,QAb5B,iBAa4BA,QAAQ,CAAEL,IAbtC,KAeeK,QAAQ,CAACE,MAfxB,gCAgBsB,IAAIC,CAAAA,KAAJ,CAAU,kCAAqCnB,WAAW,CAACgB,QAAQ,CAACE,MAAV,CAA1D,CAhBtB,YAkBgBD,OAlBhB,gCAmBsB,IAAIE,CAAAA,KAAJ,CAAU,iCAAV,CAnBtB,2BAsBY,MAAM5B,CAAAA,GAAG,CAACK,SAAS,CAACa,EAAD,CAAKE,IAAL,CAAV,CAAT,CAtBZ,0BAyBY,MAAMpB,CAAAA,GAAG,CAACI,OAAO,CAAC,GAAII,CAAAA,GAAJ,8BAA8BqB,IAAI,CAACC,SAAL,CAAeR,SAAf,CAA9B,EAAD,CAAR,CAAT,CAzBZ,+GA2BY,MAAMtB,CAAAA,GAAG,CAACM,aAAa,CAACS,MAAM,CAACM,aAAP,CAAqBU,KAAtB,CAA6B,aAAMC,OAAnC,CAAd,CAAT,CA3BZ,0BA4BY,MAAM5B,CAAAA,OAAO,CAACI,GAAG,CAACoB,KAAJ,CACV,CAAC,MAAD,CAAS,SAAT,CAAoB,sBAApB,CADU,CAEV,kCAFU,cAAD,CAAb,CA5BZ","sourcesContent":["\r\nimport { put, select, takeEvery } from \"redux-saga/effects\";\r\nimport { ACTIONS, pushLog, updateRec, updateRecFail } from \"../../actions\";\r\nimport { getApi } from \"./../../apis/apiProvider\";\r\nimport { Log } from \"./../../utils/logger/logger\";\r\nimport errorParser from \"./../../utils/serverErrorParser/errorParser\";\r\n\r\nexport default function* requestRecordUpdate() {\r\n\r\n    yield takeEvery(ACTIONS.RECS_REQ_UPDATE, handel)\r\n}\r\n\r\nconst getToken = state => state.user.token\r\n//recordId,  recordChanges\r\nfunction* handel(action) {\r\n    const token = yield select(getToken);\r\n\r\n    if (token) {\r\n        try {\r\n            const { callQuery, queries } = getApi(\"UserAssets\");\r\n            const {recordId: id, recordChanges:data} = action;\r\n            const variables = data;\r\n            variables.id = id;\r\n\r\n            const query = queries.updateRecordMetaQl;\r\n            const response = yield callQuery(query, token, variables);\r\n\r\n            const success = response?.data;\r\n\r\n            if(response.errors){\r\n                throw new Error(\"Server response contains errors\" +  errorParser(response.errors));\r\n            }\r\n            if(!success){\r\n                throw new Error(\"Can't update record in database\")\r\n            }\r\n   \r\n            yield put(updateRec(id, data))\r\n\r\n\r\n            yield put(pushLog(new Log(`records variables: ${JSON.stringify(variables)}`)))\r\n        } catch (error) {\r\n            yield put(updateRecFail(action.recordChanges.title, error.message))\r\n            yield pushLog(Log.Error(\r\n                ['saga', 'records', 'reques update record'],\r\n                \"Can't update records in database\",\r\n                error\r\n            ))\r\n        }\r\n\r\n    }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}