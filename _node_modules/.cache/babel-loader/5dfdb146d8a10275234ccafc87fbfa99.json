{"ast":null,"code":"import { ACTIONS } from \"./../../../actions\";\nimport STATES from \"./stateDef\";\nconst initState = {\n  recName: \"\",\n  recId: null,\n  recordingState: STATES.IDLE,\n  startTime: null,\n  tracklist: []\n};\nexport default function headerState(state = initState, action) {\n  switch (action.type) {\n    case ACTIONS.R_START_RECORDING:\n      {\n        return { ...state,\n          recordingState: STATES.INIT,\n          recName: action.recName,\n          recId: action.id,\n          startTime: new Date().getTime(),\n          tracklist: action.initTracklist\n        };\n      }\n\n    case ACTIONS.R_END_RECORDING:\n      {\n        return { ...state,\n          recordingState: STATES.IDLE,\n          recName: \"\",\n          tracklist: []\n        };\n      }\n\n    case ACTIONS.R_RECORDING:\n      {\n        return { ...state,\n          recordingState: STATES.RECORDING\n        };\n      }\n\n    case ACTIONS.R_RECORDING_FAIL:\n      {\n        return { ...state,\n          recordingState: STATES.FAIL,\n          recName: \"\",\n          tracklist: []\n        };\n      }\n\n    case ACTIONS.R_PUSH_TO_TRACKLIST:\n      {\n        const tracklist = Array.from(state.tracklist);\n        tracklist.push(action.track);\n        return { ...state,\n          tracklist: tracklist\n        };\n      }\n\n    case ACTIONS.R_UPDATE_START:\n      {\n        const {\n          id\n        } = action;\n        const tracklist = state.tracklist.map(track => {\n          if (track.id === id && !track.start) {\n            track.start = (new Date().getTime() - state.startTime) / 1000;\n          }\n\n          return track;\n        });\n        return { ...state,\n          tracklist\n        };\n      }\n\n    case ACTIONS.R_UPDATE_END:\n      {\n        const {\n          id\n        } = action;\n        const tracklist = state.tracklist.map(track => {\n          if (track.id === id) {\n            track.end = (new Date().getTime() - state.startTime) / 1000;\n          }\n\n          return track;\n        });\n        return { ...state,\n          tracklist\n        };\n      }\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/reducers/console/recorder/recorderReducer.js"],"names":["ACTIONS","STATES","initState","recName","recId","recordingState","IDLE","startTime","tracklist","headerState","state","action","type","R_START_RECORDING","INIT","id","Date","getTime","initTracklist","R_END_RECORDING","R_RECORDING","RECORDING","R_RECORDING_FAIL","FAIL","R_PUSH_TO_TRACKLIST","Array","from","push","track","R_UPDATE_START","map","start","R_UPDATE_END","end"],"mappings":"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","sourcesContent":["import { ACTIONS } from \"./../../../actions\";\r\nimport STATES from \"./stateDef\";\r\n\r\nconst initState = {\r\n    recName: \"\",\r\n    recId: null,\r\n    recordingState: STATES.IDLE,\r\n    startTime: null,\r\n    tracklist: [],\r\n}\r\n\r\nexport default function headerState(state = initState, action) {\r\n    switch (action.type) {\r\n        case ACTIONS.R_START_RECORDING: {\r\n            return {\r\n                ...state,\r\n                recordingState: STATES.INIT,\r\n                recName: action.recName,\r\n                recId: action.id,\r\n                startTime: new Date().getTime(),\r\n                tracklist : action.initTracklist\r\n            }\r\n        }\r\n\r\n        case ACTIONS.R_END_RECORDING: {\r\n            return {\r\n                ...state,\r\n                recordingState: STATES.IDLE,\r\n                recName: \"\",\r\n                tracklist: []\r\n            }\r\n        }\r\n\r\n        case ACTIONS.R_RECORDING: {\r\n            return {\r\n                ...state,\r\n                recordingState: STATES.RECORDING,\r\n            }\r\n        }\r\n\r\n        case ACTIONS.R_RECORDING_FAIL: {\r\n            return {\r\n                ...state,\r\n                recordingState: STATES.FAIL,\r\n                recName: \"\",\r\n                tracklist: []\r\n            }\r\n        }\r\n\r\n        case ACTIONS.R_PUSH_TO_TRACKLIST: {\r\n            const tracklist = Array.from(state.tracklist);\r\n            tracklist.push(action.track);\r\n            return {\r\n                ...state,\r\n                tracklist : tracklist\r\n            }\r\n        }\r\n\r\n        case ACTIONS.R_UPDATE_START:{\r\n            const {id} = action;\r\n            const tracklist = state.tracklist.map((track) => {\r\n                if(track.id === id && !track.start){\r\n                    track.start = (new Date().getTime() - state.startTime) / 1000;\r\n                }\r\n                return track;\r\n            })\r\n            return {\r\n                ...state,\r\n                tracklist,\r\n            }\r\n        }\r\n\r\n        case ACTIONS.R_UPDATE_END:{\r\n            const {id} = action;\r\n            const tracklist = state.tracklist.map((track) => {\r\n                if(track.id === id){\r\n                    track.end =  (new Date().getTime() - state.startTime) / 1000;\r\n                }\r\n                return track;\r\n            })\r\n            return {\r\n                ...state,\r\n                tracklist,\r\n            }\r\n        }\r\n\r\n\r\n        default: return state;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}