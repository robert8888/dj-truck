{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJEKTY\\\\APKI\\\\DjTruck\\\\djtruck\\\\src\\\\components\\\\Deck\\\\Player\\\\Player.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport WaveSurfer from \"wavesurfer\";\nimport Console from \"./../../../core/console/console\";\nimport { setChannelReady, setTimeLeft } from \"./../../../actions\";\nimport { getBeatLength } from \"./../../../utils/bpm/converter\";\nimport config from \"./configuration\";\nimport \"./player.scss\";\n\nclass Player extends React.Component {\n  constructor() {\n    super();\n    this.masterContainer = React.createRef();\n    this.slaveContainer = React.createRef();\n    this.state = {\n      loadingProgress: 0\n    };\n  }\n\n  setLoading(progress) {\n    this.setState(state => {\n      let _state = { ...state\n      };\n      _state.loadingProgress = progress;\n      return _state;\n    });\n  }\n\n  drawBeatBars(bpm, offset) {\n    let wrapper = this.master.drawer.wrapper;\n    let styleApply = WaveSurfer.Drawer.style;\n    let minPxPerSec = config.master().minPxPerSec;\n    let bitLength = getBeatLength(bpm);\n    let barPostions = [];\n\n    for (let i = offset; i < this.master.getDuration(); i += bitLength) {\n      barPostions.push(i);\n    }\n\n    let barStyle = position => ({\n      position: \"absolute\",\n      left: position + \"px\",\n      top: \"0px\",\n      width: \"1px\",\n      maxWidth: \"1px\",\n      height: \"100%\",\n      background: \"rgba(255,255,255, 0.5)\"\n    });\n\n    this.barsElements = [];\n    barPostions.forEach(position => {\n      let bar = document.createElement(\"div\");\n      let style = barStyle(minPxPerSec * position);\n      styleApply(bar, style);\n      wrapper.appendChild(bar);\n      this.barsElements.push(bar);\n    });\n  }\n\n  clearState() {\n    this.slave.load(null, []);\n\n    if (this.barsElements) {\n      this.barsElements.forEach(htmlElement => htmlElement.remove());\n    }\n  }\n\n  componentDidMount() {\n    const mixConsole = Console.Get();\n    mixConsole.createChannel(this.props.name, this.masterContainer.current, this.slaveContainer.current);\n    this.master = WaveSurfer.create(config.master(this.masterContainer.current, this.props.name));\n\n    this.master.__proto__.loadWithEvent = function (...args) {\n      this.fireEvent(\"load\");\n      this.load(...args);\n    };\n\n    this.slave = WaveSurfer.create(config.slave(this.slaveContainer.current, this.props.name));\n    mixConsole.setPlayer(this.props.name, this.master);\n    this.master.on(\"load\", () => {\n      this.clearState();\n    });\n    this.master.on(\"loading\", progress => {\n      this.setLoading(progress);\n    });\n    this.master.on(\"ready\", () => {\n      this.currentDuration = this.master.getDuration();\n      let resolution = 430;\n      this.slave.load(null, this.master.backend.getPeaks(resolution, 0, resolution));\n      this.setLoading(100);\n      this.props.setReadyHandler(true);\n      startSync();\n    });\n    this.slave.on(\"seek\", progress => {\n      const wasPlaying = this.master.isPlaying();\n      this.master.backend.seekTo(progress * this.currentDuration);\n      this.master.drawer.progress(progress);\n      this.master.fireEvent(\"seek\", progress);\n      this.slave.drawer.progress(progress);\n\n      if (wasPlaying) {\n        this.master.play();\n        this.props.setTimeLeftHandler(parseInt(this.master.getDuration() - this.master.getCurrentTime()));\n      } else {\n        this.props.setTimeLeftHandler(parseInt(this.master.getDuration() - this.master.getDuration() * progress));\n      }\n    });\n\n    const startSync = () => {\n      this.syncHandle = setInterval(() => {\n        this.slave.drawer.progress(this.master.getCurrentTime() / this.currentDuration);\n      }, 100);\n    };\n  }\n\n  render() {\n    if (this.props.bpm && this.props.offset && this.props.isReady) {\n      this.drawBeatBars(this.props.bpm, this.props.offset);\n    }\n\n    return React.createElement(\"div\", {\n      className: \"player player-\" + this.props.name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, this.state.loadingProgress < 100 && this.state.loadingProgress > 0 && React.createElement(\"div\", {\n      className: \"player-loading\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, \"Loading \", this.state.loadingProgress, \" % \")), React.createElement(\"div\", {\n      className: \"master\",\n      ref: this.masterContainer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"slave\",\n      ref: this.slaveContainer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapStateToProps = (state, ownProps) => ({\n  bpm: state.console.channel[ownProps.name].track.bpm,\n  offset: state.console.channel[ownProps.name].playBackState.offset,\n  isReady: state.console.channel[ownProps.name].playBackState.ready\n});\n\nconst mapDispachToProps = (dispatch, ownProps) => ({\n  setReadyHandler: status => dispatch(setChannelReady(status, ownProps.name)),\n  setTimeLeftHandler: timeLeft => dispatch(setTimeLeft(ownProps.name, timeLeft))\n});\n\nexport default connect(mapStateToProps, mapDispachToProps)(Player);","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/components/Deck/Player/Player.js"],"names":["React","connect","WaveSurfer","Console","setChannelReady","setTimeLeft","getBeatLength","config","Player","Component","constructor","masterContainer","createRef","slaveContainer","state","loadingProgress","setLoading","progress","setState","_state","drawBeatBars","bpm","offset","wrapper","master","drawer","styleApply","Drawer","style","minPxPerSec","bitLength","barPostions","i","getDuration","push","barStyle","position","left","top","width","maxWidth","height","background","barsElements","forEach","bar","document","createElement","appendChild","clearState","slave","load","htmlElement","remove","componentDidMount","mixConsole","Get","createChannel","props","name","current","create","__proto__","loadWithEvent","args","fireEvent","setPlayer","on","currentDuration","resolution","backend","getPeaks","setReadyHandler","startSync","wasPlaying","isPlaying","seekTo","play","setTimeLeftHandler","parseInt","getCurrentTime","syncHandle","setInterval","render","isReady","mapStateToProps","ownProps","console","channel","track","playBackState","ready","mapDispachToProps","dispatch","status","timeLeft"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport WaveSurfer from \"wavesurfer\";\r\nimport Console from \"./../../../core/console/console\";\r\nimport { setChannelReady, setTimeLeft } from \"./../../../actions\";\r\nimport { getBeatLength } from \"./../../../utils/bpm/converter\";\r\nimport config from \"./configuration\";\r\nimport \"./player.scss\";\r\n\r\nclass Player extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.masterContainer = React.createRef();\r\n    this.slaveContainer = React.createRef();\r\n\r\n    this.state = {\r\n      loadingProgress: 0\r\n    };\r\n  }\r\n\r\n  setLoading(progress) {\r\n    this.setState(state => {\r\n      let _state = { ...state };\r\n      _state.loadingProgress = progress;\r\n      return _state;\r\n    });\r\n  }\r\n\r\n  drawBeatBars(bpm, offset) {\r\n    let wrapper = this.master.drawer.wrapper;\r\n    let styleApply = WaveSurfer.Drawer.style;\r\n    let minPxPerSec = config.master().minPxPerSec;\r\n    let bitLength = getBeatLength(bpm);\r\n\r\n    let barPostions = [];\r\n\r\n    for (let i = offset; i < this.master.getDuration(); i += bitLength) {\r\n      barPostions.push(i);\r\n    }\r\n\r\n    let barStyle = position => ({\r\n      position: \"absolute\",\r\n      left: position + \"px\",\r\n      top: \"0px\",\r\n      width: \"1px\",\r\n      maxWidth: \"1px\",\r\n      height: \"100%\",\r\n      background: \"rgba(255,255,255, 0.5)\"\r\n    });\r\n\r\n    this.barsElements = [];\r\n    barPostions.forEach(position => {\r\n      let bar = document.createElement(\"div\");\r\n      let style = barStyle(minPxPerSec * position);\r\n      styleApply(bar, style);\r\n      wrapper.appendChild(bar);\r\n      this.barsElements.push(bar);\r\n    });\r\n  }\r\n\r\n  clearState() {\r\n    this.slave.load(null, []);\r\n    if (this.barsElements) {\r\n      this.barsElements.forEach(htmlElement => htmlElement.remove());\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    const mixConsole = Console.Get();\r\n    mixConsole.createChannel(\r\n      this.props.name,\r\n      this.masterContainer.current,\r\n      this.slaveContainer.current\r\n    );\r\n\r\n    this.master = WaveSurfer.create(\r\n      config.master(this.masterContainer.current, this.props.name)\r\n    );\r\n    this.master.__proto__.loadWithEvent = function(...args) {\r\n      this.fireEvent(\"load\");\r\n      this.load(...args);\r\n    };\r\n\r\n    this.slave = WaveSurfer.create(\r\n      config.slave(this.slaveContainer.current, this.props.name)\r\n    );\r\n\r\n    mixConsole.setPlayer(this.props.name, this.master);\r\n\r\n    this.master.on(\"load\", () => {\r\n      this.clearState();\r\n    });\r\n\r\n    this.master.on(\"loading\", progress => {\r\n      this.setLoading(progress);\r\n    });\r\n\r\n    this.master.on(\"ready\", () => {\r\n      this.currentDuration = this.master.getDuration();\r\n      let resolution = 430;\r\n      this.slave.load(\r\n        null,\r\n        this.master.backend.getPeaks(resolution, 0, resolution)\r\n      );\r\n      this.setLoading(100);\r\n      this.props.setReadyHandler(true);\r\n      startSync();\r\n    });\r\n\r\n    this.slave.on(\"seek\", progress => {\r\n      const wasPlaying = this.master.isPlaying();\r\n\r\n      this.master.backend.seekTo(progress * this.currentDuration);\r\n      this.master.drawer.progress(progress);\r\n      this.master.fireEvent(\"seek\", progress);\r\n\r\n      this.slave.drawer.progress(progress);\r\n\r\n      if (wasPlaying) {\r\n        this.master.play();\r\n        this.props.setTimeLeftHandler(\r\n          parseInt(this.master.getDuration() - this.master.getCurrentTime())\r\n        );\r\n      } else {\r\n        this.props.setTimeLeftHandler(\r\n          parseInt(\r\n            this.master.getDuration() - this.master.getDuration() * progress\r\n          )\r\n        );\r\n      }\r\n    });\r\n\r\n    const startSync = () => {\r\n      this.syncHandle = setInterval(() => {\r\n        this.slave.drawer.progress(\r\n          this.master.getCurrentTime() / this.currentDuration\r\n        );\r\n      }, 100);\r\n    };\r\n  }\r\n\r\n  render() {\r\n    if (this.props.bpm && this.props.offset && this.props.isReady) {\r\n      this.drawBeatBars(this.props.bpm, this.props.offset);\r\n    }\r\n\r\n    return (\r\n      <div className={\"player player-\" + this.props.name}>\r\n        {this.state.loadingProgress < 100 && this.state.loadingProgress > 0 && (\r\n          <div className=\"player-loading\">\r\n            <span>Loading {this.state.loadingProgress} % </span>\r\n          </div>\r\n        )}\r\n        <div className=\"master\" ref={this.masterContainer} />\r\n        <div className=\"slave\" ref={this.slaveContainer} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => ({\r\n  bpm: state.console.channel[ownProps.name].track.bpm,\r\n  offset: state.console.channel[ownProps.name].playBackState.offset,\r\n  isReady: state.console.channel[ownProps.name].playBackState.ready\r\n});\r\n\r\nconst mapDispachToProps = (dispatch, ownProps) => ({\r\n  setReadyHandler: status => dispatch(setChannelReady(status, ownProps.name)),\r\n  setTimeLeftHandler: timeLeft => dispatch(setTimeLeft(ownProps.name, timeLeft))\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispachToProps)(Player);\r\n"]},"metadata":{},"sourceType":"module"}