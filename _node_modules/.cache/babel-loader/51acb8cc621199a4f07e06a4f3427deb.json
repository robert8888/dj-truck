{"ast":null,"code":"import { moveTo, ACTIONS } from \"../../actions\";\nimport { takeEvery, select, put } from \"redux-saga/effects\";\nimport { showLoading, hideLoading } from 'react-redux-loading-bar';\nimport { getApi } from \"./../../apis/apiProvider\";\nimport { get } from \"lodash/object\";\nimport { generateTemplateName as generateName, findClosesDir } from \"./../../reducers/console/playlist/utils\";\nexport default function* renameSelectedRequestSaga() {\n  yield takeEvery(ACTIONS.PL_MOVE_TO_REQUEST, callApi);\n}\n\nconst getToken = state => state.user.token;\n\nconst getCurrentSelection = state => state.playList.currentSelection;\n\nconst getCurrent = (state, path) => get(state.playList, path);\n\nconst parentDirPath = (state, path) => findClosesDir(state.playList, path);\n\nconst parseName = (state, path, name) => generateName(state.playList, path, name);\n\nfunction* callApi(action) {\n  const {\n    callQuery,\n    queries\n  } = getApi(\"UserAssets\");\n  const token = yield select(getToken);\n\n  if (!token) {\n    yield put(moveTo(action.pathFrom, action.pathTo));\n    return;\n  }\n\n  try {\n    yield put(showLoading());\n    const currentSelection = yield select(getCurrentSelection);\n    const current = yield select(getCurrent, currentSelection);\n    const parentPath = yield select(parentDirPath, currentSelection);\n    const id = current._id;\n    const isPlaylist = current._type === \"playlist\";\n    const name = yield select(parseName, parentPath, action.name);\n\n    if (!id) {\n      throw new Error(\"Element id missing\");\n    }\n\n    let query;\n\n    if (isPlaylist) {\n      query = queries.renameQl.renamePlaylist(id, name);\n    } else {\n      // dir\n      query = queries.renameQl.renameDir(id, name);\n    }\n\n    let res = yield callQuery(query, token);\n\n    if (!res.erorrs) {} else {\n      throw new Error(JSON.stringify(res.errors));\n    }\n  } catch (err) {\n    console.log(\"Can't update data in database. Api call problem\");\n    console.log(err.message);\n  } finally {\n    yield put(hideLoading());\n  }\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/sagas/playlists/moveElementToRequestSaga.js"],"names":["moveTo","ACTIONS","takeEvery","select","put","showLoading","hideLoading","getApi","get","generateTemplateName","generateName","findClosesDir","renameSelectedRequestSaga","PL_MOVE_TO_REQUEST","callApi","getToken","state","user","token","getCurrentSelection","playList","currentSelection","getCurrent","path","parentDirPath","parseName","name","action","callQuery","queries","pathFrom","pathTo","current","parentPath","id","_id","isPlaylist","_type","Error","query","renameQl","renamePlaylist","renameDir","res","erorrs","JSON","stringify","errors","err","console","log","message"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,OAAjB,QAAgC,eAAhC;AACA,SAASC,SAAT,EAAoBC,MAApB,EAA4BC,GAA5B,QAAuC,oBAAvC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,yBAAzC;AACA,SAASC,MAAT,QAAuB,0BAAvB;AACA,SAASC,GAAT,QAAoB,eAApB;AACA,SACIC,oBAAoB,IAAIC,YAD5B,EAEIC,aAFJ,QAGO,yCAHP;AAKA,eAAe,UAAUC,yBAAV,GAAsC;AACjD,QAAMV,SAAS,CAACD,OAAO,CAACY,kBAAT,EAA6BC,OAA7B,CAAf;AACH;;AAED,MAAMC,QAAQ,GAAGC,KAAK,IAAIA,KAAK,CAACC,IAAN,CAAWC,KAArC;;AAEA,MAAMC,mBAAmB,GAAGH,KAAK,IAAIA,KAAK,CAACI,QAAN,CAAeC,gBAApD;;AAEA,MAAMC,UAAU,GAAG,CAACN,KAAD,EAAQO,IAAR,KAAiBf,GAAG,CAACQ,KAAK,CAACI,QAAP,EAAiBG,IAAjB,CAAvC;;AAEA,MAAMC,aAAa,GAAG,CAACR,KAAD,EAAQO,IAAR,KAAiBZ,aAAa,CAACK,KAAK,CAACI,QAAP,EAAiBG,IAAjB,CAApD;;AAEA,MAAME,SAAS,GAAG,CAACT,KAAD,EAAQO,IAAR,EAAcG,IAAd,KAAuBhB,YAAY,CAACM,KAAK,CAACI,QAAP,EAAiBG,IAAjB,EAAuBG,IAAvB,CAArD;;AAEA,UAAUZ,OAAV,CAAkBa,MAAlB,EAA0B;AACtB,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA;AAAb,MAAyBtB,MAAM,CAAC,YAAD,CAArC;AACA,QAAMW,KAAK,GAAG,MAAMf,MAAM,CAACY,QAAD,CAA1B;;AACA,MAAI,CAACG,KAAL,EAAY;AACR,UAAMd,GAAG,CAACJ,MAAM,CAAC2B,MAAM,CAACG,QAAR,EAAkBH,MAAM,CAACI,MAAzB,CAAP,CAAT;AACA;AACH;;AACD,MAAI;AACA,UAAM3B,GAAG,CAACC,WAAW,EAAZ,CAAT;AACA,UAAMgB,gBAAgB,GAAG,MAAMlB,MAAM,CAACgB,mBAAD,CAArC;AACA,UAAMa,OAAO,GAAG,MAAM7B,MAAM,CAACmB,UAAD,EAAaD,gBAAb,CAA5B;AACA,UAAMY,UAAU,GAAG,MAAM9B,MAAM,CAACqB,aAAD,EAAgBH,gBAAhB,CAA/B;AAEA,UAAMa,EAAE,GAAGF,OAAO,CAACG,GAAnB;AACA,UAAMC,UAAU,GAAIJ,OAAO,CAACK,KAAR,KAAkB,UAAtC;AAEA,UAAMX,IAAI,GAAG,MAAMvB,MAAM,CAACsB,SAAD,EAAYQ,UAAZ,EAAwBN,MAAM,CAACD,IAA/B,CAAzB;;AAEA,QAAI,CAACQ,EAAL,EAAS;AACL,YAAM,IAAII,KAAJ,CAAU,oBAAV,CAAN;AACH;;AAED,QAAIC,KAAJ;;AACA,QAAIH,UAAJ,EAAgB;AACZG,MAAAA,KAAK,GAAGV,OAAO,CAACW,QAAR,CAAiBC,cAAjB,CAAgCP,EAAhC,EAAoCR,IAApC,CAAR;AACH,KAFD,MAEO;AAAE;AACLa,MAAAA,KAAK,GAAGV,OAAO,CAACW,QAAR,CAAiBE,SAAjB,CAA2BR,EAA3B,EAA+BR,IAA/B,CAAR;AACH;;AAED,QAAIiB,GAAG,GAAG,MAAMf,SAAS,CAACW,KAAD,EAAQrB,KAAR,CAAzB;;AACA,QAAI,CAACyB,GAAG,CAACC,MAAT,EAAiB,CAEhB,CAFD,MAEO;AACH,YAAM,IAAIN,KAAJ,CAAUO,IAAI,CAACC,SAAL,CAAeH,GAAG,CAACI,MAAnB,CAAV,CAAN;AACH;AAEJ,GA7BD,CA6BE,OAAOC,GAAP,EAAY;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAY,iDAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,OAAhB;AACH,GAhCD,SAgCS;AACP,UAAM/C,GAAG,CAACE,WAAW,EAAZ,CAAT;AACD;AACJ","sourcesContent":["import { moveTo, ACTIONS } from \"../../actions\";\r\nimport { takeEvery, select, put } from \"redux-saga/effects\";\r\nimport { showLoading, hideLoading } from 'react-redux-loading-bar'\r\nimport { getApi } from \"./../../apis/apiProvider\";\r\nimport { get } from \"lodash/object\";\r\nimport {\r\n    generateTemplateName as generateName,\r\n    findClosesDir\r\n} from \"./../../reducers/console/playlist/utils\"\r\n\r\nexport default function* renameSelectedRequestSaga() {\r\n    yield takeEvery(ACTIONS.PL_MOVE_TO_REQUEST, callApi)\r\n}\r\n\r\nconst getToken = state => state.user.token;\r\n\r\nconst getCurrentSelection = state => state.playList.currentSelection;\r\n\r\nconst getCurrent = (state, path) => get(state.playList, path);\r\n\r\nconst parentDirPath = (state, path) => findClosesDir(state.playList, path);\r\n\r\nconst parseName = (state, path, name) => generateName(state.playList, path, name);\r\n\r\nfunction* callApi(action) {\r\n    const { callQuery, queries } = getApi(\"UserAssets\");\r\n    const token = yield select(getToken);\r\n    if (!token) {\r\n        yield put(moveTo(action.pathFrom, action.pathTo));\r\n        return;\r\n    }\r\n    try {\r\n        yield put(showLoading());\r\n        const currentSelection = yield select(getCurrentSelection);\r\n        const current = yield select(getCurrent, currentSelection);\r\n        const parentPath = yield select(parentDirPath, currentSelection);\r\n\r\n        const id = current._id;\r\n        const isPlaylist = (current._type === \"playlist\");\r\n\r\n        const name = yield select(parseName, parentPath, action.name)\r\n\r\n        if (!id) {\r\n            throw new Error(\"Element id missing\")\r\n        }\r\n\r\n        let query;\r\n        if (isPlaylist) {\r\n            query = queries.renameQl.renamePlaylist(id, name)\r\n        } else { // dir\r\n            query = queries.renameQl.renameDir(id, name)\r\n        }\r\n\r\n        let res = yield callQuery(query, token);\r\n        if (!res.erorrs) {\r\n           \r\n        } else {\r\n            throw new Error(JSON.stringify(res.errors))\r\n        }\r\n\r\n    } catch (err) {\r\n        console.log(\"Can't update data in database. Api call problem\");\r\n        console.log(err.message);\r\n    } finally{\r\n      yield put(hideLoading())\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}