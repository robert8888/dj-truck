{"ast":null,"code":"import store from \"./../../../../../store\";\nimport { setAvailableEffects } from \"./../../../../../actions\";\nimport Reverb from \"./effects/reverb/reverb\";\nimport Delay from \"./effects/delay/delay\";\nexport default class Effector {\n  constructor(audioContext) {\n    this.config = store.getState().configuration.effector;\n    this.mainAC = audioContext;\n    this.channels = new Array(this.config.channels).fill(null).map(() => Object.create(null));\n    console.log(this.channels);\n    this.effects = {\n      \"reverb\": {\n        create: Reverb,\n        params: Reverb.defaultParams().params\n      },\n      \"delay\": {\n        create: Delay,\n        params: Delay.defaultParams().params\n      }\n    };\n    const exportEffects = {};\n    Object.entries(this.effects).forEach(([key, element]) => exportEffects[key] = element.params);\n    store.dispatch(setAvailableEffects(exportEffects));\n  }\n\n  connect(inputs) {\n    const outputs = inputs.map(() => this.mainAC.createGain());\n    inputs.forEach((inputNode, channelNumber) => {\n      const dryNode = this.mainAC.createGain();\n      inputNode.connect(dryNode);\n      dryNode.connect(outputs[channelNumber]);\n      this.channels[channelNumber].inputNode = inputNode;\n      this.channels[channelNumber].dryNode = dryNode;\n      this.channels[channelNumber].outputNode = outputs[channelNumber];\n    });\n    return outputs;\n  }\n\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/pages/app/core/console/effector/effector.js"],"names":["store","setAvailableEffects","Reverb","Delay","Effector","constructor","audioContext","config","getState","configuration","effector","mainAC","channels","Array","fill","map","Object","create","console","log","effects","params","defaultParams","exportEffects","entries","forEach","key","element","dispatch","connect","inputs","outputs","createGain","inputNode","channelNumber","dryNode","outputNode"],"mappings":"AACA,OAAOA,KAAP,MAAkB,wBAAlB;AACA,SAASC,mBAAT,QAAoC,0BAApC;AAEA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,OAAOC,KAAP,MAAkB,uBAAlB;AAIA,eAAe,MAAMC,QAAN,CAAe;AAC1BC,EAAAA,WAAW,CAACC,YAAD,EAAe;AACtB,SAAKC,MAAL,GAAcP,KAAK,CAACQ,QAAN,GAAiBC,aAAjB,CAA+BC,QAA7C;AACA,SAAKC,MAAL,GAAcL,YAAd;AAEA,SAAKM,QAAL,GAAgB,IAAIC,KAAJ,CAAU,KAAKN,MAAL,CAAYK,QAAtB,EACXE,IADW,CACN,IADM,EACAC,GADA,CACI,MAAMC,MAAM,CAACC,MAAP,CAAc,IAAd,CADV,CAAhB;AAEAC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKP,QAAjB;AAEA,SAAKQ,OAAL,GAAe;AACX,gBAAU;AACNH,QAAAA,MAAM,EAAEf,MADF;AAENmB,QAAAA,MAAM,EAAEnB,MAAM,CAACoB,aAAP,GAAuBD;AAFzB,OADC;AAKX,eAAS;AACLJ,QAAAA,MAAM,EAAEd,KADH;AAELkB,QAAAA,MAAM,EAAElB,KAAK,CAACmB,aAAN,GAAsBD;AAFzB;AALE,KAAf;AAWA,UAAME,aAAa,GAAG,EAAtB;AACAP,IAAAA,MAAM,CAACQ,OAAP,CAAe,KAAKJ,OAApB,EAA6BK,OAA7B,CAAqC,CAAC,CAACC,GAAD,EAAMC,OAAN,CAAD,KAAoBJ,aAAa,CAACG,GAAD,CAAb,GAAqBC,OAAO,CAACN,MAAtF;AACArB,IAAAA,KAAK,CAAC4B,QAAN,CAAe3B,mBAAmB,CAACsB,aAAD,CAAlC;AACH;;AAEDM,EAAAA,OAAO,CAACC,MAAD,EAAS;AACZ,UAAMC,OAAO,GAAGD,MAAM,CAACf,GAAP,CAAW,MAAM,KAAKJ,MAAL,CAAYqB,UAAZ,EAAjB,CAAhB;AAEAF,IAAAA,MAAM,CAACL,OAAP,CAAe,CAACQ,SAAD,EAAYC,aAAZ,KAA8B;AACzC,YAAMC,OAAO,GAAG,KAAKxB,MAAL,CAAYqB,UAAZ,EAAhB;AAEAC,MAAAA,SAAS,CAACJ,OAAV,CAAkBM,OAAlB;AACAA,MAAAA,OAAO,CAACN,OAAR,CAAgBE,OAAO,CAACG,aAAD,CAAvB;AAEA,WAAKtB,QAAL,CAAcsB,aAAd,EAA6BD,SAA7B,GAAyCA,SAAzC;AACA,WAAKrB,QAAL,CAAcsB,aAAd,EAA6BC,OAA7B,GAAuCA,OAAvC;AACA,WAAKvB,QAAL,CAAcsB,aAAd,EAA6BE,UAA7B,GAA0CL,OAAO,CAACG,aAAD,CAAjD;AACH,KATD;AAWA,WAAOH,OAAP;AACH;;AAxCyB","sourcesContent":["\r\nimport store from \"./../../../../../store\";\r\nimport { setAvailableEffects } from \"./../../../../../actions\";\r\n\r\nimport Reverb from \"./effects/reverb/reverb\";\r\nimport Delay from \"./effects/delay/delay\";\r\n\r\n\r\n\r\nexport default class Effector {\r\n    constructor(audioContext) {\r\n        this.config = store.getState().configuration.effector;\r\n        this.mainAC = audioContext;\r\n\r\n        this.channels = new Array(this.config.channels)\r\n            .fill(null).map(() => Object.create(null));\r\n        console.log(this.channels)\r\n\r\n        this.effects = {\r\n            \"reverb\": {\r\n                create: Reverb,\r\n                params: Reverb.defaultParams().params,\r\n            },\r\n            \"delay\": {\r\n                create: Delay,\r\n                params: Delay.defaultParams().params\r\n            }\r\n        }\r\n\r\n        const exportEffects = {};\r\n        Object.entries(this.effects).forEach(([key, element]) => exportEffects[key] = element.params);\r\n        store.dispatch(setAvailableEffects(exportEffects));\r\n    }\r\n\r\n    connect(inputs) {\r\n        const outputs = inputs.map(() => this.mainAC.createGain())\r\n\r\n        inputs.forEach((inputNode, channelNumber) => {\r\n            const dryNode = this.mainAC.createGain();\r\n\r\n            inputNode.connect(dryNode);\r\n            dryNode.connect(outputs[channelNumber]);\r\n\r\n            this.channels[channelNumber].inputNode = inputNode;\r\n            this.channels[channelNumber].dryNode = dryNode;\r\n            this.channels[channelNumber].outputNode = outputs[channelNumber];\r\n        });\r\n\r\n        return outputs;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}