{"ast":null,"code":"import { ACTIONS } from \"../actions\";\nimport { produce } from \"imer\";\nimport { unset, set, get } from \"lodash/object\";\nconst initState = {\n  list: [],\n  currentPlaylist: [],\n  // path to play list \n  currentSelection: ['root'],\n  // path to dir or playlist current selected\n  root: {},\n  // root dir for play list \n  //mock\n  root: {\n    \"Techno\": {\n      _open: true,\n      \"ZetTempo\": [],\n      \"empty dir\": {},\n      \"HardCore\": [],\n      \"Special\": {\n        _open: true,\n        \"DubTechno\": [],\n        \"Clasic 90\": []\n      }\n    },\n    \"Mini mal\": {\n      \"HighTech\": [],\n      \"Classic\": [],\n      \"EmptyFolder\": {}\n    }\n  }\n};\n\nfunction playListReducer(state = initState, action) {\n  switch (action.type) {\n    case ACTIONS.PUSH_TRACK:\n      {\n        if (state.currentPlaylist.length === 0) {\n          //if is not seelect any play list - create new\n          let pathToDir = [\"root\"];\n\n          if (state.currentSelection.length > 1) {\n            pathToDir = findClosesDir(state, state.currentSelection);\n          }\n\n          const name = generateTemplateName(state, pathToDir, \"New Playlist\");\n          const fullPath = [...pathToDir, name];\n          return produce(state, draftState => {\n            set(draftState, fullPath, []);\n            set(draftState, [...pathToDir, \"_open\"], true);\n            draftState.currentSelection = fullPath;\n            draftState.currentPlaylist = fullPath;\n            const playlist = get(draftState, fullPath);\n            playlist.push(action.track);\n            draftState.list = playlist;\n            set(draftState, fullPath, playlist);\n          });\n        }\n\n        return produce(state, draftState => {\n          draftState.list.push(action.track);\n          set(draftState, state.currentPlaylist, draftState.list);\n        });\n      }\n    ///-------------------to refactor- below two\n\n    case ACTIONS.SET_BPM_AND_OFFSET:\n      {\n        let {\n          id,\n          playlist,\n          bpm,\n          offset\n        } = action;\n        let isCurrent = false;\n        playlist = playlist || state.currentPlaylist;\n\n        if (playlist === undefined || playlist.length === 0) {\n          isCurrent == true;\n          playlist = state.currentPlaylist;\n        } // console.log(playlist)\n\n\n        const list = get(state, playlist);\n        const index = state.list.findIndex(element => element._id === id); //console.log(list, id);\n\n        if (index === -1) {\n          return state;\n        }\n\n        list[index].bpm = bpm;\n        list[index].offset = offset;\n        return produce(state, draftState => {\n          set(draftState, playlist, list);\n\n          if (isCurrent) {\n            draftState.list = list;\n          }\n        });\n      }\n    ///--------------------------------------\n\n    case ACTIONS.PL_TOGGLE_DIR:\n      {\n        const open = get(state, [...action.path, \"_open\"]);\n        return produce(state, draftState => set(draftState, [...action.path, \"_open\"], !open));\n      }\n\n    case ACTIONS.PL_SET_SELECTION:\n      {\n        return produce(state, draftState => draftState.currentSelection = action.path);\n      }\n\n    case ACTIONS.PL_SET_CURRENT_PLAYLIST:\n      {\n        return produce(state, draftState => {\n          draftState.currentPlayList = action.path;\n          draftState.list = get(state, [action.path]);\n        });\n      }\n\n    case ACTIONS.PL_RENAME_SELECTED:\n      {\n        const content = get(state, state.currentSelection);\n        return produce(state, draftState => {\n          unset(draftState, state.currentSelection);\n          const newCurrent = draftState.currentSelection;\n          newCurrent.pop();\n          newCurrent.push(action.name);\n          draftState.currentSelection = newCurrent;\n          set(draftState, newCurrent, content);\n        });\n      }\n\n    case ACTIONS.PL_DELETE_SELECTED:\n      {\n        return produce(state, draftState => {\n          unset(draftState, state.currentSelection);\n          draftState.currentSelection = [];\n        });\n      }\n\n    case ACTIONS.PL_MOVE_TO:\n      {\n        const {\n          pathFrom,\n          pathTo\n        } = action;\n        const content = get(state, pathFrom);\n        const name = pathFrom.pop(); //if target and source are the same don't do anything\n\n        if (pathFrom.length === pathTo.length && pathFrom.every((e, i) => e === pathTo[i])) {\n          return state;\n        }\n\n        return produce(state, draftState => {\n          set(draftState, [...pathTo, name], content);\n          unset(draftState, [...pathFrom, name]);\n        });\n      }\n\n    case ACTIONS.PL_DELETE_TRACK:\n      {\n        return produce(state, draftState => {\n          const newList = [...state.list];\n          newList.splice(action.index, 1);\n          draftState.list = newList;\n          set(draftState, draftState.currentPlaylist, newList);\n        });\n      }\n\n    case ACTIONS.PL_SWAP_TRACK_ON_CURRENT:\n      {\n        return produce(state, draftState => {\n          const newList = [...state.list];\n          let trackFrom = newList[action.from];\n          newList[action.from] = newList[action.to];\n          newList[action.to] = trackFrom;\n          draftState.list = newList;\n          set(draftState, draftState.currentPlaylist, newList);\n        });\n      }\n\n    case ACTIONS.PL_ADD_TRACK_TO_LIST:\n      {\n        const list = get(state, action.path);\n        if (!list) return state;\n        return produce(state, draftState => {\n          list.push(action.track);\n          set(draftState, action.fullPath, list);\n        });\n      }\n\n    case ACTIONS.PL_CREATE_DIR:\n      {\n        console.log(action.name);\n        let name = action.name;\n        const pathToDir = findClosesDir(state, state.currentSelection);\n\n        if (!name) {\n          name = generateTemplateName(state, pathToDir, \"New Folder\");\n          console.log(\"new name\", name);\n        }\n\n        return produce(state, draftState => {\n          set(draftState, [...pathToDir, name], {});\n          set(draftState, [...pathToDir, \"_open\"], true);\n          draftState.currentSelection = [...pathToDir, name];\n        });\n      }\n\n    case ACTIONS.PL_CREATE_PLAYLIST:\n      {\n        let name = action.name;\n        const pathToDir = findClosesDir(state, state.currentSelection);\n\n        if (!name) {\n          name = generateTemplateName(state, pathToDir, \"New Playlist\");\n        }\n\n        return produce(state, draftState => {\n          set(draftState, [...pathToDir, name], []);\n          set(draftState, [...pathToDir, \"_open\"], true);\n          draftState.currentSelection = [...pathToDir, name];\n        });\n      }\n\n    case ACTIONS.PL_OPEN_CURRENT_PLAY_LIST:\n      {\n        return produce(state, draftState => {\n          draftState.list = get(state, state.currentSelection);\n          draftState.currentPlaylist = state.currentSelection;\n        });\n      }\n\n    default:\n      return state;\n  }\n}\n\nexport default playListReducer;\n\nfunction findClosesDir(state, path) {\n  if (get(state, path) instanceof Array) {\n    path.pop();\n    return findClosesDir(state, path);\n  } else return path;\n}\n\nfunction generateTemplateName(state, path, base) {\n  let i = 0;\n\n  while (true) {\n    const number = i || \"\";\n    let name = base + \" \" + number;\n    const notExist = !get(state, [...path, name]);\n\n    if (notExist) {\n      return name;\n    } else {\n      i++;\n    }\n  }\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/reducers/playListReducer.js"],"names":["ACTIONS","produce","unset","set","get","initState","list","currentPlaylist","currentSelection","root","_open","playListReducer","state","action","type","PUSH_TRACK","length","pathToDir","findClosesDir","name","generateTemplateName","fullPath","draftState","playlist","push","track","SET_BPM_AND_OFFSET","id","bpm","offset","isCurrent","undefined","index","findIndex","element","_id","PL_TOGGLE_DIR","open","path","PL_SET_SELECTION","PL_SET_CURRENT_PLAYLIST","currentPlayList","PL_RENAME_SELECTED","content","newCurrent","pop","PL_DELETE_SELECTED","PL_MOVE_TO","pathFrom","pathTo","every","e","i","PL_DELETE_TRACK","newList","splice","PL_SWAP_TRACK_ON_CURRENT","trackFrom","from","to","PL_ADD_TRACK_TO_LIST","PL_CREATE_DIR","console","log","PL_CREATE_PLAYLIST","PL_OPEN_CURRENT_PLAY_LIST","Array","base","number","notExist"],"mappings":"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","sourcesContent":["import { ACTIONS } from \"../actions\";\r\nimport { produce } from \"imer\";\r\nimport { unset, set, get } from \"lodash/object\"\r\n\r\nconst initState = {\r\n    list: [],\r\n\r\n    currentPlaylist: [],// path to play list \r\n    currentSelection: ['root'], // path to dir or playlist current selected\r\n    root: {}, // root dir for play list \r\n\r\n    //mock\r\n    root: {\r\n        \"Techno\": {\r\n            _open: true,\r\n            \"ZetTempo\": [],\r\n            \"empty dir\": {},\r\n            \"HardCore\": [],\r\n            \"Special\": {\r\n                _open: true,\r\n                \"DubTechno\": [],\r\n                \"Clasic 90\": []\r\n            }\r\n        },\r\n        \"Mini mal\": {\r\n            \"HighTech\": [],\r\n            \"Classic\": [],\r\n            \"EmptyFolder\": {}\r\n        }\r\n    }\r\n}\r\n\r\nfunction playListReducer(state = initState, action) {\r\n    switch (action.type) {\r\n        case ACTIONS.PUSH_TRACK: {\r\n            if (state.currentPlaylist.length === 0) {\r\n                //if is not seelect any play list - create new\r\n                let pathToDir = [\"root\"]\r\n                if (state.currentSelection.length > 1) {\r\n                    pathToDir = findClosesDir(state, state.currentSelection);\r\n                }\r\n                const name = generateTemplateName(state, pathToDir, \"New Playlist\");\r\n                const fullPath = [...pathToDir, name];\r\n                return produce(state, draftState => {\r\n                    set(draftState, fullPath, [])\r\n                    set(draftState, [...pathToDir, \"_open\"], true);\r\n                    draftState.currentSelection = fullPath\r\n                    draftState.currentPlaylist = fullPath;\r\n                    const playlist = get(draftState, fullPath);\r\n                    playlist.push(action.track);\r\n                    draftState.list = playlist;\r\n                    set(draftState, fullPath, playlist);\r\n                })\r\n            }\r\n            return produce(state, draftState => {\r\n                draftState.list.push(action.track);\r\n                set(draftState, state.currentPlaylist, draftState.list);\r\n            })\r\n        }\r\n        ///-------------------to refactor- below two\r\n\r\n        case ACTIONS.SET_BPM_AND_OFFSET: {\r\n            let { id, playlist, bpm, offset } = action;\r\n            let isCurrent = false;\r\n            playlist = playlist || state.currentPlaylist;\r\n            if (playlist === undefined || playlist.length === 0){\r\n                isCurrent == true;\r\n                playlist = state.currentPlaylist;\r\n            }\r\n           // console.log(playlist)\r\n            const list = get(state, playlist);\r\n            const index = state.list.findIndex(element => element._id === id);\r\n            //console.log(list, id);\r\n            if(index === -1){\r\n                return state;\r\n            }\r\n            list[index].bpm = bpm;\r\n            list[index].offset = offset;\r\n            return produce(state, draftState => {\r\n                set(draftState, playlist, list);\r\n                if(isCurrent){\r\n                    draftState.list = list;\r\n                }\r\n            })\r\n        }\r\n        ///--------------------------------------\r\n        case ACTIONS.PL_TOGGLE_DIR: {\r\n            const open = get(state, [...action.path, \"_open\"])\r\n            return produce(state, draftState => set(draftState, [...action.path, \"_open\"], !open))\r\n        }\r\n        case ACTIONS.PL_SET_SELECTION: {\r\n            return produce(state, draftState => draftState.currentSelection = action.path)\r\n        }\r\n\r\n        case ACTIONS.PL_SET_CURRENT_PLAYLIST: {\r\n            return produce(state, draftState => {\r\n                draftState.currentPlayList = action.path;\r\n                draftState.list = get(state, [action.path]);\r\n            })\r\n        }\r\n\r\n        case ACTIONS.PL_RENAME_SELECTED: {\r\n            const content = get(state, state.currentSelection);\r\n            return produce(state, draftState => {\r\n                unset(draftState, state.currentSelection);\r\n                const newCurrent = draftState.currentSelection;\r\n                newCurrent.pop();\r\n                newCurrent.push(action.name);\r\n                draftState.currentSelection = newCurrent;\r\n                set(draftState, newCurrent, content)\r\n            })\r\n        }\r\n\r\n        case ACTIONS.PL_DELETE_SELECTED: {\r\n            return produce(state, draftState => {\r\n                unset(draftState, state.currentSelection);\r\n                draftState.currentSelection = [];\r\n            })\r\n        }\r\n\r\n        case ACTIONS.PL_MOVE_TO: {\r\n            const { pathFrom, pathTo } = action;\r\n            const content = get(state, pathFrom);\r\n            const name = pathFrom.pop();\r\n            //if target and source are the same don't do anything\r\n            if (pathFrom.length === pathTo.length &&\r\n                pathFrom.every((e, i) => e === pathTo[i])) {\r\n                return state;\r\n            }\r\n            return produce(state, draftState => {\r\n                set(draftState, [...pathTo, name], content);\r\n                unset(draftState, [...pathFrom, name]);\r\n            })\r\n        }\r\n\r\n        case ACTIONS.PL_DELETE_TRACK: {\r\n            return produce(state, draftState => {\r\n                const newList = [...state.list];\r\n                newList.splice(action.index, 1);\r\n                draftState.list = newList\r\n                set(draftState, draftState.currentPlaylist, newList)\r\n            })\r\n        }\r\n\r\n        case ACTIONS.PL_SWAP_TRACK_ON_CURRENT: {\r\n            return produce(state, draftState => {\r\n                const newList = [...state.list];\r\n                let trackFrom = newList[action.from];\r\n                newList[action.from] = newList[action.to];\r\n                newList[action.to] = trackFrom;\r\n                draftState.list = newList;\r\n                set(draftState, draftState.currentPlaylist, newList)\r\n            })\r\n        }\r\n\r\n        case ACTIONS.PL_ADD_TRACK_TO_LIST: {\r\n            const list = get(state, action.path);\r\n            if (!list) return state;\r\n            return produce(state, draftState => {\r\n                list.push(action.track);\r\n                set(draftState, action.fullPath, list);\r\n            })\r\n        }\r\n\r\n        case ACTIONS.PL_CREATE_DIR: {\r\n            console.log(action.name)\r\n            let name = action.name;\r\n            const pathToDir = findClosesDir(state, state.currentSelection);\r\n            if (!name) {\r\n                name = generateTemplateName(state, pathToDir, \"New Folder\");\r\n                console.log(\"new name\", name)\r\n            }\r\n            return produce(state, draftState => {\r\n                set(draftState, [...pathToDir, name], {})\r\n                set(draftState, [...pathToDir, \"_open\"], true);\r\n                draftState.currentSelection = [...pathToDir, name];\r\n            })\r\n        }\r\n\r\n        case ACTIONS.PL_CREATE_PLAYLIST: {\r\n            let name = action.name;\r\n            const pathToDir = findClosesDir(state, state.currentSelection);\r\n            if (!name) {\r\n                name = generateTemplateName(state, pathToDir, \"New Playlist\");\r\n            }\r\n            return produce(state, draftState => {\r\n                set(draftState, [...pathToDir, name], [])\r\n                set(draftState, [...pathToDir, \"_open\"], true);\r\n                draftState.currentSelection = [...pathToDir, name];\r\n            })\r\n        }\r\n\r\n        case ACTIONS.PL_OPEN_CURRENT_PLAY_LIST: {\r\n            return produce(state, draftState => {\r\n                draftState.list = get(state, state.currentSelection)\r\n                draftState.currentPlaylist = state.currentSelection;\r\n            })\r\n        }\r\n\r\n\r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport default playListReducer;\r\n\r\n\r\nfunction findClosesDir(state, path) {\r\n    if (get(state, path) instanceof Array) {\r\n        path.pop();\r\n        return findClosesDir(state, path)\r\n    } else return path;\r\n}\r\n\r\nfunction generateTemplateName(state, path, base) {\r\n    let i = 0;\r\n    while (true) {\r\n        const number = i || \"\";\r\n        let name = base + \" \" + number;\r\n        const notExist = !(get(state, [...path, name]));\r\n        if (notExist) {\r\n            return name;\r\n        } else {\r\n            i++;\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}