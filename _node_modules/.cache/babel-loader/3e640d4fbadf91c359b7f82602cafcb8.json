{"ast":null,"code":"import store from \"./../../../store\";\nexport default class Mixer {\n  constructor(channels) {\n    this.config = store.getState().configuration.mixer;\n    this.channels = channels;\n    this.audioNodes = {\n      channels: {}\n    };\n\n    for (let channelName of this.channels.getChannelNames()) {\n      this.audioNodes.channels = { ...this.audioNodes.channels,\n        [channelName]: {}\n      };\n    }\n  }\n\n  setUpAudioNodes(channelName) {\n    let audioCtx = this.channels.getChannel(channelName).backend.ac;\n    this.audioNodes.channels[channelName] = {\n      gainNode: audioCtx.createGain(),\n      eqHiFilter: audioCtx.createBiquadFilter(),\n      eqMidFilter: audioCtx.createBiquadFilter(),\n      eqLowFilter: audioCtx.createBiquadFilter()\n    }; //\n\n    this.audioNodes.channels[channelName].eqLowFilter.type = \"lowshelf\";\n    this.audioNodes.channels[channelName].eqLowFilter.frequency = config.low.frequency;\n    this.audioNodes.channels[channelName].eqHiFilter.type = \"highshelf\";\n    this.audioNodes.channels[channelName].eqHiFilter.frequency = config.hi.frequency;\n    this.audioNodes.channels[channelName].eqMidFilter.type = \"peaking\";\n    this.audioNodes.channels[channelName].eqMidFilter.frequency = config.mid.frequency;\n  }\n\n  createGain(channelName, audioCtx) {\n    gainNode = audioCtx.createGain(); // this.channels.getChannel(channelName).backend.setFilter(gainNode);\n\n    this.audioNodes.channels[channelName].gainNode = gainNode;\n    gainNode.gain.setValueAtTime(parseFloat(gain), audioCtx.currentTime);\n  }\n\n  setGain(channelName, knobValue) {\n    var _this$audioNodes$chan;\n\n    if (knobValue === 0) return; // idl run\n\n    let gain = 1 + knobValue / 100;\n    let audioCtx = this.channels.getChannel(channelName).backend.ac;\n    let gainNode = (_this$audioNodes$chan = this.audioNodes.channels[channelName]) === null || _this$audioNodes$chan === void 0 ? void 0 : _this$audioNodes$chan.gainNode;\n\n    if (!gainNode) {\n      gainNode = audioCtx.createGain();\n      this.channels.getChannel(channelName).backend.setFilter(gainNode);\n      this.audioNodes.channels[channelName].gainNode = gainNode;\n    }\n\n    gainNode.gain.setValueAtTime(parseFloat(gain), audioCtx.currentTime);\n  }\n\n  setHigh(channelName, knobValue) {\n    var _this$audioNodes$chan2;\n\n    if (knobValue === 0) return; // idl run\n\n    let gain = 1 + knobValue / 100;\n    let audioCtx = this.channels.getChannel(channelName).backend.ac;\n    let eqHiFilter = (_this$audioNodes$chan2 = this.audioNodes.channels[channelName]) === null || _this$audioNodes$chan2 === void 0 ? void 0 : _this$audioNodes$chan2.eqHighFilter;\n\n    if (!eqHiFilter) {\n      eqHiFilter = audioCtx.createBiquadFilter();\n      this.channels.getChannel(channelName).backend.setFilter(eqHiFilter);\n      this.audioNodes.channels[channelName].eqHiFilter = eqHiFilter;\n    }\n\n    gainNode.gain.setValueAtTime(parseFloat(gain), audioCtx.currentTime);\n  }\n\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/core/console/mixer/mixer.js"],"names":["store","Mixer","constructor","channels","config","getState","configuration","mixer","audioNodes","channelName","getChannelNames","setUpAudioNodes","audioCtx","getChannel","backend","ac","gainNode","createGain","eqHiFilter","createBiquadFilter","eqMidFilter","eqLowFilter","type","frequency","low","hi","mid","gain","setValueAtTime","parseFloat","currentTime","setGain","knobValue","setFilter","setHigh","eqHighFilter"],"mappings":"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","sourcesContent":["import store from \"./../../../store\";\r\n\r\n\r\nexport default class Mixer{\r\n    constructor(channels){\r\n        this.config = store.getState().configuration.mixer;\r\n        this.channels = channels;\r\n        this.audioNodes = {\r\n            channels : {\r\n            }\r\n        }\r\n\r\n        for(let channelName of this.channels.getChannelNames()){\r\n            this.audioNodes.channels = { \r\n                ...this.audioNodes.channels,\r\n                [channelName] : {},\r\n            }\r\n        }\r\n    }\r\n\r\n    setUpAudioNodes(channelName){\r\n        let audioCtx = this.channels.getChannel(channelName).backend.ac;\r\n\r\n        this.audioNodes.channels[channelName] = {\r\n            gainNode : audioCtx.createGain(),\r\n            eqHiFilter : audioCtx.createBiquadFilter(),\r\n            eqMidFilter : audioCtx.createBiquadFilter(),\r\n            eqLowFilter : audioCtx.createBiquadFilter(),\r\n        }\r\n\r\n        //\r\n        this.audioNodes.channels[channelName].eqLowFilter.type = \"lowshelf\";\r\n        this.audioNodes.channels[channelName].eqLowFilter.frequency = config.low.frequency;\r\n\r\n        this.audioNodes.channels[channelName].eqHiFilter.type = \"highshelf\";\r\n        this.audioNodes.channels[channelName].eqHiFilter.frequency = config.hi.frequency;\r\n\r\n        this.audioNodes.channels[channelName].eqMidFilter.type = \"peaking\";\r\n        this.audioNodes.channels[channelName].eqMidFilter.frequency = config.mid.frequency;\r\n        \r\n        \r\n    }\r\n\r\n    createGain(channelName, audioCtx){\r\n        gainNode = audioCtx.createGain();\r\n       // this.channels.getChannel(channelName).backend.setFilter(gainNode);\r\n        this.audioNodes.channels[channelName].gainNode = gainNode;\r\n        \r\n        gainNode.gain.setValueAtTime( parseFloat(gain) , audioCtx.currentTime)\r\n    }\r\n\r\n\r\n    setGain(channelName, knobValue){\r\n\r\n        if(knobValue === 0) return; // idl run\r\n        let gain = 1 + knobValue / 100;\r\n\r\n        let audioCtx = this.channels.getChannel(channelName).backend.ac;\r\n        let gainNode = this.audioNodes.channels[channelName]?.gainNode;\r\n\r\n        if(!gainNode){\r\n            gainNode = audioCtx.createGain();\r\n            this.channels.getChannel(channelName).backend.setFilter(gainNode);\r\n            this.audioNodes.channels[channelName].gainNode = gainNode;\r\n        }\r\n        gainNode.gain.setValueAtTime( parseFloat(gain) , audioCtx.currentTime)\r\n    }\r\n\r\n    setHigh(channelName, knobValue){\r\n\r\n        if(knobValue === 0) return; // idl run\r\n        let gain = 1 + knobValue / 100;\r\n\r\n        let audioCtx = this.channels.getChannel(channelName).backend.ac;\r\n        let eqHiFilter = this.audioNodes.channels[channelName]?.eqHighFilter;\r\n\r\n        if(!eqHiFilter){\r\n            eqHiFilter = audioCtx.createBiquadFilter();\r\n            this.channels.getChannel(channelName).backend.setFilter(eqHiFilter);\r\n            this.audioNodes.channels[channelName].eqHiFilter = eqHiFilter;\r\n        }\r\n        gainNode.gain.setValueAtTime( parseFloat(gain) , audioCtx.currentTime)\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}