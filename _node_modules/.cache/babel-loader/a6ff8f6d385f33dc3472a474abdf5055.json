{"ast":null,"code":"import { put, select, takeEvery } from \"redux-saga/effects\";\nimport { ACTIONS, pushLog, setRecData } from \"../../actions\";\nimport { getApi } from \"./../../apis/apiProvider\";\nimport { Log } from \"./../../utils/logger/logger\";\nimport errorParser from \"./../../utils/serverErrorParser/errorParser\";\nexport default function* requestUserRecord() {\n  yield takeEvery(ACTIONS.RECS_REQ_DATA, handel);\n}\n\nconst getToken = state => state.user.token;\n\nfunction* handel(action) {\n  const token = yield select(getToken);\n\n  try {\n    var _response$data;\n\n    const {\n      callQuery,\n      queries\n    } = getApi(\"UserAssets\");\n    const query = queries.recordQl(action.recId);\n    const response = yield callQuery(query, token);\n    const recordData = response === null || response === void 0 ? void 0 : (_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.record;\n\n    if (response.errors) {\n      throw new Error(\"Server response contains errors \" + errorParser(response.errors));\n    }\n\n    if (!recordData) {\n      throw new Error(\"Can't load record data from database, server response don't contain recorcd data\");\n    }\n\n    yield put(setRecData(recordData));\n    yield put(pushLog(new Log(`Record successfully downloaded from database record id : ${action.recId}`)));\n  } catch (error) {\n    yield put(pushLog(Log.Error(['saga', 'record', 'request record'], \"Can't load record from database\", error)));\n  }\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/sagas/records/reqRecord.js"],"names":["put","select","takeEvery","ACTIONS","pushLog","setRecData","getApi","Log","errorParser","requestUserRecord","RECS_REQ_DATA","handel","getToken","state","user","token","action","callQuery","queries","query","recordQl","recId","response","recordData","data","record","errors","Error","error"],"mappings":"AAAA,SAASA,GAAT,EAAcC,MAAd,EAAsBC,SAAtB,QAAuC,oBAAvC;AACA,SAASC,OAAT,EAAkBC,OAAlB,EAA2BC,UAA3B,QAA6C,eAA7C;AACA,SAASC,MAAT,QAAuB,0BAAvB;AACA,SAASC,GAAT,QAAoB,6BAApB;AACA,OAAOC,WAAP,MAAwB,6CAAxB;AAEA,eAAe,UAAUC,iBAAV,GAA8B;AAEzC,QAAMP,SAAS,CAACC,OAAO,CAACO,aAAT,EAAwBC,MAAxB,CAAf;AACH;;AAED,MAAMC,QAAQ,GAAGC,KAAK,IAAIA,KAAK,CAACC,IAAN,CAAWC,KAArC;;AAEA,UAAUJ,MAAV,CAAiBK,MAAjB,EAAyB;AACrB,QAAMD,KAAK,GAAG,MAAMd,MAAM,CAACW,QAAD,CAA1B;;AAEA,MAAI;AAAA;;AACA,UAAM;AAAEK,MAAAA,SAAF;AAAaC,MAAAA;AAAb,QAAyBZ,MAAM,CAAC,YAAD,CAArC;AAEA,UAAMa,KAAK,GAAGD,OAAO,CAACE,QAAR,CAAiBJ,MAAM,CAACK,KAAxB,CAAd;AACA,UAAMC,QAAQ,GAAG,MAAML,SAAS,CAACE,KAAD,EAAQJ,KAAR,CAAhC;AACA,UAAMQ,UAAU,GAAGD,QAAH,aAAGA,QAAH,yCAAGA,QAAQ,CAAEE,IAAb,mDAAG,eAAgBC,MAAnC;;AAEA,QAAIH,QAAQ,CAACI,MAAb,EAAqB;AACjB,YAAM,IAAIC,KAAJ,CAAU,qCAAqCnB,WAAW,CAACc,QAAQ,CAACI,MAAV,CAA1D,CAAN;AACH;;AACD,QAAI,CAACH,UAAL,EAAgB;AACZ,YAAM,IAAII,KAAJ,CAAU,kFAAV,CAAN;AACH;;AAED,UAAM3B,GAAG,CAACK,UAAU,CAACkB,UAAD,CAAX,CAAT;AAEA,UAAMvB,GAAG,CAACI,OAAO,CAAC,IAAIG,GAAJ,CAAS,4DAA2DS,MAAM,CAACK,KAAM,EAAjF,CAAD,CAAR,CAAT;AACH,GAjBD,CAiBE,OAAOO,KAAP,EAAc;AACZ,UAAM5B,GAAG,CAACI,OAAO,CAACG,GAAG,CAACoB,KAAJ,CACd,CAAC,MAAD,EAAS,QAAT,EAAmB,gBAAnB,CADc,EAEd,iCAFc,EAGdC,KAHc,CAAD,CAAR,CAAT;AAKH;AACJ","sourcesContent":["import { put, select, takeEvery } from \"redux-saga/effects\";\r\nimport { ACTIONS, pushLog, setRecData } from \"../../actions\";\r\nimport { getApi } from \"./../../apis/apiProvider\";\r\nimport { Log } from \"./../../utils/logger/logger\";\r\nimport errorParser from \"./../../utils/serverErrorParser/errorParser\";\r\n\r\nexport default function* requestUserRecord() {\r\n\r\n    yield takeEvery(ACTIONS.RECS_REQ_DATA, handel)\r\n}\r\n\r\nconst getToken = state => state.user.token\r\n\r\nfunction* handel(action) {\r\n    const token = yield select(getToken);\r\n\r\n    try {\r\n        const { callQuery, queries } = getApi(\"UserAssets\");\r\n\r\n        const query = queries.recordQl(action.recId);\r\n        const response = yield callQuery(query, token);\r\n        const recordData = response?.data?.record;\r\n        \r\n        if (response.errors) {\r\n            throw new Error(\"Server response contains errors \" + errorParser(response.errors));\r\n        }\r\n        if (!recordData){\r\n            throw new Error(\"Can't load record data from database, server response don't contain recorcd data\")\r\n        }\r\n\r\n        yield put(setRecData(recordData))\r\n\r\n        yield put(pushLog(new Log(`Record successfully downloaded from database record id : ${action.recId}`)))\r\n    } catch (error) {\r\n        yield put(pushLog(Log.Error(\r\n            ['saga', 'record', 'request record'],\r\n            \"Can't load record from database\",\r\n            error\r\n        )))\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}