{"ast":null,"code":"import store from \"./../../../store\";\nexport default class Mixer {\n  constructor(channels) {\n    this.config = store.getState().configuration.mixer;\n    this.channels = channels;\n    this.audioNodes = {\n      channels: {}\n    };\n\n    for (let channelName of this.channels.getChannelNames()) {\n      this.audioNodes.channels = { ...this.audioNodes.channels,\n        [channelName]: {}\n      };\n    }\n  }\n\n  setUpAudioNodes(channelName) {\n    let audioCtx = this.channels.getChannel(channelName).backend.ac;\n    this.audioNodes.channels[channelName] = {\n      gainNode: audioCtx.createGain(),\n      eqHiFilterNode: audioCtx.createBiquadFilter(),\n      eqMidFilterNode: audioCtx.createBiquadFilter(),\n      eqLowFilterNode: audioCtx.createBiquadFilter()\n    }; //\n\n    this.audioNodes.channels[channelName].eqLowFilterNode.type = \"lowshelf\";\n    this.audioNodes.channels[channelName].eqLowFilterNode.frequency.value = this.config.low.frequency;\n    this.audioNodes.channels[channelName].eqHiFilterNode.type = \"highshelf\";\n    this.audioNodes.channels[channelName].eqHiFilterNode.frequency.value = this.config.hi.frequency;\n    this.audioNodes.channels[channelName].eqMidFilterNode.type = \"peaking\";\n    this.audioNodes.channels[channelName].eqMidFilterNode.frequency.value = this.config.mid.frequency;\n    this.audioNodes.channels[channelName].eqMidFilterNode.Q.value = this.config.mid.Q;\n    const waveSurferObj = this.channels.getChannel(channelName);\n    waveSurferObj.backend.setFilter(this.audioNodes.channels[channelName].gainNode);\n    /*for(let node of Object.values(this.audioNodes.channels[channelName])){\r\n        console.log('setup node', node)\r\n        waveSurferObj.backend.setFilter(node);\r\n    }*/\n  }\n\n  setValue(channelName, knobValue, nodeName) {\n    //console.log(channelName, knobValue, nodeName)\n    let gain = 1 + knobValue / 100;\n    let audioCtx = this.channels.getChannel(channelName).backend.ac;\n    let channel = this.audioNodes.channels[channelName];\n    console.log(channel[nodeName].gain);\n    channel[nodeName].gain.setValueAtTime(parseFloat(gain), audioCtx.currentTime);\n  }\n\n  setGain(channelName, knobValue) {\n    this.setValue(channelName, knobValue, 'gainNode');\n  }\n\n  setEqHigh(channelName, knobValue) {\n    this.setValue(channelName, knobValue, 'eqHiFilterNode');\n  }\n\n  setEqMid(channelName, knobValue) {\n    this.setValue(channelName, knobValue, 'eqMidFilterNode');\n  }\n\n  setEqLow(channelName, knobValue) {\n    this.setValue(channelName, knobValue, 'eqLowFilterNode');\n  }\n\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/core/console/mixer/mixer.js"],"names":["store","Mixer","constructor","channels","config","getState","configuration","mixer","audioNodes","channelName","getChannelNames","setUpAudioNodes","audioCtx","getChannel","backend","ac","gainNode","createGain","eqHiFilterNode","createBiquadFilter","eqMidFilterNode","eqLowFilterNode","type","frequency","value","low","hi","mid","Q","waveSurferObj","setFilter","setValue","knobValue","nodeName","gain","channel","console","log","setValueAtTime","parseFloat","currentTime","setGain","setEqHigh","setEqMid","setEqLow"],"mappings":"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","sourcesContent":["import store from \"./../../../store\";\r\n\r\n\r\nexport default class Mixer{\r\n    constructor(channels){\r\n        this.config = store.getState().configuration.mixer;\r\n        this.channels = channels;\r\n        this.audioNodes = {\r\n            channels : {\r\n            }\r\n        }\r\n\r\n        for(let channelName of this.channels.getChannelNames()){\r\n            this.audioNodes.channels = { \r\n                ...this.audioNodes.channels,\r\n                [channelName] : {},\r\n            }\r\n        }\r\n    }\r\n\r\n    setUpAudioNodes(channelName){\r\n        let audioCtx = this.channels.getChannel(channelName).backend.ac;\r\n\r\n        this.audioNodes.channels[channelName] = {\r\n            gainNode : audioCtx.createGain(),\r\n            eqHiFilterNode : audioCtx.createBiquadFilter(),\r\n            eqMidFilterNode : audioCtx.createBiquadFilter(),\r\n            eqLowFilterNode : audioCtx.createBiquadFilter(),\r\n        }\r\n\r\n        //\r\n        this.audioNodes.channels[channelName].eqLowFilterNode.type = \"lowshelf\";\r\n        this.audioNodes.channels[channelName].eqLowFilterNode.frequency.value = this.config.low.frequency;\r\n\r\n        this.audioNodes.channels[channelName].eqHiFilterNode.type = \"highshelf\";\r\n        this.audioNodes.channels[channelName].eqHiFilterNode.frequency.value = this.config.hi.frequency;\r\n\r\n        this.audioNodes.channels[channelName].eqMidFilterNode.type = \"peaking\";\r\n        this.audioNodes.channels[channelName].eqMidFilterNode.frequency.value = this.config.mid.frequency;\r\n        this.audioNodes.channels[channelName].eqMidFilterNode.Q.value = this.config.mid.Q;        \r\n\r\n        const waveSurferObj = this.channels.getChannel(channelName);\r\n        waveSurferObj.backend.setFilter(this.audioNodes.channels[channelName].gainNode)\r\n        /*for(let node of Object.values(this.audioNodes.channels[channelName])){\r\n            console.log('setup node', node)\r\n            waveSurferObj.backend.setFilter(node);\r\n        }*/\r\n        \r\n    }\r\n\r\n    setValue(channelName, knobValue, nodeName){\r\n        //console.log(channelName, knobValue, nodeName)\r\n        let gain = 1 + knobValue / 100;\r\n\r\n        let audioCtx = this.channels.getChannel(channelName).backend.ac;\r\n\r\n        let channel = this.audioNodes.channels[channelName];\r\n        console.log(channel[nodeName].gain);\r\n        channel[nodeName].gain.setValueAtTime( parseFloat(gain) , audioCtx.currentTime);\r\n    }\r\n\r\n    setGain(channelName, knobValue){\r\n        this.setValue(channelName, knobValue, 'gainNode');\r\n    }\r\n\r\n    setEqHigh(channelName, knobValue){\r\n        this.setValue(channelName, knobValue, 'eqHiFilterNode');\r\n    }\r\n\r\n    setEqMid(channelName, knobValue){\r\n        this.setValue(channelName, knobValue, 'eqMidFilterNode');\r\n    }\r\n\r\n    setEqLow(channelName, knobValue){\r\n        this.setValue(channelName, knobValue, 'eqLowFilterNode');\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}