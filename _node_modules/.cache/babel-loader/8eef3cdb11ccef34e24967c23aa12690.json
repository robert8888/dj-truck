{"ast":null,"code":"import _regeneratorRuntime from\"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\node_modules\\\\@babel\\\\runtime/regenerator\";var _marked=/*#__PURE__*/_regeneratorRuntime.mark(requestDeleteRecord),_marked2=/*#__PURE__*/_regeneratorRuntime.mark(handel);import{put,select,takeEvery}from\"redux-saga/effects\";import{ACTIONS,pushLog,setRecDeleteStatus}from\"../../actions\";import{getApi}from\"./../../apis/apiProvider\";import{Log}from\"./../../utils/logger/logger\";import errorParser from\"./../../utils/serverErrorParser/errorParser\";export default function requestDeleteRecord(){return _regeneratorRuntime.wrap(function requestDeleteRecord$(_context){while(1){switch(_context.prev=_context.next){case 0:console.log(\"handle request\");_context.next=3;return takeEvery(ACTIONS.RECS_REQ_DELETE,handel);case 3:case\"end\":return _context.stop();}}},_marked);}var getToken=function getToken(state){return state.user.token;};function handel(action){var token,_response$data,_getApi,callQuery,queries,_getApi2,deleteRecordFromStore,query,response,success,status;return _regeneratorRuntime.wrap(function handel$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return select(getToken);case 2:token=_context2.sent;_context2.prev=3;_getApi=getApi(\"UserAssets\"),callQuery=_getApi.callQuery,queries=_getApi.queries;_getApi2=getApi('RecordsStore'),deleteRecordFromStore=_getApi2.deleteRecord;query=queries.deleteRecordQl(action.recordId);_context2.next=9;return callQuery(query,token);case 9:response=_context2.sent;if(!response.errors){_context2.next=12;break;}throw new Error(\"Server response contains errors \"+errorParser(response.errors));case 12:success=response===null||response===void 0?void 0:(_response$data=response.data)===null||_response$data===void 0?void 0:_response$data.deleteRecord;if(!success){_context2.next=18;break;}_context2.next=16;return deleteRecordFromStore(action.recordId);case 16:status=_context2.sent;success=status==='success';case 18:if(success){_context2.next=20;break;}throw new Error(\"Can't delete reacords from record store database\");case 20:_context2.next=22;return put(setRecDeleteStatus(\"SUCCESS\"));case 22:_context2.next=24;return put(pushLog(new Log(\"Record successfully deleted in database, record id: \".concat(action.recordId))));case 24:_context2.next=32;break;case 26:_context2.prev=26;_context2.t0=_context2[\"catch\"](3);_context2.next=30;return put(setRecDeleteStatus(\"FAIL\"));case 30:_context2.next=32;return pushLog(Log.Error(['saga','record','request download record'],\"Can't delete record in database\",\"Sorry. During process of deleteing record from database occurred a problem\",_context2.t0));case 32:case\"end\":return _context2.stop();}}},_marked2,null,[[3,26]]);}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/sagas/records/reqDeleteRecord.js"],"names":["requestDeleteRecord","handel","put","select","takeEvery","ACTIONS","pushLog","setRecDeleteStatus","getApi","Log","errorParser","console","log","RECS_REQ_DELETE","getToken","state","user","token","action","callQuery","queries","deleteRecordFromStore","deleteRecord","query","deleteRecordQl","recordId","response","errors","Error","success","data","status"],"mappings":"2JAOyBA,mB,iDAOfC,M,EAdV,OAASC,GAAT,CAAcC,MAAd,CAAsBC,SAAtB,KAAuC,oBAAvC,CACA,OAASC,OAAT,CAAkBC,OAAlB,CAA2BC,kBAA3B,KAAqD,eAArD,CACA,OAASC,MAAT,KAAuB,0BAAvB,CACA,OAASC,GAAT,KAAoB,6BAApB,CACA,MAAOC,CAAAA,WAAP,KAAwB,6CAAxB,CAGA,cAAe,SAAUV,CAAAA,mBAAV,+HACXW,OAAO,CAACC,GAAR,CAAY,gBAAZ,EADW,gBAEX,MAAMR,CAAAA,SAAS,CAACC,OAAO,CAACQ,eAAT,CAA0BZ,MAA1B,CAAf,CAFW,sDAKf,GAAMa,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAAAC,KAAK,QAAIA,CAAAA,KAAK,CAACC,IAAN,CAAWC,KAAf,EAAtB,CAEA,QAAUhB,CAAAA,MAAV,CAAiBiB,MAAjB,qPACkB,MAAMf,CAAAA,MAAM,CAACW,QAAD,CAAZ,CADlB,OACUG,KADV,yCAIuCT,MAAM,CAAC,YAAD,CAJ7C,CAIgBW,SAJhB,SAIgBA,SAJhB,CAI2BC,OAJ3B,SAI2BA,OAJ3B,UAKwDZ,MAAM,CAAC,cAAD,CAL9D,CAK8Ba,qBAL9B,UAKgBC,YALhB,CAOcC,KAPd,CAOsBH,OAAO,CAACI,cAAR,CAAuBN,MAAM,CAACO,QAA9B,CAPtB,kBAQyB,MAAMN,CAAAA,SAAS,CAACI,KAAD,CAAQN,KAAR,CAAf,CARzB,OAQcS,QARd,oBAUYA,QAAQ,CAACC,MAVrB,gCAWkB,IAAIC,CAAAA,KAAJ,CAAU,mCAAqClB,WAAW,CAACgB,QAAQ,CAACC,MAAV,CAA1D,CAXlB,SAcYE,OAdZ,CAcsBH,QAdtB,SAcsBA,QAdtB,iCAcsBA,QAAQ,CAAEI,IAdhC,yCAcsB,eAAgBR,YAdtC,KAeYO,OAfZ,6CAgB2B,MAAMR,CAAAA,qBAAqB,CAACH,MAAM,CAACO,QAAR,CAA3B,CAhB3B,QAgBkBM,MAhBlB,gBAiBYF,OAAO,CAAIE,MAAM,GAAK,SAAtB,CAjBZ,WAqBaF,OArBb,gCAsBkB,IAAID,CAAAA,KAAJ,CAAU,kDAAV,CAtBlB,2BAyBQ,MAAM1B,CAAAA,GAAG,CAACK,kBAAkB,CAAC,SAAD,CAAnB,CAAT,CAzBR,0BA2BQ,MAAML,CAAAA,GAAG,CAACI,OAAO,CAAC,GAAIG,CAAAA,GAAJ,+DAA+DS,MAAM,CAACO,QAAtE,EAAD,CAAR,CAAT,CA3BR,+GA6BQ,MAAMvB,CAAAA,GAAG,CAACK,kBAAkB,CAAC,MAAD,CAAnB,CAAT,CA7BR,0BA8BQ,MAAMD,CAAAA,OAAO,CAACG,GAAG,CAACmB,KAAJ,CACV,CAAC,MAAD,CAAS,QAAT,CAAmB,yBAAnB,CADU,CAEV,iCAFU,CAGV,4EAHU,cAAD,CAAb,CA9BR","sourcesContent":["import { put, select, takeEvery } from \"redux-saga/effects\";\r\nimport { ACTIONS, pushLog, setRecDeleteStatus } from \"../../actions\";\r\nimport { getApi } from \"./../../apis/apiProvider\";\r\nimport { Log } from \"./../../utils/logger/logger\";\r\nimport errorParser from \"./../../utils/serverErrorParser/errorParser\";\r\n\r\n\r\nexport default function* requestDeleteRecord() {\r\n    console.log(\"handle request\")\r\n    yield takeEvery(ACTIONS.RECS_REQ_DELETE, handel)\r\n}\r\n\r\nconst getToken = state => state.user.token\r\n\r\nfunction* handel(action) {\r\n    const token = yield select(getToken);\r\n\r\n    try {\r\n        const { callQuery, queries } = getApi(\"UserAssets\");\r\n        const { deleteRecord: deleteRecordFromStore } = getApi('RecordsStore')\r\n\r\n        const query = queries.deleteRecordQl(action.recordId);\r\n        const response = yield callQuery(query, token);\r\n\r\n        if (response.errors) {\r\n            throw new Error(\"Server response contains errors \" + errorParser(response.errors));\r\n        }\r\n\r\n        let success = response?.data?.deleteRecord;\r\n        if (success) {\r\n            const status = yield deleteRecordFromStore(action.recordId);\r\n            success = (status === 'success')\r\n        }\r\n\r\n\r\n        if (!success) {\r\n            throw new Error(\"Can't delete reacords from record store database\")\r\n        } \r\n\r\n        yield put(setRecDeleteStatus(\"SUCCESS\"))\r\n\r\n        yield put(pushLog(new Log(`Record successfully deleted in database, record id: ${action.recordId}`)))\r\n    } catch (error) {\r\n        yield put(setRecDeleteStatus(\"FAIL\"))\r\n        yield pushLog(Log.Error(\r\n            ['saga', 'record', 'request download record'],\r\n            \"Can't delete record in database\",\r\n            \"Sorry. During process of deleteing record from database occurred a problem\",\r\n            error\r\n        ))\r\n    }\r\n\r\n\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}