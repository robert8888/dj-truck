{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : factory(global.imer = {});\n})(this, function (exports) {\n  'use strict';\n\n  function _typeof(obj) {\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n      _typeof = function (obj) {\n        return typeof obj;\n      };\n    } else {\n      _typeof = function (obj) {\n        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n      };\n    }\n\n    return _typeof(obj);\n  } // produce(currentState, producer: (draftState) => void): nextState\n\n\n  var INTERNAL_STATE_KEY = Symbol('state');\n\n  function proxyProp(propValue, propKey, hostDraftState) {\n    var originalValue = hostDraftState.originalValue,\n        draftValue = hostDraftState.draftValue,\n        onWrite = hostDraftState.onWrite;\n    return proxy(propValue, function (value) {\n      if (!draftValue.mutated) {\n        hostDraftState.mutated = true; // 拷贝host所有属性\n\n        copyProps(draftValue, originalValue);\n      }\n\n      draftValue[propKey] = value;\n\n      if (onWrite) {\n        onWrite(draftValue);\n      }\n    });\n  } // 跳过target身上已有的属性\n\n\n  function copyProps(target, source) {\n    if (Array.isArray(target)) {\n      for (var i = 0; i < source.length; i++) {\n        // 跳过在更深层已经被改过的属性\n        if (!(i in target)) {\n          target[i] = source[i];\n        }\n      }\n    } else {\n      Reflect.ownKeys(source).forEach(function (key) {\n        var desc = Object.getOwnPropertyDescriptor(source, key); // 跳过已有属性\n\n        if (!(key in target)) {\n          Object.defineProperty(target, key, desc);\n        }\n      });\n    }\n  }\n\n  function copyOnWrite(draftState) {\n    var originalValue = draftState.originalValue,\n        draftValue = draftState.draftValue,\n        mutated = draftState.mutated,\n        onWrite = draftState.onWrite;\n\n    if (!mutated) {\n      draftState.mutated = true; // 下一层有修改时才往父级 draftValue 上挂\n\n      if (onWrite) {\n        onWrite(draftValue);\n      } // 第一次写时复制\n\n\n      copyProps(draftValue, originalValue);\n    }\n  }\n\n  function getTarget(draftState) {\n    return draftState.mutated ? draftState.draftValue : draftState.originalValue;\n  }\n\n  function getCleanCopy(obj) {\n    return Object.create(Object.getPrototypeOf(obj));\n  }\n\n  function proxy(original, onWrite) {\n    var isArrayValue = Array.isArray(original); // 创建一份干净的draft值\n\n    var draftValue = isArrayValue ? [] : getCleanCopy(original);\n    var proxiedKeyMap = Object.create(null);\n    var draftState = {\n      originalValue: original,\n      draftValue: draftValue,\n      mutated: false,\n      onWrite: onWrite\n    };\n    var draft = new Proxy(original, {\n      get: function get(target, key, receiver) {\n        // 建立proxy到draft值的关联\n        if (key === INTERNAL_STATE_KEY) {\n          return draftState;\n        } // 优先走已创建的代理\n\n\n        if (key in proxiedKeyMap) {\n          return proxiedKeyMap[key];\n        } // 代理属性访问\n\n\n        if (_typeof(original[key]) === 'object' && original[key] !== null) {\n          // 不为基本值类型的现有属性，创建下一层代理\n          proxiedKeyMap[key] = proxyProp(original[key], key, draftState, onWrite);\n          return proxiedKeyMap[key];\n        } else {\n          // 改过直接从draft取最新状态\n          if (draftState.mutated) {\n            return draftValue[key];\n          } // 不存在的，或者值为基本值的现有属性，代理到原值\n\n\n          return Reflect.get(target, key, receiver);\n        }\n      },\n      set: function set(target, key, value) {\n        // 监听修改，用新值重写原值\n        // 如果新值不为基本值类型，创建下一层代理\n        if (_typeof(value) === 'object') {\n          proxiedKeyMap[key] = proxyProp(value, key, draftState, onWrite);\n        } // 第一次写时复制\n\n\n        copyOnWrite(draftState); // 复制过了，直接写\n\n        draftValue[key] = value;\n        return true;\n      },\n      // 代理其它读方法\n      has: function has(_) {\n        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n\n        return Reflect.has.apply(Reflect, [getTarget(draftState)].concat(args));\n      },\n      ownKeys: function ownKeys(_) {\n        for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n          args[_key2 - 1] = arguments[_key2];\n        }\n\n        return Reflect.ownKeys.apply(Reflect, [getTarget(draftState)].concat(args));\n      },\n      getOwnPropertyDescriptor: function getOwnPropertyDescriptor(_) {\n        for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n          args[_key3 - 1] = arguments[_key3];\n        }\n\n        return Reflect.getOwnPropertyDescriptor.apply(Reflect, [getTarget(draftState)].concat(args));\n      },\n      getPrototypeOf: function getPrototypeOf(_) {\n        for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n          args[_key4 - 1] = arguments[_key4];\n        }\n\n        return Reflect.getPrototypeOf.apply(Reflect, [original].concat(args));\n      },\n      // 代理其它写方法\n      deleteProperty: function deleteProperty(_) {\n        copyOnWrite(draftState);\n\n        for (var _len5 = arguments.length, args = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n          args[_key5 - 1] = arguments[_key5];\n        }\n\n        return Reflect.deleteProperty.apply(Reflect, [draftValue].concat(args));\n      },\n      defineProperty: function defineProperty(_) {\n        copyOnWrite(draftState);\n\n        for (var _len6 = arguments.length, args = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {\n          args[_key6 - 1] = arguments[_key6];\n        }\n\n        return Reflect.defineProperty.apply(Reflect, [draftValue].concat(args));\n      },\n      setPrototypeOf: function setPrototypeOf(_) {\n        copyOnWrite(draftState);\n\n        for (var _len7 = arguments.length, args = new Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++) {\n          args[_key7 - 1] = arguments[_key7];\n        }\n\n        return Reflect.setPrototypeOf.apply(Reflect, [draftValue].concat(args));\n      }\n    });\n    return draft;\n  }\n\n  function produce(original, producer) {\n    var draft = proxy(original); // 修改draft\n\n    producer(draft); // 取出draft内部状态\n\n    var _draft$INTERNAL_STATE = draft[INTERNAL_STATE_KEY],\n        originalValue = _draft$INTERNAL_STATE.originalValue,\n        draftValue = _draft$INTERNAL_STATE.draftValue,\n        mutated = _draft$INTERNAL_STATE.mutated; // console.log('-- draftState --');\n    // console.log(draft[INTERNAL_STATE_KEY]);\n    // 将改过的新值patch上去\n\n    var next = mutated ? draftValue : originalValue;\n    return next;\n  }\n\n  exports.produce = produce;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});","map":{"version":3,"sources":["../../src/produce.js"],"names":["INTERNAL_STATE_KEY","Symbol","originalValue","draftValue","onWrite","hostDraftState","proxy","copyProps","Array","i","source","target","Reflect","desc","Object","key","mutated","draftState","isArrayValue","getCleanCopy","proxiedKeyMap","draft","get","original","proxyProp","set","copyOnWrite","has","args","getTarget","ownKeys","getOwnPropertyDescriptor","getPrototypeOf","deleteProperty","defineProperty","setPrototypeOf","producer","next"],"mappings":"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","sourcesContent":["// produce(currentState, producer: (draftState) => void): nextState\nconst INTERNAL_STATE_KEY = Symbol('state');\n\nfunction proxyProp(propValue, propKey, hostDraftState) {\n  const { originalValue, draftValue, onWrite } = hostDraftState;\n  return proxy(propValue, (value) => {\n    if (!draftValue.mutated) {\n      hostDraftState.mutated = true;\n      // 拷贝host所有属性\n      copyProps(draftValue, originalValue);\n    }\n    draftValue[propKey] = value;\n    if (onWrite) {\n      onWrite(draftValue);\n    }\n  });\n}\n\n// 跳过target身上已有的属性\nfunction copyProps(target, source) {\n  if (Array.isArray(target)) {\n    for (let i = 0; i < source.length; i++) {\n      // 跳过在更深层已经被改过的属性\n      if (!(i in target)) {\n        target[i] = source[i];\n      }\n    }\n  }\n  else {\n    Reflect.ownKeys(source).forEach(key => {\n      const desc = Object.getOwnPropertyDescriptor(source, key);\n      // 跳过已有属性\n      if (!(key in target)) {\n        Object.defineProperty(target, key, desc);\n      }\n    });\n  }\n}\n\nfunction copyOnWrite(draftState) {\n  const { originalValue, draftValue, mutated, onWrite } = draftState;\n  if (!mutated) {\n    draftState.mutated = true;\n    // 下一层有修改时才往父级 draftValue 上挂\n    if (onWrite) {\n      onWrite(draftValue);\n    }\n    // 第一次写时复制\n    copyProps(draftValue, originalValue);\n  }\n}\n\nfunction getTarget(draftState) {\n  return draftState.mutated ? draftState.draftValue : draftState.originalValue;\n}\n\nfunction getCleanCopy(obj) {\n  return Object.create(Object.getPrototypeOf(obj));\n}\n\nfunction proxy(original, onWrite) {\n  const isArrayValue = Array.isArray(original);\n  // 创建一份干净的draft值\n  const draftValue = isArrayValue ? [] : getCleanCopy(original);\n  let proxiedKeyMap = Object.create(null);\n  let draftState = {\n    originalValue: original,\n    draftValue,\n    mutated: false,\n    onWrite\n  };\n  const draft = new Proxy(original, {\n    get(target, key, receiver) {\n      // 建立proxy到draft值的关联\n      if (key === INTERNAL_STATE_KEY) {\n        return draftState;\n      }\n      // 优先走已创建的代理\n      if (key in proxiedKeyMap) {\n        return proxiedKeyMap[key];\n      }\n\n      // 代理属性访问\n      if (typeof original[key] === 'object' && original[key] !== null) {\n        // 不为基本值类型的现有属性，创建下一层代理\n        proxiedKeyMap[key] = proxyProp(original[key], key, draftState, onWrite);\n        return proxiedKeyMap[key];\n      }\n      else {\n        // 改过直接从draft取最新状态\n        if (draftState.mutated) {\n          return draftValue[key];\n        }\n\n        // 不存在的，或者值为基本值的现有属性，代理到原值\n        return Reflect.get(target, key, receiver);\n      }\n    },\n    set(target, key, value) {\n      // 监听修改，用新值重写原值\n      // 如果新值不为基本值类型，创建下一层代理\n      if (typeof value === 'object') {\n        proxiedKeyMap[key] = proxyProp(value, key, draftState, onWrite);\n      }\n      // 第一次写时复制\n      copyOnWrite(draftState);\n      // 复制过了，直接写\n      draftValue[key] = value;\n      return true;\n    },\n    // 代理其它读方法\n    has(_, ...args) {\n      return Reflect.has(getTarget(draftState), ...args);\n    },\n    ownKeys(_, ...args) {\n      return Reflect.ownKeys(getTarget(draftState), ...args);\n    },\n    getOwnPropertyDescriptor(_, ...args) {\n      return Reflect.getOwnPropertyDescriptor(getTarget(draftState), ...args);\n    },\n    getPrototypeOf(_, ...args) {\n      return Reflect.getPrototypeOf(original, ...args);\n    },\n    // 代理其它写方法\n    deleteProperty(_, ...args) {\n      copyOnWrite(draftState);\n      return Reflect.deleteProperty(draftValue, ...args);\n    },\n    defineProperty(_, ...args) {\n      copyOnWrite(draftState);\n      return Reflect.defineProperty(draftValue, ...args);\n    },\n    setPrototypeOf(_, ...args) {\n      copyOnWrite(draftState);\n      return Reflect.setPrototypeOf(draftValue, ...args);\n    }\n  });\n\n  return draft;\n}\n\nexport default function produce(original, producer) {\n  const draft = proxy(original);\n  // 修改draft\n  producer(draft);\n  // 取出draft内部状态\n  const { originalValue, draftValue, mutated } = draft[INTERNAL_STATE_KEY];\n  // console.log('-- draftState --');\n  // console.log(draft[INTERNAL_STATE_KEY]);\n  // 将改过的新值patch上去\n  const next = mutated ? draftValue : originalValue;\n  return next;\n}\n"]},"metadata":{},"sourceType":"script"}