{"ast":null,"code":"import React, { useMemo, useCallback } from \"react\";\nimport { toDate, formatRelative as DateFormatRelative } from \"date-fns\";\nimport * as locales from 'date-fns/locale';\nexport function useFormatRelative() {\n  // const dateFormated = useMemo(() => {\n  //     const timeZoneOffset = new Date().getTimezoneOffset();\n  //     function getLang() {\n  //         if (navigator.languages != undefined)\n  //             return navigator.languages[0];\n  //         else\n  //             return navigator.language;\n  //     }\n  //     return formatRelative(\n  //         toDate(timestamp - (timeZoneOffset * 1000)),\n  //         new Date(),\n  //         // {\n  //         //     locale: locales[getLang().substr(0,2)]\n  //         // }\n  //     )\n  // }, [timestamp])\n  const timezoneOffset = useMemo(() => {\n    return new Date().getTimezoneOffset() * 1000;\n  }, []);\n  const getLocal = useCallback(() => {\n    let lang = \"\";\n\n    if (navigator.languages != undefined) {\n      lang = navigator.languages[0];\n    } else {\n      lang = navigator.language;\n    }\n\n    lang = lang.substr(0, 2);\n    return locales[lang];\n  });\n  const formatRelative = useCallback((timestamp, {\n    timezone,\n    local\n  } = {}) => {\n    const time = timezone ? timestamp - timezoneOffset : timestamp;\n    const opt = local ? {\n      locale: getLocal()\n    } : {};\n    const now = new Date();\n    let formated = \"\";\n\n    try {\n      formated = DateFormatRelative(toDate(time), now, opt);\n    } catch (err) {\n      console.log(\"Can't format time in relative way\");\n    }\n\n    return formated;\n  }, [timezoneOffset, getLocal]);\n  return [formatRelative];\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/pages/common/Hooks/useFormatDate.js"],"names":["React","useMemo","useCallback","toDate","formatRelative","DateFormatRelative","locales","useFormatRelative","timezoneOffset","Date","getTimezoneOffset","getLocal","lang","navigator","languages","undefined","language","substr","timestamp","timezone","local","time","opt","locale","now","formated","err","console","log"],"mappings":"AAAA,OAAOA,KAAP,IAAeC,OAAf,EAAwBC,WAAxB,QAA0C,OAA1C;AACA,SAASC,MAAT,EAAiBC,cAAc,IAAIC,kBAAnC,QAA6D,UAA7D;AACA,OAAO,KAAKC,OAAZ,MAAyB,iBAAzB;AAEA,OAAO,SAASC,iBAAT,GAA6B;AAEhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,QAAMC,cAAc,GAAGP,OAAO,CAAC,MAAM;AACjC,WAAO,IAAIQ,IAAJ,GAAWC,iBAAX,KAAiC,IAAxC;AACH,GAF6B,EAE3B,EAF2B,CAA9B;AAIA,QAAMC,QAAQ,GAAGT,WAAW,CAAC,MAAM;AAC/B,QAAIU,IAAI,GAAG,EAAX;;AAEA,QAAIC,SAAS,CAACC,SAAV,IAAuBC,SAA3B,EAAqC;AACjCH,MAAAA,IAAI,GAAIC,SAAS,CAACC,SAAV,CAAoB,CAApB,CAAR;AACH,KAFD,MAGI;AACAF,MAAAA,IAAI,GAAIC,SAAS,CAACG,QAAlB;AACH;;AAEDJ,IAAAA,IAAI,GAAGA,IAAI,CAACK,MAAL,CAAY,CAAZ,EAAc,CAAd,CAAP;AACA,WAAOX,OAAO,CAACM,IAAD,CAAd;AACH,GAZ2B,CAA5B;AAcA,QAAMR,cAAc,GAAGF,WAAW,CAAC,CAACgB,SAAD,EAAY;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAAsB,EAAlC,KAAyC;AACxE,UAAMC,IAAI,GAAGF,QAAQ,GAAGD,SAAS,GAAGV,cAAf,GAAgCU,SAArD;AACA,UAAMI,GAAG,GAAGF,KAAK,GAAG;AAACG,MAAAA,MAAM,EAAEZ,QAAQ;AAAjB,KAAH,GAA0B,EAA3C;AACA,UAAMa,GAAG,GAAG,IAAIf,IAAJ,EAAZ;AACA,QAAIgB,QAAQ,GAAG,EAAf;;AACA,QAAG;AACCA,MAAAA,QAAQ,GAAGpB,kBAAkB,CAACF,MAAM,CAACkB,IAAD,CAAP,EAAeG,GAAf,EAAqBF,GAArB,CAA7B;AACH,KAFD,CAEE,OAAMI,GAAN,EAAU;AACRC,MAAAA,OAAO,CAACC,GAAR,CAAY,mCAAZ;AACH;;AACD,WAAOH,QAAP;AACH,GAXiC,EAWhC,CAACjB,cAAD,EAAiBG,QAAjB,CAXgC,CAAlC;AAaA,SAAO,CAACP,cAAD,CAAP;AACH","sourcesContent":["import React, {useMemo, useCallback} from \"react\"\r\nimport { toDate, formatRelative as DateFormatRelative } from \"date-fns\";\r\nimport * as locales from 'date-fns/locale';\r\n\r\nexport function useFormatRelative() {\r\n\r\n    // const dateFormated = useMemo(() => {\r\n    //     const timeZoneOffset = new Date().getTimezoneOffset();\r\n    //     function getLang() {\r\n    //         if (navigator.languages != undefined)\r\n    //             return navigator.languages[0];\r\n    //         else\r\n    //             return navigator.language;\r\n    //     }\r\n    //     return formatRelative(\r\n    //         toDate(timestamp - (timeZoneOffset * 1000)),\r\n    //         new Date(),\r\n    //         // {\r\n    //         //     locale: locales[getLang().substr(0,2)]\r\n    //         // }\r\n    //     )\r\n    // }, [timestamp])\r\n\r\n    const timezoneOffset = useMemo(() => {\r\n        return new Date().getTimezoneOffset() * 1000;\r\n    }, [])\r\n\r\n    const getLocal = useCallback(() => {\r\n        let lang = \"\";\r\n\r\n        if (navigator.languages != undefined){\r\n            lang =  navigator.languages[0];\r\n        }\r\n        else{\r\n            lang =  navigator.language;\r\n        }\r\n        \r\n        lang = lang.substr(0,2);\r\n        return locales[lang];\r\n    })\r\n\r\n    const formatRelative = useCallback((timestamp, { timezone, local } = {}) => {\r\n        const time = timezone ? timestamp - timezoneOffset : timestamp;\r\n        const opt = local ? {locale: getLocal()} : {};\r\n        const now = new Date();\r\n        let formated = \"\";\r\n        try{\r\n            formated = DateFormatRelative(toDate(time), now , opt);\r\n        } catch(err){\r\n            console.log(\"Can't format time in relative way\")\r\n        }\r\n        return formated;\r\n    },[timezoneOffset, getLocal])\r\n\r\n    return [formatRelative]\r\n}"]},"metadata":{},"sourceType":"module"}