{"ast":null,"code":"import { ACTIONS } from \"../../../actions\";\nimport { produce } from \"imer\";\nimport { unset, set, get } from \"lodash/object\";\nimport { findClosesDir, generateTemplateName } from \"./utils\";\nconst initState = {\n  list: [],\n  currentPlaylist: [],\n  // path to play list \n  currentSelection: ['root'],\n  // path to dir or playlist current selected\n  root: {},\n  // root dir for play list \n  renameMode: false,\n  //mock\n  root: {\n    _type: \"dir\",\n    \"Techno\": {\n      _open: true,\n      \"ZetTempo\": {\n        _type: \"playlist\",\n        _content: []\n      },\n      \"empty dir\": {\n        _type: \"dir\"\n      },\n      \"HardCore\": {\n        _type: \"playlist\",\n        _content: []\n      },\n      \"Special\": {\n        _type: \"dir\",\n        _open: true,\n        \"DubTechno\": {\n          _type: \"playlist\",\n          _content: []\n        },\n        \"Clasic 90\": {\n          _type: \"playlist\",\n          _content: []\n        }\n      }\n    },\n    \"Mini mal\": {\n      _type: \"dir\",\n      \"HighTech\": {\n        _type: \"playlist\",\n        _content: []\n      },\n      \"Classic\": {\n        _type: \"playlist\",\n        _content: []\n      },\n      \"EmptyFolder\": {\n        _type: \"dir\"\n      }\n    }\n  }\n};\n\nfunction playListReducer(state = initState, action) {\n  switch (action.type) {\n    //done\n    case ACTIONS.PL_PUSH_DIR_CONTENT:\n      {\n        const dbDirs = action.dirContent.dirs || [];\n        const dbPlaylists = action.dirContent.playlists || [];\n        const dirs = {};\n        dbDirs.map(dir => {\n          dirs[dir.name] = {\n            type: \"dir\",\n            _id: dir.id\n          };\n        });\n        const playlists = {};\n        dbPlaylists.map(pl => {\n          playlists[pl.name] = {\n            _id: pl.id,\n            type: \"playlist\",\n            content: []\n          };\n        });\n\n        if (action.isRoot) {\n          return { ...state,\n            root: {\n              _id: action.dirContent.dir.id,\n              ...dirs,\n              ...playlists\n            }\n          };\n        } else {\n          const path = action.path;\n          return produce(state, draftState => {\n            set(draftState, path, {\n              _id: action.dirContent.dir.id,\n              _type: \"dir\",\n              _loaded: true,\n              _open: action.open || false,\n              ...dirs,\n              ...playlists\n            });\n          });\n        }\n      }\n\n    case ACTIONS.PUSH_TRACK:\n      {\n        if (state.currentPlaylist.length === 0 && action.createNew) {\n          //if is not seelect any play list - create new\n          let pathToDir = [\"root\"];\n\n          if (state.currentSelection.length > 1) {\n            pathToDir = findClosesDir(state, state.currentSelection);\n          }\n\n          const name = generateTemplateName(state, pathToDir, \"New Playlist\");\n          const fullPath = [...pathToDir, name];\n          return produce(state, draftState => {\n            // ?? check\n            set(draftState, fullPath, {\n              _type: \"playlist\",\n              _content: []\n            });\n            set(draftState, [...pathToDir, \"_open\"], true);\n            draftState.currentSelection = fullPath;\n            draftState.currentPlaylist = fullPath;\n            const playlist = Array.from(get(draftState, fullPath));\n            playlist.push(action.track);\n            draftState.list = playlist;\n            set(draftState, fullPath, playlist);\n          });\n        }\n\n        return produce(state, draftState => {\n          const list = Array.from(draftState.list);\n          list.push(action.track);\n          draftState.list = list;\n          set(draftState, [...state.currentPlaylist, \"_content\"], Array.from(draftState.list));\n        });\n      }\n\n    case ACTIONS.SET_BPM_AND_OFFSET:\n      {\n        let {\n          id,\n          playlist,\n          bpm,\n          offset\n        } = action; //  console.log(\"Set bpm and offset\", id, playlist, bpm, offset);\n\n        let isCurrent = false;\n\n        if (playlist === undefined || playlist.length === 0) {\n          isCurrent = true;\n          playlist = state.currentPlaylist;\n        }\n\n        let list = get(state, [...playlist, \"_content\"]); // ?? check\n\n        if (!list) {\n          return state;\n        }\n\n        list = Array.from(list);\n        const index = list.findIndex(element => element.id === id);\n\n        if (index === -1) {\n          return state;\n        }\n\n        list[index].bpm = bpm;\n\n        if (offset) {\n          list[index].offset = offset;\n        }\n\n        return produce(state, draftState => {\n          set(draftState, [...playlist, \"_content\"], list); // ?? check\n\n          if (isCurrent) {\n            draftState.list = list;\n          }\n\n          draftState.refreshFalg = Math.random();\n        });\n      }\n\n    case ACTIONS.PL_TOGGLE_DIR:\n      {\n        const open = get(state, [...action.path, \"_open\"]);\n        return produce(state, draftState => set(draftState, [...action.path, \"_open\"], !open));\n      }\n\n    case ACTIONS.PL_SET_SELECTION:\n      {\n        return produce(state, draftState => draftState.currentSelection = action.path);\n      }\n\n    case ACTIONS.PL_SET_CURRENT_PLAYLIST:\n      {\n        return produce(state, draftState => {\n          draftState.currentPlayList = action.path;\n          draftState.list = Array.from(get(state, [action.path]));\n        });\n      }\n    //done\n\n    case ACTIONS.PL_RENAME_SELECTED:\n      {\n        const content = get(state, state.currentSelection);\n        return produce(state, draftState => {\n          unset(draftState, state.currentSelection);\n          const newCurrent = draftState.currentSelection;\n          newCurrent.pop();\n          newCurrent.push(action.name);\n          draftState.currentSelection = newCurrent;\n          set(draftState, newCurrent, content);\n          draftState.renameMode = false;\n        });\n      }\n\n    case ACTIONS.PL_DELETE_SELECTED:\n      {\n        return produce(state, draftState => {\n          unset(draftState, state.currentSelection);\n          draftState.currentSelection = ['root'];\n        });\n      }\n\n    case ACTIONS.PL_MOVE_TO:\n      {\n        const {\n          pathFrom,\n          pathTo\n        } = action;\n        const content = get(state, pathFrom);\n        const name = pathFrom.pop(); //if target and source are the same don't do anything\n\n        if (pathFrom.length === pathTo.length && pathFrom.every((e, i) => e === pathTo[i])) {\n          return state;\n        }\n\n        return produce(state, draftState => {\n          set(draftState, [...pathTo, name], content);\n          unset(draftState, [...pathFrom, name]);\n        });\n      }\n\n    case ACTIONS.PL_DELETE_TRACK:\n      {\n        return produce(state, draftState => {\n          const newList = [...state.list];\n          newList.splice(action.index, 1);\n          draftState.list = newList;\n          set(draftState, [...draftState.currentPlaylist, \"_content\"], newList); //?? check\n        });\n      }\n\n    case ACTIONS.PL_SWAP_TRACK_ON_CURRENT:\n      {\n        return produce(state, draftState => {\n          const newList = [...state.list];\n          let trackFrom = newList[action.from];\n          newList[action.from] = newList[action.to];\n          newList[action.to] = trackFrom;\n          draftState.list = newList;\n          set(draftState, [...draftState.currentPlaylist, \"_content\"], newList);\n        });\n      }\n\n    case ACTIONS.PL_ADD_TRACK_TO_LIST:\n      {\n        const list = get(state, [...action.path, \"_content\"]);\n        if (!list) return state;\n        return produce(state, draftState => {\n          list.push(action.track);\n          set(draftState, [...action.fullPath, \"_content\"], list);\n        });\n      }\n    //done\n\n    case ACTIONS.PL_CREATE_DIR:\n      {\n        const {\n          id,\n          name,\n          renameMode\n        } = action;\n        const pathToDir = findClosesDir(state, state.currentSelection);\n\n        if (!name) {\n          name = generateTemplateName(state, pathToDir, \"New folder\");\n        }\n\n        return produce(state, draftState => {\n          set(draftState, [...pathToDir, name], {\n            _id: id,\n            _type: \"dir\"\n          });\n          set(draftState, [...pathToDir, \"_open\"], true); // parent\n\n          draftState.currentSelection = [...pathToDir, name];\n\n          if (renameMode) {\n            draftState.renameMode = renameMode;\n          }\n        });\n      }\n    //done\n\n    case ACTIONS.PL_CREATE_PLAYLIST:\n      {\n        const {\n          name,\n          id,\n          renameMode,\n          setCurrent\n        } = action; // console.log(\"creating playlist reducer\", name, id, renameMode);\n\n        const pathToDir = findClosesDir(state, state.currentSelection);\n\n        if (!name) {\n          name = generateTemplateName(state, pathToDir, \"New Playlist\");\n        }\n\n        return produce(state, draftState => {\n          // const newPlaylist = [];\n          // newPlaylist._id = id;\n          set(draftState, [...pathToDir, name], {\n            _id: id,\n            _type: \"playlist\",\n            _content: []\n          });\n          set(draftState, [...pathToDir, \"_open\"], true); // open parent dir\n\n          draftState.currentSelection = [...pathToDir, name]; // set focus on new element \n\n          if (setCurrent) {\n            draftState.currentPlaylist = [...pathToDir, name];\n          }\n\n          if (renameMode) {\n            draftState.renameMode = renameMode;\n          }\n        });\n      }\n\n    case ACTIONS.PL_OPEN_CURRENT_PLAY_LIST:\n      {\n        return produce(state, draftState => {\n          draftState.list = get(state, state.currentSelection);\n          draftState.currentPlaylist = state.currentSelection;\n        });\n      }\n\n    default:\n      return state;\n  }\n}\n\nexport default playListReducer;","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/reducers/console/playlist/playlistReducer.js"],"names":["ACTIONS","produce","unset","set","get","findClosesDir","generateTemplateName","initState","list","currentPlaylist","currentSelection","root","renameMode","_type","_open","_content","playListReducer","state","action","type","PL_PUSH_DIR_CONTENT","dbDirs","dirContent","dirs","dbPlaylists","playlists","map","dir","name","_id","id","pl","content","isRoot","path","draftState","_loaded","open","PUSH_TRACK","length","createNew","pathToDir","fullPath","playlist","Array","from","push","track","SET_BPM_AND_OFFSET","bpm","offset","isCurrent","undefined","index","findIndex","element","refreshFalg","Math","random","PL_TOGGLE_DIR","PL_SET_SELECTION","PL_SET_CURRENT_PLAYLIST","currentPlayList","PL_RENAME_SELECTED","newCurrent","pop","PL_DELETE_SELECTED","PL_MOVE_TO","pathFrom","pathTo","every","e","i","PL_DELETE_TRACK","newList","splice","PL_SWAP_TRACK_ON_CURRENT","trackFrom","to","PL_ADD_TRACK_TO_LIST","PL_CREATE_DIR","PL_CREATE_PLAYLIST","setCurrent","PL_OPEN_CURRENT_PLAY_LIST"],"mappings":"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","sourcesContent":["import { ACTIONS } from \"../../../actions\";\r\nimport { produce } from \"imer\";\r\nimport { unset, set, get } from \"lodash/object\";\r\nimport { findClosesDir, generateTemplateName } from \"./utils\"\r\n\r\nconst initState = {\r\n    list: [],\r\n\r\n    currentPlaylist: [],// path to play list \r\n    currentSelection: ['root'], // path to dir or playlist current selected\r\n    root: {}, // root dir for play list \r\n\r\n    renameMode: false,\r\n\r\n    //mock\r\n    root: {\r\n        _type: \"dir\",\r\n        \"Techno\": {\r\n            _open: true,\r\n            \"ZetTempo\": {\r\n                _type: \"playlist\",\r\n                _content: [],\r\n            },\r\n            \"empty dir\": {\r\n                _type: \"dir\"\r\n            },\r\n            \"HardCore\": {\r\n                _type: \"playlist\",\r\n                _content: [],\r\n            },\r\n            \"Special\": {\r\n                _type: \"dir\",\r\n                _open: true,\r\n                \"DubTechno\": {\r\n                    _type: \"playlist\",\r\n                    _content: [],\r\n                },\r\n                \"Clasic 90\": {\r\n                    _type: \"playlist\",\r\n                    _content: [],\r\n                },\r\n            }\r\n        },\r\n        \"Mini mal\": {\r\n            _type: \"dir\",\r\n            \"HighTech\": {\r\n                _type: \"playlist\",\r\n                _content: [],\r\n            },\r\n            \"Classic\": {\r\n                _type: \"playlist\",\r\n                _content: [],\r\n            },\r\n            \"EmptyFolder\": {\r\n                _type: \"dir\",\r\n            },\r\n        }\r\n    }\r\n\r\n}\r\n\r\nfunction playListReducer(state = initState, action) {\r\n    switch (action.type) {\r\n        //done\r\n        case ACTIONS.PL_PUSH_DIR_CONTENT: {\r\n            const dbDirs = action.dirContent.dirs || [];\r\n            const dbPlaylists = action.dirContent.playlists || [];\r\n\r\n            const dirs = {};\r\n            dbDirs.map((dir) => {\r\n                dirs[dir.name] = {\r\n                    type: \"dir\",\r\n                    _id: dir.id\r\n                }\r\n            })\r\n\r\n            const playlists = {};\r\n            dbPlaylists.map((pl) => {\r\n                playlists[pl.name] = {\r\n                    _id: pl.id,\r\n                    type: \"playlist\",\r\n                    content: []\r\n                };\r\n            })\r\n\r\n            if (action.isRoot) {\r\n                return {\r\n                    ...state,\r\n                    root: {\r\n                        _id: action.dirContent.dir.id,\r\n                        ...dirs,\r\n                        ...playlists,\r\n                    }\r\n                }\r\n            } else {\r\n                const path = action.path;\r\n                return produce(state, draftState => {\r\n                    set(draftState, path, {\r\n                        _id: action.dirContent.dir.id,\r\n                        _type: \"dir\",\r\n                        _loaded: true,\r\n                        _open: action.open || false,\r\n                        ...dirs,\r\n                        ...playlists\r\n                    })\r\n                })\r\n            }\r\n        }\r\n\r\n\r\n\r\n        case ACTIONS.PUSH_TRACK: {\r\n            if (state.currentPlaylist.length === 0 && action.createNew) {\r\n                //if is not seelect any play list - create new\r\n                let pathToDir = [\"root\"]\r\n                if (state.currentSelection.length > 1) {\r\n                    pathToDir = findClosesDir(state, state.currentSelection);\r\n                }\r\n                const name = generateTemplateName(state, pathToDir, \"New Playlist\");\r\n                const fullPath = [...pathToDir, name];\r\n                return produce(state, draftState => { // ?? check\r\n                    set(draftState, fullPath, {\r\n                        _type: \"playlist\",\r\n                        _content: []\r\n                    })\r\n                    set(draftState, [...pathToDir, \"_open\"], true);\r\n                    draftState.currentSelection = fullPath\r\n                    draftState.currentPlaylist = fullPath;\r\n                    const playlist = Array.from(get(draftState, fullPath));\r\n                    playlist.push(action.track);\r\n                    draftState.list = playlist;\r\n                    set(draftState, fullPath, playlist);\r\n                })\r\n            }\r\n            return produce(state, draftState => {\r\n                const list = Array.from(draftState.list);\r\n                list.push(action.track)\r\n                draftState.list = list;\r\n                set(draftState, [...state.currentPlaylist, \"_content\"], Array.from(draftState.list));\r\n            })\r\n        }\r\n\r\n        case ACTIONS.SET_BPM_AND_OFFSET: {\r\n            let { id, playlist, bpm, offset } = action;\r\n            //  console.log(\"Set bpm and offset\", id, playlist, bpm, offset);\r\n            let isCurrent = false;\r\n            if (playlist === undefined || playlist.length === 0) {\r\n                isCurrent = true;\r\n                playlist = state.currentPlaylist;\r\n            }\r\n            let list = get(state, [...playlist, \"_content\"]) // ?? check\r\n            if (!list) {\r\n                return state;\r\n            }\r\n            list = Array.from(list);\r\n            const index = list.findIndex(element => element.id === id);\r\n            if (index === -1) {\r\n                return state;\r\n            }\r\n            list[index].bpm = bpm;\r\n            if (offset) {\r\n                list[index].offset = offset;\r\n            }\r\n            return produce(state, draftState => {\r\n                set(draftState, [...playlist, \"_content\"], list); // ?? check\r\n                if (isCurrent) {\r\n                    draftState.list = list;\r\n                }\r\n                draftState.refreshFalg = Math.random();\r\n            })\r\n        }\r\n        case ACTIONS.PL_TOGGLE_DIR: {\r\n            const open = get(state, [...action.path, \"_open\"])\r\n            return produce(state, draftState => set(draftState, [...action.path, \"_open\"], !open))\r\n        }\r\n\r\n        case ACTIONS.PL_SET_SELECTION: {\r\n            return produce(state, draftState => draftState.currentSelection = action.path)\r\n        }\r\n\r\n\r\n\r\n        case ACTIONS.PL_SET_CURRENT_PLAYLIST: {\r\n            return produce(state, draftState => {\r\n                draftState.currentPlayList = action.path;\r\n                draftState.list = Array.from(get(state, [action.path]));\r\n            })\r\n        }\r\n\r\n        //done\r\n        case ACTIONS.PL_RENAME_SELECTED: {\r\n            const content = get(state, state.currentSelection);\r\n            return produce(state, draftState => {\r\n                unset(draftState, state.currentSelection);\r\n                const newCurrent = draftState.currentSelection;\r\n                newCurrent.pop();\r\n                newCurrent.push(action.name);\r\n                draftState.currentSelection = newCurrent;\r\n                set(draftState, newCurrent, content);\r\n                draftState.renameMode = false;\r\n            })\r\n        }\r\n\r\n        case ACTIONS.PL_DELETE_SELECTED: {\r\n            return produce(state, draftState => {\r\n                unset(draftState, state.currentSelection);\r\n                draftState.currentSelection = ['root'];\r\n            })\r\n        }\r\n\r\n        case ACTIONS.PL_MOVE_TO: {\r\n            const { pathFrom, pathTo } = action;\r\n            const content = get(state, pathFrom);\r\n            const name = pathFrom.pop();\r\n            //if target and source are the same don't do anything\r\n            if (pathFrom.length === pathTo.length &&\r\n                pathFrom.every((e, i) => e === pathTo[i])) {\r\n                return state;\r\n            }\r\n            return produce(state, draftState => {\r\n                set(draftState, [...pathTo, name], content);\r\n                unset(draftState, [...pathFrom, name]);\r\n            })\r\n        }\r\n\r\n        case ACTIONS.PL_DELETE_TRACK: {\r\n            return produce(state, draftState => {\r\n                const newList = [...state.list];\r\n                newList.splice(action.index, 1);\r\n                draftState.list = newList\r\n                set(draftState, [...draftState.currentPlaylist, \"_content\"], newList) //?? check\r\n            })\r\n        }\r\n\r\n        case ACTIONS.PL_SWAP_TRACK_ON_CURRENT: {\r\n            return produce(state, draftState => {\r\n                const newList = [...state.list];\r\n                let trackFrom = newList[action.from];\r\n                newList[action.from] = newList[action.to];\r\n                newList[action.to] = trackFrom;\r\n                draftState.list = newList;\r\n                set(draftState, [...draftState.currentPlaylist, \"_content\"], newList)\r\n            })\r\n        }\r\n\r\n        case ACTIONS.PL_ADD_TRACK_TO_LIST: {\r\n            const list = get(state, [...action.path, \"_content\"]);\r\n            if (!list) return state;\r\n            return produce(state, draftState => {\r\n                list.push(action.track);\r\n                set(draftState, [...action.fullPath, \"_content\"], list);\r\n            })\r\n        }\r\n\r\n\r\n        //done\r\n        case ACTIONS.PL_CREATE_DIR: {\r\n            const { id, name, renameMode } = action;\r\n            const pathToDir = findClosesDir(state, state.currentSelection);\r\n            if(!name) {\r\n                name = generateTemplateName(state, pathToDir, \"New folder\")\r\n            }\r\n            return produce(state, draftState => {\r\n                set(draftState, [...pathToDir, name], { \r\n                    _id: id,\r\n                    _type: \"dir\", \r\n                });\r\n                set(draftState, [...pathToDir, \"_open\"], true); // parent\r\n                draftState.currentSelection = [...pathToDir, name];\r\n                if (renameMode) {\r\n                    draftState.renameMode = renameMode;\r\n                }\r\n            })\r\n        }\r\n\r\n        //done\r\n        case ACTIONS.PL_CREATE_PLAYLIST: {\r\n            const { name, id, renameMode, setCurrent } = action;\r\n            // console.log(\"creating playlist reducer\", name, id, renameMode);\r\n            const pathToDir = findClosesDir(state, state.currentSelection);\r\n            if(!name) {\r\n                name = generateTemplateName(state, pathToDir, \"New Playlist\")\r\n            }\r\n            return produce(state, draftState => {\r\n                // const newPlaylist = [];\r\n                // newPlaylist._id = id;\r\n                set(draftState, [...pathToDir, name], {\r\n                    _id : id,\r\n                    _type : \"playlist\",\r\n                    _content: []\r\n                })\r\n                set(draftState, [...pathToDir, \"_open\"], true); // open parent dir\r\n                draftState.currentSelection = [...pathToDir, name]; // set focus on new element \r\n                if (setCurrent) {\r\n                    draftState.currentPlaylist = [...pathToDir, name];\r\n                }\r\n                if (renameMode) {\r\n                    draftState.renameMode = renameMode;\r\n                }\r\n            })\r\n\r\n\r\n        }\r\n\r\n        case ACTIONS.PL_OPEN_CURRENT_PLAY_LIST: {\r\n            return produce(state, draftState => {\r\n                draftState.list = get(state, state.currentSelection);\r\n                draftState.currentPlaylist = state.currentSelection;\r\n            })\r\n        }\r\n\r\n\r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport default playListReducer;\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}