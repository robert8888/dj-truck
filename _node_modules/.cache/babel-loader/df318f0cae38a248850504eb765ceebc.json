{"ast":null,"code":"import _classCallCheck from \"D:\\\\PROJEKTY\\\\APKI\\\\DjTruck\\\\djtruck\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _slicedToArray from \"D:\\\\PROJEKTY\\\\APKI\\\\DjTruck\\\\djtruck\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS } from '../globals';\nimport { isConstructible } from '../helpers/is-constructible';\nimport { splitImportStatements } from '../helpers/split-import-statements';\n\nvar verifyParameterDescriptors = function verifyParameterDescriptors(parameterDescriptors) {\n  if (parameterDescriptors !== undefined && !Array.isArray(parameterDescriptors)) {\n    throw new TypeError('The parameterDescriptors property of given value for processorCtor is not an array.');\n  }\n};\n\nvar verifyProcessorCtor = function verifyProcessorCtor(processorCtor) {\n  if (!isConstructible(processorCtor)) {\n    throw new TypeError('The given value for processorCtor should be a constructor.');\n  }\n\n  if (processorCtor.prototype === null || typeof processorCtor.prototype !== 'object') {\n    throw new TypeError('The given value for processorCtor should have a prototype.');\n  }\n};\n\nexport var createAddAudioWorkletModule = function createAddAudioWorkletModule(createNotSupportedError, evaluateSource, exposeCurrentFrameAndCurrentTime, fetchSource, getBackupNativeContext, getNativeContext, ongoingRequests, resolvedRequests, window) {\n  return function (context, moduleURL) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n      credentials: 'omit'\n    };\n    var nativeContext = getNativeContext(context);\n    var absoluteUrl = new URL(moduleURL, window.location.href).toString(); // Bug #59: Only Chrome & Opera do implement the audioWorklet property.\n\n    if (nativeContext.audioWorklet !== undefined) {\n      return fetchSource(moduleURL).then(function (source) {\n        var _splitImportStatement = splitImportStatements(source, absoluteUrl),\n            _splitImportStatement2 = _slicedToArray(_splitImportStatement, 2),\n            importStatements = _splitImportStatement2[0],\n            sourceWithoutImportStatements = _splitImportStatement2[1];\n        /*\n         * Bug #86: Chrome and Opera do not invoke the process() function if the corresponding AudioWorkletNode has no output.\n         *\n         * Bug #170: Chrome and Opera do call process() with an array with empty channelData for each input if no input is\n         * connected.\n         *\n         * This is the unminified version of the code used below:\n         *\n         * ```js\n         * `${ importStatements };\n         * ((registerProcessor) => {${ sourceWithoutImportStatements }\n         * })((name, processorCtor) => registerProcessor(name, class extends processorCtor {\n         *\n         *     constructor (options) {\n         *         const { hasNoOutput, ...otherParameterData } = options.parameterData;\n         *\n         *         if (hasNoOutput === 1) {\n         *             super({ ...options, numberOfOutputs: 0, outputChannelCount: [ ], parameterData: otherParameterData });\n         *\n         *             this._hasNoOutput = true;\n         *         } else {\n         *             super(options);\n         *\n         *             this._hasNoOutput = false;\n         *         }\n         *     }\n         *\n         *     process (inputs, outputs, parameters) {\n         *         return super.process(\n         *             (inputs.map((input) => input.some((channelData) => channelData.length === 0)) ? [ ] : input),\n         *             (this._hasNoOutput) ? [ ] : outputs,\n         *             parameters\n         *         );\n         *     }\n         *\n         * }))`\n         * ```\n         */\n\n\n        var wrappedSource = \"\".concat(importStatements, \";(registerProcessor=>{\").concat(sourceWithoutImportStatements, \"\\n})((n,p)=>registerProcessor(n,class extends p{constructor(o){const{hasNoOutput,...q}=o.parameterData;if(hasNoOutput===1){super({...o,numberOfOutputs:0,outputChannelCount:[],parameterData:q});this._h=true}else{super(o);this._h=false}}process(i,o,p){return super.process(i.map(j=>j.some(k=>k.length===0)?[]:j),this._h?[]:o,p)}}))\"); // tslint:disable-line:max-line-length\n\n        var blob = new Blob([wrappedSource], {\n          type: 'application/javascript; charset=utf-8'\n        });\n        var url = URL.createObjectURL(blob);\n        var backupNativeContext = getBackupNativeContext(nativeContext);\n        var nativeContextOrBackupNativeContext = backupNativeContext !== null ? backupNativeContext : nativeContext;\n        return nativeContextOrBackupNativeContext.audioWorklet.addModule(url, options).then(function () {\n          return URL.revokeObjectURL(url);\n        }) // @todo This could be written more elegantly when Promise.finally() becomes avalaible.\n        .catch(function (err) {\n          URL.revokeObjectURL(url);\n\n          if (err.code === undefined || err.name === 'SyntaxError') {\n            err.code = 12;\n          }\n\n          throw err;\n        });\n      });\n    }\n\n    var resolvedRequestsOfContext = resolvedRequests.get(context);\n\n    if (resolvedRequestsOfContext !== undefined && resolvedRequestsOfContext.has(moduleURL)) {\n      return Promise.resolve();\n    }\n\n    var ongoingRequestsOfContext = ongoingRequests.get(context);\n\n    if (ongoingRequestsOfContext !== undefined) {\n      var promiseOfOngoingRequest = ongoingRequestsOfContext.get(moduleURL);\n\n      if (promiseOfOngoingRequest !== undefined) {\n        return promiseOfOngoingRequest;\n      }\n    }\n\n    var promise = fetchSource(moduleURL).then(function (source) {\n      var _splitImportStatement3 = splitImportStatements(source, absoluteUrl),\n          _splitImportStatement4 = _slicedToArray(_splitImportStatement3, 2),\n          importStatements = _splitImportStatement4[0],\n          sourceWithoutImportStatements = _splitImportStatement4[1];\n      /*\n       * This is the unminified version of the code used below:\n       *\n       * ```js\n       * ${ importStatements };\n       * ((a, b) => {\n       *     (a[b] = a[b] || [ ]).push(\n       *         (AudioWorkletProcessor, global, registerProcessor, sampleRate, self, window) => {\n       *             ${ sourceWithoutImportStatements }\n       *         }\n       *     );\n       * })(window, '_AWGS');\n       * ```\n       */\n      // tslint:disable-next-line:max-line-length\n\n\n      var wrappedSource = \"\".concat(importStatements, \";((a,b)=>{(a[b]=a[b]||[]).push((AudioWorkletProcessor,global,registerProcessor,sampleRate,self,window)=>{\").concat(sourceWithoutImportStatements, \"\\n})})(window,'_AWGS')\"); // @todo Evaluating the given source code is a possible security problem.\n\n      return evaluateSource(wrappedSource);\n    }).then(function () {\n      var evaluateAudioWorkletGlobalScope = window._AWGS.pop();\n\n      if (evaluateAudioWorkletGlobalScope === undefined) {\n        throw new SyntaxError();\n      }\n\n      exposeCurrentFrameAndCurrentTime(nativeContext.currentTime, nativeContext.sampleRate, function () {\n        return evaluateAudioWorkletGlobalScope(function AudioWorkletProcessor() {\n          _classCallCheck(this, AudioWorkletProcessor);\n        }, undefined, function (name, processorCtor) {\n          if (name.trim() === '') {\n            throw createNotSupportedError();\n          }\n\n          var nodeNameToProcessorConstructorMap = NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS.get(nativeContext);\n\n          if (nodeNameToProcessorConstructorMap !== undefined) {\n            if (nodeNameToProcessorConstructorMap.has(name)) {\n              throw createNotSupportedError();\n            }\n\n            verifyProcessorCtor(processorCtor);\n            verifyParameterDescriptors(processorCtor.parameterDescriptors);\n            nodeNameToProcessorConstructorMap.set(name, processorCtor);\n          } else {\n            verifyProcessorCtor(processorCtor);\n            verifyParameterDescriptors(processorCtor.parameterDescriptors);\n            NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS.set(nativeContext, new Map([[name, processorCtor]]));\n          }\n        }, nativeContext.sampleRate, undefined, undefined);\n      });\n    }).catch(function (err) {\n      if (err.code === undefined || err.name === 'SyntaxError') {\n        err.code = 12;\n      }\n\n      throw err;\n    });\n\n    if (ongoingRequestsOfContext === undefined) {\n      ongoingRequests.set(context, new Map([[moduleURL, promise]]));\n    } else {\n      ongoingRequestsOfContext.set(moduleURL, promise);\n    }\n\n    promise.then(function () {\n      var rslvdRqstsFCntxt = resolvedRequests.get(context);\n\n      if (rslvdRqstsFCntxt === undefined) {\n        resolvedRequests.set(context, new Set([moduleURL]));\n      } else {\n        rslvdRqstsFCntxt.add(moduleURL);\n      }\n    }).catch(function () {}) // tslint:disable-line:no-empty\n    // @todo Use finally when it becomes available in all supported browsers.\n    .then(function () {\n      var ngngRqstsFCntxt = ongoingRequests.get(context);\n\n      if (ngngRqstsFCntxt !== undefined) {\n        ngngRqstsFCntxt.delete(moduleURL);\n      }\n    });\n    return promise;\n  };\n};","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/node_modules/standardized-audio-context/build/es2019/factories/add-audio-worklet-module.js"],"names":["NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS","isConstructible","splitImportStatements","verifyParameterDescriptors","parameterDescriptors","undefined","Array","isArray","TypeError","verifyProcessorCtor","processorCtor","prototype","createAddAudioWorkletModule","createNotSupportedError","evaluateSource","exposeCurrentFrameAndCurrentTime","fetchSource","getBackupNativeContext","getNativeContext","ongoingRequests","resolvedRequests","window","context","moduleURL","options","credentials","nativeContext","absoluteUrl","URL","location","href","toString","audioWorklet","then","source","importStatements","sourceWithoutImportStatements","wrappedSource","blob","Blob","type","url","createObjectURL","backupNativeContext","nativeContextOrBackupNativeContext","addModule","revokeObjectURL","catch","err","code","name","resolvedRequestsOfContext","get","has","Promise","resolve","ongoingRequestsOfContext","promiseOfOngoingRequest","promise","evaluateAudioWorkletGlobalScope","_AWGS","pop","SyntaxError","currentTime","sampleRate","trim","nodeNameToProcessorConstructorMap","set","Map","rslvdRqstsFCntxt","Set","add","ngngRqstsFCntxt","delete"],"mappings":"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","sourcesContent":["import { NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS } from '../globals';\nimport { isConstructible } from '../helpers/is-constructible';\nimport { splitImportStatements } from '../helpers/split-import-statements';\nconst verifyParameterDescriptors = (parameterDescriptors) => {\n    if (parameterDescriptors !== undefined && !Array.isArray(parameterDescriptors)) {\n        throw new TypeError('The parameterDescriptors property of given value for processorCtor is not an array.');\n    }\n};\nconst verifyProcessorCtor = (processorCtor) => {\n    if (!isConstructible(processorCtor)) {\n        throw new TypeError('The given value for processorCtor should be a constructor.');\n    }\n    if (processorCtor.prototype === null || typeof processorCtor.prototype !== 'object') {\n        throw new TypeError('The given value for processorCtor should have a prototype.');\n    }\n};\nexport const createAddAudioWorkletModule = (createNotSupportedError, evaluateSource, exposeCurrentFrameAndCurrentTime, fetchSource, getBackupNativeContext, getNativeContext, ongoingRequests, resolvedRequests, window) => {\n    return (context, moduleURL, options = { credentials: 'omit' }) => {\n        const nativeContext = getNativeContext(context);\n        const absoluteUrl = (new URL(moduleURL, window.location.href)).toString();\n        // Bug #59: Only Chrome & Opera do implement the audioWorklet property.\n        if (nativeContext.audioWorklet !== undefined) {\n            return fetchSource(moduleURL)\n                .then((source) => {\n                const [importStatements, sourceWithoutImportStatements] = splitImportStatements(source, absoluteUrl);\n                /*\n                 * Bug #86: Chrome and Opera do not invoke the process() function if the corresponding AudioWorkletNode has no output.\n                 *\n                 * Bug #170: Chrome and Opera do call process() with an array with empty channelData for each input if no input is\n                 * connected.\n                 *\n                 * This is the unminified version of the code used below:\n                 *\n                 * ```js\n                 * `${ importStatements };\n                 * ((registerProcessor) => {${ sourceWithoutImportStatements }\n                 * })((name, processorCtor) => registerProcessor(name, class extends processorCtor {\n                 *\n                 *     constructor (options) {\n                 *         const { hasNoOutput, ...otherParameterData } = options.parameterData;\n                 *\n                 *         if (hasNoOutput === 1) {\n                 *             super({ ...options, numberOfOutputs: 0, outputChannelCount: [ ], parameterData: otherParameterData });\n                 *\n                 *             this._hasNoOutput = true;\n                 *         } else {\n                 *             super(options);\n                 *\n                 *             this._hasNoOutput = false;\n                 *         }\n                 *     }\n                 *\n                 *     process (inputs, outputs, parameters) {\n                 *         return super.process(\n                 *             (inputs.map((input) => input.some((channelData) => channelData.length === 0)) ? [ ] : input),\n                 *             (this._hasNoOutput) ? [ ] : outputs,\n                 *             parameters\n                 *         );\n                 *     }\n                 *\n                 * }))`\n                 * ```\n                 */\n                const wrappedSource = `${importStatements};(registerProcessor=>{${sourceWithoutImportStatements}\n})((n,p)=>registerProcessor(n,class extends p{constructor(o){const{hasNoOutput,...q}=o.parameterData;if(hasNoOutput===1){super({...o,numberOfOutputs:0,outputChannelCount:[],parameterData:q});this._h=true}else{super(o);this._h=false}}process(i,o,p){return super.process(i.map(j=>j.some(k=>k.length===0)?[]:j),this._h?[]:o,p)}}))`; // tslint:disable-line:max-line-length\n                const blob = new Blob([wrappedSource], { type: 'application/javascript; charset=utf-8' });\n                const url = URL.createObjectURL(blob);\n                const backupNativeContext = getBackupNativeContext(nativeContext);\n                const nativeContextOrBackupNativeContext = (backupNativeContext !== null) ? backupNativeContext : nativeContext;\n                return nativeContextOrBackupNativeContext.audioWorklet\n                    .addModule(url, options)\n                    .then(() => URL.revokeObjectURL(url))\n                    // @todo This could be written more elegantly when Promise.finally() becomes avalaible.\n                    .catch((err) => {\n                    URL.revokeObjectURL(url);\n                    if (err.code === undefined || err.name === 'SyntaxError') {\n                        err.code = 12;\n                    }\n                    throw err;\n                });\n            });\n        }\n        const resolvedRequestsOfContext = resolvedRequests.get(context);\n        if (resolvedRequestsOfContext !== undefined && resolvedRequestsOfContext.has(moduleURL)) {\n            return Promise.resolve();\n        }\n        const ongoingRequestsOfContext = ongoingRequests.get(context);\n        if (ongoingRequestsOfContext !== undefined) {\n            const promiseOfOngoingRequest = ongoingRequestsOfContext.get(moduleURL);\n            if (promiseOfOngoingRequest !== undefined) {\n                return promiseOfOngoingRequest;\n            }\n        }\n        const promise = fetchSource(moduleURL)\n            .then((source) => {\n            const [importStatements, sourceWithoutImportStatements] = splitImportStatements(source, absoluteUrl);\n            /*\n             * This is the unminified version of the code used below:\n             *\n             * ```js\n             * ${ importStatements };\n             * ((a, b) => {\n             *     (a[b] = a[b] || [ ]).push(\n             *         (AudioWorkletProcessor, global, registerProcessor, sampleRate, self, window) => {\n             *             ${ sourceWithoutImportStatements }\n             *         }\n             *     );\n             * })(window, '_AWGS');\n             * ```\n             */\n            // tslint:disable-next-line:max-line-length\n            const wrappedSource = `${importStatements};((a,b)=>{(a[b]=a[b]||[]).push((AudioWorkletProcessor,global,registerProcessor,sampleRate,self,window)=>{${sourceWithoutImportStatements}\n})})(window,'_AWGS')`;\n            // @todo Evaluating the given source code is a possible security problem.\n            return evaluateSource(wrappedSource);\n        })\n            .then(() => {\n            const evaluateAudioWorkletGlobalScope = window._AWGS.pop();\n            if (evaluateAudioWorkletGlobalScope === undefined) {\n                throw new SyntaxError();\n            }\n            exposeCurrentFrameAndCurrentTime(nativeContext.currentTime, nativeContext.sampleRate, () => evaluateAudioWorkletGlobalScope(class AudioWorkletProcessor {\n            }, undefined, (name, processorCtor) => {\n                if (name.trim() === '') {\n                    throw createNotSupportedError();\n                }\n                const nodeNameToProcessorConstructorMap = NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS.get(nativeContext);\n                if (nodeNameToProcessorConstructorMap !== undefined) {\n                    if (nodeNameToProcessorConstructorMap.has(name)) {\n                        throw createNotSupportedError();\n                    }\n                    verifyProcessorCtor(processorCtor);\n                    verifyParameterDescriptors(processorCtor.parameterDescriptors);\n                    nodeNameToProcessorConstructorMap.set(name, processorCtor);\n                }\n                else {\n                    verifyProcessorCtor(processorCtor);\n                    verifyParameterDescriptors(processorCtor.parameterDescriptors);\n                    NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS.set(nativeContext, new Map([[name, processorCtor]]));\n                }\n            }, nativeContext.sampleRate, undefined, undefined));\n        })\n            .catch((err) => {\n            if (err.code === undefined || err.name === 'SyntaxError') {\n                err.code = 12;\n            }\n            throw err;\n        });\n        if (ongoingRequestsOfContext === undefined) {\n            ongoingRequests.set(context, new Map([[moduleURL, promise]]));\n        }\n        else {\n            ongoingRequestsOfContext.set(moduleURL, promise);\n        }\n        promise\n            .then(() => {\n            const rslvdRqstsFCntxt = resolvedRequests.get(context);\n            if (rslvdRqstsFCntxt === undefined) {\n                resolvedRequests.set(context, new Set([moduleURL]));\n            }\n            else {\n                rslvdRqstsFCntxt.add(moduleURL);\n            }\n        })\n            .catch(() => { }) // tslint:disable-line:no-empty\n            // @todo Use finally when it becomes available in all supported browsers.\n            .then(() => {\n            const ngngRqstsFCntxt = ongoingRequests.get(context);\n            if (ngngRqstsFCntxt !== undefined) {\n                ngngRqstsFCntxt.delete(moduleURL);\n            }\n        });\n        return promise;\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/add-audio-worklet-module.js.map"]},"metadata":{},"sourceType":"module"}