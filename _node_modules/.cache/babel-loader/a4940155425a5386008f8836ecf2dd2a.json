{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\src\\\\pages\\\\common\\\\components\\\\RecordComments\\\\RecordComments.js\";\nimport React, { useState, useCallback } from \"react\";\nimport { reqPostComment } from \"./../../../../actions\";\nimport { connect } from \"react-redux\";\nimport Comment from \"./Comment/Comment\";\nimport { useRecordPlayer } from \"./../../Hooks/useRecordPlayer\";\nimport \"./record-comments.scss\";\n\nconst RecordComments = ({\n  userId,\n  record,\n  postComment\n}) => {\n  const [, player] = useRecordPlayer();\n  const [comment, setComment] = useState(\"\");\n  const [showButton, setShowButton] = useState(false);\n  const updateComment = useCallback(e => {\n    setComment(e.target.value);\n\n    if (e.target.value === \"\") {\n      setShowButton(false);\n    }\n  }, [setComment, setShowButton]);\n  const onBlur = useCallback(() => {\n    comment === \"\" ? setShowButton(false) : setShowButton(true);\n  }, [comment, setShowButton]);\n  const submitComment = useCallback(e => {\n    e.preventDefault();\n    if (!postComment || !record || userId) return;\n    const timeOfComment = 0;\n    const currentPlayback = player.getCurrent();\n\n    if (currentPlayback.id === record.id) {\n      timeOfComment = currentPlayback.progress * currentPlayback.duration;\n    }\n\n    const commentData = {\n      recordId: record.id,\n      userId: userId,\n      text: comment,\n      time: timeOfComment\n    };\n    console.log(commentData);\n    postComment(commentData);\n    setComment(\"\");\n    setShowButton(false);\n  }, [comment, postComment, setComment, setShowButton]);\n  return React.createElement(\"div\", {\n    className: \"record-comments\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, userId && React.createElement(\"div\", {\n    className: \"comment-post-form\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, React.createElement(Comment, {\n    content: null,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  })));\n};\n\nconst mapStateToProps = state => ({\n  record: state.records.currentRecord,\n  userId: state.user.dbId\n});\n\nconst mapDispatchToProps = dispatch => ({\n  postComment: data => dispatch(reqPostComment(data)) // deleteComment: (id) => dispatch(null),\n  // editComment : (id, comment) => dispatch(null)\n\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RecordComments);","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/pages/common/components/RecordComments/RecordComments.js"],"names":["React","useState","useCallback","reqPostComment","connect","Comment","useRecordPlayer","RecordComments","userId","record","postComment","player","comment","setComment","showButton","setShowButton","updateComment","e","target","value","onBlur","submitComment","preventDefault","timeOfComment","currentPlayback","getCurrent","id","progress","duration","commentData","recordId","text","time","console","log","mapStateToProps","state","records","currentRecord","user","dbId","mapDispatchToProps","dispatch","data"],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from \"react\";\r\nimport {reqPostComment} from \"./../../../../actions\";\r\nimport {connect} from \"react-redux\";\r\nimport Comment from \"./Comment/Comment\";\r\n\r\nimport {useRecordPlayer} from \"./../../Hooks/useRecordPlayer\";\r\nimport \"./record-comments.scss\";\r\n\r\n\r\nconst RecordComments = ({\r\n        userId,\r\n        record, \r\n        postComment, \r\n    }) =>{\r\n    const [, player] = useRecordPlayer();\r\n    const [comment, setComment] = useState(\"\")\r\n    const [showButton, setShowButton] = useState(false);\r\n\r\n    const updateComment = useCallback((e)=>{\r\n        setComment(e.target.value);\r\n        if(e.target.value === \"\"){\r\n            setShowButton(false)\r\n        }\r\n    },[setComment, setShowButton])\r\n\r\n    const onBlur = useCallback(()=>{\r\n        (comment === \"\") ? setShowButton(false) : setShowButton(true);\r\n    },[comment, setShowButton])\r\n\r\n    const submitComment = useCallback((e) => {\r\n        e.preventDefault();\r\n        if(!postComment || !record || userId) return;\r\n\r\n        const timeOfComment = 0;\r\n        const currentPlayback = player.getCurrent();\r\n        if(currentPlayback.id === record.id){\r\n            timeOfComment = currentPlayback.progress * currentPlayback.duration;\r\n        }\r\n\r\n        const commentData = {\r\n            recordId : record.id,\r\n            userId: userId,\r\n            text: comment,\r\n            time: timeOfComment,\r\n        }\r\n        console.log(commentData);\r\n        postComment(commentData)\r\n\r\n        setComment(\"\")\r\n        setShowButton(false)\r\n    },[comment, postComment, setComment, setShowButton])\r\n\r\n    return (\r\n        <div className=\"record-comments\">\r\n            {userId && <div className=\"comment-post-form\">\r\n                {/* <Form onSubmit={submitComment}\r\n                    onFocus={setShowButton.bind(null, true)}\r\n                    onBlur={onBlur}>\r\n                    <Form.Group>\r\n                        <Form.Label>\r\n                            Post your comment:\r\n                        </Form.Label>\r\n                        <Form.Control \r\n                            className=\"record-comments-control\"\r\n                            type=\"textarea\" \r\n                            as=\"textarea\"\r\n                            name=\"comment-conntent\"\r\n                            value={comment}\r\n\r\n                            onChange={updateComment}/>\r\n                    </Form.Group>\r\n                    {showButton && <Button type=\"submit\">Post</Button>}\r\n                </Form> */}\r\n                <Comment content={null}/>\r\n            </div>}\r\n\r\n                       \r\n        </div>\r\n    )\r\n}\r\nconst mapStateToProps = state => ({\r\n    record: state.records.currentRecord,\r\n    userId: state.user.dbId,\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    postComment: (data) => dispatch(reqPostComment(data)),\r\n    // deleteComment: (id) => dispatch(null),\r\n    // editComment : (id, comment) => dispatch(null)\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(RecordComments)"]},"metadata":{},"sourceType":"module"}