{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\src\\\\pages\\\\common\\\\components\\\\RecordList\\\\Record\\\\PlaybackButton\\\\PlaybackButton.js\";\nimport React, { useEffect, useMemo, useCallback } from \"react\";\nimport BinaryButton from \"./../../../BinnaryButton/BinnaryButton\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport classNames from \"classnames\";\nimport \"./playback-button.scss\";\nimport usePlaybackState, { PLAYBACK_STATE } from \"./../../../../Hooks/usePlabackState\";\n\nconst PlaybackButton = ({\n  playback,\n  id,\n  player\n}) => {\n  const onChange = useCallback(state => {\n    if (playback) {\n      playback(id, state);\n    }\n  }, [playback, id]);\n  const [state, icon, toggleHandler, setState] = usePlaybackState(onChange);\n  useEffect(() => {\n    if (!player) {\n      return;\n    }\n\n    player.addBtnCtrlHandler(id, s => setState(s));\n  }, [player, id]);\n  const btnClassNames = useMemo(() => {\n    return classNames(\"playback-button\", {\n      \"playback-button--active\": state === PLAYBACK_STATE.PLAY\n    });\n  }, [state]);\n  return React.createElement(\"div\", {\n    className: \"playback-button-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, React.createElement(BinaryButton, {\n    className: btnClassNames,\n    onChange: toggleHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, React.createElement(FontAwesomeIcon, {\n    icon: icon,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  })));\n};\n\nexport default PlaybackButton;","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/pages/common/components/RecordList/Record/PlaybackButton/PlaybackButton.js"],"names":["React","useEffect","useMemo","useCallback","BinaryButton","FontAwesomeIcon","classNames","usePlaybackState","PLAYBACK_STATE","PlaybackButton","playback","id","player","onChange","state","icon","toggleHandler","setState","addBtnCtrlHandler","s","btnClassNames","PLAY"],"mappings":";AAAA,OAAOA,KAAP,IAAiBC,SAAjB,EAA4BC,OAA5B,EAAqCC,WAArC,QAAwD,OAAxD;AACA,OAAOC,YAAP,MAAyB,wCAAzB;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAO,wBAAP;AACA,OAAOC,gBAAP,IAA0BC,cAA1B,QAA+C,qCAA/C;;AAEA,MAAMC,cAAc,GAAG,CAAC;AAACC,EAAAA,QAAD;AAAWC,EAAAA,EAAX;AAAeC,EAAAA;AAAf,CAAD,KAA4B;AAC/C,QAAMC,QAAQ,GAAGV,WAAW,CAAEW,KAAD,IAAU;AACnC,QAAGJ,QAAH,EAAY;AACRA,MAAAA,QAAQ,CAACC,EAAD,EAAMG,KAAN,CAAR;AACH;AACJ,GAJ2B,EAIzB,CAACJ,QAAD,EAAWC,EAAX,CAJyB,CAA5B;AAMA,QAAM,CAACG,KAAD,EAAQC,IAAR,EAAcC,aAAd,EAA6BC,QAA7B,IAAyCV,gBAAgB,CAACM,QAAD,CAA/D;AAEAZ,EAAAA,SAAS,CAAC,MAAI;AACV,QAAG,CAACW,MAAJ,EAAW;AACP;AACH;;AACDA,IAAAA,MAAM,CAACM,iBAAP,CAAyBP,EAAzB,EAA8BQ,CAAD,IAAOF,QAAQ,CAACE,CAAD,CAA5C;AACH,GALQ,EAKN,CAACP,MAAD,EAASD,EAAT,CALM,CAAT;AAOA,QAAMS,aAAa,GAAGlB,OAAO,CAAC,MAAI;AAC9B,WAAOI,UAAU,CACb,iBADa,EAEb;AACI,iCAA4BQ,KAAK,KAAKN,cAAc,CAACa;AADzD,KAFa,CAAjB;AAMH,GAP4B,EAO1B,CAACP,KAAD,CAP0B,CAA7B;AASA,SACI;AAAK,IAAA,SAAS,EAAC,2BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,YAAD;AAAc,IAAA,SAAS,EAAEM,aAAzB;AAAwC,IAAA,QAAQ,EAAEJ,aAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,eAAD;AAAiB,IAAA,IAAI,EAAED,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ,CADJ;AAOH,CAhCD;;AAkCA,eAAeN,cAAf","sourcesContent":["import React , { useEffect, useMemo, useCallback } from \"react\";\r\nimport BinaryButton from \"./../../../BinnaryButton/BinnaryButton\"\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport classNames from \"classnames\"\r\nimport \"./playback-button.scss\"\r\nimport usePlaybackState, {PLAYBACK_STATE} from \"./../../../../Hooks/usePlabackState\";\r\n\r\nconst PlaybackButton = ({playback, id, player}) => {\r\n    const onChange = useCallback((state)=> {\r\n        if(playback){\r\n            playback(id , state);\r\n        }\r\n    }, [playback, id])\r\n\r\n    const [state, icon, toggleHandler, setState] = usePlaybackState(onChange);\r\n\r\n    useEffect(()=>{\r\n        if(!player){\r\n            return;\r\n        }\r\n        player.addBtnCtrlHandler(id, (s) => setState(s))\r\n    }, [player, id])\r\n\r\n    const btnClassNames = useMemo(()=>{\r\n        return classNames(\r\n            \"playback-button\",\r\n            {\r\n                \"playback-button--active\": (state === PLAYBACK_STATE.PLAY)\r\n            }\r\n        )\r\n    }, [state])\r\n\r\n    return (\r\n        <div className=\"playback-button-container\">\r\n            <BinaryButton className={btnClassNames} onChange={toggleHandler}>\r\n                <FontAwesomeIcon icon={icon}/>\r\n            </BinaryButton>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PlaybackButton"]},"metadata":{},"sourceType":"module"}