{"ast":null,"code":"import _regeneratorRuntime from\"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\node_modules\\\\@babel\\\\runtime/regenerator\";var _marked=/*#__PURE__*/_regeneratorRuntime.mark(readDirRequest),_marked2=/*#__PURE__*/_regeneratorRuntime.mark(handle);import{get}from\"lodash/object\";import{hideLoading,showLoading}from'react-redux-loading-bar';import{put,select,takeEvery}from\"redux-saga/effects\";import{ACTIONS,pushDirContent,pushLog}from\"../../actions\";import{getApi}from\"./../../apis/apiProvider\";import{Log}from\"./../../utils/logger/logger\";import errorParser from\"./../../utils/serverErrorParser/errorParser\";export default function readDirRequest(){return _regeneratorRuntime.wrap(function readDirRequest$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return takeEvery(ACTIONS.PL_LOAD_DIR_REQUEST,handle);case 2:case\"end\":return _context.stop();}}},_marked);}var getToken=function getToken(state){return state.user.token;};var getCurrentSelection=function getCurrentSelection(state){return state.playList.currentSelection;};var getCurrent=function getCurrent(state,path){return get(state.playList,path);};export function handle(action){var path,token,currentSelection,current,_getApi,callQuery,queries,response,dir,isRoot;return _regeneratorRuntime.wrap(function handle$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:path=['saga','playlist','request read dir'];_context2.next=3;return select(getToken);case 3:token=_context2.sent;_context2.next=6;return select(getCurrentSelection);case 6:currentSelection=_context2.sent;_context2.next=9;return select(getCurrent,currentSelection);case 9:current=_context2.sent;if(!(!current._loaded&&token)){_context2.next=38;break;}_context2.prev=11;_context2.next=14;return put(showLoading());case 14:_getApi=getApi(\"UserAssets\"),callQuery=_getApi.callQuery,queries=_getApi.queries;_context2.next=17;return callQuery(queries.loadDirContentQl(current._id),token);case 17:response=_context2.sent;if(!response.errors){_context2.next=20;break;}throw new Error('Server response contains errors '+errorParser(response.errors));case 20:if(response.data.dir){_context2.next=22;break;}return _context2.abrupt(\"return\");case 22:dir=response.data.dir;isRoot=false;_context2.next=26;return put(pushDirContent(dir,isRoot,action.path,action.open));case 26:_context2.next=28;return put(pushLog(new Log(\"Dir sucessful readed from database\",path)));case 28:_context2.next=34;break;case 30:_context2.prev=30;_context2.t0=_context2[\"catch\"](11);_context2.next=34;return put(pushLog(Log.Error(path,\"Can't read dir\"+_context2.t0.message,\"Sorry. During process reading dir content occurred a problem\",_context2.t0)));case 34:_context2.prev=34;_context2.next=37;return put(hideLoading());case 37:return _context2.finish(34);case 38:case\"end\":return _context2.stop();}}},_marked2,null,[[11,30,34,38]]);}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/sagas/playlists/reqReadDirSaga.js"],"names":["readDirRequest","handle","get","hideLoading","showLoading","put","select","takeEvery","ACTIONS","pushDirContent","pushLog","getApi","Log","errorParser","PL_LOAD_DIR_REQUEST","getToken","state","user","token","getCurrentSelection","playList","currentSelection","getCurrent","path","action","current","_loaded","callQuery","queries","loadDirContentQl","_id","response","errors","Error","data","dir","isRoot","open","message"],"mappings":"2JAQyBA,c,iDAURC,M,EAlBjB,OAASC,GAAT,KAAoB,eAApB,CACA,OAASC,WAAT,CAAsBC,WAAtB,KAAyC,yBAAzC,CACA,OAASC,GAAT,CAAcC,MAAd,CAAsBC,SAAtB,KAAuC,oBAAvC,CACA,OAASC,OAAT,CAAkBC,cAAlB,CAAkCC,OAAlC,KAAiD,eAAjD,CACA,OAASC,MAAT,KAAuB,0BAAvB,CACA,OAASC,GAAT,KAAoB,6BAApB,CACA,MAAOC,CAAAA,WAAP,KAAwB,6CAAxB,CAEA,cAAe,SAAUb,CAAAA,cAAV,0IACX,MAAMO,CAAAA,SAAS,CAACC,OAAO,CAACM,mBAAT,CAA8Bb,MAA9B,CAAf,CADW,sDAIf,GAAMc,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAAAC,KAAK,QAAIA,CAAAA,KAAK,CAACC,IAAN,CAAWC,KAAf,EAAtB,CAEA,GAAMC,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,CAAAH,KAAK,QAAIA,CAAAA,KAAK,CAACI,QAAN,CAAeC,gBAAnB,EAAjC,CAEA,GAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACN,KAAD,CAAQO,IAAR,QAAiBrB,CAAAA,GAAG,CAACc,KAAK,CAACI,QAAP,CAAiBG,IAAjB,CAApB,EAAnB,CAEA,MAAO,SAAUtB,CAAAA,MAAV,CAAiBuB,MAAjB,0MACGD,IADH,CACU,CAAC,MAAD,CAAS,UAAT,CAAqB,kBAArB,CADV,kBAGW,MAAMjB,CAAAA,MAAM,CAACS,QAAD,CAAZ,CAHX,OAGGG,KAHH,iCAIsB,MAAMZ,CAAAA,MAAM,CAACa,mBAAD,CAAZ,CAJtB,OAIGE,gBAJH,iCAKa,MAAMf,CAAAA,MAAM,CAACgB,UAAD,CAAaD,gBAAb,CAAZ,CALb,OAKGI,OALH,qBAOC,CAACA,OAAO,CAACC,OAAT,EAAoBR,KAPrB,gEASK,MAAMb,CAAAA,GAAG,CAACD,WAAW,EAAZ,CAAT,CATL,gBAUoCO,MAAM,CAAC,YAAD,CAV1C,CAUagB,SAVb,SAUaA,SAVb,CAUwBC,OAVxB,SAUwBA,OAVxB,mBAWoB,MAAMD,CAAAA,SAAS,CAACC,OAAO,CAACC,gBAAR,CAAyBJ,OAAO,CAACK,GAAjC,CAAD,CAAwCZ,KAAxC,CAAf,CAXpB,QAWSa,QAXT,oBAaQA,QAAQ,CAACC,MAbjB,gCAce,IAAIC,CAAAA,KAAJ,CAAU,mCAAoCpB,WAAW,CAACkB,QAAQ,CAACC,MAAV,CAAzD,CAdf,YAiBUD,QAAQ,CAACG,IAAT,CAAcC,GAjBxB,qEAqBWA,GArBX,CAqBiBJ,QAAQ,CAACG,IAAT,CAAcC,GArB/B,CAsBWC,MAtBX,CAsBoB,KAtBpB,mBAwBK,MAAM/B,CAAAA,GAAG,CAACI,cAAc,CAAC0B,GAAD,CAAMC,MAAN,CAAcZ,MAAM,CAACD,IAArB,CAA2BC,MAAM,CAACa,IAAlC,CAAf,CAAT,CAxBL,0BA0BK,MAAMhC,CAAAA,GAAG,CAACK,OAAO,CAAC,GAAIE,CAAAA,GAAJ,CAAQ,oCAAR,CAA8CW,IAA9C,CAAD,CAAR,CAAT,CA1BL,gHA4BK,MAAMlB,CAAAA,GAAG,CAACK,OAAO,CAACE,GAAG,CAACqB,KAAJ,CACdV,IADc,CAEd,iBAAmB,aAAMe,OAFX,CAGd,8DAHc,cAAD,CAAR,CAAT,CA5BL,4CAmCK,MAAMjC,CAAAA,GAAG,CAACF,WAAW,EAAZ,CAAT,CAnCL","sourcesContent":["import { get } from \"lodash/object\";\r\nimport { hideLoading, showLoading } from 'react-redux-loading-bar';\r\nimport { put, select, takeEvery } from \"redux-saga/effects\";\r\nimport { ACTIONS, pushDirContent, pushLog } from \"../../actions\";\r\nimport { getApi } from \"./../../apis/apiProvider\";\r\nimport { Log } from \"./../../utils/logger/logger\";\r\nimport errorParser from \"./../../utils/serverErrorParser/errorParser\";\r\n\r\nexport default function* readDirRequest() {\r\n    yield takeEvery(ACTIONS.PL_LOAD_DIR_REQUEST, handle)\r\n}\r\n\r\nconst getToken = state => state.user.token;\r\n\r\nconst getCurrentSelection = state => state.playList.currentSelection;\r\n\r\nconst getCurrent = (state, path) => get(state.playList, path);\r\n\r\nexport function* handle(action) {\r\n    const path = ['saga', 'playlist', 'request read dir'];\r\n\r\n    const token = yield select(getToken);\r\n    const currentSelection = yield select(getCurrentSelection);\r\n    const current = yield select(getCurrent, currentSelection);\r\n\r\n    if (!current._loaded && token) {\r\n        try {\r\n            yield put(showLoading());\r\n            const { callQuery, queries } = getApi(\"UserAssets\");\r\n            let response = yield callQuery(queries.loadDirContentQl(current._id), token);\r\n\r\n            if(response.errors){\r\n                throw new Error('Server response contains errors '+ errorParser(response.errors))\r\n            }\r\n\r\n            if (!response.data.dir) {\r\n                return;\r\n            }\r\n\r\n            const dir = response.data.dir;\r\n            const isRoot = false;\r\n\r\n            yield put(pushDirContent(dir, isRoot, action.path, action.open));\r\n\r\n            yield put(pushLog(new Log(\"Dir sucessful readed from database\", path)))\r\n        } catch (error) {\r\n            yield put(pushLog(Log.Error(\r\n                path,\r\n                \"Can't read dir\" + error.message,\r\n                \"Sorry. During process reading dir content occurred a problem\",\r\n                error\r\n            )))\r\n        } finally {\r\n            yield put(hideLoading())\r\n        }\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}