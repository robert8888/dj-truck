{"ast":null,"code":"import store from \"./../../../store/\";\nimport { getBeatLength, calcBpm } from \"./../../../../utils/bpm/converter\";\nimport { setPitch, setSync } from \"./../../../../actions\";\nexport default class Synchronizer {\n  constructor(channels) {\n    this.channels = channels;\n    this.dispatch = store.dispatch;\n  }\n\n  getSyncBarPostion(channelName) {\n    const data = this.getSyncData(channelName);\n\n    if (data != null) {\n      const {\n        diff,\n        masterBeatLength\n      } = data;\n      return diff / masterBeatLength;\n    }\n\n    return null;\n  }\n\n  sync(channelName) {\n    console.log(\"sync channel\", channelName);\n    const state = store.getState();\n\n    if (channelName === state.console.master) {\n      //you can't sync master to master\n      this.dispatch(setSync(channelName, false));\n      return;\n    }\n\n    const slaveChannel = this.channels[channelName];\n    const syncData = this.getSyncData(channelName);\n\n    if (!syncData) {\n      this.dispatch(setSync(channelName, false));\n      return;\n    }\n\n    const masterBpm = state.console.channel[state.console.master].track.bpm;\n    const currentMasterPitch = state.console.channel[state.console.master].playBackState.pitch;\n    const slaveBpm = state.console.channel[channelName].track.bpm;\n    const newSlavePitch = (calcBpm(masterBpm, currentMasterPitch) / slaveBpm - 1) * 100;\n    this.dispatch(setPitch(newSlavePitch, channelName));\n    slaveChannel.backend.seekTo(slaveChannel.getCurrentTime() + syncData.diff);\n    slaveChannel.drawer.progress(slaveChannel.backend.getPlayedPercents());\n    slaveChannel.play();\n    this.dispatch(setSync(channelName, false));\n  }\n\n  getSyncData(channelName) {\n    let state = store.getState();\n    if (!state.console.master) return null;\n    const masterChannel = this.channels[state.console.master];\n    const slaveChannel = this.channels[channelName];\n    if (!masterChannel.isPlaying() || !slaveChannel.isPlaying()) return null; // --- stabilization - beacuase :\n    // masterChannel.getCurrentTime() - slaveChannel.getCurrentTime() is not stable as should be\n    // cause of this is calculated average diff and diviation from this diff.\n\n    if (!this.stdDivceDiff[channelName]) {\n      //craete\n      this.stdDivceDiff = { ...this.stdDivceDiff,\n        [channelName]: null\n      }; //set\n\n      this.stdDivceDiff[channelName] = masterChannel.backend.ac.currentTime - slaveChannel.backend.ac.currentTime;\n    }\n\n    const currentDdff = masterChannel.backend.ac.currentTime - slaveChannel.backend.ac.currentTime;\n    this.stdDivceDiff[channelName] = (this.stdDivceDiff[channelName] + currentDdff) / 2;\n    const deviation = this.stdDivceDiff[channelName] - currentDdff; //----------------------\n\n    let masterPosition = masterChannel.getCurrentTime();\n    let slavePosition = slaveChannel.getCurrentTime() + deviation; // console.log(deviation)\n\n    const masterBpm = state.console.channel[state.console.master].track.bpm;\n    const masterBeatLength = getBeatLength(masterBpm);\n    const masterOffset = state.console.channel[state.console.master].playBackState.offset;\n    const slaveBpm = state.console.channel[channelName].track.bpm;\n    const slaveBeatLength = getBeatLength(slaveBpm);\n    const slaveOffset = state.console.channel[channelName].playBackState.offset;\n    const masterBeatPosition = (masterPosition - masterOffset) % masterBeatLength;\n    const slaveBeatPosition = (slavePosition - slaveOffset) % slaveBeatLength;\n    const beatDiff = masterBeatPosition - slaveBeatPosition; //when master track is in the current beat but slave is in the next one \n    //and in invers situation \n\n    const beatDiffEdgeNegative = masterBeatLength - masterBeatPosition + slaveBeatPosition; // slave is overtaking\n\n    const beatDiffEdgePositive = slaveBeatLength + masterBeatPosition - slaveBeatPosition; // slave is delayed\n\n    const min = Math.min(Math.abs(beatDiff), Math.abs(beatDiffEdgeNegative), Math.abs(beatDiffEdgePositive));\n    let diff;\n\n    switch (min) {\n      case Math.abs(beatDiff):\n        {\n          diff = beatDiff;\n          break;\n        }\n\n      case Math.abs(beatDiffEdgeNegative):\n        {\n          diff = -Math.abs(beatDiffEdgeNegative);\n          break;\n        }\n\n      case Math.abs(beatDiffEdgePositive):\n        {\n          diff = Math.abs(beatDiffEdgePositive);\n          break;\n        }\n\n      default:\n        diff = min;\n    }\n\n    return {\n      diff,\n      masterBeatLength\n    };\n  }\n\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/core/console/channels/sync/synchronizer.js"],"names":["store","getBeatLength","calcBpm","setPitch","setSync","Synchronizer","constructor","channels","dispatch","getSyncBarPostion","channelName","data","getSyncData","diff","masterBeatLength","sync","console","log","state","getState","master","slaveChannel","syncData","masterBpm","channel","track","bpm","currentMasterPitch","playBackState","pitch","slaveBpm","newSlavePitch","backend","seekTo","getCurrentTime","drawer","progress","getPlayedPercents","play","masterChannel","isPlaying","stdDivceDiff","ac","currentTime","currentDdff","deviation","masterPosition","slavePosition","masterOffset","offset","slaveBeatLength","slaveOffset","masterBeatPosition","slaveBeatPosition","beatDiff","beatDiffEdgeNegative","beatDiffEdgePositive","min","Math","abs"],"mappings":"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","sourcesContent":["import store from \"./../../../store/\";\r\nimport { getBeatLength, calcBpm } from \"./../../../../utils/bpm/converter\";\r\nimport {setPitch , \r\n        setSync } from \"./../../../../actions\";\r\n\r\nexport default class Synchronizer{\r\n    constructor(channels){\r\n        this.channels = channels;\r\n        this.dispatch = store.dispatch;\r\n    }\r\n\r\n    getSyncBarPostion(channelName) {\r\n        const data = this.getSyncData(channelName);\r\n        if(data != null){\r\n          const {diff, masterBeatLength} = data;\r\n          return diff/masterBeatLength;\r\n        }\r\n        return null;\r\n      }\r\n    \r\n      sync(channelName){\r\n        console.log(\"sync channel\", channelName);\r\n        const state = store.getState();\r\n        if(channelName === state.console.master) { //you can't sync master to master\r\n          this.dispatch(setSync(channelName, false));\r\n          return;\r\n        }\r\n        \r\n        const slaveChannel = this.channels[channelName];\r\n    \r\n        \r\n    \r\n        const syncData = this.getSyncData(channelName);\r\n        if(!syncData){\r\n          this.dispatch(setSync(channelName, false));\r\n          return;\r\n        }\r\n        const masterBpm = state.console.channel[state.console.master].track.bpm;\r\n        const currentMasterPitch = state.console.channel[state.console.master].playBackState.pitch;\r\n        const slaveBpm = state.console.channel[channelName].track.bpm;\r\n        const newSlavePitch = ((calcBpm(masterBpm, currentMasterPitch) / slaveBpm) - 1) * 100;\r\n        this.dispatch(setPitch(newSlavePitch, channelName));\r\n    \r\n        slaveChannel.backend.seekTo(slaveChannel.getCurrentTime() + syncData.diff);\r\n        slaveChannel.drawer.progress(slaveChannel.backend.getPlayedPercents());\r\n        slaveChannel.play();\r\n    \r\n        this.dispatch(setSync(channelName, false));\r\n      }\r\n    \r\n      getSyncData(channelName) {\r\n        let state = store.getState();\r\n        if (!state.console.master) return null;\r\n    \r\n        const masterChannel = this.channels[state.console.master];\r\n        const slaveChannel = this.channels[channelName];\r\n        if (!masterChannel.isPlaying() || !slaveChannel.isPlaying()) return null;\r\n    \r\n        // --- stabilization - beacuase :\r\n        // masterChannel.getCurrentTime() - slaveChannel.getCurrentTime() is not stable as should be\r\n        // cause of this is calculated average diff and diviation from this diff.\r\n        if(!this.stdDivceDiff[channelName]){\r\n            //craete\r\n            this.stdDivceDiff = {...this.stdDivceDiff, [channelName] : null}\r\n            //set\r\n            this.stdDivceDiff[channelName] = masterChannel.backend.ac.currentTime \r\n                                           - slaveChannel.backend.ac.currentTime;\r\n        }\r\n    \r\n        const currentDdff = masterChannel.backend.ac.currentTime \r\n                          - slaveChannel.backend.ac.currentTime;\r\n    \r\n        this.stdDivceDiff[channelName] = ( this.stdDivceDiff[channelName] + currentDdff )  / 2; \r\n    \r\n        const deviation = this.stdDivceDiff[channelName] - currentDdff;\r\n        //----------------------\r\n    \r\n        let masterPosition = masterChannel.getCurrentTime();\r\n        let slavePosition = slaveChannel.getCurrentTime() + deviation;\r\n       // console.log(deviation)\r\n    \r\n        const masterBpm = state.console.channel[state.console.master].track.bpm;\r\n        const masterBeatLength = getBeatLength(masterBpm);\r\n        const masterOffset = state.console.channel[state.console.master].playBackState.offset;\r\n    \r\n        const slaveBpm = state.console.channel[channelName].track.bpm;\r\n        const slaveBeatLength = getBeatLength(slaveBpm);\r\n        const slaveOffset = state.console.channel[channelName].playBackState.offset;\r\n    \r\n        const masterBeatPosition = (masterPosition - masterOffset) % masterBeatLength ;\r\n        const slaveBeatPosition = (slavePosition - slaveOffset) % slaveBeatLength ;\r\n    \r\n        const beatDiff = masterBeatPosition - slaveBeatPosition;\r\n        \r\n        //when master track is in the current beat but slave is in the next one \r\n        //and in invers situation \r\n        const beatDiffEdgeNegative = masterBeatLength \r\n                                   - masterBeatPosition \r\n                                   + slaveBeatPosition; // slave is overtaking\r\n        const beatDiffEdgePositive = slaveBeatLength \r\n                                   + masterBeatPosition \r\n                                   - slaveBeatPosition ; // slave is delayed\r\n    \r\n        const min = Math.min(Math.abs(beatDiff), \r\n                             Math.abs(beatDiffEdgeNegative), \r\n                             Math.abs(beatDiffEdgePositive))\r\n    \r\n        let diff;\r\n        switch(min){\r\n            case Math.abs(beatDiff): {\r\n                diff =  beatDiff;\r\n                break;\r\n            }\r\n            case Math.abs(beatDiffEdgeNegative): {\r\n                diff = - Math.abs(beatDiffEdgeNegative);\r\n                break;\r\n            }\r\n            case Math.abs(beatDiffEdgePositive): {\r\n                diff = Math.abs(beatDiffEdgePositive);\r\n                break;\r\n            }\r\n            default : diff = min;\r\n        }\r\n    \r\n        return {\r\n          diff,\r\n          masterBeatLength,\r\n        }\r\n      }\r\n    \r\n}"]},"metadata":{},"sourceType":"module"}