{"ast":null,"code":"import store from \"./../../../../store/\";\nimport { getBeatLength, calcBpm } from \"./../../../../utils/bpm/converter\";\nimport { setPitch, setSync } from \"./../../../../actions\";\nexport default class Synchronizer {\n  constructor(channels) {\n    this.channels = channels;\n    this.dispatch = store.dispatch;\n  }\n\n  getSyncBarPostion(channelName) {\n    const data = this.getSyncData(channelName);\n\n    if (data != null) {\n      const {\n        diff,\n        masterBeatLength\n      } = data;\n      return diff / masterBeatLength;\n    }\n\n    return null;\n  }\n\n  sync(channelName) {\n    console.log(\"sync channel\", channelName);\n    const state = store.getState();\n\n    if (channelName === state.console.master) {\n      //you can't sync master to master\n      this.dispatch(setSync(channelName, false));\n      return;\n    }\n\n    const slaveChannel = this.channels.getChannel(channelName);\n    const syncData = this.getSyncData(channelName);\n\n    if (!syncData) {\n      this.dispatch(setSync(channelName, false));\n      return;\n    }\n\n    const masterBpm = state.console.channel[state.console.master].track.bpm;\n    const currentMasterPitch = state.console.channel[state.console.master].playBackState.pitch;\n    const slaveBpm = state.console.channel[channelName].track.bpm;\n    const newSlavePitch = (calcBpm(masterBpm, currentMasterPitch) / slaveBpm - 1) * 100;\n    this.dispatch(setPitch(newSlavePitch, channelName));\n    slaveChannel.backend.seekTo(slaveChannel.getCurrentTime() + syncData.diff);\n    slaveChannel.drawer.progress(slaveChannel.backend.getPlayedPercents());\n    slaveChannel.play();\n    this.dispatch(setSync(channelName, false));\n  }\n\n  getSyncData(channelName) {\n    let state = store.getState();\n    if (!state.console.master) return null;\n    const masterChannel = this.channels[state.console.master];\n    const slaveChannel = this.channels.getChannel(channelName);\n    if (!masterChannel.isPlaying() || !slaveChannel.isPlaying()) return null; // --- stabilization - beacuase :\n    // masterChannel.getCurrentTime() - slaveChannel.getCurrentTime() is not stable as should be\n    // cause of this is calculated average diff and diviation from this diff.\n\n    if (!this.stdDivceDiff[channelName]) {\n      //craete\n      this.stdDivceDiff = { ...this.stdDivceDiff,\n        [channelName]: null\n      }; //set\n\n      this.stdDivceDiff[channelName] = masterChannel.backend.ac.currentTime - slaveChannel.backend.ac.currentTime;\n    }\n\n    const currentDdff = masterChannel.backend.ac.currentTime - slaveChannel.backend.ac.currentTime;\n    this.stdDivceDiff[channelName] = (this.stdDivceDiff[channelName] + currentDdff) / 2;\n    const deviation = this.stdDivceDiff[channelName] - currentDdff; //----------------------\n\n    let masterPosition = masterChannel.getCurrentTime();\n    let slavePosition = slaveChannel.getCurrentTime() + deviation;\n    const masterBpm = state.console.channel[state.console.master].track.bpm;\n    const masterBeatLength = getBeatLength(masterBpm);\n    const masterOffset = state.console.channel[state.console.master].playBackState.offset;\n    const slaveBpm = state.console.channel[channelName].track.bpm;\n    const slaveBeatLength = getBeatLength(slaveBpm);\n    const slaveOffset = state.console.channel[channelName].playBackState.offset;\n    const masterBeatPosition = (masterPosition - masterOffset) % masterBeatLength;\n    const slaveBeatPosition = (slavePosition - slaveOffset) % slaveBeatLength;\n    const beatDiff = masterBeatPosition - slaveBeatPosition; //when master track is in the current beat but slave is in the next one\n    //and in invers situation\n\n    const beatDiffEdgeNegative = masterBeatLength - masterBeatPosition + slaveBeatPosition; // slave is overtaking\n\n    const beatDiffEdgePositive = slaveBeatLength + masterBeatPosition - slaveBeatPosition; // slave is delayed\n\n    const min = Math.min(Math.abs(beatDiff), Math.abs(beatDiffEdgeNegative), Math.abs(beatDiffEdgePositive));\n    let diff;\n\n    switch (min) {\n      case Math.abs(beatDiff):\n        {\n          diff = beatDiff;\n          break;\n        }\n\n      case Math.abs(beatDiffEdgeNegative):\n        {\n          diff = -Math.abs(beatDiffEdgeNegative);\n          break;\n        }\n\n      case Math.abs(beatDiffEdgePositive):\n        {\n          diff = Math.abs(beatDiffEdgePositive);\n          break;\n        }\n\n      default:\n        diff = min;\n    }\n\n    return {\n      diff,\n      masterBeatLength\n    };\n  }\n\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/core/console/channels/sync/synchronizer.js"],"names":["store","getBeatLength","calcBpm","setPitch","setSync","Synchronizer","constructor","channels","dispatch","getSyncBarPostion","channelName","data","getSyncData","diff","masterBeatLength","sync","console","log","state","getState","master","slaveChannel","getChannel","syncData","masterBpm","channel","track","bpm","currentMasterPitch","playBackState","pitch","slaveBpm","newSlavePitch","backend","seekTo","getCurrentTime","drawer","progress","getPlayedPercents","play","masterChannel","isPlaying","stdDivceDiff","ac","currentTime","currentDdff","deviation","masterPosition","slavePosition","masterOffset","offset","slaveBeatLength","slaveOffset","masterBeatPosition","slaveBeatPosition","beatDiff","beatDiffEdgeNegative","beatDiffEdgePositive","min","Math","abs"],"mappings":"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","sourcesContent":["import store from \"./../../../../store/\";\r\nimport { getBeatLength, calcBpm } from \"./../../../../utils/bpm/converter\";\r\nimport { setPitch, setSync } from \"./../../../../actions\";\r\n\r\nexport default class Synchronizer {\r\n  constructor(channels) {\r\n    this.channels = channels;\r\n    this.dispatch = store.dispatch;\r\n  }\r\n\r\n  getSyncBarPostion(channelName) {\r\n    const data = this.getSyncData(channelName);\r\n    if (data != null) {\r\n      const { diff, masterBeatLength } = data;\r\n      return diff / masterBeatLength;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  sync(channelName) {\r\n    console.log(\"sync channel\", channelName);\r\n    const state = store.getState();\r\n    if (channelName === state.console.master) {\r\n      //you can't sync master to master\r\n      this.dispatch(setSync(channelName, false));\r\n      return;\r\n    }\r\n\r\n    const slaveChannel = this.channels.getChannel(channelName);\r\n\r\n    const syncData = this.getSyncData(channelName);\r\n    if (!syncData) {\r\n      this.dispatch(setSync(channelName, false));\r\n      return;\r\n    }\r\n    const masterBpm = state.console.channel[state.console.master].track.bpm;\r\n    const currentMasterPitch = \r\n        state.console.channel[state.console.master].playBackState.pitch;\r\n    const slaveBpm = state.console.channel[channelName].track.bpm;\r\n    const newSlavePitch = \r\n        (calcBpm(masterBpm, currentMasterPitch) / slaveBpm - 1) * 100;\r\n    this.dispatch(setPitch(newSlavePitch, channelName));\r\n\r\n    slaveChannel.backend.seekTo(slaveChannel.getCurrentTime() + syncData.diff);\r\n    slaveChannel.drawer.progress(slaveChannel.backend.getPlayedPercents());\r\n    slaveChannel.play();\r\n\r\n    this.dispatch(setSync(channelName, false));\r\n  }\r\n\r\n  getSyncData(channelName) {\r\n    let state = store.getState();\r\n    if (!state.console.master) return null;\r\n\r\n    const masterChannel = this.channels[state.console.master];\r\n    const slaveChannel = this.channels.getChannel(channelName);\r\n    if (!masterChannel.isPlaying() || !slaveChannel.isPlaying()) return null;\r\n\r\n    // --- stabilization - beacuase :\r\n    // masterChannel.getCurrentTime() - slaveChannel.getCurrentTime() is not stable as should be\r\n    // cause of this is calculated average diff and diviation from this diff.\r\n    if (!this.stdDivceDiff[channelName]) {\r\n      //craete\r\n      this.stdDivceDiff = { ...this.stdDivceDiff, [channelName]: null };\r\n      //set\r\n      this.stdDivceDiff[channelName] = masterChannel.backend.ac.currentTime \r\n                                     - slaveChannel.backend.ac.currentTime;\r\n    }\r\n\r\n    const currentDdff = \r\n      masterChannel.backend.ac.currentTime - slaveChannel.backend.ac.currentTime;\r\n\r\n    this.stdDivceDiff[channelName] =\r\n      (this.stdDivceDiff[channelName] + currentDdff) / 2;\r\n\r\n    const deviation = this.stdDivceDiff[channelName] - currentDdff;\r\n    //----------------------\r\n\r\n    let masterPosition = masterChannel.getCurrentTime();\r\n    let slavePosition = slaveChannel.getCurrentTime() + deviation;\r\n\r\n    const masterBpm = state.console.channel[state.console.master].track.bpm;\r\n    const masterBeatLength = getBeatLength(masterBpm);\r\n    const masterOffset = \r\n      state.console.channel[state.console.master].playBackState.offset;\r\n\r\n    const slaveBpm = state.console.channel[channelName].track.bpm;\r\n    const slaveBeatLength = getBeatLength(slaveBpm);\r\n    const slaveOffset = \r\n      state.console.channel[channelName].playBackState.offset;\r\n\r\n    const masterBeatPosition =(masterPosition - masterOffset) \r\n                             % masterBeatLength;\r\n\r\n    const slaveBeatPosition =(slavePosition - slaveOffset) \r\n                            % slaveBeatLength;\r\n\r\n    const beatDiff = masterBeatPosition - slaveBeatPosition;\r\n\r\n    //when master track is in the current beat but slave is in the next one\r\n    //and in invers situation\r\n    const beatDiffEdgeNegative = masterBeatLength \r\n                               - masterBeatPosition \r\n                               + slaveBeatPosition; // slave is overtaking\r\n\r\n    const beatDiffEdgePositive = slaveBeatLength \r\n                               + masterBeatPosition \r\n                               - slaveBeatPosition; // slave is delayed\r\n\r\n    const min = Math.min(\r\n      Math.abs(beatDiff),\r\n      Math.abs(beatDiffEdgeNegative),\r\n      Math.abs(beatDiffEdgePositive)\r\n    );\r\n\r\n    let diff;\r\n    switch (min) {\r\n      case Math.abs(beatDiff): {\r\n        diff = beatDiff;\r\n        break;\r\n      }\r\n      case Math.abs(beatDiffEdgeNegative): {\r\n        diff = -Math.abs(beatDiffEdgeNegative);\r\n        break;\r\n      }\r\n      case Math.abs(beatDiffEdgePositive): {\r\n        diff = Math.abs(beatDiffEdgePositive);\r\n        break;\r\n      }\r\n      default:\r\n        diff = min;\r\n    }\r\n\r\n    return {\r\n      diff,\r\n      masterBeatLength\r\n    };\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}