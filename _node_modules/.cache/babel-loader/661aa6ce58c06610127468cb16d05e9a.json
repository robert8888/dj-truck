{"ast":null,"code":"import _classCallCheck from\"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _possibleConstructorReturn from\"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";import _createClass from\"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _inherits from\"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import Effect from\"./../effect\";var Distortion=/*#__PURE__*/function(_Effect){_inherits(Distortion,_Effect);_createClass(Distortion,null,[{key:\"defaultParams\",value:function defaultParams(){return{params:{gain:{min:0,max:100,defaultValue:10,type:\"float\",description:\"gain\"}}};}}]);function Distortion(context,params){var _this;_classCallCheck(this,Distortion);_this=_possibleConstructorReturn(this,_getPrototypeOf(Distortion).call(this));_this._context=context;_this._default=Distortion.defaultParams().params;_this._buildNodes(context);_this._initParams(params);return _this;}_createClass(Distortion,[{key:\"_buildNodes\",value:function _buildNodes(){this.waveShaperNode=this._context.createWaveShaper();this.inputNode=this.outputNode=this.waveShaperNode;}},{key:\"_adjustGain\",value:function _adjustGain(){var gain=this.gain;var n_samples=44100;var curve=new Float32Array(n_samples);var deg=Math.PI/180;var x;for(var i=0;i<n_samples;++i){x=i*2/n_samples-1;curve[i]=(3+gain)*x*20*deg/(Math.PI+gain*Math.abs(x));}this.waveShaperNode.curve=curve;}},{key:\"name\",get:function get(){return\"Distortion\";}},{key:\"gain\",get:function get(){return this._gain;},set:function set(value){value=this._valueToRange(value,\"gain\");this._gain=value;this._adjustGain();}}]);return Distortion;}(Effect);export{Distortion as default};","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/pages/console/core/console/effector/effects/distortion/distortion.js"],"names":["Effect","Distortion","params","gain","min","max","defaultValue","type","description","context","_context","_default","defaultParams","_buildNodes","_initParams","waveShaperNode","createWaveShaper","inputNode","outputNode","n_samples","curve","Float32Array","deg","Math","PI","x","i","abs","_gain","value","_valueToRange","_adjustGain"],"mappings":"wkBAAA,MAAOA,CAAAA,MAAP,KAAmB,aAAnB,C,GAEqBC,CAAAA,U,+IAEK,CAClB,MAAO,CACHC,MAAM,CAAG,CACLC,IAAI,CAAE,CACFC,GAAG,CAAE,CADH,CAEFC,GAAG,CAAE,GAFH,CAGFC,YAAY,CAAE,EAHZ,CAIFC,IAAI,CAAE,OAJJ,CAKFC,WAAW,CAAG,MALZ,CADD,CADN,CAAP,CAWH,C,IAED,oBAAYC,OAAZ,CAAqBP,MAArB,CAA4B,4CACxB,8EACA,MAAKQ,QAAL,CAAgBD,OAAhB,CACA,MAAKE,QAAL,CAAgBV,UAAU,CAACW,aAAX,GAA2BV,MAA3C,CAEA,MAAKW,WAAL,CAAiBJ,OAAjB,EACA,MAAKK,WAAL,CAAiBZ,MAAjB,EANwB,aAO3B,C,wEAEY,CACT,KAAKa,cAAL,CAAsB,KAAKL,QAAL,CAAcM,gBAAd,EAAtB,CACA,KAAKC,SAAL,CAAiB,KAAKC,UAAL,CAAkB,KAAKH,cAAxC,CACH,C,iDAgBa,CACV,GAAIZ,CAAAA,IAAI,CAAG,KAAKA,IAAhB,CACA,GAAIgB,CAAAA,SAAS,CAAG,KAAhB,CACA,GAAIC,CAAAA,KAAK,CAAG,GAAIC,CAAAA,YAAJ,CAAiBF,SAAjB,CAAZ,CACA,GAAIG,CAAAA,GAAG,CAAGC,IAAI,CAACC,EAAL,CAAU,GAApB,CACA,GAAIC,CAAAA,CAAJ,CAEA,IAAK,GAAIC,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGP,SAApB,CAA+B,EAAEO,CAAjC,CAAqC,CACjCD,CAAC,CAAGC,CAAC,CAAG,CAAJ,CAAQP,SAAR,CAAoB,CAAxB,CACAC,KAAK,CAACM,CAAD,CAAL,CAAW,CAAC,EAAIvB,IAAL,EAAasB,CAAb,CAAiB,EAAjB,CAAsBH,GAAtB,EAA6BC,IAAI,CAACC,EAAL,CAAUrB,IAAI,CAAGoB,IAAI,CAACI,GAAL,CAASF,CAAT,CAA9C,CAAX,CACH,CAED,KAAKV,cAAL,CAAoBK,KAApB,CAA4BA,KAA5B,CACH,C,gCA3BS,CACN,MAAO,YAAP,CACH,C,gCAES,CACN,MAAO,MAAKQ,KAAZ,CACH,C,kBAEQC,K,CAAM,CACXA,KAAK,CAAG,KAAKC,aAAL,CAAmBD,KAAnB,CAA0B,MAA1B,CAAR,CACA,KAAKD,KAAL,CAAaC,KAAb,CACA,KAAKE,WAAL,GACH,C,wBA1CmC/B,M,SAAnBC,U","sourcesContent":["import Effect from \"./../effect\";\r\n\r\nexport default class Distortion extends Effect {\r\n\r\n    static defaultParams(){\r\n        return {\r\n            params : {\r\n                gain: {\r\n                    min: 0,\r\n                    max: 100,\r\n                    defaultValue: 10,\r\n                    type: \"float\",\r\n                    description : \"gain\"\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    constructor(context, params){\r\n        super();\r\n        this._context = context;\r\n        this._default = Distortion.defaultParams().params;\r\n\r\n        this._buildNodes(context);\r\n        this._initParams(params);\r\n    }\r\n\r\n    _buildNodes(){\r\n        this.waveShaperNode = this._context.createWaveShaper();\r\n        this.inputNode = this.outputNode = this.waveShaperNode;\r\n    }\r\n\r\n    get name(){\r\n        return \"Distortion\"\r\n    }\r\n\r\n    get gain(){\r\n        return this._gain;\r\n    }\r\n\r\n    set gain(value){\r\n        value = this._valueToRange(value, \"gain\");\r\n        this._gain = value;\r\n        this._adjustGain();\r\n    }\r\n\r\n    _adjustGain() {\r\n        let gain = this.gain;\r\n        let n_samples = 44100;\r\n        let curve = new Float32Array(n_samples);\r\n        let deg = Math.PI / 180;\r\n        let x;\r\n\r\n        for (let i = 0; i < n_samples; ++i ) {\r\n            x = i * 2 / n_samples - 1;\r\n            curve[i] = (3 + gain) * x * 20 * deg / (Math.PI + gain * Math.abs(x));\r\n        }\r\n\r\n        this.waveShaperNode.curve = curve;\r\n    }\r\n\t\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}