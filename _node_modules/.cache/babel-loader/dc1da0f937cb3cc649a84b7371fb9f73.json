{"ast":null,"code":"import { useMemo, useState, useEffect, useCallback } from \"react\";\nimport { getApi } from \"./../../../apis/apiProvider\";\nimport { PLAYBACK_STATE } from \"./usePlabackState\"; //getRecordUrl\n\nclass PlayerControler {\n  constructor() {\n    this.progressUpdaterHandler = null;\n    this.current = {\n      id: null,\n      start: 0,\n      duration: 0,\n      progress: 0,\n      state: null,\n      buffered: 0\n    };\n    this.btnStateHandlers = {};\n    this.progressWatchers = {};\n    this.bufferedWatchers = [];\n    this.progressProviders = {};\n    this.currentWatchers = [];\n  }\n\n  setCurrent(nextCurrent) {\n    this.current = nextCurrent;\n    this.spreadCurrentChange();\n  }\n\n  addCurrentWatcher(handler) {\n    this.currentWatchers.push(handler);\n  }\n\n  spreadCurrentChange() {\n    for (let handler of this.currentWatchers) {\n      handler(this.current);\n    }\n  } //--------------\n\n\n  addBtnCtrlHandler(id, handler) {\n    this.btnStateHandlers[id] = handler;\n  }\n\n  setBtnState(id, state) {\n    this.btnStateHandlers[id](state);\n  } //----------------------\n\n\n  addProgressWatcher(id, handler) {\n    if (this.progressWatchers[id]) {\n      this.progressWatchers[id].push(handler);\n    } else {\n      this.progressWatchers[id] = [handler];\n    }\n  }\n\n  setProgress(id, progress) {\n    for (let handler of [...this.progressWatchers[id], ...this.progressWatchers['#']]) {\n      handler(progress);\n    }\n\n    this.current.progress = progress;\n  } //-------------------\n\n\n  addProgressProvider(id, handler) {\n    this.progressProviders[id] = handler;\n  }\n\n  getProgress(id) {\n    if (!id) {\n      return this.getProgress(this.current.id);\n    }\n\n    return this.progressProviders[id]();\n  } // ---------------\n\n\n  setBuffered(buffered) {\n    if (this.current.id) {\n      this.current.buffered = buffered;\n    }\n\n    this.spreadBufferChanges();\n  }\n\n  addBuffredWatcher(handel) {\n    this.bufferedWatchers.push(handel);\n  }\n\n  spreadBufferChanges() {\n    for (let handler of this.bufferedWatchers) {\n      handler(this.current.buffered);\n    }\n  }\n\n}\n\nexport function useRecordPlayer() {\n  const [mediaElement, setMediaElement] = useState(null); // const ctr = useContext(PlayerContext);\n\n  const [ctr, _] = useState(new PlayerControler());\n  const api = useMemo(() => {\n    return getApi('RecordsStore');\n  }, [getApi]);\n  useEffect(() => {\n    const medEl = document.createElement('audio');\n    setMediaElement(medEl);\n    ctr.mediaElement = medEl;\n  }, [setMediaElement, ctr]);\n  const startUpdateProg = useCallback(() => {\n    const handler = setInterval(() => {\n      const progress = mediaElement.currentTime / (ctr.current.duration / 1000);\n      ctr.setProgress(ctr.current.id, progress); //--\n\n      const bufferdTimeRanges = mediaElement.buffered;\n\n      if (bufferdTimeRanges.length) {\n        const end = bufferdTimeRanges.end(bufferdTimeRanges.length - 1);\n        ctr.setBuffered(end / (ctr.current.duration / 1000));\n      }\n    }, 200);\n    ctr.progressUpdaterHandler = handler;\n  }, [mediaElement, ctr]);\n  const stopUpdateProg = useCallback(() => {\n    clearInterval(ctr.progressUpdaterHandler);\n  }, [ctr]);\n  useEffect(() => {\n    if (mediaElement) {\n      mediaElement.addEventListener(\"ended\", () => {\n        if (ctr.current.state === PLAYBACK_STATE.PLAY) {\n          ctr.setCurrent({ ...ctr.current,\n            state: PLAYBACK_STATE.PAUSE\n          });\n          ctr.setBtnState(ctr.current.id, PLAYBACK_STATE.PAUSE);\n        }\n\n        stopUpdateProg();\n      });\n      mediaElement.addEventListener('progress', () => {\n        const bufferdTimeRanges = mediaElement.buffered;\n\n        if (bufferdTimeRanges.length) {\n          const end = bufferdTimeRanges.end(bufferdTimeRanges.length - 1);\n          ctr.setBuffered(end / (ctr.current.duration / 1000));\n        }\n      });\n    }\n  }, [mediaElement, ctr]);\n  const playback = useCallback((id, pbState) => {\n    if (pbState === PLAYBACK_STATE.PLAY) {\n      const {\n        progress,\n        duration\n      } = ctr.getProgress(id);\n      const position = duration / 1000 * progress;\n      mediaElement.src = api.getRecordUrl(id);\n      mediaElement.currentTime = position;\n      mediaElement.play();\n\n      if (ctr.current.id) {\n        ctr.setBtnState(ctr.current.id, PLAYBACK_STATE.PAUSE);\n      }\n\n      ctr.setCurrent({\n        id,\n        duration,\n        progress: progress,\n        buffered: 0,\n        state: PLAYBACK_STATE.PLAY\n      });\n      startUpdateProg();\n    } else if (pbState === PLAYBACK_STATE.PAUSE) {\n      mediaElement.pause();\n      ctr.setCurrent({ ...ctr.current,\n        state: PLAYBACK_STATE.PAUSE\n      });\n      stopUpdateProg();\n    }\n  }, [mediaElement, api, ctr, stopUpdateProg, startUpdateProg]);\n  const seek = useCallback(({\n    id,\n    progress,\n    duration\n  }) => {\n    const media = mediaElement || ctr.mediaElement;\n    console.log(\"progress\", progress);\n\n    if (!id && ctr.current.id) {\n      id = ctr.current.id;\n      duration = ctr.current.duration;\n    }\n\n    if (ctr.current.id && ctr.current.id !== id) {\n      ctr.setBtnState(ctr.current.id, PLAYBACK_STATE.PAUSE);\n    }\n\n    const position = duration / 1000 * progress;\n    console.log(progress, position);\n    stopUpdateProg();\n\n    if (ctr.current.id !== id) {\n      media.src = api.getRecordUrl(id);\n      media.currentTime = position;\n      ctr.setBtnState(id, PLAYBACK_STATE.PLAY);\n      ctr.setProgress(id, progress);\n      ctr.setCurrent({ ...ctr.current,\n        id,\n        duration,\n        state: PLAYBACK_STATE.PLAY\n      });\n    }\n\n    media.currentTime = position;\n\n    if (media.pause) {\n      media.play();\n      ctr.setBtnState(ctr.current.id, PLAYBACK_STATE.PLAY);\n      ctr.setCurrent({ ...ctr.current,\n        state: PLAYBACK_STATE.PLAY\n      });\n    }\n\n    startUpdateProg();\n  }, [ctr, api, mediaElement, stopUpdateProg, startUpdateProg]);\n  return [playback, seek, ctr];\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/pages/common/Hooks/useRecordPlayer.js"],"names":["useMemo","useState","useEffect","useCallback","getApi","PLAYBACK_STATE","PlayerControler","progressUpdaterHandler","current","id","start","duration","progress","state","buffered","btnStateHandlers","progressWatchers","bufferedWatchers","progressProviders","currentWatchers","setCurrent","nextCurrent","spreadCurrentChange","addCurrentWatcher","handler","push","addBtnCtrlHandler","setBtnState","addProgressWatcher","setProgress","addProgressProvider","getProgress","setBuffered","spreadBufferChanges","addBuffredWatcher","handel","useRecordPlayer","mediaElement","setMediaElement","ctr","_","api","medEl","document","createElement","startUpdateProg","setInterval","currentTime","bufferdTimeRanges","length","end","stopUpdateProg","clearInterval","addEventListener","PLAY","PAUSE","playback","pbState","position","src","getRecordUrl","play","pause","seek","media","console","log"],"mappings":"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","sourcesContent":["import { useMemo, useState, useEffect, useCallback } from \"react\"\r\nimport { getApi } from \"./../../../apis/apiProvider\";\r\nimport { PLAYBACK_STATE } from \"./usePlabackState\";\r\n\r\n//getRecordUrl\r\nclass PlayerControler {\r\n    progressUpdaterHandler = null;\r\n\r\n    current = {\r\n        id: null,\r\n        start: 0,\r\n        duration: 0,\r\n        progress: 0,\r\n        state: null,\r\n        buffered: 0,\r\n    };\r\n\r\n    btnStateHandlers = {}\r\n    progressWatchers = {}\r\n    bufferedWatchers = []\r\n    progressProviders = {};\r\n    currentWatchers = [];\r\n\r\n    setCurrent(nextCurrent){\r\n        this.current = nextCurrent;\r\n        this.spreadCurrentChange();\r\n    }\r\n\r\n    addCurrentWatcher(handler){\r\n        this.currentWatchers.push(handler)\r\n    }\r\n\r\n\r\n    spreadCurrentChange(){\r\n        for(let handler of this.currentWatchers){\r\n            handler(this.current);\r\n        }\r\n    }\r\n    //--------------\r\n\r\n    addBtnCtrlHandler(id, handler) {\r\n        this.btnStateHandlers[id] = handler;\r\n    }\r\n\r\n    setBtnState(id, state) {\r\n        this.btnStateHandlers[id](state)\r\n    }\r\n\r\n    //----------------------\r\n\r\n    addProgressWatcher(id, handler) {\r\n        if (this.progressWatchers[id]) {\r\n            this.progressWatchers[id].push(handler);\r\n            \r\n        } else{\r\n            this.progressWatchers[id] = [handler];\r\n        }\r\n    }\r\n\r\n    setProgress(id, progress) {\r\n        for (let handler of \r\n            [...this.progressWatchers[id], \r\n             ...this.progressWatchers['#']]) {\r\n            handler(progress)\r\n        }\r\n        this.current.progress = progress;\r\n    }\r\n\r\n    //-------------------\r\n\r\n    addProgressProvider(id, handler) {\r\n        this.progressProviders[id] = handler;\r\n    }\r\n\r\n    getProgress(id) {\r\n        if(!id){\r\n            return this.getProgress(this.current.id);\r\n        }\r\n        return this.progressProviders[id]();\r\n    }\r\n\r\n    // ---------------\r\n    setBuffered(buffered){\r\n        if(this.current.id){\r\n            this.current.buffered = buffered;\r\n        }\r\n        this.spreadBufferChanges();\r\n    }\r\n\r\n    addBuffredWatcher(handel){\r\n        this.bufferedWatchers.push(handel)\r\n    }\r\n\r\n    spreadBufferChanges(){\r\n        for(let handler of this.bufferedWatchers){\r\n            handler(this.current.buffered);\r\n        }\r\n    }\r\n    \r\n}\r\n\r\n\r\nexport function useRecordPlayer() {\r\n    const [mediaElement, setMediaElement] = useState(null);\r\n    // const ctr = useContext(PlayerContext);\r\n    const [ctr, _] = useState(new PlayerControler())\r\n\r\n    const api = useMemo(() => {\r\n        return getApi('RecordsStore');\r\n    }, [getApi])\r\n\r\n    useEffect(() => {\r\n        const medEl = document.createElement('audio');\r\n        setMediaElement(medEl);\r\n        ctr.mediaElement = medEl;\r\n    }, [setMediaElement, ctr])\r\n\r\n    const startUpdateProg = useCallback(() => {\r\n        const handler = setInterval(() => {\r\n            const progress = mediaElement.currentTime / (ctr.current.duration / 1000);\r\n            ctr.setProgress(ctr.current.id, progress);\r\n            //--\r\n            const bufferdTimeRanges = mediaElement.buffered;\r\n            if(bufferdTimeRanges.length){\r\n                const end = bufferdTimeRanges.end(bufferdTimeRanges.length-1);\r\n                ctr.setBuffered(end / (ctr.current.duration / 1000))\r\n            } \r\n        }, 200)\r\n        ctr.progressUpdaterHandler = handler;\r\n    }, [mediaElement, ctr])\r\n\r\n    const stopUpdateProg = useCallback(() => {\r\n        clearInterval(ctr.progressUpdaterHandler);\r\n    }, [ctr])\r\n\r\n    useEffect(()=>{\r\n        if(mediaElement){\r\n            mediaElement.addEventListener(\"ended\", ()=>{\r\n                if(ctr.current.state === PLAYBACK_STATE.PLAY){\r\n                    ctr.setCurrent({\r\n                        ...ctr.current,\r\n                        state : PLAYBACK_STATE.PAUSE,\r\n                    })\r\n                    ctr.setBtnState(ctr.current.id, PLAYBACK_STATE.PAUSE)\r\n                }\r\n                stopUpdateProg();\r\n            })\r\n            mediaElement.addEventListener('progress', ()=>{\r\n                const bufferdTimeRanges = mediaElement.buffered;\r\n                if(bufferdTimeRanges.length){\r\n                    const end = bufferdTimeRanges.end(bufferdTimeRanges.length-1);\r\n                    ctr.setBuffered(end / (ctr.current.duration / 1000))\r\n                } \r\n            })\r\n        }\r\n    }, [mediaElement, ctr])\r\n\r\n    const playback = useCallback((id, pbState) => {\r\n        if (pbState === PLAYBACK_STATE.PLAY) {\r\n            const { progress, duration } = ctr.getProgress(id);\r\n            const position = (duration / 1000) * progress;\r\n            mediaElement.src = api.getRecordUrl(id);\r\n            mediaElement.currentTime = position;\r\n            mediaElement.play();\r\n            if (ctr.current.id) {\r\n                ctr.setBtnState(ctr.current.id, PLAYBACK_STATE.PAUSE)\r\n            }\r\n            ctr.setCurrent({\r\n                id,\r\n                duration,\r\n                progress: progress,\r\n                buffered: 0,\r\n                state: PLAYBACK_STATE.PLAY,\r\n            })\r\n            startUpdateProg()\r\n        } else if (pbState === PLAYBACK_STATE.PAUSE) {\r\n            mediaElement.pause();\r\n            ctr.setCurrent({\r\n                ...ctr.current,\r\n                state: PLAYBACK_STATE.PAUSE\r\n            })\r\n            stopUpdateProg();\r\n        }\r\n    }, [\r\n        mediaElement,\r\n        api,\r\n        ctr,\r\n        stopUpdateProg,\r\n        startUpdateProg,\r\n    ])\r\n\r\n    const seek = useCallback(({ id, progress, duration }) => {\r\n        const media = mediaElement || ctr.mediaElement\r\n        console.log(\"progress\", progress)\r\n\r\n        if(!id && ctr.current.id){\r\n            id = ctr.current.id;\r\n            duration = ctr.current.duration;\r\n        }\r\n\r\n        if (ctr.current.id && ctr.current.id !== id) {\r\n            ctr.setBtnState(ctr.current.id, PLAYBACK_STATE.PAUSE);\r\n        }\r\n        const position = (duration / 1000) * progress;\r\n        console.log(progress, position)\r\n\r\n        stopUpdateProg();\r\n        if (ctr.current.id !== id) {\r\n            media.src = api.getRecordUrl(id);\r\n            media.currentTime = position;\r\n            ctr.setBtnState(id, PLAYBACK_STATE.PLAY);\r\n            ctr.setProgress(id, progress);\r\n            ctr.setCurrent({\r\n                ...ctr.current,\r\n                id,\r\n                duration,\r\n                state: PLAYBACK_STATE.PLAY\r\n            })\r\n        }\r\n\r\n        media.currentTime = position;\r\n        if (media.pause) {\r\n            media.play();\r\n            ctr.setBtnState(ctr.current.id, PLAYBACK_STATE.PLAY);\r\n            ctr.setCurrent({\r\n                ...ctr.current,\r\n                state: PLAYBACK_STATE.PLAY\r\n            })\r\n        }\r\n\r\n        startUpdateProg();\r\n\r\n    }, [ctr, api, mediaElement, stopUpdateProg, startUpdateProg])\r\n\r\n    return [playback, seek, ctr]\r\n}"]},"metadata":{},"sourceType":"module"}