{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\src\\\\pages\\\\common\\\\components\\\\UserProfile\\\\Edit\\\\Edit.js\";\nimport React, { useMemo, useCallback, useState, useRef } from \"react\";\nimport classNames from \"classnames\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPen, faThLarge } from \"@fortawesome/free-solid-svg-icons\";\nimport \"./edit.scss\";\n\nconst Edit = ({\n  active,\n  type,\n  children,\n  onChange = ifEmpty => null\n}) => {\n  const [editMode, setEditMode] = useState(false);\n  const controlRef = useRef();\n  const buttonClasses = useMemo(() => classNames('edit-btn', {\n    \"edit-btn--active\": active,\n    \"edit-btn-before\": type.startsWith(\"text\"),\n    \"edit-btn-over\": type === \"image\"\n  }), [active]);\n  const catchBtnRef = useCallback(ref => {\n    if (!ref) {\n      return;\n    }\n\n    ref.parentElement.classList.add(\"relative\");\n  }, []); //onsole.log(\"chioldren\", children)\n\n  const content = useMemo(() => {\n    if (!editMode) {\n      return children;\n    } else {\n      switch (type) {\n        case \"image\":\n          {\n            console.log(\"render input\");\n            return React.createElement(React.Fragment, null, React.createElement(\"input\", {\n              type: \"file\",\n              style: {\n                display: \"none\"\n              },\n              ref: that => {\n                // controlRef.current = controlRef.current || that;\n                // controlRef.current.click();\n                //that.click();\n                console.log(\"click \", that);\n              },\n              onChange: event => {\n                console.log(\"evnet\", event);\n                const reader = new FileReader();\n                const file = event.target.files[0];\n                reader.readAsArrayBuffer(file);\n                console.log(file);\n\n                reader.onload = e => {\n                  const blob = new Blob([e.target.result], {\n                    type: file.type\n                  });\n                  onChange(blob);\n                };\n\n                setEditMode(false);\n              },\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 38\n              },\n              __self: this\n            }), children);\n          }\n\n        case \"text\":\n          return children;\n\n        case \"textarea\":\n          return children;\n      }\n    }\n  }, [children, editMode, onChange, setEditMode]);\n  return React.createElement(React.Fragment, null, active && React.createElement(\"button\", {\n    className: buttonClasses,\n    ref: catchBtnRef,\n    onClick: setEditMode.bind(null, edit => !edit),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, React.createElement(FontAwesomeIcon, {\n    icon: faPen,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  })), content);\n};\n\nexport default Edit;","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/pages/common/components/UserProfile/Edit/Edit.js"],"names":["React","useMemo","useCallback","useState","useRef","classNames","FontAwesomeIcon","faPen","faThLarge","Edit","active","type","children","onChange","ifEmpty","editMode","setEditMode","controlRef","buttonClasses","startsWith","catchBtnRef","ref","parentElement","classList","add","content","console","log","display","that","event","reader","FileReader","file","target","files","readAsArrayBuffer","onload","e","blob","Blob","result","bind","edit"],"mappings":"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","sourcesContent":["import React, { useMemo, useCallback, useState, useRef } from \"react\";\r\nimport classNames from \"classnames\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPen, faThLarge } from \"@fortawesome/free-solid-svg-icons\";\r\nimport \"./edit.scss\";\r\n\r\nconst Edit = ({ active, type, children, onChange = ifEmpty => null }) => {\r\n    const [editMode, setEditMode] = useState(false);\r\n    const controlRef = useRef();\r\n\r\n    const buttonClasses = useMemo(() => classNames(\r\n        'edit-btn',\r\n        {\r\n            \"edit-btn--active\": active,\r\n            \"edit-btn-before\": (type.startsWith(\"text\")),\r\n            \"edit-btn-over\": (type === \"image\"),\r\n        }\r\n    ), [active])\r\n\r\n    const catchBtnRef = useCallback((ref) => {\r\n        if(!ref){\r\n            return;\r\n        } \r\n\r\n        ref.parentElement.classList.add(\"relative\");\r\n    }, [])\r\n    //onsole.log(\"chioldren\", children)\r\n\r\n    const content = useMemo(() => {\r\n        if (!editMode) {\r\n            return children;\r\n        } else {\r\n            switch (type) {\r\n                case \"image\": {\r\n                    console.log(\"render input\")\r\n                    return (\r\n                        <>\r\n                            <input\r\n                                type=\"file\"\r\n                                style={{ display: \"none\" }}\r\n                                ref={that => {\r\n                                    // controlRef.current = controlRef.current || that;\r\n                                    // controlRef.current.click();\r\n                                    //that.click();\r\n                                    console.log(\"click \", that)\r\n                                }}\r\n                                onChange={ event => {\r\n                                    console.log(\"evnet\", event)\r\n                                    const reader = new FileReader();\r\n                                    const file = event.target.files[0];\r\n                                    reader.readAsArrayBuffer(file);\r\n                                    console.log(file);\r\n                                    reader.onload = (e) =>{\r\n                                        const blob = new Blob([e.target.result], {type: file.type})\r\n                                        onChange(blob)\r\n                                    }\r\n                                    setEditMode(false)\r\n                                }} />\r\n                            {children}\r\n                        </>\r\n                    )\r\n                }\r\n                case \"text\": return children;\r\n                case \"textarea\": return children;\r\n            }\r\n\r\n        }\r\n    }, [children, editMode, onChange, setEditMode])\r\n\r\n    return (\r\n        <>\r\n            {active &&\r\n                <button\r\n                    className={buttonClasses}\r\n                    ref={catchBtnRef}\r\n                    onClick={setEditMode.bind(null, edit => !edit)}>\r\n                    <FontAwesomeIcon icon={faPen} />\r\n                </button>\r\n            }\r\n            {content}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Edit;"]},"metadata":{},"sourceType":"module"}