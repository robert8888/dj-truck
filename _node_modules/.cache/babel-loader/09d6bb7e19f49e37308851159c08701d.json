{"ast":null,"code":"import React, { useMemo, useState, useEffect, useCallback, useContext } from \"react\";\nimport { getApi } from \"./../../../apis/apiProvider\";\nimport { PLAYBACK_STATE } from \"./../Hooks/usePlabackState\"; //getRecordUrl\n\nexport const PlayerContext = React.createContext({\n  btnStateHandlers: {},\n  setProgressHandlers: [],\n  getProgressDataHandler: [],\n  progressUpdaterHandler: null,\n  current: {\n    id: null,\n    start: 0,\n    duration: 0,\n    progress: 0,\n    state: null\n  },\n\n  setBtnCtrlHandler(id, handler) {\n    this.btnStateHandlers[id] = handler;\n  },\n\n  setBtnState(id, state) {\n    this.btnStateHandlers[id](state);\n  },\n\n  setProgressHandler(id, handler) {\n    if (this.setProgressHandlers[id]) {\n      this.setProgressHandlers[id].push(handler);\n    }\n\n    this.setProgressHandlers[id] = [handler];\n  },\n\n  setProgress(id, progress) {\n    for (let handler of this.setProgressHandlers[id]) {\n      handler(progress);\n    }\n\n    this.current.progress = progress;\n  },\n\n  setProgressDataHandler(id, handler) {\n    this.getProgressDataHandler[id] = handler;\n  },\n\n  getProgressData(id) {\n    return this.getProgressDataHandler[id]();\n  },\n\n  //--------------\n  getExteranalControler: () => ({\n    current: this.current,\n    mediaElement: this.mediaElement\n  })\n});\nexport function useRecordPlayer() {\n  const [mediaElement, setMediaElement] = useState(null);\n  const ctx = useContext(PlayerContext);\n  const api = useMemo(() => {\n    return getApi('RecordsStore');\n  }, [getApi]);\n  useEffect(() => {\n    const medEl = document.createElement('audio');\n    setMediaElement(medEl);\n    ctx.mediaElement = medEl;\n  }, [setMediaElement, ctx]);\n  const startUpdateProg = useCallback(() => {\n    const handler = setInterval(() => {\n      const current = ctx.current;\n\n      if (!current.id || !current.duration) {\n        return;\n      }\n\n      const progress = mediaElement.currentTime / (current.duration / 1000);\n      ctx.setProgress(current.id, progress);\n    }, 200);\n    ctx.progressUpdaterHandler = handler;\n  }, [mediaElement, ctx]);\n  const stopUpdateProg = useCallback(() => {\n    clearInterval(ctx.progressUpdaterHandler);\n  }, [ctx]);\n  const playback = useCallback((id, pbState) => {\n    if (pbState === PLAYBACK_STATE.PLAY) {\n      const {\n        progress,\n        duration\n      } = ctx.getProgressData(id);\n      const position = duration / 1000 * progress;\n      mediaElement.src = api.getRecordUrl(id);\n      mediaElement.currentTime = position;\n      mediaElement.play();\n\n      if (ctx.current.id) {\n        ctx.setBtnState(ctx.current.id, PLAYBACK_STATE.PAUSE);\n      }\n\n      ctx.current = {\n        id,\n        duration,\n        progress: progress,\n        state: PLAYBACK_STATE.PLAY\n      };\n      startUpdateProg();\n    } else if (pbState === PLAYBACK_STATE.PAUSE) {\n      mediaElement.pause();\n      ctx.current.state = PLAYBACK_STATE.PAUSE;\n      stopUpdateProg();\n    }\n  }, [mediaElement, api, ctx, stopUpdateProg, startUpdateProg]);\n  const seek = useCallback(({\n    id,\n    progress,\n    duration\n  }) => {\n    stopUpdateProg(); //     const bufferdTimeRanges = mediaElement.buffered;\n    //    // const end = bufferdTimeRanges.length && bufferdTimeRanges.end(bufferdTimeRanges.length-1);\n    //     if(bufferdTimeRanges.length){\n    //         //console.log('seeekable',mediaElement.seekable.end(mediaElement.seekable.length - 1));\n    //         console.log(bufferdTimeRanges.end(bufferdTimeRanges.length-1));\n    //     }\n\n    if (ctx.current.id && ctx.current.id !== id) {\n      ctx.setBtnState(ctx.current.id, PLAYBACK_STATE.PAUSE);\n    }\n\n    const position = duration / 1000 * progress;\n\n    if (ctx.current.id !== id) {\n      mediaElement.src = api.getRecordUrl(id);\n      mediaElement.currentTime = position;\n      ctx.setBtnState(id, PLAYBACK_STATE.PLAY);\n      ctx.setProgress(id, progress);\n      ctx.current = {\n        id,\n        duration,\n        state: PLAYBACK_STATE.PLAY\n      };\n    }\n\n    mediaElement.currentTime = position;\n\n    if (mediaElement.pause) {\n      mediaElement.play();\n    }\n\n    startUpdateProg();\n  }, [ctx, api, mediaElement, stopUpdateProg, startUpdateProg]);\n  return [playback, seek, ctx.externalControler];\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/pages/common/Hooks/useRecordPlayer.js"],"names":["React","useMemo","useState","useEffect","useCallback","useContext","getApi","PLAYBACK_STATE","PlayerContext","createContext","btnStateHandlers","setProgressHandlers","getProgressDataHandler","progressUpdaterHandler","current","id","start","duration","progress","state","setBtnCtrlHandler","handler","setBtnState","setProgressHandler","push","setProgress","setProgressDataHandler","getProgressData","getExteranalControler","mediaElement","useRecordPlayer","setMediaElement","ctx","api","medEl","document","createElement","startUpdateProg","setInterval","currentTime","stopUpdateProg","clearInterval","playback","pbState","PLAY","position","src","getRecordUrl","play","PAUSE","pause","seek","externalControler"],"mappings":"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","sourcesContent":["import React, { useMemo, useState, useEffect, useCallback, useContext } from \"react\"\r\nimport { getApi } from \"./../../../apis/apiProvider\";\r\nimport {PLAYBACK_STATE} from \"./../Hooks/usePlabackState\";\r\n\r\n//getRecordUrl\r\nexport const PlayerContext = React.createContext({\r\n    btnStateHandlers: {},\r\n    setProgressHandlers:[],\r\n    getProgressDataHandler: [],\r\n    progressUpdaterHandler: null, \r\n    current : {\r\n        id: null,\r\n        start: 0,\r\n        duration: 0,\r\n        progress: 0,\r\n        state : null,\r\n    },\r\n\r\n    setBtnCtrlHandler(id, handler){\r\n        this.btnStateHandlers[id] = handler;\r\n    },\r\n\r\n    setBtnState(id, state){\r\n        this.btnStateHandlers[id](state)\r\n    },\r\n\r\n    setProgressHandler(id, handler){\r\n        if(this.setProgressHandlers[id]){\r\n            this.setProgressHandlers[id].push(handler);\r\n        }\r\n        this.setProgressHandlers[id] = [handler];\r\n    },\r\n\r\n    setProgress(id, progress){\r\n        for(let handler of this.setProgressHandlers[id]){\r\n            handler(progress)\r\n        }\r\n        this.current.progress = progress;\r\n    },\r\n  \r\n    setProgressDataHandler(id, handler){\r\n        this.getProgressDataHandler[id] = handler;\r\n    },\r\n\r\n    getProgressData(id){\r\n        return this.getProgressDataHandler[id]();\r\n    },\r\n\r\n    //--------------\r\n    getExteranalControler : () =>({\r\n        current:this.current,\r\n        mediaElement: this.mediaElement,\r\n    })\r\n})\r\n\r\nexport function useRecordPlayer(){\r\n    const [mediaElement, setMediaElement] = useState(null);\r\n    const ctx = useContext(PlayerContext);\r\n\r\n    const api = useMemo(()=>{\r\n        return getApi('RecordsStore');\r\n    }, [getApi])\r\n\r\n    useEffect(()=>{\r\n        const medEl = document.createElement('audio');\r\n        setMediaElement(medEl);\r\n        ctx.mediaElement = medEl;\r\n    }, [setMediaElement, ctx])\r\n\r\n    const startUpdateProg = useCallback(()=>{\r\n        const handler = setInterval(()=>{\r\n            const current = ctx.current;\r\n            if(!current.id || !current.duration){\r\n                return;\r\n            }\r\n            const progress = mediaElement.currentTime / (current.duration/1000);\r\n            ctx.setProgress(current.id, progress);\r\n        }, 200)\r\n        ctx.progressUpdaterHandler = handler;\r\n    }, [mediaElement, ctx])\r\n\r\n    const stopUpdateProg = useCallback(()=>{\r\n        clearInterval(ctx.progressUpdaterHandler);\r\n    }, [ctx])\r\n\r\n    const playback = useCallback((id, pbState)=>{\r\n        if(pbState === PLAYBACK_STATE.PLAY){\r\n            const {progress, duration } = ctx.getProgressData(id);\r\n            const position = (duration / 1000) * progress;\r\n            mediaElement.src = api.getRecordUrl(id);\r\n            mediaElement.currentTime = position;\r\n            mediaElement.play();\r\n            if(ctx.current.id){\r\n                ctx.setBtnState(ctx.current.id, PLAYBACK_STATE.PAUSE)\r\n            } \r\n            ctx.current = {\r\n                id,\r\n                duration,\r\n                progress : progress,\r\n                state: PLAYBACK_STATE.PLAY,\r\n            }\r\n            startUpdateProg()\r\n        } else if(pbState === PLAYBACK_STATE.PAUSE){\r\n            mediaElement.pause();\r\n            ctx.current.state = PLAYBACK_STATE.PAUSE;\r\n            stopUpdateProg(); \r\n        }\r\n    }, [\r\n        mediaElement, \r\n        api, \r\n        ctx, \r\n        stopUpdateProg, \r\n        startUpdateProg,\r\n    ])\r\n\r\n    const seek = useCallback(({id, progress, duration}) => {\r\n        stopUpdateProg();\r\n\r\n    //     const bufferdTimeRanges = mediaElement.buffered;\r\n    //    // const end = bufferdTimeRanges.length && bufferdTimeRanges.end(bufferdTimeRanges.length-1);\r\n    //     if(bufferdTimeRanges.length){\r\n    //         //console.log('seeekable',mediaElement.seekable.end(mediaElement.seekable.length - 1));\r\n    //         console.log(bufferdTimeRanges.end(bufferdTimeRanges.length-1));\r\n    //     }\r\n\r\n        if(ctx.current.id && ctx.current.id !== id){\r\n            ctx.setBtnState(ctx.current.id, PLAYBACK_STATE.PAUSE);\r\n        }\r\n        const position = (duration / 1000) * progress;\r\n\r\n        if(ctx.current.id !== id){\r\n            mediaElement.src = api.getRecordUrl(id);\r\n            mediaElement.currentTime = position;\r\n            ctx.setBtnState(id, PLAYBACK_STATE.PLAY);\r\n            ctx.setProgress(id, progress);\r\n            ctx.current = {\r\n                id,\r\n                duration,\r\n                state: PLAYBACK_STATE.PLAY\r\n            }\r\n        }\r\n\r\n        mediaElement.currentTime = position;\r\n        if(mediaElement.pause){\r\n            mediaElement.play();\r\n        }\r\n    \r\n        startUpdateProg();\r\n\r\n    }, [ctx, api , mediaElement,stopUpdateProg, startUpdateProg])\r\n\r\n    return [playback, seek, ctx.externalControler ]\r\n}"]},"metadata":{},"sourceType":"module"}