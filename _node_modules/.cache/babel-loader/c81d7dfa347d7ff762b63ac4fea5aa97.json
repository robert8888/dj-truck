{"ast":null,"code":"import { useMemo, useState, useEffect, useCallback } from \"react\";\nimport { getApi } from \"./../../../apis/apiProvider\";\nimport { PLAYBACK_STATE } from \"./usePlabackState\"; //getRecordUrl\n\nclass PlayerControler {\n  constructor() {\n    this.progressUpdaterHandler = null;\n    this.current = {\n      id: null,\n      start: 0,\n      duration: 0,\n      progress: 0,\n      state: null,\n      buffered: 0\n    };\n    this.btnStateHandlers = {};\n    this.progressWatchers = {};\n    this.bufferedWatchers = [];\n    this.progressProviders = {};\n    this.currentWatchers = [];\n  }\n\n  setCurrent(nextCurrent) {\n    this.current = nextCurrent;\n    this.spreadCurrentChange();\n  }\n\n  addCurrentWatcher(handler) {\n    this.currentWatchers.push(handler);\n  }\n\n  spreadCurrentChange() {\n    for (let handler of this.currentWatchers) {\n      handler(this.current);\n    }\n  } //--------------\n\n\n  addBtnCtrlHandler(id, handler) {\n    this.btnStateHandlers[id] = handler;\n  }\n\n  setBtnState(id, state) {\n    this.btnStateHandlers[id](state);\n  } //----------------------\n\n\n  addProgressWatcher(id, handler) {\n    if (this.progressWatchers[id]) {\n      this.progressWatchers[id].push(handler);\n    } else {\n      this.progressWatchers[id] = [handler];\n    }\n  }\n\n  setProgress(id, progress) {\n    for (let handler of [...this.progressWatchers[id], ...this.progressWatchers['#']]) {\n      handler(progress);\n    }\n\n    this.current.progress = progress;\n  } //-------------------\n\n\n  addProgressProvider(id, handler) {\n    this.progressProviders[id] = handler;\n  }\n\n  getProgress(id) {\n    if (!id) {\n      return this.getProgress(this.current.id);\n    }\n\n    return this.progressProviders[id]();\n  } // ---------------\n\n\n  setBuffered(timeEnd) {\n    if (this.current.id) {\n      this.current.buffered = timeEnd;\n    }\n  }\n\n  addBuffredWatcher(handel) {\n    this.bufferedWatchers.push(handel);\n  }\n\n  spreadBufferChanges() {\n    for (let handel of this.bufferedWatchers) {\n      handel(this.current.buffered);\n    }\n  }\n\n}\n\nexport function useRecordPlayer() {\n  const [mediaElement, setMediaElement] = useState(null); // const ctr = useContext(PlayerContext);\n\n  const [ctr, _] = useState(new PlayerControler());\n  const api = useMemo(() => {\n    return getApi('RecordsStore');\n  }, [getApi]);\n  useEffect(() => {\n    const medEl = document.createElement('audio');\n    setMediaElement(medEl);\n    ctr.mediaElement = medEl;\n  }, [setMediaElement, ctr]);\n  const startUpdateProg = useCallback(() => {\n    const handler = setInterval(() => {\n      const progress = mediaElement.currentTime / (ctr.current.duration / 1000);\n      ctr.setProgress(ctr.current.id, progress);\n    }, 200);\n    ctr.progressUpdaterHandler = handler;\n  }, [mediaElement, ctr]);\n  const stopUpdateProg = useCallback(() => {\n    clearInterval(ctr.progressUpdaterHandler);\n  }, [ctr]);\n  useEffect(() => {\n    if (mediaElement) {\n      mediaElement.addEventListener(\"ended\", () => {\n        if (ctr.current.state === PLAYBACK_STATE.PLAY) {\n          ctr.setCurrent({ ...ctr.current,\n            state: PLAYBACK_STATE.PAUSE\n          });\n          ctr.setBtnState(ctr.current.id, PLAYBACK_STATE.PAUSE);\n        }\n      });\n      mediaElement.addEventListener('progress', () => {\n        const bufferdTimeRanges = mediaElement.buffered;\n\n        if (bufferdTimeRanges.length) {\n          ctr.setBuffered(bufferdTimeRanges.end(bufferdTimeRanges.length - 1));\n        }\n      });\n    }\n  }, [mediaElement, ctr]);\n  const playback = useCallback((id, pbState) => {\n    if (pbState === PLAYBACK_STATE.PLAY) {\n      const {\n        progress,\n        duration\n      } = ctr.getProgress(id);\n      const position = duration / 1000 * progress;\n      mediaElement.src = api.getRecordUrl(id);\n      mediaElement.currentTime = position;\n      mediaElement.play();\n\n      if (ctr.current.id) {\n        ctr.setBtnState(ctr.current.id, PLAYBACK_STATE.PAUSE);\n      }\n\n      ctr.setCurrent({\n        id,\n        duration,\n        progress: progress,\n        buffered: 0,\n        state: PLAYBACK_STATE.PLAY\n      });\n      startUpdateProg();\n    } else if (pbState === PLAYBACK_STATE.PAUSE) {\n      mediaElement.pause();\n      ctr.setCurrent({ ...ctr.current,\n        state: PLAYBACK_STATE.PAUSE\n      });\n      stopUpdateProg();\n    }\n  }, [mediaElement, api, ctr, stopUpdateProg, startUpdateProg]);\n  const seek = useCallback(({\n    id,\n    progress,\n    duration\n  }) => {\n    stopUpdateProg(); //     const bufferdTimeRanges = mediaElement.buffered;\n    //    // const end = bufferdTimeRanges.length && bufferdTimeRanges.end(bufferdTimeRanges.length-1);\n    //     if(bufferdTimeRanges.length){\n    //         //console.log('seeekable',mediaElement.seekable.end(mediaElement.seekable.length - 1));\n    //         console.log(bufferdTimeRanges.end(bufferdTimeRanges.length-1));\n    //     }\n\n    if (ctr.current.id && ctr.current.id !== id) {\n      ctr.setBtnState(ctr.current.id, PLAYBACK_STATE.PAUSE);\n    }\n\n    const position = duration / 1000 * progress;\n\n    if (ctr.current.id !== id) {\n      mediaElement.src = api.getRecordUrl(id);\n      mediaElement.currentTime = position;\n      ctr.setBtnState(id, PLAYBACK_STATE.PLAY);\n      ctr.setProgress(id, progress);\n      ctr.setCurrent({ ...ctr.current,\n        id,\n        duration,\n        state: PLAYBACK_STATE.PLAY\n      });\n    }\n\n    mediaElement.currentTime = position;\n\n    if (mediaElement.pause) {\n      mediaElement.play();\n      ctr.setBtnState(ctr.current.id, PLAYBACK_STATE.PLAY);\n      ctr.setCurrent({ ...ctr.current,\n        state: PLAYBACK_STATE.PLAY\n      });\n    }\n\n    startUpdateProg();\n  }, [ctr, api, mediaElement, stopUpdateProg, startUpdateProg]);\n  return [playback, seek, ctr];\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/pages/common/Hooks/useRecordPlayer.js"],"names":["useMemo","useState","useEffect","useCallback","getApi","PLAYBACK_STATE","PlayerControler","progressUpdaterHandler","current","id","start","duration","progress","state","buffered","btnStateHandlers","progressWatchers","bufferedWatchers","progressProviders","currentWatchers","setCurrent","nextCurrent","spreadCurrentChange","addCurrentWatcher","handler","push","addBtnCtrlHandler","setBtnState","addProgressWatcher","setProgress","addProgressProvider","getProgress","setBuffered","timeEnd","addBuffredWatcher","handel","spreadBufferChanges","useRecordPlayer","mediaElement","setMediaElement","ctr","_","api","medEl","document","createElement","startUpdateProg","setInterval","currentTime","stopUpdateProg","clearInterval","addEventListener","PLAY","PAUSE","bufferdTimeRanges","length","end","playback","pbState","position","src","getRecordUrl","play","pause","seek"],"mappings":"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","sourcesContent":["import { useMemo, useState, useEffect, useCallback } from \"react\"\r\nimport { getApi } from \"./../../../apis/apiProvider\";\r\nimport { PLAYBACK_STATE } from \"./usePlabackState\";\r\n\r\n//getRecordUrl\r\nclass PlayerControler {\r\n    progressUpdaterHandler = null;\r\n\r\n    current = {\r\n        id: null,\r\n        start: 0,\r\n        duration: 0,\r\n        progress: 0,\r\n        state: null,\r\n        buffered: 0,\r\n    };\r\n\r\n    btnStateHandlers = {}\r\n    progressWatchers = {}\r\n    bufferedWatchers = []\r\n    progressProviders = {};\r\n    currentWatchers = [];\r\n\r\n    setCurrent(nextCurrent){\r\n        this.current = nextCurrent;\r\n        this.spreadCurrentChange();\r\n    }\r\n\r\n    addCurrentWatcher(handler){\r\n        this.currentWatchers.push(handler)\r\n    }\r\n\r\n\r\n    spreadCurrentChange(){\r\n        for(let handler of this.currentWatchers){\r\n            handler(this.current);\r\n        }\r\n    }\r\n    //--------------\r\n\r\n    addBtnCtrlHandler(id, handler) {\r\n        this.btnStateHandlers[id] = handler;\r\n    }\r\n\r\n    setBtnState(id, state) {\r\n        this.btnStateHandlers[id](state)\r\n    }\r\n\r\n    //----------------------\r\n\r\n    addProgressWatcher(id, handler) {\r\n        if (this.progressWatchers[id]) {\r\n            this.progressWatchers[id].push(handler);\r\n            \r\n        } else{\r\n            this.progressWatchers[id] = [handler];\r\n        }\r\n    }\r\n\r\n    setProgress(id, progress) {\r\n        for (let handler of \r\n            [...this.progressWatchers[id], \r\n             ...this.progressWatchers['#']]) {\r\n            handler(progress)\r\n        }\r\n        this.current.progress = progress;\r\n    }\r\n\r\n    //-------------------\r\n\r\n    addProgressProvider(id, handler) {\r\n        this.progressProviders[id] = handler;\r\n    }\r\n\r\n    getProgress(id) {\r\n        if(!id){\r\n            return this.getProgress(this.current.id);\r\n        }\r\n        return this.progressProviders[id]();\r\n    }\r\n\r\n    // ---------------\r\n    setBuffered(timeEnd){\r\n        if(this.current.id){\r\n            this.current.buffered = timeEnd;\r\n        }\r\n    }\r\n\r\n    addBuffredWatcher(handel){\r\n        this.bufferedWatchers.push(handel)\r\n    }\r\n\r\n    spreadBufferChanges(){\r\n        for(let handel of this.bufferedWatchers){\r\n            handel(this.current.buffered);\r\n        }\r\n    }\r\n    \r\n}\r\n\r\n\r\nexport function useRecordPlayer() {\r\n    const [mediaElement, setMediaElement] = useState(null);\r\n    // const ctr = useContext(PlayerContext);\r\n    const [ctr, _] = useState(new PlayerControler())\r\n\r\n    const api = useMemo(() => {\r\n        return getApi('RecordsStore');\r\n    }, [getApi])\r\n\r\n    useEffect(() => {\r\n        const medEl = document.createElement('audio');\r\n        setMediaElement(medEl);\r\n        ctr.mediaElement = medEl;\r\n    }, [setMediaElement, ctr])\r\n\r\n    const startUpdateProg = useCallback(() => {\r\n        const handler = setInterval(() => {\r\n            const progress = mediaElement.currentTime / (ctr.current.duration / 1000);\r\n            ctr.setProgress(ctr.current.id, progress);\r\n        }, 200)\r\n        ctr.progressUpdaterHandler = handler;\r\n    }, [mediaElement, ctr])\r\n\r\n    const stopUpdateProg = useCallback(() => {\r\n        clearInterval(ctr.progressUpdaterHandler);\r\n    }, [ctr])\r\n\r\n    useEffect(()=>{\r\n        if(mediaElement){\r\n            mediaElement.addEventListener(\"ended\", ()=>{\r\n                if(ctr.current.state === PLAYBACK_STATE.PLAY){\r\n                    ctr.setCurrent({\r\n                        ...ctr.current,\r\n                        state : PLAYBACK_STATE.PAUSE,\r\n                    })\r\n                    ctr.setBtnState(ctr.current.id, PLAYBACK_STATE.PAUSE)\r\n                }\r\n            })\r\n            mediaElement.addEventListener('progress', ()=>{\r\n                const bufferdTimeRanges = mediaElement.buffered;\r\n                if(bufferdTimeRanges.length){\r\n                    ctr.setBuffered(bufferdTimeRanges.end(bufferdTimeRanges.length-1))\r\n                } \r\n            })\r\n        }\r\n    }, [mediaElement, ctr])\r\n\r\n    const playback = useCallback((id, pbState) => {\r\n        if (pbState === PLAYBACK_STATE.PLAY) {\r\n            const { progress, duration } = ctr.getProgress(id);\r\n            const position = (duration / 1000) * progress;\r\n            mediaElement.src = api.getRecordUrl(id);\r\n            mediaElement.currentTime = position;\r\n            mediaElement.play();\r\n            if (ctr.current.id) {\r\n                ctr.setBtnState(ctr.current.id, PLAYBACK_STATE.PAUSE)\r\n            }\r\n            ctr.setCurrent({\r\n                id,\r\n                duration,\r\n                progress: progress,\r\n                buffered: 0,\r\n                state: PLAYBACK_STATE.PLAY,\r\n            })\r\n            startUpdateProg()\r\n        } else if (pbState === PLAYBACK_STATE.PAUSE) {\r\n            mediaElement.pause();\r\n            ctr.setCurrent({\r\n                ...ctr.current,\r\n                state: PLAYBACK_STATE.PAUSE\r\n            })\r\n            stopUpdateProg();\r\n        }\r\n    }, [\r\n        mediaElement,\r\n        api,\r\n        ctr,\r\n        stopUpdateProg,\r\n        startUpdateProg,\r\n    ])\r\n\r\n    const seek = useCallback(({ id, progress, duration }) => {\r\n        stopUpdateProg();\r\n\r\n        //     const bufferdTimeRanges = mediaElement.buffered;\r\n        //    // const end = bufferdTimeRanges.length && bufferdTimeRanges.end(bufferdTimeRanges.length-1);\r\n        //     if(bufferdTimeRanges.length){\r\n        //         //console.log('seeekable',mediaElement.seekable.end(mediaElement.seekable.length - 1));\r\n        //         console.log(bufferdTimeRanges.end(bufferdTimeRanges.length-1));\r\n        //     }\r\n\r\n        if (ctr.current.id && ctr.current.id !== id) {\r\n            ctr.setBtnState(ctr.current.id, PLAYBACK_STATE.PAUSE);\r\n        }\r\n        const position = (duration / 1000) * progress;\r\n\r\n        if (ctr.current.id !== id) {\r\n            mediaElement.src = api.getRecordUrl(id);\r\n            mediaElement.currentTime = position;\r\n            ctr.setBtnState(id, PLAYBACK_STATE.PLAY);\r\n            ctr.setProgress(id, progress);\r\n            ctr.setCurrent({\r\n                ...ctr.current,\r\n                id,\r\n                duration,\r\n                state: PLAYBACK_STATE.PLAY\r\n            })\r\n        }\r\n\r\n        mediaElement.currentTime = position;\r\n        if (mediaElement.pause) {\r\n            mediaElement.play();\r\n            ctr.setBtnState(ctr.current.id, PLAYBACK_STATE.PLAY);\r\n            ctr.setCurrent({\r\n                ...ctr.current,\r\n                state: PLAYBACK_STATE.PLAY\r\n            })\r\n        }\r\n\r\n        startUpdateProg();\r\n\r\n    }, [ctr, api, mediaElement, stopUpdateProg, startUpdateProg])\r\n\r\n    return [playback, seek, ctr]\r\n}"]},"metadata":{},"sourceType":"module"}