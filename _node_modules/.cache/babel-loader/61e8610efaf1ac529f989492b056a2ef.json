{"ast":null,"code":"import { analyze, guess } from 'web-audio-beat-detector';\nexport default function calcBpm(url) {//audioContext.decodeAudioData(arrayBuffer, (audioBuffer) =\n  // return fetch(url)\n  //.then(response => response.blob())\n\n  /* .then(blop => {\r\n       const audioCtx = new AudioContext();\r\n       return audioCtx.decodeAudioData(blop);\r\n   }).then( audioBuffer => analyze(audioBuffer))\r\n   .then(bpm => bpm);*/\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/utils/bpm/analyzer.js"],"names":["analyze","guess","calcBpm","url"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,KAAlB,QAA+B,yBAA/B;AAGA,eAAe,SAASC,OAAT,CAAiBC,GAAjB,EAAqB,CAChC;AACD;AACC;;AACD;;;;;AAKF","sourcesContent":["import { analyze, guess } from 'web-audio-beat-detector';\r\n\r\n\r\nexport default function calcBpm(url){\r\n    //audioContext.decodeAudioData(arrayBuffer, (audioBuffer) =\r\n   // return fetch(url)\r\n    //.then(response => response.blob())\r\n   /* .then(blop => {\r\n        const audioCtx = new AudioContext();\r\n        return audioCtx.decodeAudioData(blop);\r\n    }).then( audioBuffer => analyze(audioBuffer))\r\n    .then(bpm => bpm);*/\r\n}"]},"metadata":{},"sourceType":"module"}