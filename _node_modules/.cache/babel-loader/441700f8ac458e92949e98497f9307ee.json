{"ast":null,"code":"import { ACTIONS, startRecording, recordingRquestFail } from \"../../actions\";\nimport { takeEvery, select, put } from \"redux-saga/effects\";\nimport { getApi } from \"./../../apis/apiProvider\";\nimport { format } from 'date-fns';\nexport default function* requestCreatedRecord() {\n  yield takeEvery(ACTIONS.R_CREATE_RECORD_REQEST, handel);\n}\n\nconst getToken = state => state.user.token;\n\nconst getInitTracklist = state => {\n  let tracks = [];\n\n  for (let channelName in state.console.channel) {\n    let channel = state.console.channel[channelName];\n\n    if (channel.track.id) {\n      let track = {\n        id: channel.track.id,\n        channel: channelName\n      };\n\n      if (!channel.playBackState.paused) {\n        track.start = 0;\n        track.playedTime = channel.track.duration - channel.playBackState.timeLeft;\n      } else {\n        track.start = null;\n        track.playedTime = Infinity;\n      }\n\n      tracks.push(track);\n    }\n  }\n\n  tracks.sort((a, b) => a.playedTime - b.playedTime).map(track => ({\n    id: track.id,\n    channel: track.channel,\n    start: track.channel\n  }));\n  return tracks;\n};\n\nfunction* handel(action) {\n  const token = yield select(getToken);\n\n  if (token) {\n    try {\n      var _action$recName, _result$data, _result$data$createRe;\n\n      const {\n        callQuery,\n        queries\n      } = getApi(\"UserAssets\");\n      let title = ((_action$recName = action.recName) === null || _action$recName === void 0 ? void 0 : _action$recName.split(\"_\").join(\" \")) || \"Record \" + format(new Date(), 'yy-MM-dd HH:mm');\n      const query = queries.createRecordQl(title);\n      const result = yield callQuery(query, token);\n      const id = result === null || result === void 0 ? void 0 : (_result$data = result.data) === null || _result$data === void 0 ? void 0 : (_result$data$createRe = _result$data.createRecord) === null || _result$data$createRe === void 0 ? void 0 : _result$data$createRe.id;\n      let tracklist = [];\n\n      if (id) {\n        tracklist = yield select(getInitTracklist);\n      }\n\n      if (!result.errors && id) {\n        yield put(startRecording(title, id, tracklist));\n      } else {\n        throw new Error(\"Create new record metadata fails\");\n      }\n    } catch {\n      yield put(recordingRquestFail());\n    }\n  }\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/sagas/recorder/reqCreateRecord.js"],"names":["ACTIONS","startRecording","recordingRquestFail","takeEvery","select","put","getApi","format","requestCreatedRecord","R_CREATE_RECORD_REQEST","handel","getToken","state","user","token","getInitTracklist","tracks","channelName","console","channel","track","id","playBackState","paused","start","playedTime","duration","timeLeft","Infinity","push","sort","a","b","map","action","callQuery","queries","title","recName","split","join","Date","query","createRecordQl","result","data","createRecord","tracklist","errors","Error"],"mappings":"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","sourcesContent":["import {  ACTIONS,  startRecording, recordingRquestFail } from \"../../actions\";\r\nimport { takeEvery, select, put,} from \"redux-saga/effects\";\r\nimport { getApi } from \"./../../apis/apiProvider\";\r\nimport { format } from 'date-fns'\r\n\r\nexport default function* requestCreatedRecord() {\r\n    yield takeEvery(ACTIONS.R_CREATE_RECORD_REQEST, handel)\r\n}\r\n\r\nconst getToken = state => state.user.token\r\n\r\n\r\nconst getInitTracklist = state => {\r\n    let tracks = []\r\n    for(let channelName in state.console.channel){\r\n        let channel = state.console.channel[channelName];\r\n        if(channel.track.id){\r\n            let track  = {\r\n                id: channel.track.id,\r\n                channel: channelName,\r\n            }\r\n            if(!channel.playBackState.paused){\r\n                track.start = 0;\r\n                track.playedTime  = channel.track.duration - channel.playBackState.timeLeft;\r\n            } else {\r\n                track.start = null;\r\n                track.playedTime = Infinity;\r\n            }\r\n            tracks.push(track);\r\n        }\r\n    }\r\n    tracks.sort((a, b) => a.playedTime - b.playedTime)\r\n        .map(track => ({\r\n            id: track.id,\r\n            channel: track.channel,\r\n            start: track.channel\r\n        }))\r\n    return tracks;\r\n}\r\n\r\nfunction* handel(action) {\r\n    const token = yield select(getToken);\r\n\r\n    if(token){\r\n        try{\r\n            const { callQuery , queries } = getApi(\"UserAssets\");\r\n            let title = action.recName?.split(\"_\").join(\" \") || \"Record \" + format(new Date(), 'yy-MM-dd HH:mm')\r\n            const query = queries.createRecordQl(title);\r\n            const result = yield callQuery(query, token);\r\n            const id = result?.data?.createRecord?.id;\r\n            let tracklist = [];\r\n            if(id){\r\n                tracklist = yield select(getInitTracklist);\r\n            }\r\n\r\n            if(!result.errors && id){\r\n                yield put(startRecording(title, id, tracklist))\r\n            } else {\r\n                throw new Error(\"Create new record metadata fails\")\r\n            }  \r\n        } catch {\r\n            yield put(recordingRquestFail())\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}