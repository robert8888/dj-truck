{"ast":null,"code":"import store from \"./../../../store\";\nexport default class Mixer {\n  constructor(channels) {\n    this.config = store.getState().configuration.mixer;\n    this.channels = channels;\n    console.log('create  mixer');\n    this.initChannelContainer('audioNodes');\n    this.initChannelContainer('sampleBuffers');\n    this.createMainChannel();\n  }\n\n  initChannelContainer(containerName) {\n    this[containerName] = {\n      channels: {}\n    };\n\n    for (let channelName of [...this.channels.getChannelNames(), \"main\"]) {\n      this[containerName].channels = { ...this[containerName].channels,\n        [channelName]: null\n      };\n    }\n  }\n\n  createMainChannel() {\n    //main audio context with is share between wavesurfer objects\n    this.mainAudioContext = new AudioContext();\n    let ac = this.mainAudioContext;\n    let main = this.audioNodes.channels['main'];\n    main = {};\n    main.gainNode = ac.createGain();\n    main.analyserNode = ac.createAnalyser();\n    main.gainNode.connect(main.analyserNode);\n    main.analyserNode.connect(ac.destination);\n  }\n\n  getChannelInterface(channelName) {\n    return {\n      getPeakMeter: () => this.getPeakMeter(channelName)\n    };\n  }\n\n  setUpChannelsAudioNodes(channelName) {\n    //surfer - waveSurfer obj\n    let surfer = this.channels.getChannel(channelName);\n    let audioCtx = surfer.backend.ac; //chained from up to down \n\n    this.audioNodes.channels[channelName] = {\n      eqHiFilterNode: audioCtx.createBiquadFilter(),\n      eqMidFilterNode: audioCtx.createBiquadFilter(),\n      eqLowFilterNode: audioCtx.createBiquadFilter(),\n      //low pass\n      //hi pass\n      sendNode: audioCtx.createGain(),\n      send1Node: audioCtx.createGain(),\n      send2Node: audioCtx.createGain(),\n      //\n      dryNode: audioCtx.createGain(),\n      mainGainNode: audioCtx.createGain(),\n      analyserNode: audioCtx.createAnalyser(),\n      faderVolumeNode: audioCtx.createGain()\n    }; //--Confign\n\n    const channelNodes = this.audioNodes.channels[channelName]; //\n\n    channelNodes.analyserNode.fftSize = 256; //--EQ\n\n    channelNodes.eqLowFilterNode.type = \"lowshelf\";\n    channelNodes.eqLowFilterNode.frequency.setValueAtTime(this.config.low.frequency, audioCtx.currentTime);\n    channelNodes.eqHiFilterNode.type = \"highshelf\";\n    channelNodes.eqHiFilterNode.frequency.setValueAtTime(this.config.hi.frequency, audioCtx.currentTime);\n    channelNodes.eqMidFilterNode.type = \"peaking\";\n    channelNodes.eqMidFilterNode.frequency.setValueAtTime(this.config.mid.frequency, audioCtx.currentTime);\n    channelNodes.eqMidFilterNode.Q.setValueAtTime(this.config.mid.Q, audioCtx.currentTime); //--Filters\n    //--Send\n\n    channelNodes.sendNode.connect(channelNodes.send1Node);\n    channelNodes.sendNode.connect(channelNodes.send2Node); //Assign in chain \n\n    this.channels.getChannel(channelName).backend.setFilters([channelNodes.eqLowFilterNode, channelNodes.eqHiFilterNode, channelNodes.eqMidFilterNode, channelNodes.sendNode, channelNodes.dryNode, channelNodes.mainGainNode, channelNodes.analyserNode, channelNodes.faderVolumeNode]); //-Conect to main output mixer channel\n\n    surfer.backend.gainNode.disconnect();\n    surfer.backend.gainNode.connect(this.mainAudioContext.destination);\n    this.setUpSampleBuffers(channelName);\n  }\n\n  connect(effector) {}\n\n  setGainValue(channelName, knobValue, nodeName) {\n    let gain = 1 + knobValue / 100;\n    let audioCtx = this.channels.getChannel(channelName).backend.ac;\n    let channel = this.audioNodes.channels[channelName];\n    channel[nodeName].gain.setTargetAtTime(parseFloat(gain), audioCtx.currentTime, 0.01);\n  }\n\n  setFilterValue(channelName, knobValue, nodeName) {\n    let audioCtx = this.channels.getChannel(channelName).backend.ac;\n    let channel = this.audioNodes.channels[channelName];\n    channel[nodeName].gain.setValueAtTime(knobValue, audioCtx.currentTime);\n  }\n\n  setGain(channelName, knobValue) {\n    this.setGainValue(channelName, knobValue, 'mainGainNode');\n  }\n\n  setEqHigh(channelName, knobValue) {\n    this.setFilterValue(channelName, knobValue, 'eqHiFilterNode');\n  }\n\n  setEqMid(channelName, knobValue) {\n    this.setFilterValue(channelName, knobValue, 'eqMidFilterNode');\n  }\n\n  setEqLow(channelName, knobValue) {\n    this.setFilterValue(channelName, knobValue, 'eqLowFilterNode');\n  }\n\n  setFader(value) {\n    //in procent from -50%  to + 50% (not 0.01) but 1\n    let faderVolumeNodeA = this.audioNodes.channels[\"A\"].faderVolumeNode;\n    let faderVolumeNodeB = this.audioNodes.channels[\"B\"].faderVolumeNode;\n    let audioCtxA = this.channels.getChannel(\"A\").backend.ac;\n    let audioCtxB = this.channels.getChannel(\"B\").backend.ac;\n\n    if (!faderVolumeNodeA || !faderVolumeNodeB || !audioCtxA || !audioCtxB) {\n      throw new Error(\"Fased value not set checkout funtion setFader in mixer object\");\n    }\n\n    let percent = (value + 50) / 100;\n    let volA = Math.cos(percent * 0.5 * Math.PI);\n    let volB = Math.cos((1 - percent) * 0.5 * Math.PI);\n    faderVolumeNodeA.gain.setTargetAtTime(volA, audioCtxA.currentTime, 0.01);\n    faderVolumeNodeB.gain.setTargetAtTime(volB, audioCtxB.currentTime, 0.01);\n  }\n\n  setUpSampleBuffers(channelName) {\n    let fftSize = this.audioNodes.channels[channelName].analyserNode.fftSize;\n    this.sampleBuffers.channels[channelName] = new Float32Array(fftSize);\n  }\n\n  getPeakMeter(channelName) {\n    var _this$audioNodes, _this$audioNodes$chan;\n\n    let analyser = (_this$audioNodes = this.audioNodes) === null || _this$audioNodes === void 0 ? void 0 : (_this$audioNodes$chan = _this$audioNodes.channels[channelName]) === null || _this$audioNodes$chan === void 0 ? void 0 : _this$audioNodes$chan.analyserNode;\n\n    if (!analyser) {\n      return [];\n    }\n\n    let sampleBuffer = this.sampleBuffers.channels[channelName];\n\n    if (!sampleBuffer) {\n      return [];\n    }\n\n    return this.getAnalyserData(analyser, sampleBuffer);\n  }\n\n  getAnalyserData(analyser, sampleBuffer) {\n    analyser.getFloatTimeDomainData(sampleBuffer); //average \n\n    let sumOfSquares = 0;\n\n    for (let i = 0; i < sampleBuffer.length; i++) {\n      sumOfSquares += sampleBuffer[i] ** 2;\n    }\n\n    const avgPowerDecibels = 10 * Math.log10(sumOfSquares / sampleBuffer.length); //peak \n\n    let peakPower = 0;\n\n    for (let i = 0; i < sampleBuffer.length; i++) {\n      const power = sampleBuffer[i] ** 2;\n      peakPower = Math.max(power, peakPower);\n    }\n\n    const peakPowerDecibels = 10 * Math.log10(peakPower);\n    return {\n      avgdB: avgPowerDecibels,\n      peakdB: peakPowerDecibels\n    };\n  }\n\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/core/console/mixer/mixer.js"],"names":["store","Mixer","constructor","channels","config","getState","configuration","mixer","console","log","initChannelContainer","createMainChannel","containerName","channelName","getChannelNames","mainAudioContext","AudioContext","ac","main","audioNodes","gainNode","createGain","analyserNode","createAnalyser","connect","destination","getChannelInterface","getPeakMeter","setUpChannelsAudioNodes","surfer","getChannel","audioCtx","backend","eqHiFilterNode","createBiquadFilter","eqMidFilterNode","eqLowFilterNode","sendNode","send1Node","send2Node","dryNode","mainGainNode","faderVolumeNode","channelNodes","fftSize","type","frequency","setValueAtTime","low","currentTime","hi","mid","Q","setFilters","disconnect","setUpSampleBuffers","effector","setGainValue","knobValue","nodeName","gain","channel","setTargetAtTime","parseFloat","setFilterValue","setGain","setEqHigh","setEqMid","setEqLow","setFader","value","faderVolumeNodeA","faderVolumeNodeB","audioCtxA","audioCtxB","Error","percent","volA","Math","cos","PI","volB","sampleBuffers","Float32Array","analyser","sampleBuffer","getAnalyserData","getFloatTimeDomainData","sumOfSquares","i","length","avgPowerDecibels","log10","peakPower","power","max","peakPowerDecibels","avgdB","peakdB"],"mappings":"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","sourcesContent":["import store from \"./../../../store\";\r\n\r\n\r\nexport default class Mixer{\r\n    constructor(channels){\r\n        this.config = store.getState().configuration.mixer;\r\n        \r\n        this.channels = channels;\r\n\r\n        console.log('create  mixer')\r\n        this.initChannelContainer('audioNodes');\r\n        this.initChannelContainer('sampleBuffers');\r\n        this.createMainChannel();\r\n    }\r\n\r\n\r\n    initChannelContainer(containerName){\r\n        this[containerName] =   {\r\n            channels : {\r\n            }\r\n        }\r\n        for(let channelName of [...this.channels.getChannelNames(), \"main\"]){\r\n            this[containerName].channels = {\r\n                ...this[containerName].channels,\r\n                [channelName] : null\r\n            }\r\n        }\r\n    }\r\n\r\n    createMainChannel(){\r\n        //main audio context with is share between wavesurfer objects\r\n        this.mainAudioContext = new AudioContext();\r\n\r\n        let ac = this.mainAudioContext;\r\n        let main = this.audioNodes.channels['main'];\r\n        main = {};\r\n\r\n        main.gainNode = ac.createGain();\r\n        main.analyserNode = ac.createAnalyser();\r\n        main.gainNode.connect(main.analyserNode);\r\n        main.analyserNode.connect(ac.destination);\r\n    }\r\n\r\n\r\n    getChannelInterface(channelName){\r\n        return {\r\n            getPeakMeter: () => this.getPeakMeter(channelName),\r\n        }\r\n    }\r\n\r\n\r\n\r\n    setUpChannelsAudioNodes(channelName){\r\n        //surfer - waveSurfer obj\r\n        let surfer = this.channels.getChannel(channelName)\r\n        let audioCtx = surfer.backend.ac;\r\n\r\n        //chained from up to down \r\n        this.audioNodes.channels[channelName] = {\r\n            eqHiFilterNode : audioCtx.createBiquadFilter(),\r\n            eqMidFilterNode : audioCtx.createBiquadFilter(),\r\n            eqLowFilterNode : audioCtx.createBiquadFilter(),\r\n            //low pass\r\n            //hi pass\r\n            sendNode : audioCtx.createGain(),\r\n            send1Node : audioCtx.createGain(),\r\n            send2Node : audioCtx.createGain(),\r\n            //\r\n            dryNode : audioCtx.createGain(),\r\n            mainGainNode : audioCtx.createGain(),\r\n            analyserNode : audioCtx.createAnalyser(),\r\n            faderVolumeNode : audioCtx.createGain(),\r\n        }\r\n\r\n        //--Confign\r\n        const channelNodes = this.audioNodes.channels[channelName];\r\n        //\r\n        channelNodes.analyserNode.fftSize = 256;\r\n        //--EQ\r\n        channelNodes.eqLowFilterNode.type = \"lowshelf\";\r\n        channelNodes.eqLowFilterNode.frequency.setValueAtTime(this.config.low.frequency, audioCtx.currentTime);\r\n\r\n        channelNodes.eqHiFilterNode.type = \"highshelf\";\r\n        channelNodes.eqHiFilterNode.frequency.setValueAtTime(this.config.hi.frequency, audioCtx.currentTime);\r\n\r\n        channelNodes.eqMidFilterNode.type = \"peaking\";\r\n        channelNodes.eqMidFilterNode.frequency.setValueAtTime(this.config.mid.frequency, audioCtx.currentTime);\r\n        channelNodes.eqMidFilterNode.Q.setValueAtTime(this.config.mid.Q, audioCtx.currentTime);  \r\n        //--Filters\r\n\r\n        //--Send\r\n        channelNodes.sendNode.connect(channelNodes.send1Node);\r\n        channelNodes.sendNode.connect(channelNodes.send2Node);\r\n\r\n        //Assign in chain \r\n        this.channels.getChannel(channelName).backend.setFilters([\r\n            channelNodes.eqLowFilterNode, \r\n            channelNodes.eqHiFilterNode, \r\n            channelNodes.eqMidFilterNode,\r\n            channelNodes.sendNode,\r\n            channelNodes.dryNode,\r\n            channelNodes.mainGainNode,\r\n            channelNodes.analyserNode,\r\n            channelNodes.faderVolumeNode,\r\n         ])\r\n\r\n         //-Conect to main output mixer channel\r\n        surfer.backend.gainNode.disconnect();\r\n        surfer.backend.gainNode.connect(this.mainAudioContext.destination);\r\n\r\n        this.setUpSampleBuffers(channelName);\r\n    }\r\n    \r\n    connect(effector){\r\n\r\n    }\r\n\r\n\r\n    setGainValue(channelName, knobValue, nodeName){\r\n        let gain = 1 + knobValue / 100 ;\r\n        let audioCtx = this.channels.getChannel(channelName).backend.ac;\r\n\r\n        let channel = this.audioNodes.channels[channelName];\r\n        channel[nodeName].gain.setTargetAtTime( parseFloat(gain) , audioCtx.currentTime, 0.01);\r\n    }\r\n\r\n    setFilterValue(channelName, knobValue, nodeName){\r\n        let audioCtx = this.channels.getChannel(channelName).backend.ac;\r\n\r\n        let channel = this.audioNodes.channels[channelName];\r\n        channel[nodeName].gain.setValueAtTime( knobValue , audioCtx.currentTime);\r\n    }\r\n\r\n\r\n    setGain(channelName, knobValue){\r\n        this.setGainValue(channelName, knobValue, 'mainGainNode');\r\n    }\r\n\r\n    setEqHigh(channelName, knobValue){\r\n        this.setFilterValue(channelName, knobValue, 'eqHiFilterNode');\r\n    }\r\n\r\n    setEqMid(channelName, knobValue){\r\n        this.setFilterValue(channelName, knobValue, 'eqMidFilterNode');\r\n    }\r\n\r\n    setEqLow(channelName, knobValue){\r\n        this.setFilterValue(channelName, knobValue, 'eqLowFilterNode');\r\n    }\r\n\r\n    setFader(value){//in procent from -50%  to + 50% (not 0.01) but 1\r\n        let faderVolumeNodeA = this.audioNodes.channels[\"A\"].faderVolumeNode;\r\n        let faderVolumeNodeB = this.audioNodes.channels[\"B\"].faderVolumeNode;\r\n        let audioCtxA = this.channels.getChannel(\"A\").backend.ac;\r\n        let audioCtxB = this.channels.getChannel(\"B\").backend.ac;\r\n        if(!faderVolumeNodeA || !faderVolumeNodeB || !audioCtxA || !audioCtxB){\r\n            throw new Error(\"Fased value not set checkout funtion setFader in mixer object\");\r\n        }\r\n\r\n        let percent = (value + 50)/100;\r\n        let volA = Math.cos(percent * 0.5 * Math.PI);\r\n        let volB = Math.cos((1 - percent) * 0.5 * Math.PI);\r\n\r\n        faderVolumeNodeA.gain.setTargetAtTime(volA, audioCtxA.currentTime, 0.01);\r\n        faderVolumeNodeB.gain.setTargetAtTime(volB, audioCtxB.currentTime, 0.01);\r\n    }\r\n\r\n\r\n    setUpSampleBuffers(channelName){\r\n        let fftSize = this.audioNodes.channels[channelName].analyserNode.fftSize;\r\n        this.sampleBuffers.channels[channelName] = new Float32Array(fftSize);\r\n    }\r\n\r\n    getPeakMeter(channelName){\r\n        let analyser  = this.audioNodes?.channels[channelName]?.analyserNode\r\n        if(!analyser) {\r\n            return [];\r\n        }\r\n        let sampleBuffer = this.sampleBuffers.channels[channelName];\r\n        if(!sampleBuffer){\r\n            return [];\r\n        }\r\n        return this.getAnalyserData(analyser, sampleBuffer)\r\n    }\r\n\r\n    getAnalyserData(analyser, sampleBuffer){\r\n        analyser.getFloatTimeDomainData(sampleBuffer);\r\n       \r\n        //average \r\n        let sumOfSquares = 0;\r\n        for (let i = 0; i < sampleBuffer.length; i++) {\r\n          sumOfSquares += sampleBuffer[i] ** 2;\r\n        }\r\n\r\n        const avgPowerDecibels = 10 * Math.log10(sumOfSquares / sampleBuffer.length);\r\n\r\n        //peak \r\n\r\n        let peakPower = 0;\r\n        for (let i = 0; i < sampleBuffer.length; i++) {\r\n          const power = sampleBuffer[i] ** 2;\r\n          peakPower = Math.max(power, peakPower);\r\n        }\r\n        const peakPowerDecibels = 10 * Math.log10(peakPower);\r\n\r\n        return {\r\n            avgdB : avgPowerDecibels,\r\n            peakdB : peakPowerDecibels,\r\n        }\r\n    }\r\n    \r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}