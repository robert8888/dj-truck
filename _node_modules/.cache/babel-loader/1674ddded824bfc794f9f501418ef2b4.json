{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJEKTY\\\\APKI\\\\DjTruck\\\\djtruck\\\\src\\\\components\\\\Deck\\\\Deck.js\";\nimport React, { useEffect, useRef } from \"react\";\nimport { connect } from \"react-redux\"; //import WaveSurfer from \"wavesurfer\";\n//import WaveSurfer from \"./WaveSurfer/WaveSurfer\";\n\nimport { analyze } from 'web-audio-beat-detector';\nimport youTubeApi from \"./../../apis/yt/ytApi\";\nimport Player from \"./Player/Player\";\n\nconst getApi = apiName => {\n  switch (apiName) {\n    case \"YouTube\":\n      return youTubeApi;\n\n    default:\n      return null;\n  }\n};\n\nclass Deck extends React.Component {\n  constructor() {\n    super();\n    this.mainWave = React.createRef();\n    this.smallWave = React.createRef();\n    this.state = {};\n    this.state.join = {\n      peaks: [],\n      position: 0,\n      seekTo: 0\n    };\n  }\n\n  componentDidMount() {}\n  /* if(!this.props.active) return;\r\n   this.bigWaveSurfer = WaveSurfer.create({\r\n       container: this.mainWave.current,\r\n       waveColor: 'violet',\r\n       progressColor: 'purple',\r\n       autoCenter : true,\r\n       scrollParent: true,\r\n       hideScrollbar:true,\r\n       fillParent: false,\r\n       height: 130,\r\n       minPxPerSec : 150\r\n   });\r\n     this.smallWaveSurfer = WaveSurfer.create({\r\n       container: this.smallWave.current,\r\n       fillParent: true,\r\n       scrollParent : false,\r\n       hideScrollbar: true,\r\n       scrollParent : false,\r\n       height: 50,\r\n   })\r\n     let duration = 0;\r\n   this.bigWaveSurfer.on('ready', () => {\r\n      // this.bigWaveSurfer.play();\r\n       duration = this.bigWaveSurfer.getDuration();\r\n       let resolution = 430;\r\n       let peaks = this.bigWaveSurfer.backend.getPeaks(resolution, 0, resolution);\r\n       this.smallWaveSurfer.load(null, peaks);\r\n       startSync();\r\n       //this.calcBmp();\r\n   });\r\n     this.smallWaveSurfer.on('seek', (progress) => {\r\n       this.bigWaveSurfer.seekTo(progress);\r\n       if(!this.bigWaveSurfer.isPlaying()){\r\n           this.bigWaveSurfer.play();\r\n       }\r\n   })\r\n     let syncHandle = null;\r\n   let startSync = () => {\r\n       syncHandle = setInterval(() => {\r\n           let progress = this.bigWaveSurfer.getCurrentTime() / duration;\r\n           this.smallWaveSurfer.drawer.progress(progress);\r\n       }, 100);\r\n   }\r\n     let url = \"https://ciagnik-yt-downloader.herokuapp.com/download?url=https://www.youtube.com/watch?v=hVv331iLMXM\";\r\n   this.bigWaveSurfer.load(url);\r\n     this.calcBmp = () => {\r\n       fetch(url)\r\n       .then( response => response.arrayBuffer())\r\n       .then( buffer => {\r\n           const audioContext = new AudioContext();\r\n           return audioContext.decodeAudioData(buffer);\r\n       }).then( audioBuffer => analyze(audioBuffer))\r\n       .then(tempo => console.log(tempo))\r\n     }\r\n   //analyze()*/\n\n  /**peaksFromMaster(peaks){\r\n      this.setState( state => {\r\n          const _state = {...state}\r\n          _state.join.peaks = peaks;\r\n          return _state;\r\n      })\r\n  }\r\n    progressFromMaster(position){\r\n      this.setState( state => {\r\n          const _state = {...state};\r\n          _state.join.position = position;\r\n          return _state;\r\n      })\r\n  }\r\n    seekFromSlave(progress){\r\n      this.setState( state => {\r\n          const _state = {...state};\r\n          _state.join.seekTo = progress;\r\n          return _state;\r\n      })\r\n  }*/\n\n\n  render() {\n    let api = getApi(this.props.track.source);\n    let url = api && api.getUrl(this.props.track.id) || null;\n    return React.createElement(\"div\", {\n      style: {\n        height: 250 + 'px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, React.createElement(Player, {\n      name: this.props.name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapStateToProps = (state, ownProps) => ({\n  track: state.console.deck[ownProps.name].track,\n  state: state.console.deck[ownProps.name].state\n});\n\nconst mapDispachToProps = dispach => ({});\n\nexport default connect(mapStateToProps)(Deck);","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/components/Deck/Deck.js"],"names":["React","useEffect","useRef","connect","analyze","youTubeApi","Player","getApi","apiName","Deck","Component","constructor","mainWave","createRef","smallWave","state","join","peaks","position","seekTo","componentDidMount","render","api","props","track","source","url","getUrl","id","height","name","mapStateToProps","ownProps","console","deck","mapDispachToProps","dispach"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA4BC,MAA5B,QAAyC,OAAzC;AACA,SAASC,OAAT,QAAwB,aAAxB,C,CACA;AAEA;;AAEA,SAASC,OAAT,QAAwB,yBAAxB;AAEA,OAAOC,UAAP,MAAuB,uBAAvB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;;AAEA,MAAMC,MAAM,GAAIC,OAAD,IAAY;AACvB,UAAOA,OAAP;AACI,SAAK,SAAL;AAAgB,aAAOH,UAAP;;AAEhB;AAAU,aAAO,IAAP;AAHd;AAKH,CAND;;AAQA,MAAMI,IAAN,SAAmBT,KAAK,CAACU,SAAzB,CAAmC;AAC/BC,EAAAA,WAAW,GAAE;AACT;AACA,SAAKC,QAAL,GAAgBZ,KAAK,CAACa,SAAN,EAAhB;AACA,SAAKC,SAAL,GAAiBd,KAAK,CAACa,SAAN,EAAjB;AAEA,SAAKE,KAAL,GAAa,EAAb;AACA,SAAKA,KAAL,CAAWC,IAAX,GAAkB;AACdC,MAAAA,KAAK,EAAE,EADO;AAEdC,MAAAA,QAAQ,EAAE,CAFI;AAGdC,MAAAA,MAAM,EAAE;AAHM,KAAlB;AAKH;;AAGDC,EAAAA,iBAAiB,GAAE,CA+DlB;AA9DE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgEH;;;;;;;;;;;;;;;;;;;;;;;AAwBAC,EAAAA,MAAM,GAAG;AACL,QAAIC,GAAG,GAAGf,MAAM,CAAC,KAAKgB,KAAL,CAAWC,KAAX,CAAiBC,MAAlB,CAAhB;AACA,QAAIC,GAAG,GAAGJ,GAAG,IAAIA,GAAG,CAACK,MAAJ,CAAW,KAAKJ,KAAL,CAAWC,KAAX,CAAiBI,EAA5B,CAAP,IAA0C,IAApD;AAEA,WACI;AAAK,MAAA,KAAK,EAAE;AAACC,QAAAA,MAAM,EAAE,MAAM;AAAf,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAkBI,oBAAC,MAAD;AAAQ,MAAA,IAAI,EAAG,KAAKN,KAAL,CAAWO,IAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAlBJ,CADJ;AAsBC;;AAlI0B;;AAsInC,MAAMC,eAAe,GAAG,CAAChB,KAAD,EAAQiB,QAAR,MAAsB;AAC1CR,EAAAA,KAAK,EAAGT,KAAK,CAACkB,OAAN,CAAcC,IAAd,CAAmBF,QAAQ,CAACF,IAA5B,EAAkCN,KADA;AAE1CT,EAAAA,KAAK,EAAGA,KAAK,CAACkB,OAAN,CAAcC,IAAd,CAAmBF,QAAQ,CAACF,IAA5B,EAAkCf;AAFA,CAAtB,CAAxB;;AAKA,MAAMoB,iBAAiB,GAAGC,OAAO,KAAK,EAAL,CAAjC;;AAIA,eAAejC,OAAO,CAAC4B,eAAD,CAAP,CAAyBtB,IAAzB,CAAf","sourcesContent":["import React, { useEffect , useRef} from \"react\";\r\nimport { connect } from \"react-redux\";\r\n//import WaveSurfer from \"wavesurfer\";\r\n\r\n//import WaveSurfer from \"./WaveSurfer/WaveSurfer\";\r\n\r\nimport { analyze } from 'web-audio-beat-detector';\r\n\r\nimport youTubeApi from \"./../../apis/yt/ytApi\";\r\nimport Player from \"./Player/Player\";\r\n\r\nconst getApi = (apiName) =>{\r\n    switch(apiName){\r\n        case \"YouTube\": return youTubeApi;\r\n\r\n        default : return null;\r\n    }\r\n}\r\n\r\nclass Deck extends React.Component {\r\n    constructor(){\r\n        super();\r\n        this.mainWave = React.createRef();\r\n        this.smallWave = React.createRef();\r\n\r\n        this.state = {}\r\n        this.state.join = {\r\n            peaks: [],\r\n            position: 0,\r\n            seekTo: 0,\r\n        }\r\n    }\r\n\r\n\r\n    componentDidMount(){\r\n       /* if(!this.props.active) return;\r\n        this.bigWaveSurfer = WaveSurfer.create({\r\n            container: this.mainWave.current,\r\n            waveColor: 'violet',\r\n            progressColor: 'purple',\r\n            autoCenter : true,\r\n            scrollParent: true,\r\n            hideScrollbar:true,\r\n            fillParent: false,\r\n            height: 130,\r\n            minPxPerSec : 150\r\n        });\r\n\r\n        this.smallWaveSurfer = WaveSurfer.create({\r\n            container: this.smallWave.current,\r\n            fillParent: true,\r\n            scrollParent : false,\r\n            hideScrollbar: true,\r\n            scrollParent : false,\r\n            height: 50,\r\n        })\r\n\r\n        let duration = 0;\r\n        this.bigWaveSurfer.on('ready', () => {\r\n           // this.bigWaveSurfer.play();\r\n            duration = this.bigWaveSurfer.getDuration();\r\n            let resolution = 430;\r\n            let peaks = this.bigWaveSurfer.backend.getPeaks(resolution, 0, resolution);\r\n            this.smallWaveSurfer.load(null, peaks);\r\n            startSync();\r\n            //this.calcBmp();\r\n        });\r\n\r\n        this.smallWaveSurfer.on('seek', (progress) => {\r\n            this.bigWaveSurfer.seekTo(progress);\r\n            if(!this.bigWaveSurfer.isPlaying()){\r\n                this.bigWaveSurfer.play();\r\n            }\r\n        })\r\n\r\n        let syncHandle = null;\r\n        let startSync = () => {\r\n            syncHandle = setInterval(() => {\r\n                let progress = this.bigWaveSurfer.getCurrentTime() / duration;\r\n                this.smallWaveSurfer.drawer.progress(progress);\r\n            }, 100);\r\n        }\r\n\r\n        let url = \"https://ciagnik-yt-downloader.herokuapp.com/download?url=https://www.youtube.com/watch?v=hVv331iLMXM\";\r\n        this.bigWaveSurfer.load(url);\r\n\r\n        this.calcBmp = () => {\r\n            fetch(url)\r\n            .then( response => response.arrayBuffer())\r\n            .then( buffer => {\r\n                const audioContext = new AudioContext();\r\n                return audioContext.decodeAudioData(buffer);\r\n            }).then( audioBuffer => analyze(audioBuffer))\r\n            .then(tempo => console.log(tempo))\r\n\r\n        }\r\n        //analyze()*/\r\n    }\r\n\r\n    /**peaksFromMaster(peaks){\r\n        this.setState( state => {\r\n            const _state = {...state}\r\n            _state.join.peaks = peaks;\r\n            return _state;\r\n        })\r\n    }\r\n\r\n    progressFromMaster(position){\r\n        this.setState( state => {\r\n            const _state = {...state};\r\n            _state.join.position = position;\r\n            return _state;\r\n        })\r\n    }\r\n\r\n    seekFromSlave(progress){\r\n        this.setState( state => {\r\n            const _state = {...state};\r\n            _state.join.seekTo = progress;\r\n            return _state;\r\n        })\r\n    }*/\r\n\r\n    render() {\r\n        let api = getApi(this.props.track.source);\r\n        let url = api && api.getUrl(this.props.track.id) || null;\r\n\r\n        return (\r\n            <div style={{height: 250 + 'px'}}>\r\n                {/*<WaveSurfer\r\n                    type=\"master\" \r\n                    height=\"130\" \r\n                    url={url} \r\n                    name={ this.props.name } \r\n                    seekTo = { this.state.join.seekTo }\r\n                    exportPeaksHandler={ this.peaksFromMaster.bind(this) }\r\n                    exportProgressHandler = { this.progressFromMaster.bind(this) }\r\n                    />        \r\n                <WaveSurfer \r\n                    type=\"slave\" \r\n                    height=\"50\"\r\n                    peaks={ this.state.join.peaks } \r\n                    name={ this.props.name } \r\n                    progress = { this.state.join.position }\r\n                    exportSeekToHandler = { this.seekFromSlave.bind(this) }\r\n                />    */}\r\n                <Player name={ this.props.name }  />\r\n            </div>\r\n            )\r\n        }\r\n    \r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => ({\r\n    track : state.console.deck[ownProps.name].track,\r\n    state : state.console.deck[ownProps.name].state,\r\n})\r\n\r\nconst mapDispachToProps = dispach => ({\r\n    \r\n})\r\n\r\nexport default connect(mapStateToProps)(Deck);"]},"metadata":{},"sourceType":"module"}