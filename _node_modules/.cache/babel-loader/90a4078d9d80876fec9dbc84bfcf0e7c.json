{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJEKTY\\\\APKI\\\\DjTruck\\\\djtruck\\\\src\\\\pages\\\\app\\\\components\\\\PlayListExplorer\\\\Explorer\\\\ExplorerTree\\\\FileElement\\\\FileElement.js\";\nimport React, { useRef } from \"react\";\nimport { connect } from \"react-redux\";\nimport UUID from \"uuidjs\";\nimport ClassName from \"classnames\";\nimport { faFile } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport ItemTypes from \"../../../../../appItemTypes\";\n\nconst FileElement = props => {\n  const {\n    name,\n    path,\n    renameMode,\n    renameInput\n  } = props;\n  const fullPath = [...path, name];\n  const ref = useRef(null);\n  const [_, drag] = useDrag({\n    item: {\n      type: ItemTypes.FILE,\n      fullPath: fullPath\n    }\n  });\n  const [__, drop] = useDrop({\n    accept: ItemTypes.TRACK\n  });\n  let currentSelected = false;\n\n  if (fullPath.join(\"\") === props.currentSelection.join(\"\")) {\n    currentSelected = true;\n  }\n\n  const liClassList = ClassName(\"list-item item-file\", {\n    \"item--selected\": currentSelected\n  });\n  let content = name;\n\n  if (currentSelected && renameMode) {\n    content = renameInput(name);\n  }\n\n  drop(drag(ref));\n  return React.createElement(\"li\", {\n    ref: ref,\n    className: liClassList,\n    onClick: props.onClick,\n    onContextMenu: props.onContextMenu,\n    \"data-path\": path.join(\"/\"),\n    key: UUID.genV1(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, React.createElement(FontAwesomeIcon, {\n    className: \"icon icon-file\",\n    icon: faFile,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }), content);\n};\n\nconst mapStateToProps = state => ({\n  currentSelection: state.playList.currentSelection\n});\n\nexport default connect(mapStateToProps)(FileElement);","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/pages/app/components/PlayListExplorer/Explorer/ExplorerTree/FileElement/FileElement.js"],"names":["React","useRef","connect","UUID","ClassName","faFile","FontAwesomeIcon","ItemTypes","FileElement","props","name","path","renameMode","renameInput","fullPath","ref","_","drag","useDrag","item","type","FILE","__","drop","useDrop","accept","TRACK","currentSelected","join","currentSelection","liClassList","content","onClick","onContextMenu","genV1","mapStateToProps","state","playList"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,MAAhB,QAA8B,OAA9B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,MAAT,QAAuB,mCAAvB;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,OAAOC,SAAP,MAAsB,6BAAtB;;AAEA,MAAMC,WAAW,GAAGC,KAAK,IAAI;AACzB,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,IAAR;AAAcC,IAAAA,UAAd;AAA0BC,IAAAA;AAA1B,MAA0CJ,KAAhD;AACA,QAAMK,QAAQ,GAAG,CAAC,GAAGH,IAAJ,EAAUD,IAAV,CAAjB;AACA,QAAMK,GAAG,GAAGd,MAAM,CAAC,IAAD,CAAlB;AAGA,QAAM,CAAEe,CAAF,EAAMC,IAAN,IAAcC,OAAO,CAAC;AACxBC,IAAAA,IAAI,EAAE;AACDC,MAAAA,IAAI,EAAEb,SAAS,CAACc,IADf;AAEDP,MAAAA,QAAQ,EAAEA;AAFT;AADkB,GAAD,CAA3B;AAOA,QAAM,CAAEQ,EAAF,EAAOC,IAAP,IAAeC,OAAO,CAAC;AACzBC,IAAAA,MAAM,EAAGlB,SAAS,CAACmB;AADM,GAAD,CAA5B;AAIA,MAAIC,eAAe,GAAG,KAAtB;;AACA,MAAIb,QAAQ,CAACc,IAAT,CAAc,EAAd,MAAsBnB,KAAK,CAACoB,gBAAN,CAAuBD,IAAvB,CAA4B,EAA5B,CAA1B,EAA2D;AACvDD,IAAAA,eAAe,GAAG,IAAlB;AACH;;AACD,QAAMG,WAAW,GAAG1B,SAAS,CACzB,qBADyB,EAEzB;AAAE,sBAAkBuB;AAApB,GAFyB,CAA7B;AAIA,MAAII,OAAO,GAAGrB,IAAd;;AACA,MAAIiB,eAAe,IAAIf,UAAvB,EAAmC;AAC/BmB,IAAAA,OAAO,GAAGlB,WAAW,CAACH,IAAD,CAArB;AACH;;AAEDa,EAAAA,IAAI,CAACN,IAAI,CAACF,GAAD,CAAL,CAAJ;AACA,SACI;AACI,IAAA,GAAG,EAAEA,GADT;AAEI,IAAA,SAAS,EAAEe,WAFf;AAGI,IAAA,OAAO,EAAErB,KAAK,CAACuB,OAHnB;AAII,IAAA,aAAa,EAAEvB,KAAK,CAACwB,aAJzB;AAKI,iBAAWtB,IAAI,CAACiB,IAAL,CAAU,GAAV,CALf;AAMI,IAAA,GAAG,EAAEzB,IAAI,CAAC+B,KAAL,EANT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOI,oBAAC,eAAD;AAAiB,IAAA,SAAS,EAAC,gBAA3B;AAA4C,IAAA,IAAI,EAAE7B,MAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPJ,EAQK0B,OARL,CADJ;AAYH,CA3CD;;AA6CA,MAAMI,eAAe,GAAGC,KAAK,KAAK;AAC9BP,EAAAA,gBAAgB,EAAEO,KAAK,CAACC,QAAN,CAAeR;AADH,CAAL,CAA7B;;AAIA,eAAe3B,OAAO,CAACiC,eAAD,CAAP,CAAyB3B,WAAzB,CAAf","sourcesContent":["import React, { useRef } from \"react\";\r\nimport { connect } from \"react-redux\"\r\nimport UUID from \"uuidjs\";\r\nimport ClassName from \"classnames\";\r\nimport { faFile } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport ItemTypes from \"../../../../../appItemTypes\";\r\n\r\nconst FileElement = props => {\r\n    const { name, path, renameMode, renameInput } = props;\r\n    const fullPath = [...path, name]\r\n    const ref = useRef(null)\r\n\r\n\r\n    const [ _ , drag] = useDrag({\r\n        item: { \r\n             type: ItemTypes.FILE,\r\n             fullPath: fullPath\r\n            },\r\n    })\r\n\r\n    const [ __ , drop] = useDrop({\r\n        accept : ItemTypes.TRACK,\r\n    })\r\n\r\n    let currentSelected = false;\r\n    if (fullPath.join(\"\") === props.currentSelection.join(\"\")) {\r\n        currentSelected = true;\r\n    }\r\n    const liClassList = ClassName(\r\n        \"list-item item-file\",\r\n        { \"item--selected\": currentSelected }\r\n    )\r\n    let content = name;\r\n    if (currentSelected && renameMode) {\r\n        content = renameInput(name)\r\n    }\r\n\r\n    drop(drag(ref))\r\n    return (\r\n        <li\r\n            ref={ref}\r\n            className={liClassList}\r\n            onClick={props.onClick}\r\n            onContextMenu={props.onContextMenu}\r\n            data-path={path.join(\"/\")}\r\n            key={UUID.genV1()}>\r\n            <FontAwesomeIcon className=\"icon icon-file\" icon={faFile} />\r\n            {content}\r\n        </li>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    currentSelection: state.playList.currentSelection\r\n})\r\n\r\nexport default connect(mapStateToProps)(FileElement);\r\n\r\n"]},"metadata":{},"sourceType":"module"}