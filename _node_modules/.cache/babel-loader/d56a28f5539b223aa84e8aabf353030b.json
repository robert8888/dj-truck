{"ast":null,"code":"import { ACTIONS } from \"../../actions\";\nimport { takeEvery, select, put, fork } from \"redux-saga/effects\";\nimport { getApi } from \"./../../apis/apiProvider\";\nimport { showLoading, hideLoading } from 'react-redux-loading-bar';\nimport { get } from \"lodash/object\";\nimport { formater } from \"./../../utils/time/timeFromater\";\nexport default function* copyTrackToListSaga() {\n  yield takeEvery(ACTIONS.PL_COPY_TRACK_TO_LIST, forkHandle);\n\n  function* forkHandle(action) {\n    yield fork(handle, action);\n  }\n}\n\nconst getToken = state => state.user.token;\n\nconst getPlaylist = (state, path) => get(state.playList, path);\n\nfunction* handle(action) {\n  const token = yield select(getToken);\n\n  if (!token) {\n    return;\n  }\n\n  try {\n    yield put(showLoading());\n    const {\n      callQuery,\n      queries\n    } = getApi(\"UserAssets\");\n    const playlist = yield select(getPlaylist, action.path);\n    let playlistId = playlist._id;\n    let playlistLength = playlist._content.length;\n\n    if (!playlistId) {\n      throw new Error(\"Internal error - playlist id not found\");\n    }\n\n    const result = yield callQuery(queries.createTrackQl, token, {\n      playlist: playlistId,\n      title: action.track.title,\n      source: action.track.source,\n      sourceId: action.track.sourceId,\n      quality: action.track.quality,\n      bpm: action.bpm === 'calculating' ? 0 : action.track.bpm,\n      offset: action.track.offset,\n      duration: typeof action.track.duration === \"string\" ? formater.ytToSeconds(action.track.duration) : action.track.duration,\n      thumbnails: action.track.thumbnails,\n      position: playlistLength\n    });\n    console.log(result);\n\n    if (result.errors) {\n      throw new Error(JSON.stringify(result.errors));\n    }\n  } catch (err) {\n    console.log(\"Can't push track to playlist in database\");\n    console.log(err.message);\n  } finally {\n    yield put(hideLoading());\n  }\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/sagas/playlists/copyTrackToPlaylistRequestSaga.js"],"names":["ACTIONS","takeEvery","select","put","fork","getApi","showLoading","hideLoading","get","formater","copyTrackToListSaga","PL_COPY_TRACK_TO_LIST","forkHandle","action","handle","getToken","state","user","token","getPlaylist","path","playList","callQuery","queries","playlist","playlistId","_id","playlistLength","_content","length","Error","result","createTrackQl","title","track","source","sourceId","quality","bpm","offset","duration","ytToSeconds","thumbnails","position","console","log","errors","JSON","stringify","err","message"],"mappings":"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","sourcesContent":["import {  ACTIONS } from \"../../actions\";\r\nimport { takeEvery, select, put, fork } from \"redux-saga/effects\"\r\nimport { getApi } from \"./../../apis/apiProvider\";\r\nimport { showLoading, hideLoading } from 'react-redux-loading-bar'\r\nimport { get } from \"lodash/object\";\r\nimport { formater } from \"./../../utils/time/timeFromater\";\r\n\r\nexport default function* copyTrackToListSaga() {\r\n    yield takeEvery(ACTIONS.PL_COPY_TRACK_TO_LIST, forkHandle)\r\n    function* forkHandle(action){\r\n        yield fork(handle, action)\r\n    }\r\n}\r\n\r\nconst getToken = state => state.user.token;\r\n\r\nconst getPlaylist = (state, path) => get(state.playList, path);\r\n\r\nfunction* handle(action) {\r\n    const token = yield select(getToken);\r\n    if (!token) {\r\n        return;\r\n    }\r\n\r\n    try {\r\n        yield put(showLoading());\r\n        const { callQuery, queries } = getApi(\"UserAssets\");\r\n        const playlist = yield select(getPlaylist, action.path);\r\n        let playlistId = playlist._id;\r\n        let playlistLength = playlist._content.length;\r\n        if(!playlistId){\r\n            throw new Error(\"Internal error - playlist id not found\")\r\n        }\r\n\r\n        \r\n        const result = yield callQuery(queries.createTrackQl, token, {\r\n            playlist: playlistId,\r\n            title: action.track.title,\r\n            source: action.track.source,\r\n            sourceId: action.track.sourceId,\r\n            quality: action.track.quality,\r\n            bpm: (action.bpm === 'calculating') ? 0 : action.track.bpm,\r\n            offset: action.track.offset,\r\n            duration: (typeof action.track.duration === \"string\") ?\r\n                formater.ytToSeconds(action.track.duration) :\r\n                action.track.duration,\r\n            thumbnails: action.track.thumbnails,\r\n            position: playlistLength,\r\n        });\r\n\r\n        \r\n\r\n        console.log(result)\r\n        if (result.errors){\r\n            throw new Error(JSON.stringify(result.errors))\r\n        }\r\n\r\n    } catch (err) {\r\n        console.log(\"Can't push track to playlist in database\");\r\n        console.log(err.message);\r\n    } finally {\r\n        yield put(hideLoading())\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}