{"ast":null,"code":"import { createPlaylist, ACTIONS } from \"../../actions\";\nimport { takeEvery, select, put, call } from \"redux-saga/effects\";\nimport { getApi } from \"./../../apis/apiProvider\";\nimport query from \"./../../qlQueries/createPlaylist\";\nimport { generateTemplateName, findClosesDir } from \"./../../reducers/console/playlist/utils\";\nimport { get } from \"lodash/object\";\nimport { handel as loadDirSagaHanedl } from \"./loadDirRequestSaga\";\nexport default function* createDirRequestSaga() {\n  yield takeEvery(ACTIONS.PL_CREATE_PLAYLIST_REQUEST, callApi);\n}\n\nconst getToken = state => state.user.token;\n\nconst getCurrentSelection = state => state.playList.currentSelection;\n\nconst getParentPath = (state, currentSelection) => findClosesDir(state, currentSelection);\n\nconst generatePlaylistName = (state, parrentPath) => generateTemplateName(state.playList, parrentPath, \"New Playlist\");\n\nconst getParrentDir = (state, path) => get(state.playList, path);\n\nfunction* callApi(action) {\n  var _result$data;\n\n  const {\n    callQuery\n  } = getApi(\"UserAssets\");\n  const token = yield select(getToken);\n  const currentSelection = yield select(getCurrentSelection);\n  const parrentPath = yield select(getParentPath, currentSelection);\n  let playlistName = action.name;\n  let renameMode = false;\n\n  if (!playlistName) {\n    playlistName = yield select(generatePlaylistName, parrentPath);\n    renameMode = true;\n  }\n\n  const parrentDir = yield select(getParrentDir, parrentPath);\n\n  if (!parrentDir._loaded) {\n    yield call(loadDirSagaHanedl, {\n      path: parrentPath\n    });\n  }\n\n  let result = yield callQuery(query(parrentDir._id, playlistName), token);\n\n  if (!result || !((_result$data = result.data) === null || _result$data === void 0 ? void 0 : _result$data.createPlaylist)) {\n    return;\n  }\n\n  const id = result.data.createPlaylist.id;\n  yield put(createPlaylist(playlistName, id, renameMode));\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/sagas/playlists/createPlaylistRequestSaga.js"],"names":["createPlaylist","ACTIONS","takeEvery","select","put","call","getApi","query","generateTemplateName","findClosesDir","get","handel","loadDirSagaHanedl","createDirRequestSaga","PL_CREATE_PLAYLIST_REQUEST","callApi","getToken","state","user","token","getCurrentSelection","playList","currentSelection","getParentPath","generatePlaylistName","parrentPath","getParrentDir","path","action","callQuery","playlistName","name","renameMode","parrentDir","_loaded","result","_id","data","id"],"mappings":"AAAA,SAASA,cAAT,EAAyBC,OAAzB,QAAwC,eAAxC;AACA,SAASC,SAAT,EAAoBC,MAApB,EAA4BC,GAA5B,EAAiCC,IAAjC,QAA6C,oBAA7C;AACA,SAASC,MAAT,QAAuB,0BAAvB;AACA,OAAOC,KAAP,MAAkB,kCAAlB;AACA,SAASC,oBAAT,EAA+BC,aAA/B,QAAoD,yCAApD;AACA,SAASC,GAAT,QAAoB,eAApB;AACA,SAAQC,MAAM,IAAIC,iBAAlB,QAA0C,sBAA1C;AAEA,eAAe,UAAUC,oBAAV,GAAiC;AAC5C,QAAMX,SAAS,CAACD,OAAO,CAACa,0BAAT,EAAqCC,OAArC,CAAf;AACH;;AAED,MAAMC,QAAQ,GAAGC,KAAK,IAAIA,KAAK,CAACC,IAAN,CAAWC,KAArC;;AAEA,MAAMC,mBAAmB,GAAGH,KAAK,IAAIA,KAAK,CAACI,QAAN,CAAeC,gBAApD;;AAEA,MAAMC,aAAa,GAAG,CAACN,KAAD,EAAQK,gBAAR,KAClBb,aAAa,CAACQ,KAAD,EAAQK,gBAAR,CADjB;;AAGA,MAAME,oBAAoB,GAAG,CAACP,KAAD,EAAQQ,WAAR,KACzBjB,oBAAoB,CAACS,KAAK,CAACI,QAAP,EAAiBI,WAAjB,EAA8B,cAA9B,CADxB;;AAGA,MAAMC,aAAa,GAAG,CAACT,KAAD,EAAQU,IAAR,KAAiBjB,GAAG,CAACO,KAAK,CAACI,QAAP,EAAiBM,IAAjB,CAA1C;;AAGA,UAAUZ,OAAV,CAAkBa,MAAlB,EAA0B;AAAA;;AACtB,QAAM;AAAEC,IAAAA;AAAF,MAAgBvB,MAAM,CAAC,YAAD,CAA5B;AACA,QAAMa,KAAK,GAAG,MAAMhB,MAAM,CAACa,QAAD,CAA1B;AACA,QAAMM,gBAAgB,GAAG,MAAMnB,MAAM,CAACiB,mBAAD,CAArC;AACA,QAAMK,WAAW,GAAG,MAAMtB,MAAM,CAACoB,aAAD,EAAgBD,gBAAhB,CAAhC;AACA,MAAIQ,YAAY,GAAGF,MAAM,CAACG,IAA1B;AACA,MAAIC,UAAU,GAAG,KAAjB;;AACA,MAAG,CAACF,YAAJ,EAAiB;AACbA,IAAAA,YAAY,GAAG,MAAM3B,MAAM,CAACqB,oBAAD,EAAuBC,WAAvB,CAA3B;AACAO,IAAAA,UAAU,GAAG,IAAb;AACH;;AACD,QAAMC,UAAU,GAAG,MAAM9B,MAAM,CAACuB,aAAD,EAAgBD,WAAhB,CAA/B;;AACA,MAAG,CAACQ,UAAU,CAACC,OAAf,EAAuB;AACnB,UAAM7B,IAAI,CAACO,iBAAD,EAAoB;AAACe,MAAAA,IAAI,EAAEF;AAAP,KAApB,CAAV;AACH;;AAED,MAAIU,MAAM,GAAG,MAAMN,SAAS,CAACtB,KAAK,CAAC0B,UAAU,CAACG,GAAZ,EAAiBN,YAAjB,CAAN,EAAsCX,KAAtC,CAA5B;;AACA,MAAG,CAACgB,MAAD,IAAW,kBAACA,MAAM,CAACE,IAAR,iDAAC,aAAarC,cAAd,CAAd,EAA2C;AACvC;AACH;;AACD,QAAMsC,EAAE,GAAGH,MAAM,CAACE,IAAP,CAAYrC,cAAZ,CAA2BsC,EAAtC;AAEA,QAAMlC,GAAG,CAACJ,cAAc,CAAC8B,YAAD,EAAeQ,EAAf,EAAmBN,UAAnB,CAAf,CAAT;AACH","sourcesContent":["import { createPlaylist, ACTIONS } from \"../../actions\";\r\nimport { takeEvery, select, put, call } from \"redux-saga/effects\"\r\nimport { getApi } from \"./../../apis/apiProvider\";\r\nimport query from \"./../../qlQueries/createPlaylist\";\r\nimport { generateTemplateName, findClosesDir } from \"./../../reducers/console/playlist/utils\";\r\nimport { get } from \"lodash/object\";\r\nimport {handel as loadDirSagaHanedl} from \"./loadDirRequestSaga\";\r\n\r\nexport default function* createDirRequestSaga() {\r\n    yield takeEvery(ACTIONS.PL_CREATE_PLAYLIST_REQUEST, callApi)\r\n}\r\n\r\nconst getToken = state => state.user.token;\r\n\r\nconst getCurrentSelection = state => state.playList.currentSelection;\r\n\r\nconst getParentPath = (state, currentSelection) =>\r\n    findClosesDir(state, currentSelection)\r\n\r\nconst generatePlaylistName = (state, parrentPath) => \r\n    generateTemplateName(state.playList, parrentPath, \"New Playlist\");\r\n\r\nconst getParrentDir = (state, path) => get(state.playList, path);\r\n\r\n\r\nfunction* callApi(action) {\r\n    const { callQuery } = getApi(\"UserAssets\");\r\n    const token = yield select(getToken);\r\n    const currentSelection = yield select(getCurrentSelection);\r\n    const parrentPath = yield select(getParentPath, currentSelection);\r\n    let playlistName = action.name;\r\n    let renameMode = false;\r\n    if(!playlistName){\r\n        playlistName = yield select(generatePlaylistName, parrentPath);\r\n        renameMode = true;\r\n    } \r\n    const parrentDir = yield select(getParrentDir, parrentPath);\r\n    if(!parrentDir._loaded){\r\n        yield call(loadDirSagaHanedl, {path: parrentPath})\r\n    }\r\n\r\n    let result = yield callQuery(query(parrentDir._id, playlistName), token);\r\n    if(!result || !result.data?.createPlaylist){\r\n        return ;\r\n    }\r\n    const id = result.data.createPlaylist.id;\r\n\r\n    yield put(createPlaylist(playlistName, id, renameMode));\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}