{"ast":null,"code":"import _defineProperty from\"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";import _objectSpread from\"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import _classCallCheck from\"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import store from\"./../../../../../../store/\";import{getBeatLength,calcBpm}from\"./../../../../../../utils/bpm/converter\";import{setPitch,setSync}from\"./../../../../../../actions\";var Synchronizer=/*#__PURE__*/function(){function Synchronizer(channels){_classCallCheck(this,Synchronizer);this.channels=channels;this.dispatch=store.dispatch;this.stdDivceDiff={};}_createClass(Synchronizer,[{key:\"getSyncBarPostion\",value:function getSyncBarPostion(channelName){var data=this.getSyncData(channelName);if(data!=null){var diff=data.diff,masterBeatLength=data.masterBeatLength;return diff/masterBeatLength;}return null;}},{key:\"sync\",value:function sync(channelName){console.log(\"sync channel\",channelName);var state=store.getState();if(channelName===state.console.master){//you can't sync master to master\nthis.dispatch(setSync(channelName,false));return;}var slaveChannel=this.channels.getChannel(channelName);var syncData=this.getSyncData(channelName);if(!syncData){this.dispatch(setSync(channelName,false));return;}var masterBpm=state.console.channel[state.console.master].track.bpm;var currentMasterPitch=state.console.channel[state.console.master].playBackState.pitch;var slaveBpm=state.console.channel[channelName].track.bpm;var newSlavePitch=(calcBpm(masterBpm,currentMasterPitch)/slaveBpm-1)*100;this.dispatch(setPitch(newSlavePitch,channelName));slaveChannel.backend.seekTo(slaveChannel.getCurrentTime()+syncData.diff);slaveChannel.drawer.progress(slaveChannel.backend.getPlayedPercents());slaveChannel.play();this.dispatch(setSync(channelName,false));}},{key:\"getSyncData\",value:function getSyncData(channelName){var state=store.getState();if(!state.console.master)return null;var masterChannel=this.channels.getChannel(state.console.master);var slaveChannel=this.channels.getChannel(channelName);if(!masterChannel.isPlaying()||!slaveChannel.isPlaying())return null;// --- stabilization - beacuase :\n// masterChannel.getCurrentTime() - slaveChannel.getCurrentTime() is not stable as should be\n// cause of this is calculated average diff and diviation from this diff.\nif(!this.stdDivceDiff[channelName]){//craete\nthis.stdDivceDiff=_objectSpread({},this.stdDivceDiff,_defineProperty({},channelName,null));//set\nthis.stdDivceDiff[channelName]=masterChannel.backend.ac.currentTime-slaveChannel.backend.ac.currentTime;}var currentDdff=masterChannel.backend.ac.currentTime-slaveChannel.backend.ac.currentTime;this.stdDivceDiff[channelName]=(this.stdDivceDiff[channelName]+currentDdff)/2;var deviation=this.stdDivceDiff[channelName]-currentDdff;//----------------------\nvar masterPosition=masterChannel.getCurrentTime();var slavePosition=slaveChannel.getCurrentTime()+deviation;var masterBpm=state.console.channel[state.console.master].track.bpm;var masterBeatLength=getBeatLength(masterBpm);var masterOffset=state.console.channel[state.console.master].playBackState.offset;var slaveBpm=state.console.channel[channelName].track.bpm;var slaveBeatLength=getBeatLength(slaveBpm);var slaveOffset=state.console.channel[channelName].playBackState.offset;var masterBeatPosition=(masterPosition-masterOffset)%masterBeatLength;var slaveBeatPosition=(slavePosition-slaveOffset)%slaveBeatLength;var beatDiff=masterBeatPosition-slaveBeatPosition;//when master track is in the current beat but slave is in the next one\n//and in invers situation\nvar beatDiffEdgeNegative=masterBeatLength-masterBeatPosition+slaveBeatPosition;// slave is overtaking\nvar beatDiffEdgePositive=slaveBeatLength+masterBeatPosition-slaveBeatPosition;// slave is delayed\nvar min=Math.min(Math.abs(beatDiff),Math.abs(beatDiffEdgeNegative),Math.abs(beatDiffEdgePositive));var diff;switch(min){case Math.abs(beatDiff):{diff=beatDiff;break;}case Math.abs(beatDiffEdgeNegative):{diff=-Math.abs(beatDiffEdgeNegative);break;}case Math.abs(beatDiffEdgePositive):{diff=Math.abs(beatDiffEdgePositive);break;}default:diff=min;}return{diff:diff,masterBeatLength:masterBeatLength};}}]);return Synchronizer;}();export{Synchronizer as default};","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/pages/console/core/console/channels/sync/synchronizer.js"],"names":["store","getBeatLength","calcBpm","setPitch","setSync","Synchronizer","channels","dispatch","stdDivceDiff","channelName","data","getSyncData","diff","masterBeatLength","console","log","state","getState","master","slaveChannel","getChannel","syncData","masterBpm","channel","track","bpm","currentMasterPitch","playBackState","pitch","slaveBpm","newSlavePitch","backend","seekTo","getCurrentTime","drawer","progress","getPlayedPercents","play","masterChannel","isPlaying","ac","currentTime","currentDdff","deviation","masterPosition","slavePosition","masterOffset","offset","slaveBeatLength","slaveOffset","masterBeatPosition","slaveBeatPosition","beatDiff","beatDiffEdgeNegative","beatDiffEdgePositive","min","Math","abs"],"mappings":"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","sourcesContent":["import store from \"./../../../../../../store/\";\r\nimport { getBeatLength, calcBpm } from \"./../../../../../../utils/bpm/converter\";\r\nimport { setPitch, setSync } from \"./../../../../../../actions\";\r\n\r\nexport default class Synchronizer {\r\n  constructor(channels) {\r\n    this.channels = channels;\r\n    this.dispatch = store.dispatch;\r\n    this.stdDivceDiff = {}\r\n  }\r\n\r\n  getSyncBarPostion(channelName) {\r\n    const data = this.getSyncData(channelName);\r\n    if (data != null) {\r\n      const { diff, masterBeatLength } = data;\r\n      return diff / masterBeatLength;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  sync(channelName) {\r\n    console.log(\"sync channel\", channelName);\r\n    const state = store.getState();\r\n    if (channelName === state.console.master) { //you can't sync master to master\r\n      this.dispatch(setSync(channelName, false));\r\n      return;\r\n    }\r\n\r\n    const slaveChannel = this.channels.getChannel(channelName);\r\n\r\n    const syncData = this.getSyncData(channelName);\r\n    if (!syncData) {\r\n      this.dispatch(setSync(channelName, false));\r\n      return;\r\n    }\r\n    const masterBpm = state.console.channel[state.console.master].track.bpm;\r\n    const currentMasterPitch = \r\n        state.console.channel[state.console.master].playBackState.pitch;\r\n    const slaveBpm = state.console.channel[channelName].track.bpm;\r\n    const newSlavePitch = \r\n        (calcBpm(masterBpm, currentMasterPitch) / slaveBpm - 1) * 100;\r\n    this.dispatch(setPitch(newSlavePitch, channelName));\r\n\r\n    slaveChannel.backend.seekTo(slaveChannel.getCurrentTime() + syncData.diff);\r\n    slaveChannel.drawer.progress(slaveChannel.backend.getPlayedPercents());\r\n    slaveChannel.play();\r\n\r\n    this.dispatch(setSync(channelName, false));\r\n  }\r\n\r\n  getSyncData(channelName) {\r\n    let state = store.getState();\r\n    if (!state.console.master) return null;\r\n\r\n    const masterChannel = this.channels.getChannel(state.console.master);\r\n    const slaveChannel = this.channels.getChannel(channelName);\r\n    if (!masterChannel.isPlaying() || !slaveChannel.isPlaying()) return null;\r\n\r\n    // --- stabilization - beacuase :\r\n    // masterChannel.getCurrentTime() - slaveChannel.getCurrentTime() is not stable as should be\r\n    // cause of this is calculated average diff and diviation from this diff.\r\n    if (!this.stdDivceDiff[channelName]) {\r\n      //craete\r\n      this.stdDivceDiff = { ...this.stdDivceDiff, [channelName]: null };\r\n      //set\r\n      this.stdDivceDiff[channelName] = masterChannel.backend.ac.currentTime \r\n                                     - slaveChannel.backend.ac.currentTime;\r\n    }\r\n\r\n    const currentDdff = \r\n      masterChannel.backend.ac.currentTime - slaveChannel.backend.ac.currentTime;\r\n\r\n    this.stdDivceDiff[channelName] =\r\n      (this.stdDivceDiff[channelName] + currentDdff) / 2;\r\n\r\n    const deviation = this.stdDivceDiff[channelName] - currentDdff;\r\n    //----------------------\r\n\r\n    let masterPosition = masterChannel.getCurrentTime();\r\n    let slavePosition = slaveChannel.getCurrentTime() + deviation;\r\n\r\n    const masterBpm = state.console.channel[state.console.master].track.bpm;\r\n    const masterBeatLength = getBeatLength(masterBpm);\r\n    const masterOffset = \r\n      state.console.channel[state.console.master].playBackState.offset;\r\n\r\n    const slaveBpm = state.console.channel[channelName].track.bpm;\r\n    const slaveBeatLength = getBeatLength(slaveBpm);\r\n    const slaveOffset = \r\n      state.console.channel[channelName].playBackState.offset;\r\n\r\n    const masterBeatPosition =\r\n      (masterPosition - masterOffset) % masterBeatLength;\r\n\r\n    const slaveBeatPosition =\r\n      (slavePosition - slaveOffset) % slaveBeatLength;\r\n\r\n    const beatDiff = masterBeatPosition - slaveBeatPosition;\r\n\r\n    //when master track is in the current beat but slave is in the next one\r\n    //and in invers situation\r\n    const beatDiffEdgeNegative = masterBeatLength \r\n                               - masterBeatPosition \r\n                               + slaveBeatPosition; // slave is overtaking\r\n\r\n    const beatDiffEdgePositive = slaveBeatLength \r\n                               + masterBeatPosition \r\n                               - slaveBeatPosition; // slave is delayed\r\n\r\n    const min = Math.min(\r\n      Math.abs(beatDiff),\r\n      Math.abs(beatDiffEdgeNegative),\r\n      Math.abs(beatDiffEdgePositive)\r\n    );\r\n\r\n    let diff;\r\n    switch (min) {\r\n      case Math.abs(beatDiff): {\r\n        diff = beatDiff;\r\n        break;\r\n      }\r\n      case Math.abs(beatDiffEdgeNegative): {\r\n        diff = -Math.abs(beatDiffEdgeNegative);\r\n        break;\r\n      }\r\n      case Math.abs(beatDiffEdgePositive): {\r\n        diff = Math.abs(beatDiffEdgePositive);\r\n        break;\r\n      }\r\n      default:\r\n        diff = min;\r\n    }\r\n\r\n    return {\r\n      diff,\r\n      masterBeatLength\r\n    };\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}