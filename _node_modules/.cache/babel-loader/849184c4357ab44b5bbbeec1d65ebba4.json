{"ast":null,"code":"import { call, put, select, takeEvery } from \"redux-saga/effects\";\nimport { ACTIONS, pushLog, pushToTracklist, updateEndTime } from \"../../../actions\";\nimport RECORD_STATE from \"./../../../reducers/console/recorder/stateDef\";\nimport Log from \"./../../../utils/logger/logger\";\nexport default function* interceptLoadtrack() {\n  yield takeEvery(ACTIONS.LOAD_TRACK, handel);\n}\n\nconst getTracklist = state => state.recorder.tracklist;\n\nconst isRecording = state => state.recorder.recordingState === RECORD_STATE.RECORDING;\n\nfunction* finishUnfinished(tracklist, channel) {\n  const unfinished = tracklist.find(track => track.channel === channel && track.start && !track.end);\n  if (!unfinished) return;\n  yield put(updateEndTime(unfinished.id));\n}\n\nfunction* handel(action) {\n  try {\n    const channel = action.destination;\n    const track = action.track;\n    const recording = yield select(isRecording);\n    if (!recording) return;\n    const tracklist = yield select(getTracklist);\n    yield call(finishUnfinished, tracklist, channel);\n    yield put(pushToTracklist({\n      id: track.id,\n      channel,\n      start: null,\n      end: null\n    }));\n  } catch (error) {\n    yield put(pushLog(Log.Error(['saga', 'recorder', 'tracklis', 'intercept load track to deck'], \"Can't add track to tracklist. :\" + error.message, error)));\n  }\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/sagas/recorder/tracklist/loadtrack.js"],"names":["call","put","select","takeEvery","ACTIONS","pushLog","pushToTracklist","updateEndTime","RECORD_STATE","Log","interceptLoadtrack","LOAD_TRACK","handel","getTracklist","state","recorder","tracklist","isRecording","recordingState","RECORDING","finishUnfinished","channel","unfinished","find","track","start","end","id","action","destination","recording","error","Error","message"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,MAApB,EAA4BC,SAA5B,QAA6C,oBAA7C;AACA,SAASC,OAAT,EAAkBC,OAAlB,EAA2BC,eAA3B,EAA4CC,aAA5C,QAAiE,kBAAjE;AACA,OAAOC,YAAP,MAAyB,+CAAzB;AACA,OAAOC,GAAP,MAAgB,gCAAhB;AAEA,eAAe,UAAUC,kBAAV,GAA+B;AAC1C,QAAMP,SAAS,CAACC,OAAO,CAACO,UAAT,EAAqBC,MAArB,CAAf;AACH;;AAED,MAAMC,YAAY,GAAGC,KAAK,IAAIA,KAAK,CAACC,QAAN,CAAeC,SAA7C;;AAEA,MAAMC,WAAW,GAAGH,KAAK,IAAIA,KAAK,CAACC,QAAN,CAAeG,cAAf,KAAkCV,YAAY,CAACW,SAA5E;;AAEA,UAAWC,gBAAX,CAA4BJ,SAA5B,EAAwCK,OAAxC,EAAgD;AAC5C,QAAMC,UAAU,GAAGN,SAAS,CAACO,IAAV,CAAeC,KAAK,IAClCA,KAAK,CAACH,OAAN,KAAkBA,OAAlB,IAA6BG,KAAK,CAACC,KAAnC,IAA4C,CAACD,KAAK,CAACE,GADrC,CAAnB;AAGA,MAAG,CAACJ,UAAJ,EAAgB;AAEhB,QAAMrB,GAAG,CAACM,aAAa,CAACe,UAAU,CAACK,EAAZ,CAAd,CAAT;AACH;;AAED,UAAUf,MAAV,CAAiBgB,MAAjB,EAAwB;AACpB,MAAG;AACC,UAAMP,OAAO,GAAGO,MAAM,CAACC,WAAvB;AACA,UAAML,KAAK,GAAGI,MAAM,CAACJ,KAArB;AAEA,UAAMM,SAAS,GAAG,MAAM5B,MAAM,CAACe,WAAD,CAA9B;AACA,QAAG,CAACa,SAAJ,EAAe;AAEf,UAAMd,SAAS,GAAG,MAAMd,MAAM,CAACW,YAAD,CAA9B;AACA,UAAMb,IAAI,CAACoB,gBAAD,EAAmBJ,SAAnB,EAA8BK,OAA9B,CAAV;AAEA,UAAMpB,GAAG,CAACK,eAAe,CAAC;AACtBqB,MAAAA,EAAE,EAAEH,KAAK,CAACG,EADY;AAEtBN,MAAAA,OAFsB;AAGtBI,MAAAA,KAAK,EAAE,IAHe;AAItBC,MAAAA,GAAG,EAAE;AAJiB,KAAD,CAAhB,CAAT;AAOH,GAjBD,CAiBE,OAAMK,KAAN,EAAY;AACV,UAAM9B,GAAG,CAACI,OAAO,CAACI,GAAG,CAACuB,KAAJ,CACd,CAAC,MAAD,EAAS,UAAT,EAAqB,UAArB,EAAiC,8BAAjC,CADc,EAEd,oCAAoCD,KAAK,CAACE,OAF5B,EAGdF,KAHc,CAAD,CAAR,CAAT;AAKH;AAGJ","sourcesContent":["import { call, put, select, takeEvery } from \"redux-saga/effects\";\r\nimport { ACTIONS, pushLog, pushToTracklist, updateEndTime } from \"../../../actions\";\r\nimport RECORD_STATE from \"./../../../reducers/console/recorder/stateDef\";\r\nimport Log from \"./../../../utils/logger/logger\";\r\n\r\nexport default function* interceptLoadtrack() {\r\n    yield takeEvery(ACTIONS.LOAD_TRACK, handel)\r\n}\r\n\r\nconst getTracklist = state => state.recorder.tracklist;\r\n\r\nconst isRecording = state => state.recorder.recordingState === RECORD_STATE.RECORDING; \r\n\r\nfunction * finishUnfinished(tracklist , channel){\r\n    const unfinished = tracklist.find(track => \r\n        (track.channel === channel && track.start && !track.end)\r\n    )\r\n    if(!unfinished) return; \r\n\r\n    yield put(updateEndTime(unfinished.id))\r\n}\r\n\r\nfunction* handel(action){\r\n    try{\r\n        const channel = action.destination;\r\n        const track = action.track;\r\n        \r\n        const recording = yield select(isRecording);\r\n        if(!recording) return;\r\n    \r\n        const tracklist = yield select(getTracklist);\r\n        yield call(finishUnfinished, tracklist, channel);\r\n    \r\n        yield put(pushToTracklist({\r\n            id: track.id,\r\n            channel,\r\n            start: null,\r\n            end: null,\r\n        }))\r\n        \r\n    } catch(error){\r\n        yield put(pushLog(Log.Error(\r\n            ['saga', 'recorder', 'tracklis', 'intercept load track to deck'],\r\n            \"Can't add track to tracklist. :\" + error.message,\r\n            error\r\n        )))\r\n    }\r\n\r\n\r\n}"]},"metadata":{},"sourceType":"module"}