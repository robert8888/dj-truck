{"ast":null,"code":"import { createDir, ACTIONS, loadDirRequest } from \"../../actions\";\nimport { takeEvery, select, put, call } from \"redux-saga/effects\";\nimport { getApi } from \"./../../apis/apiProvider\";\nimport query from \"./../../qlQueries/createDir\";\nimport { generateTemplateName as generateName, findClosesDir } from \"./../../reducers/console/playlist/utils\";\nimport { get } from \"lodash/object\";\nimport { handel as loadDirSagaHanedl } from \"./loadDirRequestSaga\";\nexport default function* createDirRequestSaga() {\n  yield takeEvery(ACTIONS.PL_CREATE_DIR_REQEST, callApi);\n}\n\nconst getToken = state => state.user.token;\n\nconst getCurrentSelection = state => state.playList.currentSelection;\n\nconst getParentPath = (state, currentSelection) => findClosesDir(state, currentSelection);\n\nconst generateDirName = (state, parrentPath, base) => generateName(state.playList, parrentPath, base);\n\nconst getParrentId = (state, path) => get(state.playList, path);\n\nfunction* callApi(action) {\n  var _result$data;\n\n  const {\n    callQuery\n  } = getApi(\"UserAssets\");\n  const token = yield select(getToken);\n  const currentSelection = yield select(getCurrentSelection);\n  const parrentPath = yield select(getParentPath, currentSelection);\n  let renameMode = false;\n  let dirName;\n\n  if (!action.name) {\n    dirName = yield select(generateDirName, parrentPath, \"New folder\");\n    renameMode = true;\n  } else {\n    dirName = yield select(generateDirName, parrentPath, action.name);\n  }\n\n  const parrent = yield select(getParrentId, parrentPath);\n\n  if (!parrent._loaded) {\n    yield call(loadDirSagaHanedl, {\n      path: parrentPath\n    });\n  }\n\n  let result = yield callQuery(query(parrent._id, dirName), token);\n\n  if (!result || !((_result$data = result.data) === null || _result$data === void 0 ? void 0 : _result$data.createDir)) {\n    return;\n  }\n\n  const id = result.data.createDir.id;\n  yield put(createDir(dirName, id, renameMode));\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/sagas/playlists/createDirRequestSaga.js"],"names":["createDir","ACTIONS","loadDirRequest","takeEvery","select","put","call","getApi","query","generateTemplateName","generateName","findClosesDir","get","handel","loadDirSagaHanedl","createDirRequestSaga","PL_CREATE_DIR_REQEST","callApi","getToken","state","user","token","getCurrentSelection","playList","currentSelection","getParentPath","generateDirName","parrentPath","base","getParrentId","path","action","callQuery","renameMode","dirName","name","parrent","_loaded","result","_id","data","id"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,OAApB,EAA6BC,cAA7B,QAAmD,eAAnD;AACA,SAASC,SAAT,EAAoBC,MAApB,EAA4BC,GAA5B,EAAiCC,IAAjC,QAA6C,oBAA7C;AACA,SAASC,MAAT,QAAuB,0BAAvB;AACA,OAAOC,KAAP,MAAkB,6BAAlB;AACA,SAASC,oBAAoB,IAAIC,YAAjC,EAA+CC,aAA/C,QAAoE,yCAApE;AACA,SAASC,GAAT,QAAoB,eAApB;AAEA,SAAQC,MAAM,IAAIC,iBAAlB,QAA0C,sBAA1C;AAEA,eAAe,UAAUC,oBAAV,GAAiC;AAC5C,QAAMZ,SAAS,CAACF,OAAO,CAACe,oBAAT,EAA+BC,OAA/B,CAAf;AACH;;AAED,MAAMC,QAAQ,GAAGC,KAAK,IAAIA,KAAK,CAACC,IAAN,CAAWC,KAArC;;AAEA,MAAMC,mBAAmB,GAAGH,KAAK,IAAIA,KAAK,CAACI,QAAN,CAAeC,gBAApD;;AAEA,MAAMC,aAAa,GAAG,CAACN,KAAD,EAAQK,gBAAR,KAClBb,aAAa,CAACQ,KAAD,EAAQK,gBAAR,CADjB;;AAGA,MAAME,eAAe,GAAG,CAACP,KAAD,EAAQQ,WAAR,EAAqBC,IAArB,KACpBlB,YAAY,CAACS,KAAK,CAACI,QAAP,EAAiBI,WAAjB,EAA8BC,IAA9B,CADhB;;AAGA,MAAMC,YAAY,GAAG,CAACV,KAAD,EAAQW,IAAR,KAAiBlB,GAAG,CAACO,KAAK,CAACI,QAAP,EAAiBO,IAAjB,CAAzC;;AAIA,UAAUb,OAAV,CAAkBc,MAAlB,EAA0B;AAAA;;AACtB,QAAM;AAAEC,IAAAA;AAAF,MAAgBzB,MAAM,CAAC,YAAD,CAA5B;AACA,QAAMc,KAAK,GAAG,MAAMjB,MAAM,CAACc,QAAD,CAA1B;AACA,QAAMM,gBAAgB,GAAG,MAAMpB,MAAM,CAACkB,mBAAD,CAArC;AACA,QAAMK,WAAW,GAAG,MAAMvB,MAAM,CAACqB,aAAD,EAAgBD,gBAAhB,CAAhC;AAEA,MAAIS,UAAU,GAAG,KAAjB;AACA,MAAIC,OAAJ;;AACA,MAAG,CAACH,MAAM,CAACI,IAAX,EAAgB;AACZD,IAAAA,OAAO,GAAG,MAAM9B,MAAM,CAACsB,eAAD,EAAkBC,WAAlB,EAA+B,YAA/B,CAAtB;AACAM,IAAAA,UAAU,GAAG,IAAb;AACH,GAHD,MAGO;AACHC,IAAAA,OAAO,GAAG,MAAM9B,MAAM,CAACsB,eAAD,EAAkBC,WAAlB,EAA+BI,MAAM,CAACI,IAAtC,CAAtB;AACH;;AAED,QAAMC,OAAO,GAAG,MAAMhC,MAAM,CAACyB,YAAD,EAAeF,WAAf,CAA5B;;AACA,MAAG,CAACS,OAAO,CAACC,OAAZ,EAAoB;AAChB,UAAM/B,IAAI,CAACQ,iBAAD,EAAoB;AAACgB,MAAAA,IAAI,EAAEH;AAAP,KAApB,CAAV;AACH;;AAED,MAAIW,MAAM,GAAG,MAAMN,SAAS,CAACxB,KAAK,CAAC4B,OAAO,CAACG,GAAT,EAAcL,OAAd,CAAN,EAA8Bb,KAA9B,CAA5B;;AACA,MAAG,CAACiB,MAAD,IAAW,kBAACA,MAAM,CAACE,IAAR,iDAAC,aAAaxC,SAAd,CAAd,EAAsC;AAClC;AACH;;AACD,QAAMyC,EAAE,GAAGH,MAAM,CAACE,IAAP,CAAYxC,SAAZ,CAAsByC,EAAjC;AAEA,QAAMpC,GAAG,CAACL,SAAS,CAACkC,OAAD,EAAUO,EAAV,EAAcR,UAAd,CAAV,CAAT;AACH","sourcesContent":["import { createDir, ACTIONS, loadDirRequest } from \"../../actions\";\r\nimport { takeEvery, select, put, call } from \"redux-saga/effects\"\r\nimport { getApi } from \"./../../apis/apiProvider\";\r\nimport query from \"./../../qlQueries/createDir\";\r\nimport { generateTemplateName as generateName, findClosesDir } from \"./../../reducers/console/playlist/utils\";\r\nimport { get } from \"lodash/object\";\r\n\r\nimport {handel as loadDirSagaHanedl} from \"./loadDirRequestSaga\";\r\n\r\nexport default function* createDirRequestSaga() {\r\n    yield takeEvery(ACTIONS.PL_CREATE_DIR_REQEST, callApi)\r\n}\r\n\r\nconst getToken = state => state.user.token;\r\n\r\nconst getCurrentSelection = state => state.playList.currentSelection;\r\n\r\nconst getParentPath = (state, currentSelection) =>\r\n    findClosesDir(state, currentSelection)\r\n\r\nconst generateDirName = (state, parrentPath, base) => \r\n    generateName(state.playList, parrentPath, base);\r\n\r\nconst getParrentId = (state, path) => get(state.playList, path);\r\n\r\n\r\n\r\nfunction* callApi(action) {\r\n    const { callQuery } = getApi(\"UserAssets\");\r\n    const token = yield select(getToken);\r\n    const currentSelection = yield select(getCurrentSelection);\r\n    const parrentPath = yield select(getParentPath, currentSelection);\r\n\r\n    let renameMode = false;\r\n    let dirName;\r\n    if(!action.name){\r\n        dirName = yield select(generateDirName, parrentPath, \"New folder\");\r\n        renameMode = true;\r\n    } else {\r\n        dirName = yield select(generateDirName, parrentPath, action.name);\r\n    }\r\n    \r\n    const parrent = yield select(getParrentId, parrentPath);\r\n    if(!parrent._loaded){\r\n        yield call(loadDirSagaHanedl, {path: parrentPath})\r\n    }\r\n\r\n    let result = yield callQuery(query(parrent._id, dirName), token);\r\n    if(!result || !result.data?.createDir){\r\n        return;\r\n    }\r\n    const id = result.data.createDir.id;\r\n\r\n    yield put(createDir(dirName, id, renameMode));\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}