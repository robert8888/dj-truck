{"ast":null,"code":"import store from \"./../../../../../store\";\nimport { setAvailableEffects } from \"./../../../../../actions\";\nimport Reverb from \"./effects/reverb/reverb\";\nimport Delay from \"./effects/delay/delay\";\nexport default class Effector {\n  constructor(audioContext) {\n    this.config = store.getState().configuration.effector;\n    this.mainAC = audioContext;\n    this.channels = new Array(this.config.channels).fill(null).map(() => {});\n    this.effects = {\n      \"reverb\": {\n        create: Reverb,\n        params: Reverb.defaultParams().params\n      },\n      \"delay\": {\n        create: Delay,\n        params: Delay.defaultParams().params\n      }\n    };\n    store.dispatch(setAvailableEffects(this.effects));\n  }\n\n  connect(inputs) {\n    const outputs = inputs.map(() => this.mainAC.createGain());\n    inputs.forEach((inputNode, channelNumber) => {\n      const dryNode = this.mainAC.createGain();\n      inputNode.connect(dryNode);\n      dryNode.connect(outputs[channelNumber]);\n      this.channels[channelNumber].inputNode = inputNode;\n      this.channels[channelNumber].dryNode = dryNode;\n      this.channels[channelNumber].outputNode = outputs[channelNumber];\n    });\n    return outputs;\n  }\n\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/pages/app/core/console/effector/effector.js"],"names":["store","setAvailableEffects","Reverb","Delay","Effector","constructor","audioContext","config","getState","configuration","effector","mainAC","channels","Array","fill","map","effects","create","params","defaultParams","dispatch","connect","inputs","outputs","createGain","forEach","inputNode","channelNumber","dryNode","outputNode"],"mappings":"AACA,OAAOA,KAAP,MAAkB,wBAAlB;AACA,SAASC,mBAAT,QAAoC,0BAApC;AAEA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,OAAOC,KAAP,MAAkB,uBAAlB;AAIA,eAAe,MAAMC,QAAN,CAAe;AAC1BC,EAAAA,WAAW,CAACC,YAAD,EAAe;AACtB,SAAKC,MAAL,GAAcP,KAAK,CAACQ,QAAN,GAAiBC,aAAjB,CAA+BC,QAA7C;AACA,SAAKC,MAAL,GAAcL,YAAd;AAEA,SAAKM,QAAL,GAAgB,IAAIC,KAAJ,CAAU,KAAKN,MAAL,CAAYK,QAAtB,EACXE,IADW,CACN,IADM,EACAC,GADA,CACI,MAAM,CAAG,CADb,CAAhB;AAGA,SAAKC,OAAL,GAAe;AACX,gBAAU;AACNC,QAAAA,MAAM,EAAEf,MADF;AAENgB,QAAAA,MAAM,EAAEhB,MAAM,CAACiB,aAAP,GAAuBD;AAFzB,OADC;AAKX,eAAS;AACLD,QAAAA,MAAM,EAAEd,KADH;AAELe,QAAAA,MAAM,EAAEf,KAAK,CAACgB,aAAN,GAAsBD;AAFzB;AALE,KAAf;AAWAlB,IAAAA,KAAK,CAACoB,QAAN,CAAenB,mBAAmB,CAAC,KAAKe,OAAN,CAAlC;AACH;;AAEDK,EAAAA,OAAO,CAACC,MAAD,EAAS;AACZ,UAAMC,OAAO,GAAGD,MAAM,CAACP,GAAP,CAAW,MAAM,KAAKJ,MAAL,CAAYa,UAAZ,EAAjB,CAAhB;AAEAF,IAAAA,MAAM,CAACG,OAAP,CAAe,CAACC,SAAD,EAAYC,aAAZ,KAA8B;AACzC,YAAMC,OAAO,GAAG,KAAKjB,MAAL,CAAYa,UAAZ,EAAhB;AAEAE,MAAAA,SAAS,CAACL,OAAV,CAAkBO,OAAlB;AACAA,MAAAA,OAAO,CAACP,OAAR,CAAgBE,OAAO,CAACI,aAAD,CAAvB;AAEA,WAAKf,QAAL,CAAce,aAAd,EAA6BD,SAA7B,GAAyCA,SAAzC;AACA,WAAKd,QAAL,CAAce,aAAd,EAA6BC,OAA7B,GAAuCA,OAAvC;AACA,WAAKhB,QAAL,CAAce,aAAd,EAA6BE,UAA7B,GAA0CN,OAAO,CAACI,aAAD,CAAjD;AACH,KATD;AAWA,WAAOJ,OAAP;AACH;;AArCyB","sourcesContent":["\r\nimport store from \"./../../../../../store\";\r\nimport { setAvailableEffects } from \"./../../../../../actions\";\r\n\r\nimport Reverb from \"./effects/reverb/reverb\";\r\nimport Delay from \"./effects/delay/delay\";\r\n\r\n\r\n\r\nexport default class Effector {\r\n    constructor(audioContext) {\r\n        this.config = store.getState().configuration.effector;\r\n        this.mainAC = audioContext;\r\n\r\n        this.channels = new Array(this.config.channels)\r\n            .fill(null).map(() => { });\r\n\r\n        this.effects = {\r\n            \"reverb\": {\r\n                create: Reverb,\r\n                params: Reverb.defaultParams().params,\r\n            },\r\n            \"delay\": {\r\n                create: Delay,\r\n                params: Delay.defaultParams().params\r\n            }\r\n        }\r\n\r\n        store.dispatch(setAvailableEffects(this.effects));\r\n    }\r\n\r\n    connect(inputs) {\r\n        const outputs = inputs.map(() => this.mainAC.createGain())\r\n\r\n        inputs.forEach((inputNode, channelNumber) => {\r\n            const dryNode = this.mainAC.createGain();\r\n            \r\n            inputNode.connect(dryNode);\r\n            dryNode.connect(outputs[channelNumber]);\r\n\r\n            this.channels[channelNumber].inputNode = inputNode;\r\n            this.channels[channelNumber].dryNode = dryNode;\r\n            this.channels[channelNumber].outputNode = outputs[channelNumber];\r\n        });\r\n\r\n        return outputs;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}