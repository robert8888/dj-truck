{"ast":null,"code":"import { ACTIONS, updateStartTime, updateEndTime } from \"../../../actions\";\nimport { takeEvery, select, put } from \"redux-saga/effects\";\nexport default function* interceptPlayback() {\n  yield takeEvery(ACTIONS.TOGGLE_PLAY, handel); // yield takeEvery(ACTIONS.CANCEL_CUE_AND_PLAY, handel);\n}\n\nconst getChannelState = (state, channel) => state.console.channel[channel];\n\nfunction* handel(action) {\n  console.log('intercept toogle play');\n  const channel = action.destination;\n  const channelState = yield select(getChannelState);\n  const paused = !channelState.playBackState.paused;\n\n  if (!paused) {\n    yield put(updateStartTime(channelState.track.id));\n  } else {\n    yield put(updateEndTime(channelState.track.id));\n  }\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/sagas/recorder/tracklist/playback.js"],"names":["ACTIONS","updateStartTime","updateEndTime","takeEvery","select","put","interceptPlayback","TOGGLE_PLAY","handel","getChannelState","state","channel","console","action","log","destination","channelState","paused","playBackState","track","id"],"mappings":"AAAA,SAAUA,OAAV,EAAmBC,eAAnB,EAAoCC,aAApC,QAA0D,kBAA1D;AACA,SAASC,SAAT,EAAoBC,MAApB,EAA4BC,GAA5B,QAAuC,oBAAvC;AAGA,eAAe,UAAUC,iBAAV,GAA8B;AACzC,QAAMH,SAAS,CAACH,OAAO,CAACO,WAAT,EAAsBC,MAAtB,CAAf,CADyC,CAE1C;AACF;;AAED,MAAMC,eAAe,GAAG,CAACC,KAAD,EAAQC,OAAR,KAAoBD,KAAK,CAACE,OAAN,CAAcD,OAAd,CAAsBA,OAAtB,CAA5C;;AAEA,UAAUH,MAAV,CAAiBK,MAAjB,EAAwB;AACpBD,EAAAA,OAAO,CAACE,GAAR,CAAY,uBAAZ;AACA,QAAMH,OAAO,GAAGE,MAAM,CAACE,WAAvB;AACA,QAAMC,YAAY,GAAG,MAAMZ,MAAM,CAACK,eAAD,CAAjC;AAEA,QAAMQ,MAAM,GAAG,CAACD,YAAY,CAACE,aAAb,CAA2BD,MAA3C;;AACA,MAAG,CAACA,MAAJ,EAAW;AACP,UAAMZ,GAAG,CAACJ,eAAe,CAACe,YAAY,CAACG,KAAb,CAAmBC,EAApB,CAAhB,CAAT;AACH,GAFD,MAEO;AACH,UAAMf,GAAG,CAACH,aAAa,CAACc,YAAY,CAACG,KAAb,CAAmBC,EAApB,CAAd,CAAT;AACH;AACJ","sourcesContent":["import {  ACTIONS, updateStartTime, updateEndTime  } from \"../../../actions\";\r\nimport { takeEvery, select, put,} from \"redux-saga/effects\";\r\n\r\n\r\nexport default function* interceptPlayback() {\r\n    yield takeEvery(ACTIONS.TOGGLE_PLAY, handel);\r\n   // yield takeEvery(ACTIONS.CANCEL_CUE_AND_PLAY, handel);\r\n}\r\n\r\nconst getChannelState = (state, channel) => state.console.channel[channel];\r\n\r\nfunction* handel(action){\r\n    console.log('intercept toogle play')\r\n    const channel = action.destination;\r\n    const channelState = yield select(getChannelState)\r\n\r\n    const paused = !channelState.playBackState.paused;\r\n    if(!paused){\r\n        yield put(updateStartTime(channelState.track.id))\r\n    } else {\r\n        yield put(updateEndTime(channelState.track.id))\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}