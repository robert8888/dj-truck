{"ast":null,"code":"import { ACTIONS, updateStartTime, updateEndTime } from \"../../../actions\";\nimport { takeEvery, select, put } from \"redux-saga/effects\";\nimport RECORD_STATE from \"./../../../reducers/console/recorder/stateDef\";\nexport default function* interceptPlayback() {\n  yield takeEvery(ACTIONS.TOGGLE_PLAY, handel); // yield takeEvery(ACTIONS.CANCEL_CUE_AND_PLAY, handel);\n}\n\nconst getChannelState = (state, channel) => state.console.channel[channel];\n\nconst isRecording = state => state.recorder.recordingState === RECORD_STATE.RECORDING;\n\nfunction* handel(action) {\n  console.log('intercept toogle play');\n  const channel = action.destination;\n  const channelState = yield select(getChannelState, channel);\n  const recording = yield select(isRecording);\n  if (!recording) return;\n  const paused = !channelState.playBackState.paused;\n\n  if (paused) {\n    yield put(updateStartTime(channelState.track.id));\n  } else {\n    yield put(updateEndTime(channelState.track.id));\n  }\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/sagas/recorder/tracklist/playback.js"],"names":["ACTIONS","updateStartTime","updateEndTime","takeEvery","select","put","RECORD_STATE","interceptPlayback","TOGGLE_PLAY","handel","getChannelState","state","channel","console","isRecording","recorder","recordingState","RECORDING","action","log","destination","channelState","recording","paused","playBackState","track","id"],"mappings":"AAAA,SAAUA,OAAV,EAAmBC,eAAnB,EAAoCC,aAApC,QAA0D,kBAA1D;AACA,SAASC,SAAT,EAAoBC,MAApB,EAA4BC,GAA5B,QAAuC,oBAAvC;AACA,OAAOC,YAAP,MAAyB,+CAAzB;AAEA,eAAe,UAAUC,iBAAV,GAA8B;AACzC,QAAMJ,SAAS,CAACH,OAAO,CAACQ,WAAT,EAAsBC,MAAtB,CAAf,CADyC,CAE1C;AACF;;AAED,MAAMC,eAAe,GAAG,CAACC,KAAD,EAAQC,OAAR,KAAoBD,KAAK,CAACE,OAAN,CAAcD,OAAd,CAAsBA,OAAtB,CAA5C;;AAEA,MAAME,WAAW,GAAGH,KAAK,IAAIA,KAAK,CAACI,QAAN,CAAeC,cAAf,KAAkCV,YAAY,CAACW,SAA5E;;AAEA,UAAUR,MAAV,CAAiBS,MAAjB,EAAwB;AACpBL,EAAAA,OAAO,CAACM,GAAR,CAAY,uBAAZ;AACA,QAAMP,OAAO,GAAGM,MAAM,CAACE,WAAvB;AACA,QAAMC,YAAY,GAAG,MAAMjB,MAAM,CAACM,eAAD,EAAkBE,OAAlB,CAAjC;AAEA,QAAMU,SAAS,GAAG,MAAMlB,MAAM,CAACU,WAAD,CAA9B;AACA,MAAG,CAACQ,SAAJ,EAAe;AAEf,QAAMC,MAAM,GAAG,CAACF,YAAY,CAACG,aAAb,CAA2BD,MAA3C;;AACA,MAAGA,MAAH,EAAU;AACN,UAAMlB,GAAG,CAACJ,eAAe,CAACoB,YAAY,CAACI,KAAb,CAAmBC,EAApB,CAAhB,CAAT;AACH,GAFD,MAEO;AACH,UAAMrB,GAAG,CAACH,aAAa,CAACmB,YAAY,CAACI,KAAb,CAAmBC,EAApB,CAAd,CAAT;AACH;AACJ","sourcesContent":["import {  ACTIONS, updateStartTime, updateEndTime  } from \"../../../actions\";\r\nimport { takeEvery, select, put,} from \"redux-saga/effects\";\r\nimport RECORD_STATE from \"./../../../reducers/console/recorder/stateDef\";\r\n\r\nexport default function* interceptPlayback() {\r\n    yield takeEvery(ACTIONS.TOGGLE_PLAY, handel);\r\n   // yield takeEvery(ACTIONS.CANCEL_CUE_AND_PLAY, handel);\r\n}\r\n\r\nconst getChannelState = (state, channel) => state.console.channel[channel];\r\n\r\nconst isRecording = state => state.recorder.recordingState === RECORD_STATE.RECORDING; \r\n\r\nfunction* handel(action){\r\n    console.log('intercept toogle play')\r\n    const channel = action.destination;\r\n    const channelState = yield select(getChannelState, channel)\r\n\r\n    const recording = yield select(isRecording);\r\n    if(!recording) return;\r\n\r\n    const paused = !channelState.playBackState.paused;\r\n    if(paused){\r\n        yield put(updateStartTime(channelState.track.id))\r\n    } else {\r\n        yield put(updateEndTime(channelState.track.id))\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}