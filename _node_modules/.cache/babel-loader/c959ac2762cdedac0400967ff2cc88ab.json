{"ast":null,"code":"import { get } from \"lodash/object\";\nimport { hideLoading, showLoading } from 'react-redux-loading-bar';\nimport { put, select, takeEvery } from \"redux-saga/effects\";\nimport { ACTIONS, moveTo, pushLog } from \"../../actions\";\nimport { getApi } from \"./../../apis/apiProvider\";\nimport Log from \"./../../utils/logger/logger\";\nexport default function* renameSelectedRequestSaga() {\n  yield takeEvery(ACTIONS.PL_MOVE_TO_REQUEST, handle);\n}\n\nconst getToken = state => state.user.token;\n\nconst getElement = (state, path) => get(state.playList, path);\n\nconst getTargetId = (state, path) => get(state.playList, path)._id;\n\nfunction* handle(action) {\n  const token = yield select(getToken);\n\n  if (!token) {\n    yield put(moveTo(action.pathFrom, action.pathTo));\n    return;\n  }\n\n  try {\n    yield put(showLoading());\n    const {\n      callQuery,\n      queries\n    } = getApi(\"UserAssets\");\n    const element = yield select(getElement, action.pathFrom);\n    const targetId = yield select(getTargetId, action.pathTo);\n    let query;\n\n    if (element._type === \"dir\") {\n      query = queries.moveQl.moveDir(element._id, targetId);\n    } else if (element._type === \"playlist\") {\n      query = queries.moveQl.movePlaylist(element._id, targetId);\n    }\n\n    let res = yield callQuery(query, token);\n\n    if (!res.errors) {\n      yield put(moveTo(action.pathFrom, action.pathTo));\n    } else {\n      throw new Error(JSON.stringify(res.errors));\n    }\n\n    yield put(pushLog(new Log(`Element sucessful moved el:${element._id} target: ${targetId}`, path)));\n  } catch (error) {\n    yield put(pushLog(Log.Error(path, \"Can't move seletcted element to\" + error.message, \"Sorry. During process moving element occurred a problem\", error)));\n  } finally {\n    yield put(hideLoading());\n  }\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/sagas/playlists/reqMoveToSaga.js"],"names":["get","hideLoading","showLoading","put","select","takeEvery","ACTIONS","moveTo","pushLog","getApi","Log","renameSelectedRequestSaga","PL_MOVE_TO_REQUEST","handle","getToken","state","user","token","getElement","path","playList","getTargetId","_id","action","pathFrom","pathTo","callQuery","queries","element","targetId","query","_type","moveQl","moveDir","movePlaylist","res","errors","Error","JSON","stringify","error","message"],"mappings":"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","sourcesContent":["import { get } from \"lodash/object\";\r\nimport { hideLoading, showLoading } from 'react-redux-loading-bar';\r\nimport { put, select, takeEvery } from \"redux-saga/effects\";\r\nimport { ACTIONS, moveTo, pushLog } from \"../../actions\";\r\nimport { getApi } from \"./../../apis/apiProvider\";\r\nimport Log from \"./../../utils/logger/logger\";\r\n\r\nexport default function* renameSelectedRequestSaga() {\r\n    yield takeEvery(ACTIONS.PL_MOVE_TO_REQUEST, handle)\r\n}\r\n\r\nconst getToken = state => state.user.token;\r\n\r\nconst getElement = (state, path) => get(state.playList, path);\r\n\r\nconst getTargetId = (state, path) => get(state.playList, path)._id;\r\n\r\nfunction* handle(action) {\r\n    const token = yield select(getToken);\r\n    if (!token) {\r\n        yield put(moveTo(action.pathFrom, action.pathTo));\r\n        return;\r\n    }\r\n    try {\r\n        yield put(showLoading());\r\n        const { callQuery, queries } = getApi(\"UserAssets\");\r\n        const element = yield select(getElement, action.pathFrom);\r\n        const targetId = yield select(getTargetId, action.pathTo);\r\n        let query;\r\n        if(element._type === \"dir\"){\r\n            query = queries.moveQl.moveDir(element._id, targetId);\r\n        } else if(element._type === \"playlist\"){\r\n            query = queries.moveQl.movePlaylist(element._id, targetId);\r\n        }\r\n\r\n        let res = yield callQuery(query, token);\r\n\r\n        if (!res.errors) {\r\n           yield put(moveTo(action.pathFrom, action.pathTo))\r\n        } else {\r\n            throw new Error(JSON.stringify(res.errors))\r\n        }\r\n\r\n        yield put(pushLog(\r\n                new Log(`Element sucessful moved el:${element._id} target: ${targetId}`, path)\r\n            ))\r\n    } catch (error) {\r\n        yield put(pushLog(Log.Error(\r\n            path,\r\n            \"Can't move seletcted element to\" + error.message,\r\n            \"Sorry. During process moving element occurred a problem\",\r\n            error\r\n        )))\r\n    } finally{\r\n      yield put(hideLoading())\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}