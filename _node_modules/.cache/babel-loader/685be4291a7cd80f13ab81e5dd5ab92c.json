{"ast":null,"code":"import { ACTIONS } from \"../../../actions\";\nimport { produce } from \"imer\";\nimport { unset, set, get } from \"lodash/object\";\nimport { findClosesDir, generateTemplateName } from \"./utils\";\nconst initState = {\n  list: [],\n  currentPlaylist: [],\n  // path to play list \n  currentSelection: ['root'],\n  // path to dir or playlist current selected\n  root: {},\n  // root dir for play list \n  renameMode: false,\n  //mock\n  root: {\n    _type: \"dir\",\n    \"Techno\": {\n      _open: true,\n      \"ZetTempo\": {\n        _type: \"playlist\",\n        _content: []\n      },\n      \"empty dir\": {\n        _type: \"dir\"\n      },\n      \"HardCore\": {\n        _type: \"playlist\",\n        _content: []\n      },\n      \"Special\": {\n        _type: \"dir\",\n        _open: true,\n        \"DubTechno\": {\n          _type: \"playlist\",\n          _content: []\n        },\n        \"Clasic 90\": {\n          _type: \"playlist\",\n          _content: []\n        }\n      }\n    },\n    \"Mini mal\": {\n      _type: \"dir\",\n      \"HighTech\": {\n        _type: \"playlist\",\n        _content: []\n      },\n      \"Classic\": {\n        _type: \"playlist\",\n        _content: []\n      },\n      \"EmptyFolder\": {\n        _type: \"dir\"\n      }\n    }\n  }\n};\n\nfunction playListReducer(state = initState, action) {\n  switch (action.type) {\n    // ------ dir section ---------------------------\n    case ACTIONS.PL_PUSH_DIR_CONTENT:\n      {\n        const dbDirs = action.dirContent.dirs || [];\n        const dbPlaylists = action.dirContent.playlists || [];\n        const dirs = {};\n        dbDirs.map(dir => {\n          dirs[dir.name] = {\n            _type: \"dir\",\n            _id: dir.id\n          };\n        });\n        const playlists = {};\n        dbPlaylists.map(pl => {\n          playlists[pl.name] = {\n            _id: pl.id,\n            _type: \"playlist\",\n            _content: []\n          };\n        });\n\n        if (action.isRoot) {\n          return { ...state,\n            root: {\n              _id: action.dirContent.dir.id,\n              ...dirs,\n              ...playlists\n            }\n          };\n        } else {\n          const path = action.path;\n          return produce(state, draftState => {\n            set(draftState, path, {\n              _id: action.dirContent.dir.id,\n              _type: \"dir\",\n              _loaded: true,\n              _open: action.open || false,\n              ...dirs,\n              ...playlists\n            });\n          });\n        }\n      }\n\n    case ACTIONS.PL_CREATE_DIR:\n      {\n        const {\n          id,\n          name,\n          renameMode\n        } = action;\n        const pathToDir = findClosesDir(state, state.currentSelection);\n\n        if (!name) {\n          name = generateTemplateName(state, pathToDir, \"New folder\");\n        }\n\n        return produce(state, draftState => {\n          set(draftState, [...pathToDir, name], {\n            _id: id,\n            _type: \"dir\"\n          });\n          set(draftState, [...pathToDir, \"_open\"], true); // parent\n\n          draftState.currentSelection = [...pathToDir, name];\n\n          if (renameMode) {\n            draftState.renameMode = renameMode;\n          }\n        });\n      }\n\n    case ACTIONS.PL_TOGGLE_DIR:\n      {\n        const open = get(state, [...action.path, \"_open\"]);\n        return produce(state, draftState => set(draftState, [...action.path, \"_open\"], !open));\n      }\n    // ------ playlist section -------------------------------   \n\n    case ACTIONS.PL_CREATE_PLAYLIST:\n      {\n        const {\n          name,\n          id,\n          renameMode,\n          setCurrent\n        } = action;\n        const pathToDir = findClosesDir(state, state.currentSelection);\n\n        if (!name) {\n          name = generateTemplateName(state, pathToDir, \"New Playlist\");\n        }\n\n        return produce(state, draftState => {\n          set(draftState, [...pathToDir, name], {\n            _id: id,\n            _type: \"playlist\",\n            _content: []\n          });\n          set(draftState, [...pathToDir, \"_open\"], true); // open parent dir\n\n          draftState.currentSelection = [...pathToDir, name]; // set focus on new element \n\n          if (setCurrent) {\n            draftState.currentPlaylist = [...pathToDir, name];\n          }\n\n          if (renameMode) {\n            draftState.renameMode = renameMode;\n          }\n        });\n      }\n\n    case ACTIONS.PL_OPEN_CURRENT_PLAY_LIST:\n      {\n        return produce(state, draftState => {\n          draftState.list = get(state, [...state.currentSelection, \"_content\"]);\n          draftState.currentPlaylist = state.currentSelection;\n        });\n      }\n\n    case ACTIONS.PL_SET_PLAYLIST_CONTENT:\n      {\n        const tracks = action.playlistContent.tracks;\n        tracks.sort((a, b) => a.position - b.position);\n        return produce(state, draftState => {\n          set(draftState, [...action.path, \"_content\"], tracks);\n        });\n      }\n\n    case ACTIONS.PL_RESET_CURRENT_PLAYLIST_CONTETN:\n      {\n        return produce(state, draftState => {\n          draftState.list = action.list;\n          set(draftState, [...state.currentPlaylist, \"_contetnt\"], action.list);\n        });\n      }\n    // ---------- selction actions ----------------------\n\n    case ACTIONS.PL_SET_SELECTION:\n      {\n        return produce(state, draftState => draftState.currentSelection = action.path);\n      }\n\n    case ACTIONS.PL_SET_CURRENT_PLAYLIST:\n      {\n        return produce(state, draftState => {\n          draftState.currentPlayList = action.path;\n          draftState.list = Array.from(get(state, [action.path]));\n        });\n      }\n\n    case ACTIONS.PL_RENAME_SELECTED:\n      {\n        const content = get(state, state.currentSelection);\n        return produce(state, draftState => {\n          unset(draftState, state.currentSelection);\n          const newCurrent = draftState.currentSelection;\n          newCurrent.pop();\n          newCurrent.push(action.name);\n          draftState.currentSelection = newCurrent;\n          set(draftState, newCurrent, content);\n          draftState.renameMode = false;\n        });\n      }\n\n    case ACTIONS.PL_MOVE_TO:\n      {\n        const {\n          pathFrom,\n          pathTo\n        } = action;\n        const content = get(state, pathFrom);\n        const name = pathFrom.pop(); //if target and source are the same don't do anything\n\n        if (pathFrom.length === pathTo.length && pathFrom.every((e, i) => e === pathTo[i])) {\n          return state;\n        }\n\n        return produce(state, draftState => {\n          set(draftState, [...pathTo, name], content);\n          unset(draftState, [...pathFrom, name]);\n        });\n      }\n\n    case ACTIONS.PL_DELETE_SELECTED:\n      {\n        return produce(state, draftState => {\n          unset(draftState, state.currentSelection);\n          draftState.currentSelection = ['root'];\n        });\n      }\n    //--------------- track actions ------------------\n\n    case ACTIONS.PL_PUSH_TRACK:\n      {\n        if (state.currentPlaylist.length === 0 && action.createNew) {\n          //if is not seelect any play list - create new\n          let pathToDir = [\"root\"];\n\n          if (state.currentSelection.length > 1) {\n            pathToDir = findClosesDir(state, state.currentSelection);\n          }\n\n          const name = generateTemplateName(state, pathToDir, \"New Playlist\");\n          const fullPath = [...pathToDir, name];\n          return produce(state, draftState => {\n            // ?? check\n            set(draftState, fullPath, {\n              _type: \"playlist\",\n              _content: []\n            });\n            set(draftState, [...pathToDir, \"_open\"], true);\n            draftState.currentSelection = fullPath;\n            draftState.currentPlaylist = fullPath;\n            const playlist = Array.from(get(draftState, fullPath));\n            playlist.push(action.track);\n            draftState.list = playlist;\n            set(draftState, fullPath, playlist);\n          });\n        }\n\n        return produce(state, draftState => {\n          const list = Array.from(draftState.list);\n          list.push(action.track);\n          draftState.list = list;\n          set(draftState, [...state.currentPlaylist, \"_content\"], Array.from(draftState.list));\n        });\n      }\n\n    case ACTIONS.PL_COPY_TRACK_TO_LIST:\n      {\n        const list = get(state, [...action.path, \"_content\"]);\n        if (!list) return state;\n        return produce(state, draftState => {\n          list.push(action.track);\n          set(draftState, [...action.path, \"_content\"], list);\n        });\n      }\n\n    case ACTIONS.PL_SWAP_TRACK_ON_CURRENT:\n      {\n        console.log(\"swap\");\n        return produce(state, draftState => {\n          const newList = [...state.list]; //swaping\n\n          let trackFrom = newList[action.from];\n          newList[action.from] = newList[action.to];\n          newList[action.to] = trackFrom;\n          draftState.list = newList;\n          set(draftState, [...draftState.currentPlaylist, \"_content\"], newList);\n        });\n      }\n\n    case ACTIONS.PL_SET_BPM_AND_OFFSET:\n      {\n        let {\n          id,\n          playlist,\n          bpm,\n          offset\n        } = action;\n        let isCurrent = false;\n\n        if (playlist === undefined || playlist.length === 0) {\n          isCurrent = true;\n          playlist = state.currentPlaylist;\n        }\n\n        let list = get(state, [...playlist, \"_content\"]); // ?? check\n\n        if (!list) {\n          return state;\n        }\n\n        list = Array.from(list);\n        const index = list.findIndex(element => element.id === id);\n\n        if (index === -1) {\n          return state;\n        }\n\n        list[index].bpm = bpm;\n\n        if (offset) {\n          list[index].offset = offset;\n        }\n\n        return produce(state, draftState => {\n          set(draftState, [...playlist, \"_content\"], list); // ?? check\n\n          if (isCurrent) {\n            draftState.list = list;\n          }\n\n          draftState.refreshFalg = Math.random();\n        });\n      }\n\n    case ACTIONS.PL_DELETE_TRACK:\n      {\n        return produce(state, draftState => {\n          const newList = [...state.list];\n          newList.splice(action.index, 1);\n          draftState.list = newList;\n          set(draftState, [...draftState.currentPlaylist, \"_content\"], newList); //?? check\n        });\n      }\n\n    default:\n      return state;\n  }\n}\n\nexport default playListReducer;","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/reducers/console/playlist/playlistReducer.js"],"names":["ACTIONS","produce","unset","set","get","findClosesDir","generateTemplateName","initState","list","currentPlaylist","currentSelection","root","renameMode","_type","_open","_content","playListReducer","state","action","type","PL_PUSH_DIR_CONTENT","dbDirs","dirContent","dirs","dbPlaylists","playlists","map","dir","name","_id","id","pl","isRoot","path","draftState","_loaded","open","PL_CREATE_DIR","pathToDir","PL_TOGGLE_DIR","PL_CREATE_PLAYLIST","setCurrent","PL_OPEN_CURRENT_PLAY_LIST","PL_SET_PLAYLIST_CONTENT","tracks","playlistContent","sort","a","b","position","PL_RESET_CURRENT_PLAYLIST_CONTETN","PL_SET_SELECTION","PL_SET_CURRENT_PLAYLIST","currentPlayList","Array","from","PL_RENAME_SELECTED","content","newCurrent","pop","push","PL_MOVE_TO","pathFrom","pathTo","length","every","e","i","PL_DELETE_SELECTED","PL_PUSH_TRACK","createNew","fullPath","playlist","track","PL_COPY_TRACK_TO_LIST","PL_SWAP_TRACK_ON_CURRENT","console","log","newList","trackFrom","to","PL_SET_BPM_AND_OFFSET","bpm","offset","isCurrent","undefined","index","findIndex","element","refreshFalg","Math","random","PL_DELETE_TRACK","splice"],"mappings":"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","sourcesContent":["import { ACTIONS } from \"../../../actions\";\r\nimport { produce } from \"imer\";\r\nimport { unset, set, get } from \"lodash/object\";\r\nimport { findClosesDir, generateTemplateName } from \"./utils\"\r\n\r\nconst initState = {\r\n    list: [],\r\n\r\n    currentPlaylist: [],// path to play list \r\n    currentSelection: ['root'], // path to dir or playlist current selected\r\n    root: {}, // root dir for play list \r\n\r\n    renameMode: false,\r\n\r\n    //mock\r\n    root: {\r\n        _type: \"dir\",\r\n        \"Techno\": {\r\n            _open: true,\r\n            \"ZetTempo\": {\r\n                _type: \"playlist\",\r\n                _content: [],\r\n            },\r\n            \"empty dir\": {\r\n                _type: \"dir\"\r\n            },\r\n            \"HardCore\": {\r\n                _type: \"playlist\",\r\n                _content: [],\r\n            },\r\n            \"Special\": {\r\n                _type: \"dir\",\r\n                _open: true,\r\n                \"DubTechno\": {\r\n                    _type: \"playlist\",\r\n                    _content: [],\r\n                },\r\n                \"Clasic 90\": {\r\n                    _type: \"playlist\",\r\n                    _content: [],\r\n                },\r\n            }\r\n        },\r\n        \"Mini mal\": {\r\n            _type: \"dir\",\r\n            \"HighTech\": {\r\n                _type: \"playlist\",\r\n                _content: [],\r\n            },\r\n            \"Classic\": {\r\n                _type: \"playlist\",\r\n                _content: [],\r\n            },\r\n            \"EmptyFolder\": {\r\n                _type: \"dir\",\r\n            },\r\n        }\r\n    }\r\n\r\n}\r\n\r\nfunction playListReducer(state = initState, action) {\r\n    switch (action.type) {\r\n        // ------ dir section ---------------------------\r\n        case ACTIONS.PL_PUSH_DIR_CONTENT: {\r\n            const dbDirs = action.dirContent.dirs || [];\r\n            const dbPlaylists = action.dirContent.playlists || [];\r\n\r\n            const dirs = {};\r\n            dbDirs.map((dir) => {\r\n                dirs[dir.name] = {\r\n                    _type: \"dir\",\r\n                    _id: dir.id\r\n                }\r\n            })\r\n\r\n            const playlists = {};\r\n            dbPlaylists.map((pl) => {\r\n                playlists[pl.name] = {\r\n                    _id: pl.id,\r\n                    _type: \"playlist\",\r\n                    _content: []\r\n                };\r\n            })\r\n\r\n            if (action.isRoot) {\r\n                return {\r\n                    ...state,\r\n                    root: {\r\n                        _id: action.dirContent.dir.id,\r\n                        ...dirs,\r\n                        ...playlists,\r\n                    }\r\n                }\r\n            } else {\r\n                const path = action.path;\r\n                return produce(state, draftState => {\r\n                    set(draftState, path, {\r\n                        _id: action.dirContent.dir.id,\r\n                        _type: \"dir\",\r\n                        _loaded: true,\r\n                        _open: action.open || false,\r\n                        ...dirs,\r\n                        ...playlists\r\n                    })\r\n                })\r\n            }\r\n        }\r\n\r\n        case ACTIONS.PL_CREATE_DIR: {\r\n            const { id, name, renameMode } = action;\r\n            const pathToDir = findClosesDir(state, state.currentSelection);\r\n            if (!name) {\r\n                name = generateTemplateName(state, pathToDir, \"New folder\")\r\n            }\r\n            return produce(state, draftState => {\r\n                set(draftState, [...pathToDir, name], {\r\n                    _id: id,\r\n                    _type: \"dir\",\r\n                });\r\n                set(draftState, [...pathToDir, \"_open\"], true); // parent\r\n                draftState.currentSelection = [...pathToDir, name];\r\n                if (renameMode) {\r\n                    draftState.renameMode = renameMode;\r\n                }\r\n            })\r\n        }\r\n\r\n        case ACTIONS.PL_TOGGLE_DIR: {\r\n            const open = get(state, [...action.path, \"_open\"])\r\n            return produce(state, draftState => set(draftState, [...action.path, \"_open\"], !open))\r\n        }\r\n\r\n        // ------ playlist section -------------------------------   \r\n\r\n        case ACTIONS.PL_CREATE_PLAYLIST: {\r\n            const { name, id, renameMode, setCurrent } = action;\r\n            const pathToDir = findClosesDir(state, state.currentSelection);\r\n            if (!name) {\r\n                name = generateTemplateName(state, pathToDir, \"New Playlist\")\r\n            }\r\n            return produce(state, draftState => {\r\n                set(draftState, [...pathToDir, name], {\r\n                    _id: id,\r\n                    _type: \"playlist\",\r\n                    _content: []\r\n                })\r\n                set(draftState, [...pathToDir, \"_open\"], true); // open parent dir\r\n                draftState.currentSelection = [...pathToDir, name]; // set focus on new element \r\n                if (setCurrent) {\r\n                    draftState.currentPlaylist = [...pathToDir, name];\r\n                }\r\n                if (renameMode) {\r\n                    draftState.renameMode = renameMode;\r\n                }\r\n            })\r\n        }\r\n\r\n        case ACTIONS.PL_OPEN_CURRENT_PLAY_LIST: {\r\n            return produce(state, draftState => {\r\n                draftState.list = get(state, [...state.currentSelection, \"_content\"]);\r\n                draftState.currentPlaylist = state.currentSelection;\r\n            })\r\n        }\r\n\r\n        case ACTIONS.PL_SET_PLAYLIST_CONTENT: {\r\n            const tracks = action.playlistContent.tracks;\r\n            tracks.sort((a, b) => a.position - b.position);\r\n            return produce(state, draftState => {\r\n                set(draftState,\r\n                    [...action.path, \"_content\"],\r\n                    tracks\r\n                );\r\n            })\r\n        }\r\n\r\n        case ACTIONS.PL_RESET_CURRENT_PLAYLIST_CONTETN: {\r\n            return produce(state, draftState => {\r\n                draftState.list = action.list;\r\n                set(draftState, [...state.currentPlaylist, \"_contetnt\"], action.list);\r\n            })\r\n        }\r\n\r\n        // ---------- selction actions ----------------------\r\n\r\n        case ACTIONS.PL_SET_SELECTION: {\r\n            return produce(state, draftState => draftState.currentSelection = action.path)\r\n        }\r\n\r\n        case ACTIONS.PL_SET_CURRENT_PLAYLIST: {\r\n            return produce(state, draftState => {\r\n                draftState.currentPlayList = action.path;\r\n                draftState.list = Array.from(get(state, [action.path]));\r\n            })\r\n        }\r\n\r\n        case ACTIONS.PL_RENAME_SELECTED: {\r\n            const content = get(state, state.currentSelection);\r\n            return produce(state, draftState => {\r\n                unset(draftState, state.currentSelection);\r\n                const newCurrent = draftState.currentSelection;\r\n                newCurrent.pop();\r\n                newCurrent.push(action.name);\r\n                draftState.currentSelection = newCurrent;\r\n                set(draftState, newCurrent, content);\r\n                draftState.renameMode = false;\r\n            })\r\n        }\r\n\r\n        case ACTIONS.PL_MOVE_TO: {\r\n            const { pathFrom, pathTo } = action;\r\n            const content = get(state, pathFrom);\r\n            const name = pathFrom.pop();\r\n            //if target and source are the same don't do anything\r\n            if (pathFrom.length === pathTo.length &&\r\n                pathFrom.every((e, i) => e === pathTo[i])) {\r\n                return state;\r\n            }\r\n            return produce(state, draftState => {\r\n                set(draftState, [...pathTo, name], content);\r\n                unset(draftState, [...pathFrom, name]);\r\n            })\r\n        }\r\n\r\n        case ACTIONS.PL_DELETE_SELECTED: {\r\n            return produce(state, draftState => {\r\n                unset(draftState, state.currentSelection);\r\n                draftState.currentSelection = ['root'];\r\n            })\r\n        }\r\n\r\n        //--------------- track actions ------------------\r\n\r\n        case ACTIONS.PL_PUSH_TRACK: {\r\n            if (state.currentPlaylist.length === 0 && action.createNew) {\r\n                //if is not seelect any play list - create new\r\n                let pathToDir = [\"root\"]\r\n                if (state.currentSelection.length > 1) {\r\n                    pathToDir = findClosesDir(state, state.currentSelection);\r\n                }\r\n                const name = generateTemplateName(state, pathToDir, \"New Playlist\");\r\n                const fullPath = [...pathToDir, name];\r\n                return produce(state, draftState => { // ?? check\r\n                    set(draftState, fullPath, {\r\n                        _type: \"playlist\",\r\n                        _content: []\r\n                    })\r\n                    set(draftState, [...pathToDir, \"_open\"], true);\r\n                    draftState.currentSelection = fullPath\r\n                    draftState.currentPlaylist = fullPath;\r\n                    const playlist = Array.from(get(draftState, fullPath));\r\n                    playlist.push(action.track);\r\n                    draftState.list = playlist;\r\n                    set(draftState, fullPath, playlist);\r\n                })\r\n            }\r\n            return produce(state, draftState => {\r\n                const list = Array.from(draftState.list);\r\n                list.push(action.track)\r\n                draftState.list = list;\r\n                set(draftState, [...state.currentPlaylist, \"_content\"], Array.from(draftState.list));\r\n            })\r\n        }\r\n\r\n        case ACTIONS.PL_COPY_TRACK_TO_LIST: {\r\n            const list = get(state, [...action.path, \"_content\"]);\r\n            if (!list) return state;\r\n            return produce(state, draftState => {\r\n                list.push(action.track);\r\n                set(draftState, [...action.path, \"_content\"], list);\r\n            })\r\n        }\r\n\r\n        case ACTIONS.PL_SWAP_TRACK_ON_CURRENT: {\r\n            console.log(\"swap\")\r\n            return produce(state, draftState => {\r\n                const newList = [...state.list];\r\n                //swaping\r\n                let trackFrom = newList[action.from];\r\n                newList[action.from] = newList[action.to];\r\n                newList[action.to] = trackFrom;\r\n\r\n                draftState.list = newList;\r\n                set(draftState, [...draftState.currentPlaylist, \"_content\"], newList)\r\n            })\r\n        }\r\n\r\n        case ACTIONS.PL_SET_BPM_AND_OFFSET: {\r\n            let { id, playlist, bpm, offset } = action;\r\n            let isCurrent = false;\r\n            if (playlist === undefined || playlist.length === 0) {\r\n                isCurrent = true;\r\n                playlist = state.currentPlaylist;\r\n            }\r\n            let list = get(state, [...playlist, \"_content\"]) // ?? check\r\n            if (!list) {\r\n                return state;\r\n            }\r\n            list = Array.from(list);\r\n            const index = list.findIndex(element => element.id === id);\r\n            if (index === -1) {\r\n                return state;\r\n            }\r\n            list[index].bpm = bpm;\r\n            if (offset) {\r\n                list[index].offset = offset;\r\n            }\r\n            return produce(state, draftState => {\r\n                set(draftState, [...playlist, \"_content\"], list); // ?? check\r\n                if (isCurrent) {\r\n                    draftState.list = list;\r\n                }\r\n                draftState.refreshFalg = Math.random();\r\n            })\r\n        }\r\n\r\n        case ACTIONS.PL_DELETE_TRACK: {\r\n            return produce(state, draftState => {\r\n                const newList = [...state.list];\r\n                newList.splice(action.index, 1);\r\n                draftState.list = newList\r\n                set(draftState, [...draftState.currentPlaylist, \"_content\"], newList) //?? check\r\n            })\r\n        }\r\n\r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport default playListReducer;\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}