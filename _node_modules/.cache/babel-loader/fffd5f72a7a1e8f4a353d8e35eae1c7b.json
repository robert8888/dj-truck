{"ast":null,"code":"import store from \"./../../../../store\";\nimport colors from \"./../../../../css/colors.scss\";\nimport { getBeatLength } from \"./../../../../utils/bpm/converter\";\nexport default class Looper {\n  constructor() {}\n\n  makeLoop(channel, loopLength) {\n    const state = store.getState();\n    const channelName = channel.channelName;\n    const beatLength = getBeatLength(state.console.channel[channelName].track.bpm);\n    const beatOffset = state.console.channel[channelName].playBackState.offset;\n    const currentPosition = channel.master.getCurrentTime();\n    const audioBufferSource = channel.master.backend.source;\n    const start = currentPosition + (beatLength - (currentPosition - beatOffset) % beatLength);\n    const end = start + beatLength * loopLength;\n    audioBufferSource.loopStart = start;\n    audioBufferSource.loopEnd = end;\n    audioBufferSource.loop = true;\n    channel.master.on(\"audioprocess\", time => {\n      if (time > end) {\n        //channel.master.backend.seekTo(start);\n        channel.master.backend.startPosition = start;\n        channel.master.backend.lastPlay = channel.master.backend.ac.currentTime;\n        channel.master.drawer.progress(channel.master.backend.getPlayedPercents());\n        console.log(\"looped\");\n      }\n    });\n    console.log(start, end);\n    this.drawLoop(channel, start, end);\n    console.log(\"start loop\", channel, loopLength);\n  }\n\n  endLoop(channel) {\n    console.log(\"stop loop\", channel);\n  }\n\n  drawLoop() {}\n\n  clearDraw() {}\n\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/core/console/channels/looper/looper.js"],"names":["store","colors","getBeatLength","Looper","constructor","makeLoop","channel","loopLength","state","getState","channelName","beatLength","console","track","bpm","beatOffset","playBackState","offset","currentPosition","master","getCurrentTime","audioBufferSource","backend","source","start","end","loopStart","loopEnd","loop","on","time","startPosition","lastPlay","ac","currentTime","drawer","progress","getPlayedPercents","log","drawLoop","endLoop","clearDraw"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,qBAAlB;AACA,OAAOC,MAAP,MAAmB,+BAAnB;AAEA,SAAQC,aAAR,QAA4B,mCAA5B;AAEA,eAAe,MAAMC,MAAN,CAAY;AACvBC,EAAAA,WAAW,GAAE,CAEZ;;AAGDC,EAAAA,QAAQ,CAACC,OAAD,EAAUC,UAAV,EAAqB;AACzB,UAAMC,KAAK,GAAGR,KAAK,CAACS,QAAN,EAAd;AACA,UAAMC,WAAW,GAAGJ,OAAO,CAACI,WAA5B;AAEA,UAAMC,UAAU,GAAGT,aAAa,CAACM,KAAK,CAACI,OAAN,CAAcN,OAAd,CAAsBI,WAAtB,EAAmCG,KAAnC,CAAyCC,GAA1C,CAAhC;AACA,UAAMC,UAAU,GAAGP,KAAK,CAACI,OAAN,CAAcN,OAAd,CAAsBI,WAAtB,EAAmCM,aAAnC,CAAiDC,MAApE;AACA,UAAMC,eAAe,GAAGZ,OAAO,CAACa,MAAR,CAAeC,cAAf,EAAxB;AACA,UAAMC,iBAAiB,GAAGf,OAAO,CAACa,MAAR,CAAeG,OAAf,CAAuBC,MAAjD;AAEA,UAAMC,KAAK,GAAGN,eAAe,IAAIP,UAAU,GAAG,CAACO,eAAe,GAAGH,UAAnB,IAAiCJ,UAAlD,CAA7B;AACA,UAAMc,GAAG,GAAGD,KAAK,GAAGb,UAAU,GAAGJ,UAAjC;AAGAc,IAAAA,iBAAiB,CAACK,SAAlB,GAA8BF,KAA9B;AACAH,IAAAA,iBAAiB,CAACM,OAAlB,GAA4BF,GAA5B;AACAJ,IAAAA,iBAAiB,CAACO,IAAlB,GAAyB,IAAzB;AAEAtB,IAAAA,OAAO,CAACa,MAAR,CAAeU,EAAf,CAAkB,cAAlB,EAAmCC,IAAD,IAAQ;AACtC,UAAGA,IAAI,GAAGL,GAAV,EAAc;AACV;AACAnB,QAAAA,OAAO,CAACa,MAAR,CAAeG,OAAf,CAAuBS,aAAvB,GAAuCP,KAAvC;AACAlB,QAAAA,OAAO,CAACa,MAAR,CAAeG,OAAf,CAAuBU,QAAvB,GAAkC1B,OAAO,CAACa,MAAR,CAAeG,OAAf,CAAuBW,EAAvB,CAA0BC,WAA5D;AACA5B,QAAAA,OAAO,CAACa,MAAR,CAAegB,MAAf,CAAsBC,QAAtB,CAA+B9B,OAAO,CAACa,MAAR,CAAeG,OAAf,CAAuBe,iBAAvB,EAA/B;AACAzB,QAAAA,OAAO,CAAC0B,GAAR,CAAY,QAAZ;AACH;AACJ,KARD;AASA1B,IAAAA,OAAO,CAAC0B,GAAR,CAAYd,KAAZ,EAAmBC,GAAnB;AACA,SAAKc,QAAL,CAAcjC,OAAd,EAAuBkB,KAAvB,EAA8BC,GAA9B;AACAb,IAAAA,OAAO,CAAC0B,GAAR,CAAY,YAAZ,EAA0BhC,OAA1B,EAAmCC,UAAnC;AACH;;AAKDiC,EAAAA,OAAO,CAAClC,OAAD,EAAS;AACZM,IAAAA,OAAO,CAAC0B,GAAR,CAAY,WAAZ,EAAyBhC,OAAzB;AACH;;AAEDiC,EAAAA,QAAQ,GAAE,CAET;;AAEDE,EAAAA,SAAS,GAAE,CAEV;;AAlDsB","sourcesContent":["import store from \"./../../../../store\";\r\nimport colors from \"./../../../../css/colors.scss\";\r\n\r\nimport {getBeatLength} from \"./../../../../utils/bpm/converter\";\r\n\r\nexport default class Looper{\r\n    constructor(){\r\n\r\n    }\r\n\r\n\r\n    makeLoop(channel, loopLength){\r\n        const state = store.getState();\r\n        const channelName = channel.channelName;\r\n\r\n        const beatLength = getBeatLength(state.console.channel[channelName].track.bpm);\r\n        const beatOffset = state.console.channel[channelName].playBackState.offset;\r\n        const currentPosition = channel.master.getCurrentTime();\r\n        const audioBufferSource = channel.master.backend.source;\r\n\r\n        const start = currentPosition + (beatLength - (currentPosition - beatOffset) % beatLength);\r\n        const end = start + beatLength * loopLength;\r\n\r\n\r\n        audioBufferSource.loopStart = start;\r\n        audioBufferSource.loopEnd = end;\r\n        audioBufferSource.loop = true;\r\n\r\n        channel.master.on(\"audioprocess\", (time)=>{\r\n            if(time > end){\r\n                //channel.master.backend.seekTo(start);\r\n                channel.master.backend.startPosition = start;\r\n                channel.master.backend.lastPlay = channel.master.backend.ac.currentTime;\r\n                channel.master.drawer.progress(channel.master.backend.getPlayedPercents())\r\n                console.log(\"looped\")\r\n            }\r\n        })\r\n        console.log(start, end )\r\n        this.drawLoop(channel, start, end);\r\n        console.log(\"start loop\", channel, loopLength)\r\n    }\r\n\r\n\r\n\r\n\r\n    endLoop(channel){\r\n        console.log(\"stop loop\", channel);\r\n    }\r\n\r\n    drawLoop(){\r\n\r\n    }\r\n\r\n    clearDraw(){\r\n\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}