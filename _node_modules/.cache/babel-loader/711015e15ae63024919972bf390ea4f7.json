{"ast":null,"code":"import { call, put, select, takeEvery } from 'redux-saga/effects';\nimport { ACTIONS, pushLog, setUserProfileWithToken } from \"../../actions\";\nimport { getApi } from \"./../../apis/apiProvider\";\nimport { getToken } from \"./../../auth0/getToken\";\nimport { Log } from \"./../../utils/logger/logger\";\nimport errorParser from \"./../../utils/serverErrorParser/errorParser\";\n\nconst getLogged = state => state.user.logged;\n\nexport default function* watcher() {\n  //action dispatched in auth0/react-auth0-spa.js\n  yield takeEvery(ACTIONS.SET_USER_PROFILE, handel);\n}\n\nfunction* handel(action) {\n  const path = ['saga', 'current user saga'];\n  const logged = yield select(getLogged);\n\n  if (logged) {\n    return;\n  }\n\n  try {\n    var _response$data;\n\n    const {\n      callQuery,\n      queries\n    } = getApi(\"UserAssets\");\n    const query = queries.myIdQl;\n    const token = yield call(getToken);\n    const response = yield callQuery(query, token);\n    const user = response === null || response === void 0 ? void 0 : (_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.me;\n\n    if (response.errors) {\n      throw new Error(\"unable to reasd cucrent user data:\" + errorParser(response.errors));\n    }\n\n    if (response.user) {\n      throw new Error(\"don't revice user data from server\");\n    }\n\n    action.user = { ...action.user,\n      dbId: user.id,\n      ...user\n    };\n    yield put(setUserProfileWithToken(action.user, token));\n    yield put(pushLog(new Log(\"Recive current user data\", path)));\n  } catch (error) {\n    yield put(pushLog(Log.Error(path, error.message, \"Sorry. During process of reading user data occurred a problem\", error)));\n  }\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/sagas/user/currentUserSaga.js"],"names":["call","put","select","takeEvery","ACTIONS","pushLog","setUserProfileWithToken","getApi","getToken","Log","errorParser","getLogged","state","user","logged","watcher","SET_USER_PROFILE","handel","action","path","callQuery","queries","query","myIdQl","token","response","data","me","errors","Error","dbId","id","error","message"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,MAApB,EAA4BC,SAA5B,QAA6C,oBAA7C;AACA,SAASC,OAAT,EAAkBC,OAAlB,EAA2BC,uBAA3B,QAA0D,eAA1D;AACA,SAASC,MAAT,QAAuB,0BAAvB;AACA,SAASC,QAAT,QAAyB,wBAAzB;AACA,SAASC,GAAT,QAAoB,6BAApB;AACA,OAAOC,WAAP,MAAwB,6CAAxB;;AAEA,MAAMC,SAAS,GAAGC,KAAK,IAAIA,KAAK,CAACC,IAAN,CAAWC,MAAtC;;AAEA,eAAe,UAAUC,OAAV,GAAoB;AAC/B;AACA,QAAMZ,SAAS,CAACC,OAAO,CAACY,gBAAT,EAA2BC,MAA3B,CAAf;AACH;;AAED,UAAUA,MAAV,CAAiBC,MAAjB,EAAyB;AACrB,QAAMC,IAAI,GAAG,CAAC,MAAD,EAAS,mBAAT,CAAb;AACA,QAAML,MAAM,GAAG,MAAMZ,MAAM,CAACS,SAAD,CAA3B;;AACA,MAAIG,MAAJ,EAAY;AACR;AACH;;AACD,MAAG;AAAA;;AACC,UAAM;AAAEM,MAAAA,SAAF;AAAaC,MAAAA;AAAb,QAAyBd,MAAM,CAAC,YAAD,CAArC;AACA,UAAMe,KAAK,GAAGD,OAAO,CAACE,MAAtB;AACA,UAAMC,KAAK,GAAG,MAAMxB,IAAI,CAACQ,QAAD,CAAxB;AACA,UAAMiB,QAAQ,GAAG,MAAML,SAAS,CAACE,KAAD,EAAQE,KAAR,CAAhC;AAEA,UAAMX,IAAI,GAAGY,QAAH,aAAGA,QAAH,yCAAGA,QAAQ,CAAEC,IAAb,mDAAG,eAAgBC,EAA7B;;AAEA,QAAGF,QAAQ,CAACG,MAAZ,EAAmB;AACf,YAAM,IAAIC,KAAJ,CAAU,uCAAuCnB,WAAW,CAACe,QAAQ,CAACG,MAAV,CAA5D,CAAN;AACH;;AAED,QAAGH,QAAQ,CAACZ,IAAZ,EAAiB;AACb,YAAM,IAAIgB,KAAJ,CAAU,oCAAV,CAAN;AACH;;AAEDX,IAAAA,MAAM,CAACL,IAAP,GAAc,EACV,GAAGK,MAAM,CAACL,IADA;AAEViB,MAAAA,IAAI,EAAEjB,IAAI,CAACkB,EAFD;AAGV,SAAGlB;AAHO,KAAd;AAMA,UAAMZ,GAAG,CAACK,uBAAuB,CAACY,MAAM,CAACL,IAAR,EAAcW,KAAd,CAAxB,CAAT;AAEA,UAAMvB,GAAG,CAACI,OAAO,CAAC,IAAII,GAAJ,CAAQ,0BAAR,EAAoCU,IAApC,CAAD,CAAR,CAAT;AACH,GAzBD,CAyBE,OAAMa,KAAN,EAAY;AACV,UAAM/B,GAAG,CAACI,OAAO,CAACI,GAAG,CAACoB,KAAJ,CACdV,IADc,EAEda,KAAK,CAACC,OAFQ,EAGd,+DAHc,EAIdD,KAJc,CAAD,CAAR,CAAT;AAMH;AAEJ","sourcesContent":["import { call, put, select, takeEvery } from 'redux-saga/effects';\r\nimport { ACTIONS, pushLog, setUserProfileWithToken } from \"../../actions\";\r\nimport { getApi } from \"./../../apis/apiProvider\";\r\nimport { getToken } from \"./../../auth0/getToken\";\r\nimport { Log } from \"./../../utils/logger/logger\";\r\nimport errorParser from \"./../../utils/serverErrorParser/errorParser\";\r\n\r\nconst getLogged = state => state.user.logged;\r\n\r\nexport default function* watcher() {\r\n    //action dispatched in auth0/react-auth0-spa.js\r\n    yield takeEvery(ACTIONS.SET_USER_PROFILE, handel);\r\n}\r\n\r\nfunction* handel(action) {\r\n    const path = ['saga', 'current user saga'];\r\n    const logged = yield select(getLogged);\r\n    if (logged) {\r\n        return\r\n    }\r\n    try{\r\n        const { callQuery, queries } = getApi(\"UserAssets\");\r\n        const query = queries.myIdQl;\r\n        const token = yield call(getToken);\r\n        const response = yield callQuery(query, token);\r\n\r\n        const user = response?.data?.me;\r\n    \r\n        if(response.errors){\r\n            throw new Error(\"unable to reasd cucrent user data:\" + errorParser(response.errors));\r\n        }\r\n\r\n        if(response.user){\r\n            throw new Error(\"don't revice user data from server\")\r\n        }\r\n\r\n        action.user = {\r\n            ...action.user,\r\n            dbId: user.id,\r\n            ...user,\r\n        }\r\n\r\n        yield put(setUserProfileWithToken(action.user, token))\r\n        \r\n        yield put(pushLog(new Log(\"Recive current user data\", path)))\r\n    } catch(error){\r\n        yield put(pushLog(Log.Error(\r\n            path,\r\n            error.message,\r\n            \"Sorry. During process of reading user data occurred a problem\",\r\n            error\r\n        )))\r\n    }\r\n\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}