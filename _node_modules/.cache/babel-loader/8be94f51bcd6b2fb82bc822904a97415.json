{"ast":null,"code":"var Equaliztion={setGainValue:function setGainValue(channelName,knobValue,nodeName){var gain=1+knobValue/100;var audioCtx=this.channels.getChannel(channelName).backend.ac;var channel=this.audioNodes.channels[channelName];channel[nodeName].gain.setTargetAtTime(parseFloat(gain),audioCtx.currentTime,0.01);},setFilterValue:function setFilterValue(channelName,knobValue,nodeName){var audioCtx=this.channels.getChannel(channelName).backend.ac;var channel=this.audioNodes.channels[channelName];channel[nodeName].gain.setValueAtTime(knobValue,audioCtx.currentTime);},setGain:function setGain(channelName,knobValue){this.setGainValue(channelName,knobValue,'mainGainNode');},setEqHigh:function setEqHigh(channelName,knobValue){this.setFilterValue(channelName,knobValue,'eqHiFilterNode');},setEqMid:function setEqMid(channelName,knobValue){this.setFilterValue(channelName,knobValue,'eqMidFilterNode');},setEqLow:function setEqLow(channelName,knobValue){this.setFilterValue(channelName,knobValue,'eqLowFilterNode');},setFilterFreq:function setFilterFreq(channelName,knobValue){// knobValue *= 800;\nvar channel=this.audioNodes.channels[channelName];if(knobValue<0){//low pass\nvar freq=8000-Math.log10(Math.abs(knobValue))*8000;channel.lowPassFilterNode.frequency.setValueAtTime(freq,this.mainAudioContext.currentTime);channel.highPassFilterNode.frequency.setValueAtTime(0,this.mainAudioContext.currentTime);setFilterRes.call(this,channel,channel._fitlerResonasValue);}else if(knobValue>0){// high pass filter\nchannel.lowPassFilterNode.frequency.setValueAtTime(24000,this.mainAudioContext.currentTime);knobValue=Math.pow(Math.E,knobValue);//\nchannel.highPassFilterNode.frequency.setValueAtTime(knobValue,this.mainAudioContext.currentTime);setFilterRes.call(this,channel,channel._fitlerResonasValue);}else{//0 turn of all\nchannel.lowPassFilterNode.frequency.setValueAtTime(24000,this.mainAudioContext.currentTime);channel.highPassFilterNode.frequency.setValueAtTime(0,this.mainAudioContext.currentTime);setFilterRes.call(this,channel,0);}function setFilterRes(channel){var value=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;channel.lowPassFilterNode.Q.setValueAtTime(value,this.mainAudioContext.currentTime);channel.highPassFilterNode.Q.setValueAtTime(value,this.mainAudioContext.currentTime);}},setFiterResonas:function setFiterResonas(channelName,knobValue){var channel=this.audioNodes.channels[channelName];channel._fitlerResonasValue=knobValue;}};export default Equaliztion;","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/pages/console/core/console/mixer/equalization.js"],"names":["Equaliztion","setGainValue","channelName","knobValue","nodeName","gain","audioCtx","channels","getChannel","backend","ac","channel","audioNodes","setTargetAtTime","parseFloat","currentTime","setFilterValue","setValueAtTime","setGain","setEqHigh","setEqMid","setEqLow","setFilterFreq","freq","Math","log10","abs","lowPassFilterNode","frequency","mainAudioContext","highPassFilterNode","setFilterRes","call","_fitlerResonasValue","E","value","Q","setFiterResonas"],"mappings":"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","sourcesContent":["const Equaliztion = {\r\n\r\n    setGainValue(channelName, knobValue, nodeName) {\r\n        let gain = 1 + knobValue / 100;\r\n        let audioCtx = this.channels.getChannel(channelName).backend.ac;\r\n\r\n        let channel = this.audioNodes.channels[channelName];\r\n        channel[nodeName].gain.setTargetAtTime(parseFloat(gain), audioCtx.currentTime, 0.01);\r\n    },\r\n\r\n    setFilterValue(channelName, knobValue, nodeName) {\r\n        let audioCtx = this.channels.getChannel(channelName).backend.ac;\r\n\r\n        let channel = this.audioNodes.channels[channelName];\r\n        channel[nodeName].gain.setValueAtTime(knobValue, audioCtx.currentTime);\r\n    },\r\n\r\n    setGain(channelName, knobValue) {\r\n        this.setGainValue(channelName, knobValue, 'mainGainNode');\r\n    },\r\n\r\n    setEqHigh(channelName, knobValue) {\r\n        this.setFilterValue(channelName, knobValue, 'eqHiFilterNode');\r\n    },\r\n\r\n    setEqMid(channelName, knobValue) {\r\n        this.setFilterValue(channelName, knobValue, 'eqMidFilterNode');\r\n    },\r\n\r\n    setEqLow(channelName, knobValue) {\r\n        this.setFilterValue(channelName, knobValue, 'eqLowFilterNode');\r\n    },\r\n\r\n    setFilterFreq(channelName, knobValue) {\r\n       // knobValue *= 800;\r\n        const channel = this.audioNodes.channels[channelName];\r\n        if (knobValue < 0) {\r\n            //low pass\r\n            const freq = 8000 - (Math.log10(Math.abs(knobValue)) * 8000);\r\n            channel.lowPassFilterNode.frequency\r\n                .setValueAtTime(freq, this.mainAudioContext.currentTime);\r\n\r\n            channel.highPassFilterNode.frequency\r\n                .setValueAtTime(0, this.mainAudioContext.currentTime);\r\n            setFilterRes.call(this, channel, channel._fitlerResonasValue);\r\n        } else if (knobValue > 0) {\r\n            // high pass filter\r\n            channel.lowPassFilterNode.frequency\r\n                .setValueAtTime(24000, this.mainAudioContext.currentTime);\r\n\r\n            knobValue = Math.E ** knobValue;//\r\n            channel.highPassFilterNode.frequency\r\n                .setValueAtTime(knobValue, this.mainAudioContext.currentTime);\r\n\r\n            setFilterRes.call(this, channel, channel._fitlerResonasValue);\r\n        } else {\r\n            //0 turn of all\r\n            channel.lowPassFilterNode.frequency\r\n                .setValueAtTime(24000, this.mainAudioContext.currentTime);\r\n\r\n            channel.highPassFilterNode.frequency\r\n                .setValueAtTime(0, this.mainAudioContext.currentTime);\r\n                \r\n            setFilterRes.call(this, channel, 0);\r\n        }\r\n\r\n        function setFilterRes(channel, value = 0) {\r\n            channel.lowPassFilterNode.Q\r\n                .setValueAtTime(value, this.mainAudioContext.currentTime);\r\n\r\n            channel.highPassFilterNode.Q\r\n                .setValueAtTime(value, this.mainAudioContext.currentTime);\r\n        }\r\n    },\r\n\r\n    setFiterResonas(channelName, knobValue) {\r\n        const channel = this.audioNodes.channels[channelName];\r\n        channel._fitlerResonasValue = knobValue;\r\n    },\r\n}\r\n\r\nexport default Equaliztion;"]},"metadata":{},"sourceType":"module"}