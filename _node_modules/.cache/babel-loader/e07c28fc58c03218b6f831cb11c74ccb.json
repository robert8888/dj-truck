{"ast":null,"code":"import { pushTrackToList, ACTIONS } from \"../../actions\";\nimport { takeEvery, select, put, call } from \"redux-saga/effects\";\nimport { getApi } from \"./../../apis/apiProvider\";\nimport createTrackQuery from \"./../../qlQueries/createTrack\";\nimport { generateTemplateName as generateName, findClosesDir } from \"./../../reducers/console/playlist/utils\";\nimport { get } from \"lodash/object\";\nimport { handle as createNewPlaylist } from \"./createPlaylistRequestSaga\";\nimport UUID from \"uuidjs\";\nexport default function* pushTrackToListSaga() {\n  yield takeEvery(ACTIONS.PL_PUSH_TRACK_REQUEST, handle);\n}\n\nconst getToken = state => state.user.token;\n\nconst getCurrentId = state => state.playList.list;\n\nfunction* handle(action) {\n  const {\n    callQuery\n  } = getApi(\"UserAssets\");\n  const token = yield select(getToken);\n  console.log(\"action trakc\", action.track); //current playlist id \n\n  const currentPlaylist = yield select(getCurrentId);\n  let playlistId = currentPlaylist._id;\n\n  if (!playlistId) {\n    //create new \n    console.log(\"creating new playlist\");\n    yield call(createNewPlaylist, {});\n    playlistId = yield select(getCurrentId);\n  }\n\n  console.log(action.track);\n  const data = ({\n    title,\n    source,\n    sourceId,\n    quality,\n    duration\n  } = action.track);\n  data.playlist = playlistId;\n  data.thumbnails = JSON.stringify(action.track.thumbnails);\n  const query = createTrackQuery(data);\n  console.log(\"the query\", query);\n  const result = callQuery(query, token);\n  console.log(\"result of query\", result); //if(result?.data?.createTrack?.track?.id){\n\n  yield put(pushTrackToList({ ...action.track,\n    //id:result.data.createTrack.track.id\n    id: UUID.genV1().toString()\n  }, action.playList)); // }\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/sagas/playlists/pushTrackToListRequestSaga.js"],"names":["pushTrackToList","ACTIONS","takeEvery","select","put","call","getApi","createTrackQuery","generateTemplateName","generateName","findClosesDir","get","handle","createNewPlaylist","UUID","pushTrackToListSaga","PL_PUSH_TRACK_REQUEST","getToken","state","user","token","getCurrentId","playList","list","action","callQuery","console","log","track","currentPlaylist","playlistId","_id","data","title","source","sourceId","quality","duration","playlist","thumbnails","JSON","stringify","query","result","id","genV1","toString"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,OAA1B,QAAyC,eAAzC;AACA,SAASC,SAAT,EAAoBC,MAApB,EAA4BC,GAA5B,EAAiCC,IAAjC,QAA6C,oBAA7C;AACA,SAASC,MAAT,QAAuB,0BAAvB;AACA,OAAOC,gBAAP,MAA6B,+BAA7B;AACA,SAASC,oBAAoB,IAAIC,YAAjC,EAA+CC,aAA/C,QAAoE,yCAApE;AACA,SAASC,GAAT,QAAoB,eAApB;AACA,SAAQC,MAAM,IAAIC,iBAAlB,QAA0C,6BAA1C;AACA,OAAOC,IAAP,MAAiB,QAAjB;AAGA,eAAe,UAAUC,mBAAV,GAAgC;AAC3C,QAAMb,SAAS,CAACD,OAAO,CAACe,qBAAT,EAAgCJ,MAAhC,CAAf;AACH;;AAED,MAAMK,QAAQ,GAAGC,KAAK,IAAIA,KAAK,CAACC,IAAN,CAAWC,KAArC;;AAGA,MAAMC,YAAY,GAAGH,KAAK,IAAIA,KAAK,CAACI,QAAN,CAAeC,IAA7C;;AAEA,UAAUX,MAAV,CAAiBY,MAAjB,EAAyB;AACrB,QAAM;AAAEC,IAAAA;AAAF,MAAgBnB,MAAM,CAAC,YAAD,CAA5B;AACA,QAAMc,KAAK,GAAG,MAAMjB,MAAM,CAACc,QAAD,CAA1B;AAEAS,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BH,MAAM,CAACI,KAAnC,EAJqB,CAKrB;;AACA,QAAMC,eAAe,GAAG,MAAM1B,MAAM,CAACkB,YAAD,CAApC;AACA,MAAIS,UAAU,GAAGD,eAAe,CAACE,GAAjC;;AACA,MAAG,CAACD,UAAJ,EAAe;AACX;AACAJ,IAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACA,UAAMtB,IAAI,CAACQ,iBAAD,EAAoB,EAApB,CAAV;AACAiB,IAAAA,UAAU,GAAG,MAAM3B,MAAM,CAACkB,YAAD,CAAzB;AACH;;AAEDK,EAAAA,OAAO,CAACC,GAAR,CAAYH,MAAM,CAACI,KAAnB;AAEA,QAAMI,IAAI,IAAG;AACTC,IAAAA,KADS;AAETC,IAAAA,MAFS;AAGTC,IAAAA,QAHS;AAITC,IAAAA,OAJS;AAKTC,IAAAA;AALS,MAMTb,MAAM,CAACI,KAND,CAAV;AAQAI,EAAAA,IAAI,CAACM,QAAL,GAAgBR,UAAhB;AACAE,EAAAA,IAAI,CAACO,UAAL,GAAkBC,IAAI,CAACC,SAAL,CAAejB,MAAM,CAACI,KAAP,CAAaW,UAA5B,CAAlB;AAEA,QAAMG,KAAK,GAAGnC,gBAAgB,CAACyB,IAAD,CAA9B;AACAN,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBe,KAAzB;AAEA,QAAMC,MAAM,GAAGlB,SAAS,CAACiB,KAAD,EAAQtB,KAAR,CAAxB;AACAM,EAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BgB,MAA/B,EAhCqB,CAiCrB;;AACI,QAAMvC,GAAG,CAACJ,eAAe,CAAC,EACtB,GAAGwB,MAAM,CAACI,KADY;AAEtB;AACAgB,IAAAA,EAAE,EAAE9B,IAAI,CAAC+B,KAAL,GAAaC,QAAb;AAHkB,GAAD,EAItBtB,MAAM,CAACF,QAJe,CAAhB,CAAT,CAlCiB,CAuCtB;AAGF","sourcesContent":["import { pushTrackToList, ACTIONS } from \"../../actions\";\r\nimport { takeEvery, select, put, call } from \"redux-saga/effects\"\r\nimport { getApi } from \"./../../apis/apiProvider\";\r\nimport createTrackQuery from \"./../../qlQueries/createTrack\";\r\nimport { generateTemplateName as generateName, findClosesDir } from \"./../../reducers/console/playlist/utils\";\r\nimport { get } from \"lodash/object\";\r\nimport {handle as createNewPlaylist} from \"./createPlaylistRequestSaga\";\r\nimport UUID from \"uuidjs\";\r\n\r\n\r\nexport default function* pushTrackToListSaga() {\r\n    yield takeEvery(ACTIONS.PL_PUSH_TRACK_REQUEST, handle)\r\n}\r\n\r\nconst getToken = state => state.user.token;\r\n\r\n\r\nconst getCurrentId = state => state.playList.list;\r\n\r\nfunction* handle(action) {\r\n    const { callQuery } = getApi(\"UserAssets\");\r\n    const token = yield select(getToken);\r\n\r\n    console.log(\"action trakc\", action.track);\r\n    //current playlist id \r\n    const currentPlaylist = yield select(getCurrentId);\r\n    let playlistId = currentPlaylist._id;\r\n    if(!playlistId){\r\n        //create new \r\n        console.log(\"creating new playlist\")\r\n        yield call(createNewPlaylist, {});\r\n        playlistId = yield select(getCurrentId);\r\n    }\r\n\r\n    console.log(action.track)\r\n\r\n    const data = {\r\n        title,\r\n        source,\r\n        sourceId,\r\n        quality,\r\n        duration,\r\n    } = action.track;\r\n\r\n    data.playlist = playlistId;\r\n    data.thumbnails = JSON.stringify(action.track.thumbnails);\r\n\r\n    const query = createTrackQuery(data)\r\n    console.log(\"the query\", query);\r\n    \r\n    const result = callQuery(query, token);\r\n    console.log(\"result of query\", result);\r\n    //if(result?.data?.createTrack?.track?.id){\r\n        yield put(pushTrackToList({\r\n            ...action.track,\r\n            //id:result.data.createTrack.track.id\r\n            id: UUID.genV1().toString(),\r\n        }, action.playList));\r\n   // }\r\n\r\n\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}