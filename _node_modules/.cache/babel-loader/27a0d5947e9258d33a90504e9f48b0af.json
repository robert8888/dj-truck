{"ast":null,"code":"import { pushTrackToList, ACTIONS } from \"../../actions\";\nimport { takeEvery, select, put, call } from \"redux-saga/effects\";\nimport { getApi } from \"./../../apis/apiProvider\";\nimport query from \"./../../qlQueries/createPlaylist\";\nimport { generateTemplateName as generateName, findClosesDir } from \"./../../reducers/console/playlist/utils\";\nimport { get } from \"lodash/object\";\nimport { handel as createNewPlaylist } from \"./createPlaylistRequestSaga\";\nexport default function* pushTrackToListSaga() {\n  yield takeEvery(ACTIONS.PL_PUSH_TRACK_REQUEST, handle);\n}\n\nconst getToken = state => state.user.token; // const getCurrentSelection = state => state.playList.currentSelection;\n// const getParentPath = (state, currentSelection) =>\n//     findClosesDir(state, currentSelection)\n// const generatePlaylistName = (state, parrentPath, base) => \n//     generateName(state.playList, parrentPath, base);\n// const getParrentDir = (state, path) => get(state.playList, path);\n\n\nconst getCurrentId = state => state.playList.list._id;\n\nfunction* handle(action) {\n  const {\n    callQuery\n  } = getApi(\"UserAssets\");\n  const token = yield select(getToken); // const currentSelection = yield select(getCurrentSelection);\n  // const parrentPath = yield select(getParentPath, currentSelection);\n  //current playlist id \n\n  const playlistId = yield select(getCurrentId);\n\n  if (!playlistId) {//create new \n  }\n\n  yield put(pushTrackToList(action.track, action.playList)); // let renameMode = false;\n  // let playlistName;\n  // if(!action.name){\n  //     playlistName = yield select(generatePlaylistName, parrentPath, \"New playlist\");\n  //     renameMode = true;\n  // } else {\n  //     playlistName = yield select(generatePlaylistName, parrentPath, action.name);\n  // }\n  // const parrentDir = yield select(getParrentDir, parrentPath);\n  // if(!parrentDir._loaded){\n  //     yield call(loadDirSagaHanedl, {path: parrentPath})\n  // }\n  // let result = yield callQuery(query(parrentDir._id, playlistName), token);\n  // if(!result || !result.data?.createPlaylist){\n  //     return ;\n  // }\n  // const id = result.data.createPlaylist.id;\n  // yield put(createPlaylist(playlistName, id, renameMode));\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/sagas/playlists/pushTrackToListRequestSaga.js"],"names":["pushTrackToList","ACTIONS","takeEvery","select","put","call","getApi","query","generateTemplateName","generateName","findClosesDir","get","handel","createNewPlaylist","pushTrackToListSaga","PL_PUSH_TRACK_REQUEST","handle","getToken","state","user","token","getCurrentId","playList","list","_id","action","callQuery","playlistId","track"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,OAA1B,QAAyC,eAAzC;AACA,SAASC,SAAT,EAAoBC,MAApB,EAA4BC,GAA5B,EAAiCC,IAAjC,QAA6C,oBAA7C;AACA,SAASC,MAAT,QAAuB,0BAAvB;AACA,OAAOC,KAAP,MAAkB,kCAAlB;AACA,SAASC,oBAAoB,IAAIC,YAAjC,EAA+CC,aAA/C,QAAoE,yCAApE;AACA,SAASC,GAAT,QAAoB,eAApB;AACA,SAAQC,MAAM,IAAIC,iBAAlB,QAA0C,6BAA1C;AAGA,eAAe,UAAUC,mBAAV,GAAgC;AAC3C,QAAMZ,SAAS,CAACD,OAAO,CAACc,qBAAT,EAAgCC,MAAhC,CAAf;AACH;;AAED,MAAMC,QAAQ,GAAGC,KAAK,IAAIA,KAAK,CAACC,IAAN,CAAWC,KAArC,C,CAEA;AAEA;AACA;AAEA;AACA;AAEA;;;AAEA,MAAMC,YAAY,GAAGH,KAAK,IAAIA,KAAK,CAACI,QAAN,CAAeC,IAAf,CAAoBC,GAAlD;;AAEA,UAAUR,MAAV,CAAiBS,MAAjB,EAAyB;AACrB,QAAM;AAAEC,IAAAA;AAAF,MAAgBpB,MAAM,CAAC,YAAD,CAA5B;AACA,QAAMc,KAAK,GAAG,MAAMjB,MAAM,CAACc,QAAD,CAA1B,CAFqB,CAGrB;AACA;AAEA;;AACA,QAAMU,UAAU,GAAG,MAAMxB,MAAM,CAACkB,YAAD,CAA/B;;AACA,MAAG,CAACM,UAAJ,EAAe,CACX;AACH;;AAID,QAAMvB,GAAG,CAACJ,eAAe,CAACyB,MAAM,CAACG,KAAR,EAAeH,MAAM,CAACH,QAAtB,CAAhB,CAAT,CAdqB,CAgBrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACH","sourcesContent":["import { pushTrackToList, ACTIONS } from \"../../actions\";\r\nimport { takeEvery, select, put, call } from \"redux-saga/effects\"\r\nimport { getApi } from \"./../../apis/apiProvider\";\r\nimport query from \"./../../qlQueries/createPlaylist\";\r\nimport { generateTemplateName as generateName, findClosesDir } from \"./../../reducers/console/playlist/utils\";\r\nimport { get } from \"lodash/object\";\r\nimport {handel as createNewPlaylist} from \"./createPlaylistRequestSaga\";\r\n\r\n\r\nexport default function* pushTrackToListSaga() {\r\n    yield takeEvery(ACTIONS.PL_PUSH_TRACK_REQUEST, handle)\r\n}\r\n\r\nconst getToken = state => state.user.token;\r\n\r\n// const getCurrentSelection = state => state.playList.currentSelection;\r\n\r\n// const getParentPath = (state, currentSelection) =>\r\n//     findClosesDir(state, currentSelection)\r\n\r\n// const generatePlaylistName = (state, parrentPath, base) => \r\n//     generateName(state.playList, parrentPath, base);\r\n\r\n// const getParrentDir = (state, path) => get(state.playList, path);\r\n\r\nconst getCurrentId = state => state.playList.list._id;\r\n\r\nfunction* handle(action) {\r\n    const { callQuery } = getApi(\"UserAssets\");\r\n    const token = yield select(getToken);\r\n    // const currentSelection = yield select(getCurrentSelection);\r\n    // const parrentPath = yield select(getParentPath, currentSelection);\r\n\r\n    //current playlist id \r\n    const playlistId = yield select(getCurrentId);\r\n    if(!playlistId){\r\n        //create new \r\n    }\r\n\r\n\r\n\r\n    yield put(pushTrackToList(action.track, action.playList));\r\n\r\n    // let renameMode = false;\r\n    // let playlistName;\r\n    // if(!action.name){\r\n    //     playlistName = yield select(generatePlaylistName, parrentPath, \"New playlist\");\r\n    //     renameMode = true;\r\n    // } else {\r\n    //     playlistName = yield select(generatePlaylistName, parrentPath, action.name);\r\n    // }\r\n    \r\n    // const parrentDir = yield select(getParrentDir, parrentPath);\r\n    // if(!parrentDir._loaded){\r\n    //     yield call(loadDirSagaHanedl, {path: parrentPath})\r\n    // }\r\n\r\n    // let result = yield callQuery(query(parrentDir._id, playlistName), token);\r\n    // if(!result || !result.data?.createPlaylist){\r\n    //     return ;\r\n    // }\r\n    // const id = result.data.createPlaylist.id;\r\n\r\n    // yield put(createPlaylist(playlistName, id, renameMode));\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}