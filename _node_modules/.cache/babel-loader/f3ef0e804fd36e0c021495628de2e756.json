{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJEKTY\\\\APKI\\\\DjTruck\\\\djtruck\\\\src\\\\components\\\\Deck\\\\PitchControl\\\\PitchControl.js\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport \"./pitch-control.scss\";\n\nclass PitchControl extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      sliderRange: null,\n      sliderCurrnetPosition: null,\n      sliderPrevPosition: null,\n      isDragged: false\n    };\n\n    this.mouseDownHandle = (event, sliderRange) => {\n      //  console.log(this);\n      if (event.target === this.sliderAreaElement.current || event.target === this.sliderRangeElement.current) {\n        // area clicked\n        let clickY = event.clientY - this.sliderAreaElement.current.getBoundingClientRect().top;\n        this.setState(state => {\n          const _state = { ...state\n          };\n          _state.sliderPrevPosition = state.sliderCurrnetPosition;\n          _state.sliderCurrnetPosition = clickY;\n          return _state;\n        }); //  console.log(this.state.sliderCurrnetPosition);\n\n        document.addEventListener('mouseup', this.mouseUpHandler);\n        document.addEventListener('dragend', this.mouseUpHandler);\n      } else if (event.target === this.sliderThumbElement.current) {\n        // thumb clicked\n        const shiftY = event.clientY - this.sliderThumbElement.current.getBoundingClientRect().top;\n        let sliderRange = this.state.sliderRange; //  this.setState({...this.state, isDragged: true});\n\n        document.addEventListener('mousemove', this.mouseMoveHandler.bind(this)); //, event, shiftY, topOffset));\n      }\n    };\n\n    this.mouseUpHandler = event => {\n      this.setState(state => {\n        const _state = { ...state\n        };\n        _state.sliderCurrnetPosition = state.sliderPrevPosition;\n        return _state;\n      });\n      document.removeEventListener('mouseup', this.mouseUpHandler);\n      document.removeEventListener('dragend', this.mouseUpHandler);\n    };\n\n    this.mouseMoveHandler = event => {\n      const topOffset = this.sliderAreaElement.current.getBoundingClientRect().top;\n      console.log(event); // if(!this.state.isDragged) return;\n\n      const thumbHeight = this.sliderThumbElement.current.getBoundingClientRect().height;\n      let position = event.clientY - topOffset;\n      position = Math.min(Math.max(position, thumbHeight / 2), this.state.sliderRange + thumbHeight / 2);\n      this.setState(state => {\n        const _state = { ...state\n        };\n        _state.sliderCurrnetPosition = position;\n        return _state;\n      });\n      console.log(position);\n    };\n\n    this.sliderRangeElement = React.createRef(null);\n    this.sliderThumbElement = React.createRef(null);\n    this.sliderAreaElement = React.createRef(null);\n  }\n\n  componentDidMount() {\n    let top = parseInt(window.getComputedStyle(this.sliderThumbElement.current).top);\n    let range = parseInt(window.getComputedStyle(this.sliderRangeElement.current).height);\n    this.setState(state => {\n      const _state = { ...state\n      };\n      _state.sliderCurrnetPosition = top;\n      _state.sliderRange = range;\n      return _state;\n    });\n    this.sliderAreaElement.current.addEventListener('mousedown', this.mouseDownHandle.bind(this));\n  }\n\n  componentDidUpdate() {//console.log(parseInt(window.getComputedStyle(this.sliderRangeElement.current).height))\n    //console.log(\"range before state update\", range)\n    //console.log('after update' , range , this.state);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"pitch-control \" + \"pitch-\" + this.props.name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      ref: this.sliderAreaElement,\n      className: \"pitch-area\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      ref: this.sliderRangeElement,\n      className: \"slider-range\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      ref: this.sliderThumbElement,\n      style: (this.state.sliderCurrnetPosition !== null || this.state.sliderCurrnetPosition !== undefined) && {\n        top: this.state.sliderCurrnetPosition\n      },\n      className: \"slider-thumb\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default PitchControl;","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/components/Deck/PitchControl/PitchControl.js"],"names":["React","useState","useEffect","useRef","PitchControl","Component","constructor","state","sliderRange","sliderCurrnetPosition","sliderPrevPosition","isDragged","mouseDownHandle","event","target","sliderAreaElement","current","sliderRangeElement","clickY","clientY","getBoundingClientRect","top","setState","_state","document","addEventListener","mouseUpHandler","sliderThumbElement","shiftY","mouseMoveHandler","bind","removeEventListener","topOffset","console","log","thumbHeight","height","position","Math","min","max","createRef","componentDidMount","parseInt","window","getComputedStyle","range","componentDidUpdate","render","props","name","undefined"],"mappings":"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","sourcesContent":["import React, { useState , useEffect, useRef} from \"react\";\r\nimport \"./pitch-control.scss\";\r\n\r\nclass PitchControl extends React.Component{\r\n    constructor() {\r\n        super();\r\n\r\n        this.sliderRangeElement = React.createRef(null);\r\n        this.sliderThumbElement = React.createRef(null);\r\n        this.sliderAreaElement = React.createRef(null);\r\n    }\r\n\r\n    state = {\r\n        sliderRange: null,\r\n        sliderCurrnetPosition: null,\r\n        sliderPrevPosition: null,\r\n\r\n        isDragged : false,\r\n    }\r\n\r\n\r\n    mouseDownHandle = (event, sliderRange) =>{\r\n      //  console.log(this);\r\n        if(event.target === this.sliderAreaElement.current || event.target === this.sliderRangeElement.current){ // area clicked\r\n            let clickY = event.clientY - this.sliderAreaElement.current.getBoundingClientRect().top;\r\n            this.setState ( state => {\r\n                const _state = {...state};\r\n                _state.sliderPrevPosition = state.sliderCurrnetPosition;\r\n                _state.sliderCurrnetPosition = clickY;\r\n                return _state;\r\n            })\r\n          //  console.log(this.state.sliderCurrnetPosition);\r\n            document.addEventListener('mouseup', this.mouseUpHandler);\r\n            document.addEventListener('dragend', this.mouseUpHandler);\r\n        } else if(event.target === this.sliderThumbElement.current){ // thumb clicked\r\n\r\n            const shiftY = event.clientY - this.sliderThumbElement.current.getBoundingClientRect().top;\r\n            \r\n       \r\n            let sliderRange = this.state.sliderRange;\r\n            \r\n\r\n          //  this.setState({...this.state, isDragged: true});\r\n            document.addEventListener('mousemove',  this.mouseMoveHandler.bind(this))//, event, shiftY, topOffset));\r\n        }\r\n    }\r\n\r\n    mouseUpHandler = event => {\r\n        this.setState( state => {\r\n            const _state = {...state};\r\n            _state.sliderCurrnetPosition = state.sliderPrevPosition;\r\n            return _state; \r\n        })\r\n        document.removeEventListener('mouseup', this.mouseUpHandler);\r\n        document.removeEventListener('dragend', this.mouseUpHandler);\r\n    }\r\n\r\n    mouseMoveHandler = (event) =>{\r\n        const topOffset = this.sliderAreaElement.current.getBoundingClientRect().top;\r\n        console.log(event)\r\n       // if(!this.state.isDragged) return;\r\n\r\n        const thumbHeight = this.sliderThumbElement.current.getBoundingClientRect().height;\r\n        let position = event.clientY - topOffset;\r\n        position = Math.min(Math.max(position, thumbHeight/2), this.state.sliderRange + thumbHeight/2);\r\n        this.setState( state => {\r\n            const _state = {...state};\r\n            _state.sliderCurrnetPosition = position;\r\n            return _state;\r\n        })\r\n        console.log(position);\r\n        \r\n\r\n    }\r\n\r\n    componentDidMount(){\r\n        let top = parseInt(window.getComputedStyle(this.sliderThumbElement.current).top);\r\n        let range = parseInt(window.getComputedStyle(this.sliderRangeElement.current).height)\r\n        this.setState( state => {\r\n            const _state = {...state};\r\n            _state.sliderCurrnetPosition = top;\r\n            _state.sliderRange = range;\r\n            return _state;\r\n        })\r\n\r\n        this.sliderAreaElement.current.addEventListener('mousedown',  this.mouseDownHandle.bind(this));\r\n\r\n    }\r\n\r\n    componentDidUpdate(){\r\n        //console.log(parseInt(window.getComputedStyle(this.sliderRangeElement.current).height))\r\n\r\n        //console.log(\"range before state update\", range)\r\n\r\n\r\n        //console.log('after update' , range , this.state);\r\n    }\r\n\r\n    \r\n\r\n    render(){\r\n            return (\r\n                <div className={\"pitch-control \" + \"pitch-\" + this.props.name}>\r\n                    <div ref={this.sliderAreaElement} className=\"pitch-area\">\r\n                        <div ref={this.sliderRangeElement} className=\"slider-range\"/>\r\n                        <div ref={this.sliderThumbElement} style={ (this.state.sliderCurrnetPosition !== null || this.state.sliderCurrnetPosition !== undefined) && {top: this.state.sliderCurrnetPosition}}  className=\"slider-thumb\"/>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n}\r\n\r\nexport default PitchControl;"]},"metadata":{},"sourceType":"module"}