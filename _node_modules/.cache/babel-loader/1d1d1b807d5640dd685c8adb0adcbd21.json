{"ast":null,"code":"import store from \"./../../../store/\";\nimport getApi from \"./../../../apis/apiProvider\";\nimport { getBeatLength } from \"./../../../utils/bpm/converter\";\nimport { setCuePoint, setChannelReady, setTimeLeft } from \"./../../../actions\";\nexport default class Channels {\n  constructor() {\n    this.dispatch = store.dispatch;\n    this.channels = {\n      A: null,\n      B: null\n    };\n  }\n\n  getChannelNames() {\n    return Object.keys(this.channels);\n  }\n\n  setChannel(channelName, player) {\n    this.channels[channelName] = player;\n  }\n\n  getChannel(channelName) {\n    return this.channels[channelName];\n  }\n\n  getChannelInterface(channelName) {\n    return {\n      getSyncBarPosition: () => this.getSyncBarPostion(channelName)\n    };\n  } //--------------------------------------------\n\n\n  loadTrack(channelName, track) {\n    let api = getApi(track.source);\n    let url = api && api.getUrl(track.id) || null;\n    this.dispatch(setChannelReady(false, channelName));\n    let player = this.channels[channelName];\n\n    if (player.loadWithEvent) {\n      player.loadWithEvent(url);\n    } else {\n      player.load(url);\n    }\n  }\n\n  updatePosition(channelName) {\n    this.updateTimeLeft(channelName);\n  }\n\n  updateTimeLeft(channelName) {\n    let channel = this.channels[channelName];\n    this.dispatch(setTimeLeft(channelName, parseInt(channel.getDuration() - channel.getCurrentTime())));\n  }\n\n  togglePlay(channelName, currentValue) {\n    if (currentValue) {\n      this.channels[channelName].pause();\n    } else {\n      this.channels[channelName].play();\n    }\n  }\n\n  toggleCue(channelName, currentValue) {\n    const player = this.channels[channelName];\n    const isPaused = store.getState().console.channel[channelName].playBackState.paused;\n\n    if (!currentValue && isPaused) {\n      // back to cue point and pause\n      let cuePoint = store.getState().console.channel[channelName].playBackState.cuePoint; //in seconds\n      //seek to\n\n      player.pause();\n      player.backend.seekTo(cuePoint);\n      player.drawer.progress(cuePoint / player.getDuration());\n      player.drawer.recenter(cuePoint / player.getDuration());\n    } else if (!currentValue) {\n      //Cancel cue and play\n      if (!player.isPlaying()) {\n        player.play();\n      }\n    } else {\n      const cuePoint = this.channels[channelName].getCurrentTime();\n      this.channels[channelName].play();\n      this.dispatch(setCuePoint(channelName, cuePoint)); // in float seconds\n    }\n  }\n\n  adjustPitch(channelName, currentValue) {\n    this.channels[channelName].setPlaybackRate(1 + currentValue / 100);\n  } //---------------------\n\n\n  getSyncBarPostion(channelName) {\n    let state = store.getState();\n    if (!state.console.master) return null;\n    const master = this.channels[state.console.master];\n    const slave = this.channels[channelName];\n    if (!master.isPlaying() || !slave.isPlaying()) return null;\n    const slavePosition = slave.getCurrentTime();\n    const masterPosition = master.getCurrentTime();\n    const masterBpm = state.console.channel[state.console.master].track.bpm;\n    const masterBeatLength = getBeatLength(masterBpm);\n    const masterOffset = state.console.channel[state.console.master].playBackState.offset;\n    const slaveBpm = state.console.channel[channelName].track.bpm;\n    const slaveBeatLength = getBeatLength(slaveBpm);\n    const slaveOffset = state.console.channel[channelName].playBackState.offset;\n    const masterBeatPosition = (masterPosition - masterOffset) % masterBeatLength;\n    const masterBeatPostionPlus = (masterPosition - masterOffset + 0.25) % masterBeatLength;\n    const masterBeatPostionMinus = (masterPosition - masterOffset - 0.25) % masterBeatLength;\n    const slaveBeatPosition = (slavePosition - slaveOffset) % slaveBeatLength;\n    const slaveBeatPositionPlus = (slavePosition - slaveOffset + 0.25) % slaveBeatLength;\n    const slaveBeatPositionMinus = (slavePosition - slaveOffset - 0.25) % slaveBeatLength;\n    const beatDiff = (masterBeatPosition - slaveBeatPosition) / slaveBeatLength;\n    const beatDiffPlus = (masterBeatPostionPlus - slaveBeatPositionPlus) / slaveBeatLength;\n    const beatDiffMinus = (masterBeatPostionMinus - slaveBeatPositionMinus) / slaveBeatLength;\n    let diff = beatDiff;\n\n    if (Math.abs(beatDiff - beatDiffPlus) <= 0.01) {\n      diff = beatDiff;\n    } else {\n      diff = beatDiffMinus;\n    }\n\n    console.log(\"master\", masterBeatPosition, masterBeatLength - masterBeatPosition);\n    console.log(\"slave\", slaveBeatPosition, slaveBeatLength - slaveBeatPosition);\n    let d = masterBeatPosition - slaveBeatPosition;\n    let v1 = -1 * (masterBeatLength - masterBeatPosition + slaveBeatPosition);\n    let v2 = slaveBeatLength - slaveBeatPosition + masterBeatPosition;\n    console.log(\"diff\", masterBeatPosition - slaveBeatPosition);\n    console.log(\"v1\", masterBeatLength - masterBeatPosition + slaveBeatPosition);\n    console.log(\"v2\", slaveBeatLength - slaveBeatPosition + masterBeatPosition);\n    console.log(\"min\", Math.min(Math.abs(d), Math.abs(v1), Math.abs(v2)));\n    /* console.log(\"diff\", beatDiff, masterBeatPosition, slaveBeatPosition);\r\n     console.log(\"plus\", beatDiffPlus, masterBeatPostionPlus, slaveBeatPositionPlus);\r\n     console.log(\"minus\", beatDiffMinus, masterBeatPostionMinus, slaveBeatPositionMinus);*/\n\n    return diff;\n    console.log('master pos', masterBeatPosition);\n    console.log('slave po', slaveBeatPosition);\n    console.log('master - slave', masterBeatPosition - slaveBeatPosition);\n    console.log('counting');\n    return (masterBeatPosition - slaveBeatPosition) / slaveBeatLength;\n  }\n\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/core/console/channels/channels.js"],"names":["store","getApi","getBeatLength","setCuePoint","setChannelReady","setTimeLeft","Channels","constructor","dispatch","channels","A","B","getChannelNames","Object","keys","setChannel","channelName","player","getChannel","getChannelInterface","getSyncBarPosition","getSyncBarPostion","loadTrack","track","api","source","url","getUrl","id","loadWithEvent","load","updatePosition","updateTimeLeft","channel","parseInt","getDuration","getCurrentTime","togglePlay","currentValue","pause","play","toggleCue","isPaused","getState","console","playBackState","paused","cuePoint","backend","seekTo","drawer","progress","recenter","isPlaying","adjustPitch","setPlaybackRate","state","master","slave","slavePosition","masterPosition","masterBpm","bpm","masterBeatLength","masterOffset","offset","slaveBpm","slaveBeatLength","slaveOffset","masterBeatPosition","masterBeatPostionPlus","masterBeatPostionMinus","slaveBeatPosition","slaveBeatPositionPlus","slaveBeatPositionMinus","beatDiff","beatDiffPlus","beatDiffMinus","diff","Math","abs","log","d","v1","v2","min"],"mappings":"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","sourcesContent":["import store from \"./../../../store/\";\r\nimport getApi from \"./../../../apis/apiProvider\";\r\nimport { getBeatLength } from \"./../../../utils/bpm/converter\";\r\nimport { setCuePoint, setChannelReady, setTimeLeft } from \"./../../../actions\";\r\n\r\nexport default class Channels {\r\n  constructor() {\r\n    this.dispatch = store.dispatch;\r\n    this.channels = {\r\n      A: null,\r\n      B: null\r\n    };\r\n  }\r\n\r\n  getChannelNames() {\r\n    return Object.keys(this.channels);\r\n  }\r\n\r\n  setChannel(channelName, player) {\r\n    this.channels[channelName] = player;\r\n  }\r\n\r\n  getChannel(channelName) {\r\n    return this.channels[channelName];\r\n  }\r\n\r\n  getChannelInterface(channelName) {\r\n    return {\r\n      getSyncBarPosition: () => this.getSyncBarPostion(channelName)\r\n    };\r\n  }\r\n\r\n  //--------------------------------------------\r\n\r\n  loadTrack(channelName, track) {\r\n    let api = getApi(track.source);\r\n    let url = (api && api.getUrl(track.id)) || null;\r\n\r\n    this.dispatch(setChannelReady(false, channelName));\r\n\r\n    let player = this.channels[channelName];\r\n\r\n    if (player.loadWithEvent) {\r\n      player.loadWithEvent(url);\r\n    } else {\r\n      player.load(url);\r\n    }\r\n  }\r\n\r\n  updatePosition(channelName) {\r\n    this.updateTimeLeft(channelName);\r\n  }\r\n\r\n  updateTimeLeft(channelName) {\r\n    let channel = this.channels[channelName];\r\n    this.dispatch(\r\n      setTimeLeft(\r\n        channelName,\r\n        parseInt(channel.getDuration() - channel.getCurrentTime())\r\n      )\r\n    );\r\n  }\r\n\r\n  togglePlay(channelName, currentValue) {\r\n    if (currentValue) {\r\n      this.channels[channelName].pause();\r\n    } else {\r\n      this.channels[channelName].play();\r\n    }\r\n  }\r\n\r\n  toggleCue(channelName, currentValue) {\r\n    const player = this.channels[channelName];\r\n    const isPaused = store.getState().console.channel[channelName]\r\n                    .playBackState.paused;\r\n    if (!currentValue && isPaused) {\r\n      // back to cue point and pause\r\n      let cuePoint = store.getState().console.channel[channelName]\r\n                    .playBackState.cuePoint; //in seconds\r\n      //seek to\r\n      player.pause();\r\n      player.backend.seekTo(cuePoint);\r\n      player.drawer.progress(cuePoint / player.getDuration());\r\n      player.drawer.recenter(cuePoint / player.getDuration());\r\n    } else if (!currentValue) {\r\n      //Cancel cue and play\r\n      if (!player.isPlaying()) {\r\n        player.play();\r\n      }\r\n    } else {\r\n      const cuePoint = this.channels[channelName].getCurrentTime();\r\n      this.channels[channelName].play();\r\n      this.dispatch(setCuePoint(channelName, cuePoint)); // in float seconds\r\n    }\r\n  }\r\n\r\n  adjustPitch(channelName, currentValue) {\r\n    this.channels[channelName].setPlaybackRate(1 + currentValue / 100);\r\n  }\r\n\r\n  //---------------------\r\n\r\n  getSyncBarPostion(channelName) {\r\n\r\n    let state = store.getState();\r\n    if (!state.console.master) return null;\r\n\r\n    const master = this.channels[state.console.master];\r\n    const slave = this.channels[channelName];\r\n    if (!master.isPlaying() || !slave.isPlaying()) return null;\r\n\r\n    const slavePosition = slave.getCurrentTime();\r\n    const masterPosition = master.getCurrentTime();\r\n\r\n    const masterBpm = state.console.channel[state.console.master].track.bpm;\r\n    const masterBeatLength = getBeatLength(masterBpm);\r\n    const masterOffset = state.console.channel[state.console.master].playBackState.offset;\r\n\r\n\r\n    const slaveBpm = state.console.channel[channelName].track.bpm;\r\n    const slaveBeatLength = getBeatLength(slaveBpm);\r\n    const slaveOffset = state.console.channel[channelName].playBackState.offset;\r\n\r\n\r\n    \r\n\r\n    const masterBeatPosition = (masterPosition - masterOffset) % masterBeatLength ;\r\n    const masterBeatPostionPlus = (masterPosition - masterOffset + 0.25 ) % masterBeatLength;\r\n    const masterBeatPostionMinus = (masterPosition - masterOffset - 0.25 ) % masterBeatLength;\r\n\r\n    const slaveBeatPosition = (slavePosition - slaveOffset) % slaveBeatLength ;\r\n    const slaveBeatPositionPlus = (slavePosition - slaveOffset + 0.25 ) % slaveBeatLength;\r\n    const slaveBeatPositionMinus = (slavePosition - slaveOffset - 0.25 ) % slaveBeatLength;\r\n\r\n    const beatDiff = (masterBeatPosition - slaveBeatPosition) / slaveBeatLength;\r\n    const beatDiffPlus = (masterBeatPostionPlus - slaveBeatPositionPlus) / slaveBeatLength;\r\n    const beatDiffMinus = (masterBeatPostionMinus - slaveBeatPositionMinus) / slaveBeatLength;\r\n\r\n    let diff = beatDiff;\r\n    if(Math.abs(beatDiff - beatDiffPlus) <= 0.01){\r\n        diff = beatDiff;\r\n    } else {\r\n        diff= beatDiffMinus;\r\n    }\r\n    console.log(\"master\", masterBeatPosition, masterBeatLength - masterBeatPosition);\r\n    console.log(\"slave\", slaveBeatPosition, slaveBeatLength - slaveBeatPosition);\r\n    let d = masterBeatPosition - slaveBeatPosition;\r\n    let v1 = -1 * (masterBeatLength - masterBeatPosition + slaveBeatPosition);\r\n    let v2 = slaveBeatLength - slaveBeatPosition + masterBeatPosition;\r\n    \r\n    console.log(\"diff\", masterBeatPosition - slaveBeatPosition);\r\n    console.log(\"v1\", masterBeatLength - masterBeatPosition + slaveBeatPosition);\r\n    console.log(\"v2\", slaveBeatLength - slaveBeatPosition + masterBeatPosition);\r\n\r\n    console.log(\"min\", Math.min(Math.abs(d), Math.abs(v1), Math.abs(v2)));\r\n   /* console.log(\"diff\", beatDiff, masterBeatPosition, slaveBeatPosition);\r\n    console.log(\"plus\", beatDiffPlus, masterBeatPostionPlus, slaveBeatPositionPlus);\r\n    console.log(\"minus\", beatDiffMinus, masterBeatPostionMinus, slaveBeatPositionMinus);*/\r\n    return diff;\r\n    console.log('master pos', masterBeatPosition);\r\n    console.log('slave po', slaveBeatPosition);\r\n    console.log('master - slave', masterBeatPosition  - slaveBeatPosition);\r\n\r\n    console.log('counting')\r\n    return (  masterBeatPosition - slaveBeatPosition ) / (slaveBeatLength ) ;\r\n    \r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}