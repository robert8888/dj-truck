{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJEKTY\\\\APKI\\\\DjTruck\\\\djtruck\\\\src\\\\pages\\\\app\\\\components\\\\Console\\\\Effector\\\\Effector.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport \"./effector-channel.scss\";\nimport DryWetKnob from \"./DryWetKnob/DryWetKnob\";\nimport EffectorButton from \"./EffectorButton/EffectorButton\";\nimport EffectorKnob from \"./EffectorKnob/EffectorKnob\";\nimport { Dropdown, DropdownButton } from \"react-bootstrap\";\nimport { setEffectParametr } from \"./../../../../../actions\";\n\nconst Effector = props => {\n  const [currentEffect, setCurrentEffect] = useState(null);\n  const [effectorParams, setEffectorParams] = useState([]);\n\n  const paramChangeHandle = (param, value) => {\n    console.log(currentEffect, param, value);\n    props.setParameter(currentEffect, param, value);\n  };\n\n  useEffect(() => {\n    let currentEffectParams = props.availableEffects[currentEffect];\n\n    if (!currentEffectParams) {\n      setEffectorParams([]);\n      return;\n    }\n\n    console.log('params', currentEffectParams);\n    setEffectorParams(Object.entries(currentEffectParams).map(([name, params]) => {\n      console.log(name, params);\n      const effectState = this.props.channelState.effects[currentEffect];\n      param = effectState[name] || param;\n\n      if (params.type === \"float\") {\n        return React.createElement(EffectorKnob, {\n          key: name + params.description,\n          scale: params.max - params.min,\n          initValue: params.defaultValue,\n          alt: params.description,\n          showValue: true,\n          onChange: paramChangeHandle.bind(null, name),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 34\n          },\n          __self: this\n        });\n      } else if (params.type === \"bool\") {\n        return React.createElement(EffectorButton, {\n          key: name + params.description,\n          onClick: () => {},\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 42\n          },\n          __self: this\n        }, params.description);\n      }\n    }));\n  }, [currentEffect, props.effects]);\n  const availableEffects = Object.keys(props.availableEffects).map((effect, index) => {\n    return React.createElement(Dropdown.Item, {\n      key: effect + \"-\" + index,\n      onClick: setCurrentEffect.bind(null, effect),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, effect);\n  }); //console.log(effectorParams)\n\n  return React.createElement(\"div\", {\n    className: \"effector-channel\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"dra-wet-knob\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, React.createElement(DryWetKnob, {\n    alt: \"D/W\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"effect-selector\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, React.createElement(DropdownButton, {\n    title: currentEffect || \"-----\",\n    className: \"btn-effect-select\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, React.createElement(Dropdown.Item, {\n    key: \"none\",\n    onClick: setCurrentEffect.bind(null, null),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, \" ----- \"), availableEffects)), React.createElement(\"div\", {\n    className: \"effector-param\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, effectorParams));\n};\n\nconst mapStateToProps = (state, ownProps) => ({\n  availableEffects: state.effector.effects,\n  channelState: state.effector.channels[ownProps.channel]\n});\n\nconst mapDispachToProps = (dispatch, ownProps) => ({\n  setParameter: (...args) => dispatch(setEffectParametr(ownProps.channel, ...args))\n});\n\nexport default connect(mapStateToProps, mapDispachToProps)(Effector);","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/pages/app/components/Console/Effector/Effector.js"],"names":["React","useState","useEffect","connect","DryWetKnob","EffectorButton","EffectorKnob","Dropdown","DropdownButton","setEffectParametr","Effector","props","currentEffect","setCurrentEffect","effectorParams","setEffectorParams","paramChangeHandle","param","value","console","log","setParameter","currentEffectParams","availableEffects","Object","entries","map","name","params","effectState","channelState","effects","type","description","max","min","defaultValue","bind","keys","effect","index","mapStateToProps","state","ownProps","effector","channels","channel","mapDispachToProps","dispatch","args"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport \"./effector-channel.scss\";\r\nimport DryWetKnob from \"./DryWetKnob/DryWetKnob\";\r\nimport EffectorButton from \"./EffectorButton/EffectorButton\";\r\nimport EffectorKnob from \"./EffectorKnob/EffectorKnob\";\r\nimport { Dropdown, DropdownButton } from \"react-bootstrap\";\r\nimport { setEffectParametr } from \"./../../../../../actions\";\r\nconst Effector = props => {\r\n\r\n    const [currentEffect, setCurrentEffect] = useState(null);\r\n    const [effectorParams, setEffectorParams] = useState([]);\r\n\r\n\r\n    const paramChangeHandle = (param, value) => {\r\n        console.log(currentEffect, param, value)\r\n        props.setParameter(currentEffect, param, value);\r\n    }\r\n\r\n    useEffect(() => {\r\n        let currentEffectParams = props.availableEffects[currentEffect];\r\n        if (!currentEffectParams) {\r\n            setEffectorParams([]);\r\n            return;\r\n        }\r\n        console.log('params', currentEffectParams)\r\n\r\n        setEffectorParams(Object.entries(currentEffectParams).map(([name, params]) => {\r\n            console.log(name, params)\r\n            const effectState = this.props.channelState.effects[currentEffect];\r\n            param = effectState[name] || param;\r\n            \r\n            if (params.type === \"float\") {\r\n                return (<EffectorKnob key={name + params.description}\r\n                    scale={params.max - params.min}\r\n                    initValue={params.defaultValue}\r\n                    alt={params.description}\r\n                    showValue\r\n                    onChange={paramChangeHandle.bind(null, name)}\r\n                />)\r\n            } else if (params.type === \"bool\") {\r\n                return (<EffectorButton\r\n                    key={name + params.description}\r\n                    onClick={() => {\r\n\r\n                    }}\r\n                >\r\n                    {params.description}\r\n                </EffectorButton>);\r\n            }\r\n        }))\r\n    }, [currentEffect, props.effects])\r\n\r\n\r\n    const availableEffects = Object.keys(props.availableEffects).map((effect, index) => {\r\n        return (<Dropdown.Item key={effect + \"-\" + index} onClick={setCurrentEffect.bind(null, effect)}>{effect}</Dropdown.Item>)\r\n    })\r\n\r\n    //console.log(effectorParams)\r\n\r\n    return (\r\n        <div className=\"effector-channel\">\r\n            <div className=\"dra-wet-knob\">\r\n                <DryWetKnob alt=\"D/W\" />\r\n            </div>\r\n            <div className=\"effect-selector\">\r\n                <DropdownButton title={currentEffect || \"-----\"} className=\"btn-effect-select\">\r\n                    <Dropdown.Item key={\"none\"} onClick={setCurrentEffect.bind(null, null)}> ----- </Dropdown.Item>\r\n                    {availableEffects}\r\n                </DropdownButton>\r\n            </div>\r\n            <div className=\"effector-param\">\r\n                {effectorParams}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => ({\r\n    availableEffects: state.effector.effects,\r\n    channelState: state.effector.channels[ownProps.channel]\r\n})\r\n\r\nconst mapDispachToProps = (dispatch, ownProps) => ({\r\n    setParameter : (...args) => dispatch(setEffectParametr(ownProps.channel, ...args ))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispachToProps)(Effector);\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}