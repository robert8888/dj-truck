{"ast":null,"code":"import { hideLoading, showLoading } from 'react-redux-loading-bar';\nimport { put, select, takeEvery } from 'redux-saga/effects';\nimport { ACTIONS, pushLog, setProfilePicutre } from \"../../actions\";\nimport { getApi } from \"./../../apis/apiProvider\";\nimport { Log } from \"./../../utils/logger/logger\";\nimport errorParser from \"./../../utils/serverErrorParser/errorParser\";\nexport default function* watcher() {\n  yield takeEvery(ACTIONS.U_REQ_UPDATE_PICTURE, handle);\n}\n\nconst getToken = state => state.user.token;\n\nconst userId = state => state.user.dbId;\n\nfunction* handle(action) {\n  const path = [\"Saga\", \"Request updated picture\"];\n  const token = yield select(getToken);\n\n  try {\n    var _response$data;\n\n    yield put(showLoading());\n    const {\n      callQueryUploadSingle,\n      queries\n    } = getApi(\"UserAssets\");\n    const query = queries.updateUserPictureQl;\n    const variables = {\n      file: action.file\n    };\n    const response = yield callQueryUploadSingle(query, token, variables);\n    const status = response === null || response === void 0 ? void 0 : (_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.updateMyPicture;\n\n    if (response.errors) {\n      throw new Error(\"Can't update picture in database: \" + errorParser(response.errors));\n    }\n\n    if (!status) {\n      throw new Error(\"Can't read status object from server response\");\n    }\n\n    if (!(status === null || status === void 0 ? void 0 : status.success)) {\n      throw new Error(\"Operation of updateing user picture fail. \" + status.message);\n    }\n\n    const id = yield select(userId);\n    yield put(setProfilePicutre(id, status.data));\n    yield put(pushLog(new Log(\"User picture updated to : \" + action.picture, path)));\n  } catch (e) {\n    yield put(pushLog(Log.Error(path, \"Update user picture fail \" + e.message, \"Sorry. During process of updating picture occurred a problem\", e)));\n  } finally {\n    yield put(hideLoading());\n  }\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/sagas/user/reqUpdatePicture.js"],"names":["hideLoading","showLoading","put","select","takeEvery","ACTIONS","pushLog","setProfilePicutre","getApi","Log","errorParser","watcher","U_REQ_UPDATE_PICTURE","handle","getToken","state","user","token","userId","dbId","action","path","callQueryUploadSingle","queries","query","updateUserPictureQl","variables","file","response","status","data","updateMyPicture","errors","Error","success","message","id","picture","e"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,WAAtB,QAAyC,yBAAzC;AACA,SAASC,GAAT,EAAcC,MAAd,EAAsBC,SAAtB,QAAuC,oBAAvC;AACA,SAASC,OAAT,EAAkBC,OAAlB,EAA2BC,iBAA3B,QAAoD,eAApD;AACA,SAASC,MAAT,QAAuB,0BAAvB;AACA,SAASC,GAAT,QAAoB,6BAApB;AACA,OAAOC,WAAP,MAAwB,6CAAxB;AAEA,eAAe,UAAUC,OAAV,GAAoB;AAC/B,QAAMP,SAAS,CAACC,OAAO,CAACO,oBAAT,EAA+BC,MAA/B,CAAf;AACH;;AAED,MAAMC,QAAQ,GAAGC,KAAK,IAAIA,KAAK,CAACC,IAAN,CAAWC,KAArC;;AACA,MAAMC,MAAM,GAAGH,KAAK,IAAIA,KAAK,CAACC,IAAN,CAAWG,IAAnC;;AAEA,UAAUN,MAAV,CAAiBO,MAAjB,EAAyB;AACrB,QAAMC,IAAI,GAAG,CAAC,MAAD,EAAS,yBAAT,CAAb;AACA,QAAMJ,KAAK,GAAG,MAAMd,MAAM,CAACW,QAAD,CAA1B;;AAEA,MAAI;AAAA;;AACA,UAAMZ,GAAG,CAACD,WAAW,EAAZ,CAAT;AACA,UAAM;AAAEqB,MAAAA,qBAAF;AAAyBC,MAAAA;AAAzB,QAAqCf,MAAM,CAAC,YAAD,CAAjD;AAEA,UAAMgB,KAAK,GAAGD,OAAO,CAACE,mBAAtB;AACA,UAAMC,SAAS,GAAG;AAAEC,MAAAA,IAAI,EAAEP,MAAM,CAACO;AAAf,KAAlB;AACA,UAAMC,QAAQ,GAAG,MAAMN,qBAAqB,CAACE,KAAD,EAAQP,KAAR,EAAeS,SAAf,CAA5C;AAEA,UAAMG,MAAM,GAAGD,QAAH,aAAGA,QAAH,yCAAGA,QAAQ,CAAEE,IAAb,mDAAG,eAAgBC,eAA/B;;AAEA,QAAGH,QAAQ,CAACI,MAAZ,EAAmB;AACf,YAAM,IAAIC,KAAJ,CAAU,uCAAuCvB,WAAW,CAACkB,QAAQ,CAACI,MAAV,CAA5D,CAAN;AACH;;AAED,QAAG,CAACH,MAAJ,EAAW;AACP,YAAM,IAAII,KAAJ,CAAU,+CAAV,CAAN;AACH;;AAED,QAAG,EAACJ,MAAD,aAACA,MAAD,uBAACA,MAAM,CAAEK,OAAT,CAAH,EAAoB;AAChB,YAAM,IAAID,KAAJ,CAAU,+CAA+CJ,MAAM,CAACM,OAAhE,CAAN;AACH;;AAED,UAAMC,EAAE,GAAG,MAAMjC,MAAM,CAACe,MAAD,CAAvB;AACA,UAAMhB,GAAG,CAACK,iBAAiB,CAAC6B,EAAD,EAAKP,MAAM,CAACC,IAAZ,CAAlB,CAAT;AAEA,UAAM5B,GAAG,CAACI,OAAO,CAAC,IAAIG,GAAJ,CAAQ,+BAA+BW,MAAM,CAACiB,OAA9C,EAAuDhB,IAAvD,CAAD,CAAR,CAAT;AACH,GA1BD,CA0BE,OAAOiB,CAAP,EAAU;AACR,UAAMpC,GAAG,CAACI,OAAO,CAACG,GAAG,CAACwB,KAAJ,CACdZ,IADc,EAEd,8BAA8BiB,CAAC,CAACH,OAFlB,EAGd,8DAHc,EAIdG,CAJc,CAAD,CAAR,CAAT;AAMH,GAjCD,SAiCU;AACN,UAAMpC,GAAG,CAACF,WAAW,EAAZ,CAAT;AACH;AACJ","sourcesContent":["import { hideLoading, showLoading } from 'react-redux-loading-bar';\r\nimport { put, select, takeEvery } from 'redux-saga/effects';\r\nimport { ACTIONS, pushLog, setProfilePicutre } from \"../../actions\";\r\nimport { getApi } from \"./../../apis/apiProvider\";\r\nimport { Log } from \"./../../utils/logger/logger\";\r\nimport errorParser from \"./../../utils/serverErrorParser/errorParser\";\r\n\r\nexport default function* watcher() {\r\n    yield takeEvery(ACTIONS.U_REQ_UPDATE_PICTURE, handle);\r\n}\r\n\r\nconst getToken = state => state.user.token\r\nconst userId = state => state.user.dbId\r\n\r\nfunction* handle(action) {\r\n    const path = [\"Saga\", \"Request updated picture\"]\r\n    const token = yield select(getToken);\r\n\r\n    try {\r\n        yield put(showLoading());\r\n        const { callQueryUploadSingle, queries } = getApi(\"UserAssets\");\r\n\r\n        const query = queries.updateUserPictureQl;\r\n        const variables = { file: action.file };\r\n        const response = yield callQueryUploadSingle(query, token, variables);\r\n\r\n        const status = response?.data?.updateMyPicture;\r\n\r\n        if(response.errors){\r\n            throw new Error(\"Can't update picture in database: \" + errorParser(response.errors))\r\n        }\r\n\r\n        if(!status){\r\n            throw new Error(\"Can't read status object from server response\")\r\n        }\r\n\r\n        if(!status?.success){\r\n            throw new Error(\"Operation of updateing user picture fail. \" + status.message)\r\n        }\r\n        \r\n        const id = yield select(userId);\r\n        yield put(setProfilePicutre(id, status.data));\r\n        \r\n        yield put(pushLog(new Log(\"User picture updated to : \" + action.picture, path)));\r\n    } catch (e) {\r\n        yield put(pushLog(Log.Error(\r\n            path,\r\n            \"Update user picture fail \" + e.message,\r\n            \"Sorry. During process of updating picture occurred a problem\",\r\n            e\r\n        )))\r\n    } finally {\r\n        yield put(hideLoading())\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}