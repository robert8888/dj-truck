{"ast":null,"code":"import _regeneratorRuntime from\"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\node_modules\\\\@babel\\\\runtime/regenerator\";var _marked=/*#__PURE__*/_regeneratorRuntime.mark(createDirRequestSaga),_marked2=/*#__PURE__*/_regeneratorRuntime.mark(handle);import{get}from\"lodash/object\";import{hideLoading,showLoading}from'react-redux-loading-bar';import{call,put,select,takeEvery}from\"redux-saga/effects\";import UUID from\"uuidjs\";import{ACTIONS,createPlaylist,pushLog}from\"../../actions\";import{getApi}from\"./../../apis/apiProvider\";import{findClosesDir,generateTemplateName as generateName}from\"./../../reducers/console/playlist/utils\";import{Log}from\"./../../utils/logger/logger\";import errorParser from\"./../../utils/serverErrorParser/errorParser\";import{handle as readDirSagaHandle}from\"./reqReadDirSaga\";export default function createDirRequestSaga(){return _regeneratorRuntime.wrap(function createDirRequestSaga$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return takeEvery(ACTIONS.PL_CREATE_PLAYLIST_REQUEST,handle);case 2:case\"end\":return _context.stop();}}},_marked);}var getToken=function getToken(state){return state.user.token;};var getCurrentSelection=function getCurrentSelection(state){return state.playList.currentSelection;};var getParentPath=function getParentPath(state,currentSelection){return findClosesDir(state,currentSelection);};var generatePlaylistName=function generatePlaylistName(state,parrentPath,base){return generateName(state.playList,parrentPath,base);};var getParrentDir=function getParrentDir(state,path){return get(state.playList,path);};export function handle(action){var path,token,renameMode,_response$data,_getApi,callQuery,queries,currentSelection,parrentPath,playlistName,parrentDir,response,id;return _regeneratorRuntime.wrap(function handle$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:path=['saga','playlist','request create playlist'];_context2.next=3;return select(getToken);case 3:token=_context2.sent;renameMode=false;if(token){_context2.next=10;break;}if(!action.name){renameMode=true;}_context2.next=9;return put(action.name,UUID.getV1().toString(),renameMode,true);case 9:return _context2.abrupt(\"return\",_context2.sent);case 10:_context2.prev=10;_context2.next=13;return put(showLoading());case 13:_getApi=getApi(\"UserAssets\"),callQuery=_getApi.callQuery,queries=_getApi.queries;_context2.next=16;return select(getCurrentSelection);case 16:currentSelection=_context2.sent;_context2.next=19;return select(getParentPath,currentSelection);case 19:parrentPath=_context2.sent;if(action.name){_context2.next=27;break;}_context2.next=23;return select(generatePlaylistName,parrentPath,\"New playlist\");case 23:playlistName=_context2.sent;renameMode=true;_context2.next=30;break;case 27:_context2.next=29;return select(generatePlaylistName,parrentPath,action.name);case 29:playlistName=_context2.sent;case 30:_context2.next=32;return select(getParrentDir,parrentPath);case 32:parrentDir=_context2.sent;if(parrentDir._loaded){_context2.next=36;break;}_context2.next=36;return call(readDirSagaHandle,{path:parrentPath});case 36:_context2.next=38;return callQuery(queries.createPlaylistQl(parrentDir._id,playlistName),token);case 38:response=_context2.sent;if(!response.errors){_context2.next=41;break;}throw new Error('Server response contains errors '+errorParser(response.errors));case 41:if((_response$data=response.data)===null||_response$data===void 0?void 0:_response$data.createPlaylist){_context2.next=43;break;}throw new Error();case 43:id=response.data.createPlaylist.id;renameMode=action.renameMode!==undefined?action.renameMode:renameMode;_context2.next=47;return put(createPlaylist(playlistName,id,renameMode,action.setCurrent));case 47:_context2.next=49;return put(pushLog(new Log(\"Creating playlist in database successful id: \".concat(id),path)));case 49:_context2.next=55;break;case 51:_context2.prev=51;_context2.t0=_context2[\"catch\"](10);_context2.next=55;return put(pushLog(Log.Error(path,\"Can't create playlist in database\"+_context2.t0.message,\"Sorry. During process creating playlist occurred a problem\",_context2.t0)));case 55:_context2.prev=55;_context2.next=58;return put(hideLoading());case 58:return _context2.finish(55);case 59:return _context2.abrupt(\"return\",id);case 60:case\"end\":return _context2.stop();}}},_marked2,null,[[10,51,55,59]]);}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/sagas/playlists/reqCreatePlaylistSaga.js"],"names":["createDirRequestSaga","handle","get","hideLoading","showLoading","call","put","select","takeEvery","UUID","ACTIONS","createPlaylist","pushLog","getApi","findClosesDir","generateTemplateName","generateName","Log","errorParser","readDirSagaHandle","PL_CREATE_PLAYLIST_REQUEST","getToken","state","user","token","getCurrentSelection","playList","currentSelection","getParentPath","generatePlaylistName","parrentPath","base","getParrentDir","path","action","renameMode","name","getV1","toString","callQuery","queries","playlistName","parrentDir","_loaded","createPlaylistQl","_id","response","errors","Error","data","id","undefined","setCurrent","message"],"mappings":"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","sourcesContent":["import { get } from \"lodash/object\";\r\nimport { hideLoading, showLoading } from 'react-redux-loading-bar';\r\nimport { call, put, select, takeEvery } from \"redux-saga/effects\";\r\nimport UUID from \"uuidjs\";\r\nimport { ACTIONS, createPlaylist, pushLog } from \"../../actions\";\r\nimport { getApi } from \"./../../apis/apiProvider\";\r\nimport { findClosesDir, generateTemplateName as generateName } from \"./../../reducers/console/playlist/utils\";\r\nimport { Log } from \"./../../utils/logger/logger\";\r\nimport errorParser from \"./../../utils/serverErrorParser/errorParser\";\r\nimport { handle as readDirSagaHandle } from \"./reqReadDirSaga\";\r\n\r\nexport default function* createDirRequestSaga() {\r\n    yield takeEvery(ACTIONS.PL_CREATE_PLAYLIST_REQUEST, handle)\r\n}\r\n\r\nconst getToken = state => state.user.token;\r\n\r\nconst getCurrentSelection = state => state.playList.currentSelection;\r\n\r\nconst getParentPath = (state, currentSelection) =>\r\n    findClosesDir(state, currentSelection)\r\n\r\nconst generatePlaylistName = (state, parrentPath, base) =>\r\n    generateName(state.playList, parrentPath, base);\r\n\r\nconst getParrentDir = (state, path) => get(state.playList, path);\r\n\r\nexport function* handle(action) {\r\n    const path = ['saga', 'playlist', 'request create playlist'];\r\n    const token = yield select(getToken);\r\n\r\n    let renameMode = false;\r\n    if (!token) {\r\n        if (!action.name) {\r\n            renameMode = true;\r\n        }\r\n        return yield put(action.name, UUID.getV1().toString(), renameMode, true);\r\n    }\r\n    try {\r\n        yield put(showLoading());\r\n        const { callQuery, queries } = getApi(\"UserAssets\");\r\n        const currentSelection = yield select(getCurrentSelection);\r\n        const parrentPath = yield select(getParentPath, currentSelection);\r\n\r\n        let playlistName;\r\n        if (!action.name) {\r\n            playlistName = yield select(generatePlaylistName, parrentPath, \"New playlist\");\r\n            renameMode = true;\r\n        } else {\r\n            playlistName = yield select(generatePlaylistName, parrentPath, action.name);\r\n        }\r\n\r\n        const parrentDir = yield select(getParrentDir, parrentPath);\r\n        if (!parrentDir._loaded) {\r\n            yield call(readDirSagaHandle, { path: parrentPath })\r\n        }\r\n\r\n        let response = yield callQuery(queries.createPlaylistQl(parrentDir._id, playlistName), token);\r\n\r\n        if(response.errors){\r\n            throw new Error('Server response contains errors '+ errorParser(response.errors))\r\n        }\r\n\r\n        if (!response.data?.createPlaylist) {\r\n            throw new Error()\r\n        }\r\n        \r\n        var id = response.data.createPlaylist.id;\r\n\r\n        renameMode = (action.renameMode !== undefined) ? action.renameMode : renameMode;\r\n\r\n        yield put(createPlaylist(playlistName, id, renameMode, action.setCurrent));\r\n\r\n        yield put(pushLog(new Log(`Creating playlist in database successful id: ${id}`, path)))\r\n    } catch (error) {\r\n        yield put(pushLog(Log.Error(\r\n            path,\r\n            \"Can't create playlist in database\" + error.message,\r\n            \"Sorry. During process creating playlist occurred a problem\",\r\n            error\r\n        )))\r\n    } finally {\r\n        yield put(hideLoading())\r\n    }\r\n\r\n    return id;\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}