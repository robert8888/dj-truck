{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\src\\\\pages\\\\common\\\\components\\\\PlayerControls\\\\ProgressSlider\\\\ProgressSlider.js\";\nimport React, { useState, useRef, useEffect, useCallback } from \"react\";\nimport { formater } from \"./../../../../../utils/time/timeFromater\";\nimport { toRange } from \"./../../../../../utils/math/argRanges\";\nimport \"./progress-slider.scss\"; //horizontal\n\nconst ProgressSlider = ({\n  player,\n  seek\n}) => {\n  const [progress, setProgress] = useState(0);\n  const [buffered, setBuffred] = useState(0);\n  const [currentRecord, setCurrentRecord] = useState(null);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [currentDuration, setCurrentDuration] = useState(0);\n  const [isDragged, setDragged] = useState(false);\n  const sliderArea = useRef(null);\n  const sliderThumb = useRef(null);\n  const sliderProgress = useRef(null);\n  const sliderBufferd = useRef(null);\n  const sliderTimePreview = useRef(null); //dementions \n\n  const [sliderAreaRect, setSliderAreaRect] = useState(0);\n  const [thumbRect, setThumbRect] = useState(0);\n  const setThumbPosition = useCallback(progress => {\n    let position = 0;\n    position = sliderAreaRect.width * progress;\n    sliderProgress.current.style.transform = `scaleX(${position}) translateX(50%)`;\n    position -= thumbRect.width / 2;\n    sliderThumb.current.style.transform = `translateX(${position}px)`;\n  }, [thumbRect, sliderAreaRect]);\n  const setProgressHandler = useCallback(progress => {\n    if (!isDragged) {\n      setProgress(progress);\n    }\n  }, [isDragged, setProgress]);\n  useEffect(() => {\n    if (!sliderAreaRect) {\n      return;\n    }\n\n    const position = sliderAreaRect.width * buffered;\n    sliderBufferd.current.style.transform = `scaleX(${position}) translateX(50%)`;\n  }, [buffered, sliderBufferd, sliderAreaRect]);\n  useEffect(() => {\n    setCurrentTime(currentDuration * progress);\n    setThumbPosition(progress);\n  }, [progress, setCurrentTime, isDragged]);\n  useEffect(() => {\n    if (currentRecord) {\n      setCurrentDuration(currentRecord.duration);\n    }\n  }, [currentRecord, setCurrentDuration]);\n  useEffect(() => {\n    if (!player) {\n      return;\n    }\n\n    player.addProgressWatcher('#', setProgress);\n    player.addCurrentWatcher(setCurrentRecord);\n    player.addBuffredWatcher(setBuffred);\n  }, [player]);\n  const thumbDraging = useCallback((shiftX, areaRect, thumbRect, e) => {\n    const x = e.clientX - areaRect.left + thumbRect.width / 2;\n    let progress = x / areaRect.width;\n    progress = toRange(progress, 0, 1); //  console.log(progress)\n\n    setProgress(progress);\n  }, []);\n  const thumbMouseDown = useCallback(e => {\n    if (!currentDuration) {//  return;\n    }\n\n    const shiftX = e.clientX - sliderThumb.current.getBoundingClientRect().left;\n    const areaRect = sliderArea.current.getBoundingClientRect();\n    const thumbRect = sliderThumb.current.getBoundingClientRect();\n    console.log(\"shiftX\", shiftX);\n    const thumbDragingWithArgs = thumbDraging.bind(null, shiftX, areaRect, thumbRect);\n    setDragged(true);\n    window.addEventListener('mousemove', thumbDragingWithArgs);\n\n    const mouseup = () => {\n      window.removeEventListener('mouseup', mouseup);\n      window.removeEventListener('mousemove', thumbDragingWithArgs);\n      setDragged(false);\n    };\n\n    window.addEventListener('mouseup', mouseup);\n  }, [sliderThumb, sliderArea, setDragged]);\n  const areaMouseDown = useCallback(e => {\n    if (e.target !== sliderThumb.current) {\n      //  return;\n      console.log(e.target, sliderArea.current);\n    }\n\n    const x = e.clientX - sliderAreaRect.left + thumbRect.width / 2;\n    let progress = x / sliderAreaRect.width;\n    progress = toRange(progress, 0, 1);\n    seek({\n      progress\n    });\n  }, [sliderAreaRect, seek, sliderArea]);\n  const areaMouseMove = useCallback(e => {\n    const x = e.clientX - sliderAreaRect.left + thumbRect.width / 2;\n    let progress = x / sliderAreaRect.width;\n    progress = toRange(progress, 0, 1);\n    const time = currentDuration * progress;\n    let str = formater.secondsToStr(time / 1000);\n    sliderTimePreview.current.dataset.value = time ? str : \"\";\n    sliderTimePreview.current.style.transform = `translateX(${x}px)`;\n  }, [sliderAreaRect, currentDuration, sliderTimePreview]);\n  const areaMouseEnter = useCallback(e => {\n    sliderTimePreview.current.classList.add(\"preview--visible\");\n  }, [sliderTimePreview]);\n  const areaMouseLeave = useCallback(e => {\n    sliderTimePreview.current.classList.remove(\"preview--visible\");\n  }, [sliderTimePreview]);\n  useEffect(() => {\n    if (sliderAreaRect) {\n      sliderArea.current.addEventListener('mousedown', areaMouseDown);\n      sliderArea.current.addEventListener('mouseenter', areaMouseEnter);\n      sliderArea.current.addEventListener('mouseleave', areaMouseLeave);\n    }\n  }, [sliderAreaRect]);\n  useEffect(() => {\n    if (sliderAreaRect && currentDuration) {\n      sliderArea.current.addEventListener('mousemove', areaMouseMove);\n    }\n  }, [sliderAreaRect, currentDuration]);\n  useEffect(() => {\n    if (thumbRect) {\n      sliderThumb.current.addEventListener('mousedown', thumbMouseDown);\n\n      sliderThumb.current.ondragstart = () => false;\n    }\n  }, [thumbRect]);\n  const setThumb = useCallback(ref => {\n    sliderThumb.current = ref;\n    setThumbRect(ref.getBoundingClientRect());\n  }, [sliderThumb, setThumbRect]);\n  const setSliderArea = useCallback(ref => {\n    sliderArea.current = ref;\n    setSliderAreaRect(ref.getBoundingClientRect());\n  }, [sliderArea, setSliderAreaRect]);\n  return React.createElement(\"div\", {\n    className: \"seek-slider\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"slider-time time-current\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  }, formater.secondsToStr(currentTime / 1000))), React.createElement(\"div\", {\n    className: \"slider-active-area\",\n    ref: setSliderArea,\n    draggable: \"false\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"slider-buffered\",\n    ref: sliderBufferd,\n    draggable: \"false\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"slider-progress\",\n    ref: sliderProgress,\n    draggable: \"false\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"slider-thumb\",\n    ref: setThumb,\n    draggable: \"false\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"slider-time-preview\",\n    ref: sliderTimePreview,\n    \"data-value\": \"1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"slider-time time-duration\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168\n    },\n    __self: this\n  }, formater.secondsToStr(currentDuration / 1000))));\n};\n\nexport default ProgressSlider;","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/pages/common/components/PlayerControls/ProgressSlider/ProgressSlider.js"],"names":["React","useState","useRef","useEffect","useCallback","formater","toRange","ProgressSlider","player","seek","progress","setProgress","buffered","setBuffred","currentRecord","setCurrentRecord","currentTime","setCurrentTime","currentDuration","setCurrentDuration","isDragged","setDragged","sliderArea","sliderThumb","sliderProgress","sliderBufferd","sliderTimePreview","sliderAreaRect","setSliderAreaRect","thumbRect","setThumbRect","setThumbPosition","position","width","current","style","transform","setProgressHandler","duration","addProgressWatcher","addCurrentWatcher","addBuffredWatcher","thumbDraging","shiftX","areaRect","e","x","clientX","left","thumbMouseDown","getBoundingClientRect","console","log","thumbDragingWithArgs","bind","window","addEventListener","mouseup","removeEventListener","areaMouseDown","target","areaMouseMove","time","str","secondsToStr","dataset","value","areaMouseEnter","classList","add","areaMouseLeave","remove","ondragstart","setThumb","ref","setSliderArea"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect, useCallback } from \"react\";\r\nimport {formater} from \"./../../../../../utils/time/timeFromater\";\r\nimport {toRange} from \"./../../../../../utils/math/argRanges\";\r\nimport \"./progress-slider.scss\"\r\n\r\n//horizontal\r\nconst ProgressSlider = ({player, seek}) => {\r\n    const [progress, setProgress] = useState(0);\r\n    const [buffered, setBuffred] = useState(0);\r\n    const [currentRecord, setCurrentRecord] = useState(null);\r\n    const [currentTime, setCurrentTime] = useState(0);\r\n    const [currentDuration, setCurrentDuration] = useState(0);\r\n    const [isDragged, setDragged] = useState(false);\r\n    \r\n    const sliderArea = useRef(null);\r\n    const sliderThumb = useRef(null);\r\n    const sliderProgress = useRef(null);\r\n    const sliderBufferd = useRef(null);\r\n    const sliderTimePreview = useRef(null);\r\n    //dementions \r\n    const [sliderAreaRect, setSliderAreaRect] = useState(0)\r\n    const [thumbRect, setThumbRect] = useState(0)\r\n\r\n    const setThumbPosition = useCallback((progress)=>{\r\n        let position = 0;\r\n        position = sliderAreaRect.width * progress ;\r\n        sliderProgress.current.style.transform = `scaleX(${position}) translateX(50%)`;\r\n        position -= (thumbRect.width / 2) ;  \r\n        sliderThumb.current.style.transform = `translateX(${position}px)`;\r\n    }, [thumbRect, sliderAreaRect])\r\n\r\n    const setProgressHandler = useCallback((progress)=>{\r\n        if(!isDragged){\r\n            setProgress(progress);\r\n        }\r\n    }, [isDragged, setProgress])\r\n\r\n    useEffect(()=>{\r\n        if(!sliderAreaRect){\r\n            return;\r\n        }\r\n        const position = sliderAreaRect.width * buffered;\r\n        sliderBufferd.current.style.transform = `scaleX(${position}) translateX(50%)`;\r\n    }, [buffered, sliderBufferd, sliderAreaRect])\r\n\r\n    useEffect(()=>{\r\n       setCurrentTime(currentDuration * progress);\r\n       setThumbPosition(progress);\r\n    }, [progress , setCurrentTime, isDragged])\r\n\r\n    useEffect(()=>{\r\n        if(currentRecord){\r\n           setCurrentDuration(currentRecord.duration);\r\n        }\r\n    }, [currentRecord, setCurrentDuration])\r\n\r\n    useEffect(()=>{\r\n        if(!player){\r\n            return;\r\n        }\r\n        player.addProgressWatcher('#', setProgress);\r\n        player.addCurrentWatcher(setCurrentRecord);\r\n        player.addBuffredWatcher(setBuffred);\r\n    }, [player])\r\n\r\n    const thumbDraging = useCallback( (shiftX, areaRect, thumbRect, e) => {\r\n       const x = e.clientX - areaRect.left  + (thumbRect.width / 2);\r\n       let progress = x / areaRect.width;\r\n       progress = toRange(progress, 0 ,1);\r\n     //  console.log(progress)\r\n       setProgress(progress)\r\n    }, [])\r\n\r\n    const thumbMouseDown = useCallback((e)=>{\r\n        if(!currentDuration){\r\n          //  return;\r\n        }\r\n        const shiftX = e.clientX - sliderThumb.current.getBoundingClientRect().left;\r\n        const areaRect = sliderArea.current.getBoundingClientRect();\r\n        const thumbRect = sliderThumb.current.getBoundingClientRect();\r\n        console.log(\"shiftX\", shiftX)\r\n        const thumbDragingWithArgs = thumbDraging.bind(null, shiftX, areaRect, thumbRect)\r\n        setDragged(true)\r\n        window.addEventListener('mousemove', thumbDragingWithArgs)\r\n        const mouseup = () => {\r\n            window.removeEventListener('mouseup', mouseup);\r\n            window.removeEventListener('mousemove', thumbDragingWithArgs);\r\n            setDragged(false);\r\n        }\r\n        window.addEventListener('mouseup', mouseup)\r\n    }, [sliderThumb, sliderArea, setDragged])\r\n\r\n    const areaMouseDown = useCallback((e)=>{\r\n        if(e.target !== sliderThumb.current){\r\n          //  return;\r\n            console.log(e.target, sliderArea.current)\r\n        }\r\n        const x = e.clientX - sliderAreaRect.left  + (thumbRect.width / 2);\r\n        let progress = x / sliderAreaRect.width  ;\r\n        progress = toRange(progress, 0 , 1)\r\n        seek({progress})\r\n    }, [sliderAreaRect, seek, sliderArea])\r\n\r\n    const areaMouseMove = useCallback( e =>{\r\n        const x = e.clientX - sliderAreaRect.left  + (thumbRect.width / 2);\r\n        let progress = x / sliderAreaRect.width;\r\n        progress = toRange(progress, 0 , 1)\r\n        const time = currentDuration * progress;\r\n        let str = formater.secondsToStr(time / 1000);\r\n        sliderTimePreview.current.dataset.value = time ? str : \"\";\r\n        sliderTimePreview.current.style.transform = `translateX(${x}px)`\r\n    }, [sliderAreaRect, currentDuration , sliderTimePreview])\r\n\r\n    const areaMouseEnter = useCallback( e => {\r\n        sliderTimePreview.current.classList.add(\"preview--visible\")\r\n    }, [sliderTimePreview])\r\n\r\n    const areaMouseLeave = useCallback( e => {\r\n        sliderTimePreview.current.classList.remove(\"preview--visible\")\r\n    }, [sliderTimePreview])\r\n\r\n    useEffect(()=>{\r\n        if(sliderAreaRect){\r\n            sliderArea.current.addEventListener('mousedown', areaMouseDown);\r\n            sliderArea.current.addEventListener('mouseenter', areaMouseEnter);\r\n            sliderArea.current.addEventListener('mouseleave', areaMouseLeave);\r\n        }\r\n    }, [sliderAreaRect])\r\n\r\n    useEffect(()=>{\r\n        if(sliderAreaRect && currentDuration){\r\n            sliderArea.current.addEventListener('mousemove', areaMouseMove);\r\n        }\r\n    }, [sliderAreaRect, currentDuration])\r\n\r\n    useEffect(()=>{\r\n        if(thumbRect){\r\n            sliderThumb.current.addEventListener('mousedown',  thumbMouseDown);\r\n            sliderThumb.current.ondragstart = () => false;\r\n        }\r\n    }, [thumbRect])\r\n\r\n    const setThumb = useCallback((ref)=>{\r\n        sliderThumb.current = ref;\r\n        setThumbRect(ref.getBoundingClientRect())\r\n    }, [sliderThumb, setThumbRect])\r\n\r\n\r\n    const setSliderArea = useCallback((ref) => {\r\n        sliderArea.current = ref;\r\n        setSliderAreaRect(ref.getBoundingClientRect())\r\n    }, [sliderArea, setSliderAreaRect])\r\n\r\n\r\n    return (\r\n        <div className=\"seek-slider\">\r\n            <div className=\"slider-time time-current\">\r\n                 <span>{formater.secondsToStr(currentTime / 1000)}</span>\r\n            </div>\r\n            <div className=\"slider-active-area\" ref={setSliderArea} draggable=\"false\">\r\n                <div className=\"slider-buffered\" ref={sliderBufferd} draggable=\"false\"/>\r\n                <div className=\"slider-progress\" ref={sliderProgress} draggable=\"false\"/>\r\n                \r\n                <div className=\"slider-thumb\" ref={setThumb} draggable=\"false\"/>\r\n                <div className=\"slider-time-preview\"  ref={sliderTimePreview} data-value=\"1\"/>\r\n            </div>\r\n            <div className=\"slider-time time-duration\">\r\n                <span>{formater.secondsToStr(currentDuration/1000)}</span>\r\n            </div>\r\n        </div>\r\n    \r\n    )\r\n}\r\n\r\nexport default ProgressSlider;"]},"metadata":{},"sourceType":"module"}