{"ast":null,"code":"import { ACTIONS } from \"../../actions\";\nimport { takeEvery, select, put, putResolve } from \"redux-saga/effects\";\nimport { getApi } from \"./../../apis/apiProvider\";\nexport default function* createRecordRequest() {\n  yield takeEvery(ACTIONS.R_REC_FINAL_UPDATE, handel);\n}\n\nconst getToken = state => state.user.token;\n\nfunction* handel(action) {\n  const token = yield select(getToken);\n\n  if (token) {\n    try {\n      var _result$data;\n\n      const {\n        callQuery,\n        queries\n      } = getApi(\"UserAssets\");\n      const query = queries.updateRecordQl;\n      const variables = {};\n      ({\n        id: variables.id,\n        peaks: variables.peaks,\n        duration: variables.duration,\n        fileSize: variables.fileSize\n      } = action);\n      const result = yield callQuery(query, token, variables);\n      const succes = result === null || result === void 0 ? void 0 : (_result$data = result.data) === null || _result$data === void 0 ? void 0 : _result$data.updateRecord;\n\n      if (!result.errors && succes) {} else {\n        console.log('Update record metadata fail');\n      }\n    } catch {}\n  }\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/sagas/recorder/finalUpdateCurrentRecSaga.js"],"names":["ACTIONS","takeEvery","select","put","putResolve","getApi","createRecordRequest","R_REC_FINAL_UPDATE","handel","getToken","state","user","token","action","callQuery","queries","query","updateRecordQl","variables","id","peaks","duration","fileSize","result","succes","data","updateRecord","errors","console","log"],"mappings":"AAAA,SAASA,OAAT,QAAwB,eAAxB;AACA,SAASC,SAAT,EAAoBC,MAApB,EAA4BC,GAA5B,EAAiCC,UAAjC,QAAoD,oBAApD;AACA,SAASC,MAAT,QAAuB,0BAAvB;AAGA,eAAe,UAAUC,mBAAV,GAAgC;AAC3C,QAAML,SAAS,CAACD,OAAO,CAACO,kBAAT,EAA6BC,MAA7B,CAAf;AACH;;AAED,MAAMC,QAAQ,GAAGC,KAAK,IAAIA,KAAK,CAACC,IAAN,CAAWC,KAArC;;AAIA,UAAUJ,MAAV,CAAiBK,MAAjB,EAAyB;AACrB,QAAMD,KAAK,GAAG,MAAMV,MAAM,CAACO,QAAD,CAA1B;;AAEA,MAAIG,KAAJ,EAAW;AACP,QAAI;AAAA;;AACA,YAAM;AAAEE,QAAAA,SAAF;AAAaC,QAAAA;AAAb,UAAyBV,MAAM,CAAC,YAAD,CAArC;AACA,YAAMW,KAAK,GAAGD,OAAO,CAACE,cAAtB;AACA,YAAMC,SAAS,GAAG,EAAlB;AACA,OAAC;AACGC,QAAAA,EAAE,EAAED,SAAS,CAACC,EADjB;AAEGC,QAAAA,KAAK,EAAEF,SAAS,CAACE,KAFpB;AAGGC,QAAAA,QAAQ,EAAEH,SAAS,CAACG,QAHvB;AAIGC,QAAAA,QAAQ,EAAEJ,SAAS,CAACI;AAJvB,UAKGT,MALJ;AAMA,YAAMU,MAAM,GAAG,MAAMT,SAAS,CAACE,KAAD,EAAQJ,KAAR,EAAeM,SAAf,CAA9B;AAEA,YAAMM,MAAM,GAAGD,MAAH,aAAGA,MAAH,uCAAGA,MAAM,CAAEE,IAAX,iDAAG,aAAcC,YAA7B;;AACA,UAAI,CAACH,MAAM,CAACI,MAAR,IAAkBH,MAAtB,EAA8B,CAE7B,CAFD,MAEO;AACHI,QAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACH;AACJ,KAlBD,CAkBE,MAAM,CAEP;AAEJ;AAEJ","sourcesContent":["import { ACTIONS } from \"../../actions\";\r\nimport { takeEvery, select, put, putResolve, } from \"redux-saga/effects\";\r\nimport { getApi } from \"./../../apis/apiProvider\";\r\n\r\n\r\nexport default function* createRecordRequest() {\r\n    yield takeEvery(ACTIONS.R_REC_FINAL_UPDATE, handel)\r\n}\r\n\r\nconst getToken = state => state.user.token\r\n\r\n\r\n\r\nfunction* handel(action) {\r\n    const token = yield select(getToken);\r\n\r\n    if (token) {\r\n        try {\r\n            const { callQuery, queries } = getApi(\"UserAssets\");\r\n            const query = queries.updateRecordQl;\r\n            const variables = {};\r\n            ({\r\n                id: variables.id,\r\n                peaks: variables.peaks,\r\n                duration: variables.duration,\r\n                fileSize: variables.fileSize\r\n            } = action);\r\n            const result = yield callQuery(query, token, variables);\r\n\r\n            const succes = result?.data?.updateRecord;\r\n            if (!result.errors && succes) {\r\n\r\n            } else {\r\n                console.log('Update record metadata fail')\r\n            }\r\n        } catch {\r\n\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}