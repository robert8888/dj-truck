{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\src\\\\pages\\\\common\\\\components\\\\PlayerControls\\\\ProgressSlider\\\\ProgressSlider.js\";\nimport React, { useState, useRef, useEffect, useCallback } from \"react\";\nimport { formater } from \"./../../../../../utils/time/timeFromater\";\nimport { toRange } from \"./../../../../../utils/math/argRanges\";\nimport \"./progress-slider.scss\"; //horizontal\n\nconst ProgressSlider = ({\n  player,\n  seek\n}) => {\n  const [progress, setProgress] = useState(0);\n  const [buffered, setBuffred] = useState(0);\n  const [currentRecord, setCurrentRecord] = useState(null);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [currentDuration, setCurrentDuration] = useState(0);\n  const isDragged = useRef();\n  const seekTarget = useRef();\n  const sliderArea = useRef(null);\n  const sliderThumb = useRef(null);\n  const sliderProgress = useRef(null);\n  const sliderBufferd = useRef(null);\n  const sliderTimePreview = useRef(null);\n  const setThumbPosition = useCallback(progress => {\n    let position = 0;\n    const sliderAreaRect = sliderArea.current.getBoundingClientRect();\n    const thumbRect = sliderThumb.current.getBoundingClientRect();\n    position = sliderAreaRect.width * progress;\n    sliderProgress.current.style.transform = `scaleX(${position}) translateX(50%)`;\n    position -= thumbRect.width / 2;\n    sliderThumb.current.style.transform = `translateX(${position}px)`;\n  }, [sliderArea, sliderThumb]);\n  const setProgressHandler = useCallback(progress => {\n    if (!isDragged.current) {\n      setProgress(progress);\n    }\n  }, [isDragged]);\n  useEffect(() => {\n    const sliderAreaRect = sliderArea.current.getBoundingClientRect();\n\n    if (!sliderAreaRect) {\n      return;\n    }\n\n    const position = sliderAreaRect.width * buffered;\n    sliderBufferd.current.style.transform = `scaleX(${position}) translateX(50%)`;\n  }, [buffered, sliderBufferd, sliderArea]);\n  useEffect(() => {\n    setCurrentTime(currentDuration * progress);\n    setThumbPosition(progress);\n  }, [progress, setCurrentTime, isDragged]);\n  useEffect(() => {\n    if (currentRecord) {\n      setCurrentDuration(currentRecord.duration);\n    }\n  }, [currentRecord, setCurrentDuration]);\n  useEffect(() => {\n    if (!player) {\n      return;\n    }\n\n    player.subscribeProgress('#', setProgressHandler);\n    player.subscribeCurrent(setCurrentRecord);\n    player.subscribeBuffred(setBuffred);\n    return () => {\n      player.unSubscribeProgress('#', setProgressHandler);\n      player.unSubscribeCurrent(setCurrentRecord);\n      player.unSubscribeBuffred(setBuffred);\n    };\n  }, [player]);\n  const thumbDraging = useCallback((areaRect, e) => {\n    const x = e.clientX - areaRect.left;\n    let progress = x / areaRect.width;\n    progress = toRange(progress, 0, 1);\n    seekTarget.current = progress;\n    setProgress(progress);\n  }, []);\n  const thumbMouseDown = useCallback(e => {\n    if (currentDuration === 0) {\n      return;\n    }\n\n    const areaRect = sliderArea.current.getBoundingClientRect();\n    const thumbDragingWithArgs = thumbDraging.bind(null, areaRect);\n    isDragged.current = true;\n\n    const mouseup = () => {\n      window.removeEventListener('mouseup', mouseup);\n      window.removeEventListener('mousemove', thumbDragingWithArgs);\n      isDragged.current = false;\n      seek({\n        progress: seekTarget.current\n      });\n      seekTarget.current = null;\n    };\n\n    window.addEventListener('mousemove', thumbDragingWithArgs);\n    window.addEventListener('mouseup', mouseup);\n  }, [sliderThumb, sliderArea, isDragged, seekTarget, currentDuration]);\n  const areaMouseDown = useCallback(e => {\n    const sliderAreaRect = sliderArea.current.getBoundingClientRect();\n    const thumbRect = sliderThumb.current.getBoundingClientRect();\n\n    if (e.target === sliderThumb.current) {\n      return;\n    }\n\n    const x = e.clientX - sliderAreaRect.left + thumbRect.width / 2;\n    let progress = x / sliderAreaRect.width;\n    progress = toRange(progress, 0, 1);\n    seek({\n      progress\n    });\n  }, [seek, sliderArea]);\n  const areaMouseMove = useCallback(e => {\n    const sliderAreaRect = sliderArea.current.getBoundingClientRect();\n    const thumbRect = sliderThumb.current.getBoundingClientRect();\n    const x = e.clientX - sliderAreaRect.left + thumbRect.width / 2;\n    let progress = x / sliderAreaRect.width;\n    progress = toRange(progress, 0, 1);\n    const time = currentDuration * progress;\n    const str = formater.secondsToStr(time / 1000);\n    sliderTimePreview.current.dataset.value = time ? str : \"\";\n    sliderTimePreview.current.style.transform = `translateX(${x}px)`;\n  }, [currentDuration, sliderTimePreview]);\n  const areaMouseEnter = useCallback(e => {\n    sliderTimePreview.current.classList.add(\"preview--visible\");\n  }, [sliderTimePreview]);\n  const areaMouseLeave = useCallback(e => {\n    sliderTimePreview.current.classList.remove(\"preview--visible\");\n  }, [sliderTimePreview]);\n  return React.createElement(\"div\", {\n    className: \"seek-slider\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"slider-time time-current\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }, formater.secondsToStr(currentTime / 1000))), React.createElement(\"div\", {\n    className: \"slider-active-area\",\n    ref: sliderArea,\n    onMouseDown: areaMouseDown,\n    onMouseEnter: areaMouseEnter,\n    onMouseLeave: areaMouseLeave,\n    onMouseMove: areaMouseMove,\n    draggable: \"false\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"slider-buffered\",\n    ref: sliderBufferd,\n    draggable: \"false\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"slider-progress\",\n    ref: sliderProgress,\n    draggable: \"false\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"slider-thumb\",\n    ref: sliderThumb,\n    onMouseDown: thumbMouseDown,\n    draggable: \"false\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"slider-time-preview\",\n    ref: sliderTimePreview,\n    \"data-value\": \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"slider-time time-duration\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }, formater.secondsToStr(currentDuration / 1000))));\n};\n\nexport default ProgressSlider;","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/pages/common/components/PlayerControls/ProgressSlider/ProgressSlider.js"],"names":["React","useState","useRef","useEffect","useCallback","formater","toRange","ProgressSlider","player","seek","progress","setProgress","buffered","setBuffred","currentRecord","setCurrentRecord","currentTime","setCurrentTime","currentDuration","setCurrentDuration","isDragged","seekTarget","sliderArea","sliderThumb","sliderProgress","sliderBufferd","sliderTimePreview","setThumbPosition","position","sliderAreaRect","current","getBoundingClientRect","thumbRect","width","style","transform","setProgressHandler","duration","subscribeProgress","subscribeCurrent","subscribeBuffred","unSubscribeProgress","unSubscribeCurrent","unSubscribeBuffred","thumbDraging","areaRect","e","x","clientX","left","thumbMouseDown","thumbDragingWithArgs","bind","mouseup","window","removeEventListener","addEventListener","areaMouseDown","target","areaMouseMove","time","str","secondsToStr","dataset","value","areaMouseEnter","classList","add","areaMouseLeave","remove"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect, useCallback } from \"react\";\r\nimport {formater} from \"./../../../../../utils/time/timeFromater\";\r\nimport {toRange} from \"./../../../../../utils/math/argRanges\";\r\nimport \"./progress-slider.scss\"\r\n\r\n//horizontal\r\nconst ProgressSlider = ({ player, seek}) => {\r\n    const [progress, setProgress] = useState(0);\r\n    const [buffered, setBuffred] = useState(0);\r\n    const [currentRecord, setCurrentRecord] = useState(null);\r\n    const [currentTime, setCurrentTime] = useState(0);\r\n    const [currentDuration, setCurrentDuration] = useState(0);\r\n    const isDragged = useRef();\r\n    const seekTarget = useRef();\r\n\r\n    const sliderArea = useRef(null);\r\n    const sliderThumb = useRef(null);\r\n    const sliderProgress = useRef(null);\r\n    const sliderBufferd = useRef(null);\r\n    const sliderTimePreview = useRef(null);\r\n\r\n    const setThumbPosition = useCallback((progress)=>{\r\n        let position = 0;\r\n        const sliderAreaRect = sliderArea.current.getBoundingClientRect();\r\n        const thumbRect = sliderThumb.current.getBoundingClientRect();\r\n        position = sliderAreaRect.width * progress ;\r\n        sliderProgress.current.style.transform = `scaleX(${position}) translateX(50%)`;\r\n        position -= (thumbRect.width / 2) ;  \r\n        sliderThumb.current.style.transform = `translateX(${position}px)`;\r\n    }, [sliderArea, sliderThumb])\r\n\r\n    const setProgressHandler = useCallback((progress)=>{\r\n        if(!isDragged.current){\r\n            setProgress(progress);\r\n        }\r\n    }, [isDragged ])\r\n\r\n    useEffect(()=>{\r\n        const sliderAreaRect = sliderArea.current.getBoundingClientRect();\r\n        if(!sliderAreaRect){\r\n            return;\r\n        }\r\n        const position = sliderAreaRect.width * buffered;\r\n        sliderBufferd.current.style.transform = `scaleX(${position}) translateX(50%)`;\r\n    }, [buffered, sliderBufferd, sliderArea])\r\n\r\n    useEffect(()=>{\r\n       setCurrentTime(currentDuration * progress);\r\n       setThumbPosition(progress);\r\n    }, [progress , setCurrentTime, isDragged])\r\n\r\n    useEffect(()=>{\r\n        if(currentRecord){\r\n           setCurrentDuration(currentRecord.duration);\r\n        }\r\n    }, [currentRecord, setCurrentDuration])\r\n\r\n    useEffect(()=>{\r\n        if(!player){\r\n            return;\r\n        }\r\n        player.subscribeProgress('#', setProgressHandler);\r\n        player.subscribeCurrent(setCurrentRecord);\r\n        player.subscribeBuffred(setBuffred);\r\n\r\n        return () => {\r\n            player.unSubscribeProgress('#', setProgressHandler);\r\n            player.unSubscribeCurrent(setCurrentRecord);\r\n            player.unSubscribeBuffred(setBuffred);\r\n        }\r\n\r\n    }, [player])\r\n\r\n    const thumbDraging = useCallback( (areaRect, e) => {\r\n       const x = e.clientX - areaRect.left;\r\n       let progress = x / areaRect.width;\r\n       progress = toRange(progress, 0 ,1);\r\n       seekTarget.current = progress;\r\n       setProgress(progress)\r\n    }, [])\r\n\r\n    const thumbMouseDown = useCallback((e)=>{\r\n        if(currentDuration === 0){\r\n            return;\r\n        }\r\n        const areaRect = sliderArea.current.getBoundingClientRect();\r\n        const thumbDragingWithArgs = thumbDraging.bind(null, areaRect)\r\n        isDragged.current = true;\r\n        const mouseup = () => {\r\n            window.removeEventListener('mouseup', mouseup);\r\n            window.removeEventListener('mousemove', thumbDragingWithArgs);\r\n            isDragged.current = false;\r\n            seek({progress : seekTarget.current});\r\n            seekTarget.current = null;\r\n        }\r\n        window.addEventListener('mousemove', thumbDragingWithArgs)\r\n        window.addEventListener('mouseup', mouseup)\r\n    }, [sliderThumb, sliderArea, isDragged, seekTarget, currentDuration])\r\n\r\n    const areaMouseDown = useCallback((e)=>{\r\n        const sliderAreaRect = sliderArea.current.getBoundingClientRect();\r\n        const thumbRect = sliderThumb.current.getBoundingClientRect();\r\n        if(e.target === sliderThumb.current){\r\n            return;\r\n        }\r\n        const x = e.clientX - sliderAreaRect.left  + (thumbRect.width / 2);\r\n        let progress = x / sliderAreaRect.width  ;\r\n        progress = toRange(progress, 0 , 1)\r\n        seek({progress})\r\n    }, [seek, sliderArea])\r\n\r\n    const areaMouseMove = useCallback( e =>{\r\n        const sliderAreaRect = sliderArea.current.getBoundingClientRect();\r\n        const thumbRect = sliderThumb.current.getBoundingClientRect();\r\n        const x = e.clientX - sliderAreaRect.left  + (thumbRect.width / 2);\r\n        let progress = x / sliderAreaRect.width;\r\n        progress = toRange(progress, 0 , 1)\r\n        const time = currentDuration * progress;\r\n        const str = formater.secondsToStr(time / 1000);\r\n        sliderTimePreview.current.dataset.value = time ? str : \"\";\r\n        sliderTimePreview.current.style.transform = `translateX(${x}px)`\r\n    }, [currentDuration , sliderTimePreview])\r\n\r\n    const areaMouseEnter = useCallback( e => {\r\n        sliderTimePreview.current.classList.add(\"preview--visible\")\r\n    }, [sliderTimePreview])\r\n\r\n    const areaMouseLeave = useCallback( e => {\r\n        sliderTimePreview.current.classList.remove(\"preview--visible\")\r\n    }, [sliderTimePreview])\r\n\r\n\r\n    return (\r\n        <div className=\"seek-slider\">\r\n            <div className=\"slider-time time-current\">\r\n                 <span>{formater.secondsToStr(currentTime / 1000)}</span>\r\n            </div>\r\n            <div className=\"slider-active-area\" \r\n                 ref={sliderArea}\r\n                 onMouseDown={areaMouseDown}\r\n                 onMouseEnter={areaMouseEnter}\r\n                 onMouseLeave={areaMouseLeave} \r\n                 onMouseMove={areaMouseMove}\r\n                 draggable=\"false\">\r\n                    <div className=\"slider-buffered\" ref={sliderBufferd} draggable=\"false\"/>\r\n                    <div className=\"slider-progress\" ref={sliderProgress} draggable=\"false\"/>\r\n                    \r\n                    <div className=\"slider-thumb\" ref={sliderThumb} onMouseDown={thumbMouseDown} draggable=\"false\"/>\r\n                    <div className=\"slider-time-preview\"  ref={sliderTimePreview} data-value=\"\"/>\r\n            </div>\r\n            <div className=\"slider-time time-duration\">\r\n                <span>{formater.secondsToStr(currentDuration/1000)}</span>\r\n            </div>\r\n        </div>\r\n    \r\n    )\r\n}\r\n\r\nexport default ProgressSlider;\r\n\r\n"]},"metadata":{},"sourceType":"module"}