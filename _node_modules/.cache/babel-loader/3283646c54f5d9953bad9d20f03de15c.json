{"ast":null,"code":"import store from \"./../../../store/\";\nimport Synchronizer from \"./sync/synchronizer\";\nimport getApi from \"./../../../apis/apiProvider\";\nimport { setCuePoint, setChannelReady, setTimeLeft } from \"./../../../actions\";\nexport default class Channels {\n  constructor() {\n    this.synchronizer = new Synchronizer(this);\n    this.dispatch = store.dispatch;\n    this.channels = {\n      A: null,\n      B: null\n    };\n    this.stdDivceDiff = {};\n  }\n\n  getChannelNames() {\n    return Object.keys(this.channels);\n  }\n\n  setChannel(channelName, player) {\n    this.channels[channelName] = player;\n  }\n\n  getChannel(channelName) {\n    return this.channels[channelName];\n  }\n\n  getChannelInterface(channelName) {\n    return {\n      getSyncBarPosition: () => this.synchronizer.getSyncBarPostion.call(this.synchronizer, channelName)\n    };\n  } //--------------------------------------------\n\n\n  loadTrack(channelName, track) {\n    let api = getApi(track.source);\n    let url = api && api.getUrl(track.id) || null;\n    this.dispatch(setChannelReady(false, channelName));\n    let player = this.channels[channelName];\n\n    if (player.loadWithEvent) {\n      player.loadWithEvent(url);\n    } else {\n      player.load(url);\n    }\n  }\n\n  updatePosition(channelName) {\n    this.updateTimeLeft(channelName);\n  }\n\n  updateTimeLeft(channelName) {\n    let channel = this.channels[channelName];\n    this.dispatch(setTimeLeft(channelName, parseInt(channel.getDuration() - channel.getCurrentTime())));\n  }\n\n  togglePlay(channelName, currentValue) {\n    if (currentValue) {\n      this.channels[channelName].pause();\n    } else {\n      this.channels[channelName].play();\n    }\n  }\n\n  toggleCue(channelName, currentValue) {\n    const player = this.channels[channelName];\n    const isPaused = store.getState().console.channel[channelName].playBackState.paused;\n\n    if (!currentValue && isPaused) {\n      // back to cue point and pause\n      let cuePoint = store.getState().console.channel[channelName].playBackState.cuePoint; //in seconds\n      //seek to\n\n      player.pause();\n      player.backend.seekTo(cuePoint);\n      player.drawer.progress(cuePoint / player.getDuration());\n      player.drawer.recenter(cuePoint / player.getDuration());\n    } else if (!currentValue) {\n      //Cancel cue and play\n      if (!player.isPlaying()) {\n        player.play();\n      }\n    } else {\n      const cuePoint = this.channels[channelName].getCurrentTime();\n      this.channels[channelName].play();\n      this.dispatch(setCuePoint(channelName, cuePoint)); // in float seconds\n    }\n  }\n\n  adjustPitch(channelName, currentValue) {\n    this.channels[channelName].setPlaybackRate(1 + currentValue / 100);\n  }\n\n  sync(channelName) {\n    this.synchronizer.sync(channelName);\n  } //---------------------\n\n  /*getSyncBarPostion(channelName) {\r\n    const data = this.getSyncData(channelName);\r\n    if(data != null){\r\n      const {diff, masterBeatLength} = data;\r\n      return diff/masterBeatLength;\r\n    }\r\n    return null;\r\n  }\r\n    sync(channelName){\r\n    console.log(\"sync channel\", channelName);\r\n    const state = store.getState();\r\n    if(channelName === state.console.master) { //you can't sync master to master\r\n      this.dispatch(setSync(channelName, false));\r\n      return;\r\n    }\r\n    \r\n    const slaveChannel = this.channels[channelName];\r\n      \r\n      const syncData = this.getSyncData(channelName);\r\n    if(!syncData){\r\n      this.dispatch(setSync(channelName, false));\r\n      return;\r\n    }\r\n    const masterBpm = state.console.channel[state.console.master].track.bpm;\r\n    const currentMasterPitch = state.console.channel[state.console.master].playBackState.pitch;\r\n    const slaveBpm = state.console.channel[channelName].track.bpm;\r\n    const newSlavePitch = ((calcBpm(masterBpm, currentMasterPitch) / slaveBpm) - 1) * 100;\r\n    this.dispatch(setPitch(newSlavePitch, channelName));\r\n      slaveChannel.backend.seekTo(slaveChannel.getCurrentTime() + syncData.diff);\r\n    slaveChannel.drawer.progress(slaveChannel.backend.getPlayedPercents());\r\n    slaveChannel.play();\r\n      this.dispatch(setSync(channelName, false));\r\n  }\r\n    getSyncData(channelName) {\r\n    let state = store.getState();\r\n    if (!state.console.master) return null;\r\n      const masterChannel = this.channels[state.console.master];\r\n    const slaveChannel = this.channels[channelName];\r\n    if (!masterChannel.isPlaying() || !slaveChannel.isPlaying()) return null;\r\n      // --- stabilization - beacuase :\r\n    // masterChannel.getCurrentTime() - slaveChannel.getCurrentTime() is not stable as should be\r\n    // cause of this is calculated average diff and diviation from this diff.\r\n    if(!this.stdDivceDiff[channelName]){\r\n        //craete\r\n        this.stdDivceDiff = {...this.stdDivceDiff, [channelName] : null}\r\n        //set\r\n        this.stdDivceDiff[channelName] = masterChannel.backend.ac.currentTime \r\n                                       - slaveChannel.backend.ac.currentTime;\r\n    }\r\n      const currentDdff = masterChannel.backend.ac.currentTime \r\n                      - slaveChannel.backend.ac.currentTime;\r\n      this.stdDivceDiff[channelName] = ( this.stdDivceDiff[channelName] + currentDdff )  / 2; \r\n      const deviation = this.stdDivceDiff[channelName] - currentDdff;\r\n    //----------------------\r\n      let masterPosition = masterChannel.getCurrentTime();\r\n    let slavePosition = slaveChannel.getCurrentTime() + deviation;\r\n   // console.log(deviation)\r\n      const masterBpm = state.console.channel[state.console.master].track.bpm;\r\n    const masterBeatLength = getBeatLength(masterBpm);\r\n    const masterOffset = state.console.channel[state.console.master].playBackState.offset;\r\n      const slaveBpm = state.console.channel[channelName].track.bpm;\r\n    const slaveBeatLength = getBeatLength(slaveBpm);\r\n    const slaveOffset = state.console.channel[channelName].playBackState.offset;\r\n      const masterBeatPosition = (masterPosition - masterOffset) % masterBeatLength ;\r\n    const slaveBeatPosition = (slavePosition - slaveOffset) % slaveBeatLength ;\r\n      const beatDiff = masterBeatPosition - slaveBeatPosition;\r\n    \r\n    //when master track is in the current beat but slave is in the next one \r\n    //and in invers situation \r\n    const beatDiffEdgeNegative = masterBeatLength \r\n                               - masterBeatPosition \r\n                               + slaveBeatPosition; // slave is overtaking\r\n    const beatDiffEdgePositive = slaveBeatLength \r\n                               + masterBeatPosition \r\n                               - slaveBeatPosition ; // slave is delayed\r\n      const min = Math.min(Math.abs(beatDiff), \r\n                         Math.abs(beatDiffEdgeNegative), \r\n                         Math.abs(beatDiffEdgePositive))\r\n      let diff;\r\n    switch(min){\r\n        case Math.abs(beatDiff): {\r\n            diff =  beatDiff;\r\n            break;\r\n        }\r\n        case Math.abs(beatDiffEdgeNegative): {\r\n            diff = - Math.abs(beatDiffEdgeNegative);\r\n            break;\r\n        }\r\n        case Math.abs(beatDiffEdgePositive): {\r\n            diff = Math.abs(beatDiffEdgePositive);\r\n            break;\r\n        }\r\n        default : diff = min;\r\n    }\r\n      return {\r\n      diff,\r\n      masterBeatLength,\r\n    }\r\n  }\r\n  */\n\n\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/core/console/channels/channels.js"],"names":["store","Synchronizer","getApi","setCuePoint","setChannelReady","setTimeLeft","Channels","constructor","synchronizer","dispatch","channels","A","B","stdDivceDiff","getChannelNames","Object","keys","setChannel","channelName","player","getChannel","getChannelInterface","getSyncBarPosition","getSyncBarPostion","call","loadTrack","track","api","source","url","getUrl","id","loadWithEvent","load","updatePosition","updateTimeLeft","channel","parseInt","getDuration","getCurrentTime","togglePlay","currentValue","pause","play","toggleCue","isPaused","getState","console","playBackState","paused","cuePoint","backend","seekTo","drawer","progress","recenter","isPlaying","adjustPitch","setPlaybackRate","sync"],"mappings":"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","sourcesContent":["import store from \"./../../../store/\";\r\nimport Synchronizer from \"./sync/synchronizer\";\r\nimport getApi from \"./../../../apis/apiProvider\";\r\nimport {setCuePoint, \r\n        setChannelReady, \r\n        setTimeLeft \r\n      } from \"./../../../actions\";\r\n\r\nexport default class Channels {\r\n  constructor() {\r\n    this.synchronizer = new Synchronizer(this);\r\n    this.dispatch = store.dispatch;\r\n    this.channels = {\r\n      A: null,\r\n      B: null\r\n    };\r\n\r\n    this.stdDivceDiff = {};\r\n  }\r\n\r\n  getChannelNames() {\r\n    return Object.keys(this.channels);\r\n  }\r\n\r\n  setChannel(channelName, player) {\r\n    this.channels[channelName] = player;\r\n  }\r\n\r\n  getChannel(channelName) {\r\n    return this.channels[channelName];\r\n  }\r\n\r\n  getChannelInterface(channelName) {\r\n    return {\r\n      getSyncBarPosition: () => this.synchronizer.getSyncBarPostion\r\n                                .call(this.synchronizer,channelName)\r\n    };\r\n  }\r\n\r\n  //--------------------------------------------\r\n\r\n  loadTrack(channelName, track) {\r\n    let api = getApi(track.source);\r\n    let url = (api && api.getUrl(track.id)) || null;\r\n\r\n    this.dispatch(setChannelReady(false, channelName));\r\n\r\n    let player = this.channels[channelName];\r\n\r\n    if (player.loadWithEvent) {\r\n      player.loadWithEvent(url);\r\n    } else {\r\n      player.load(url);\r\n    }\r\n  }\r\n\r\n  updatePosition(channelName) {\r\n    this.updateTimeLeft(channelName);\r\n  }\r\n\r\n  updateTimeLeft(channelName) {\r\n    let channel = this.channels[channelName];\r\n    this.dispatch(\r\n      setTimeLeft(\r\n        channelName,\r\n        parseInt(channel.getDuration() - channel.getCurrentTime())\r\n      )\r\n    );\r\n  }\r\n\r\n  togglePlay(channelName, currentValue) {\r\n    if (currentValue) {\r\n      this.channels[channelName].pause();\r\n    } else {\r\n      this.channels[channelName].play();\r\n    }\r\n  }\r\n\r\n  toggleCue(channelName, currentValue) {\r\n    const player = this.channels[channelName];\r\n    const isPaused = store.getState().console.channel[channelName]\r\n                    .playBackState.paused;\r\n    if (!currentValue && isPaused) {\r\n      // back to cue point and pause\r\n      let cuePoint = store.getState().console.channel[channelName]\r\n                    .playBackState.cuePoint; //in seconds\r\n      //seek to\r\n      player.pause();\r\n      player.backend.seekTo(cuePoint);\r\n      player.drawer.progress(cuePoint / player.getDuration());\r\n      player.drawer.recenter(cuePoint / player.getDuration());\r\n    } else if (!currentValue) {\r\n      //Cancel cue and play\r\n      if (!player.isPlaying()) {\r\n        player.play();\r\n      }\r\n    } else {\r\n      const cuePoint = this.channels[channelName].getCurrentTime();\r\n      this.channels[channelName].play();\r\n      this.dispatch(setCuePoint(channelName, cuePoint)); // in float seconds\r\n    }\r\n  }\r\n\r\n  adjustPitch(channelName, currentValue) {\r\n    this.channels[channelName].setPlaybackRate(1 + currentValue / 100);\r\n  }\r\n\r\n  sync(channelName){\r\n    this.synchronizer.sync(channelName);\r\n  }\r\n\r\n\r\n  //---------------------\r\n  /*getSyncBarPostion(channelName) {\r\n    const data = this.getSyncData(channelName);\r\n    if(data != null){\r\n      const {diff, masterBeatLength} = data;\r\n      return diff/masterBeatLength;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  sync(channelName){\r\n    console.log(\"sync channel\", channelName);\r\n    const state = store.getState();\r\n    if(channelName === state.console.master) { //you can't sync master to master\r\n      this.dispatch(setSync(channelName, false));\r\n      return;\r\n    }\r\n    \r\n    const slaveChannel = this.channels[channelName];\r\n\r\n    \r\n\r\n    const syncData = this.getSyncData(channelName);\r\n    if(!syncData){\r\n      this.dispatch(setSync(channelName, false));\r\n      return;\r\n    }\r\n    const masterBpm = state.console.channel[state.console.master].track.bpm;\r\n    const currentMasterPitch = state.console.channel[state.console.master].playBackState.pitch;\r\n    const slaveBpm = state.console.channel[channelName].track.bpm;\r\n    const newSlavePitch = ((calcBpm(masterBpm, currentMasterPitch) / slaveBpm) - 1) * 100;\r\n    this.dispatch(setPitch(newSlavePitch, channelName));\r\n\r\n    slaveChannel.backend.seekTo(slaveChannel.getCurrentTime() + syncData.diff);\r\n    slaveChannel.drawer.progress(slaveChannel.backend.getPlayedPercents());\r\n    slaveChannel.play();\r\n\r\n    this.dispatch(setSync(channelName, false));\r\n  }\r\n\r\n  getSyncData(channelName) {\r\n    let state = store.getState();\r\n    if (!state.console.master) return null;\r\n\r\n    const masterChannel = this.channels[state.console.master];\r\n    const slaveChannel = this.channels[channelName];\r\n    if (!masterChannel.isPlaying() || !slaveChannel.isPlaying()) return null;\r\n\r\n    // --- stabilization - beacuase :\r\n    // masterChannel.getCurrentTime() - slaveChannel.getCurrentTime() is not stable as should be\r\n    // cause of this is calculated average diff and diviation from this diff.\r\n    if(!this.stdDivceDiff[channelName]){\r\n        //craete\r\n        this.stdDivceDiff = {...this.stdDivceDiff, [channelName] : null}\r\n        //set\r\n        this.stdDivceDiff[channelName] = masterChannel.backend.ac.currentTime \r\n                                       - slaveChannel.backend.ac.currentTime;\r\n    }\r\n\r\n    const currentDdff = masterChannel.backend.ac.currentTime \r\n                      - slaveChannel.backend.ac.currentTime;\r\n\r\n    this.stdDivceDiff[channelName] = ( this.stdDivceDiff[channelName] + currentDdff )  / 2; \r\n\r\n    const deviation = this.stdDivceDiff[channelName] - currentDdff;\r\n    //----------------------\r\n\r\n    let masterPosition = masterChannel.getCurrentTime();\r\n    let slavePosition = slaveChannel.getCurrentTime() + deviation;\r\n   // console.log(deviation)\r\n\r\n    const masterBpm = state.console.channel[state.console.master].track.bpm;\r\n    const masterBeatLength = getBeatLength(masterBpm);\r\n    const masterOffset = state.console.channel[state.console.master].playBackState.offset;\r\n\r\n    const slaveBpm = state.console.channel[channelName].track.bpm;\r\n    const slaveBeatLength = getBeatLength(slaveBpm);\r\n    const slaveOffset = state.console.channel[channelName].playBackState.offset;\r\n\r\n    const masterBeatPosition = (masterPosition - masterOffset) % masterBeatLength ;\r\n    const slaveBeatPosition = (slavePosition - slaveOffset) % slaveBeatLength ;\r\n\r\n    const beatDiff = masterBeatPosition - slaveBeatPosition;\r\n    \r\n    //when master track is in the current beat but slave is in the next one \r\n    //and in invers situation \r\n    const beatDiffEdgeNegative = masterBeatLength \r\n                               - masterBeatPosition \r\n                               + slaveBeatPosition; // slave is overtaking\r\n    const beatDiffEdgePositive = slaveBeatLength \r\n                               + masterBeatPosition \r\n                               - slaveBeatPosition ; // slave is delayed\r\n\r\n    const min = Math.min(Math.abs(beatDiff), \r\n                         Math.abs(beatDiffEdgeNegative), \r\n                         Math.abs(beatDiffEdgePositive))\r\n\r\n    let diff;\r\n    switch(min){\r\n        case Math.abs(beatDiff): {\r\n            diff =  beatDiff;\r\n            break;\r\n        }\r\n        case Math.abs(beatDiffEdgeNegative): {\r\n            diff = - Math.abs(beatDiffEdgeNegative);\r\n            break;\r\n        }\r\n        case Math.abs(beatDiffEdgePositive): {\r\n            diff = Math.abs(beatDiffEdgePositive);\r\n            break;\r\n        }\r\n        default : diff = min;\r\n    }\r\n\r\n    return {\r\n      diff,\r\n      masterBeatLength,\r\n    }\r\n  }\r\n*/\r\n}\r\n"]},"metadata":{},"sourceType":"module"}