{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJEKTY\\\\APKI\\\\DjTruck\\\\djtruck\\\\src\\\\pages\\\\app\\\\components\\\\PlayListExplorer\\\\Explorer\\\\ExplorerTree\\\\ExplorerTree.js\";\nimport React, { useCallback, useState, useRef, Fragment, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport \"./explorer-tree.scss\";\nimport { toggleDir as toggleDirAction, setSelection, setCurrentPlaylist, renameSelected } from \"./../../../../../../actions\";\nimport { isEmpty, sortObj } from \"./../../../../../../utils/objects/helpers\";\nimport UUID from \"uuidjs\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport ClassName from \"classnames\";\nimport { faFolder, faFile, faAngleRight, faAngleDown } from \"@fortawesome/free-solid-svg-icons\";\nimport { useDoubleClick } from \"./useDoubleClick\";\nimport ExplorerContextMenu from \"./ContextMenu/ExplorerContextMenu\";\nimport { ContextMenuTrigger } from \"react-contextmenu\";\n\nconst ExplorerTree = props => {\n  const [renameMode, setRenameMode] = useState(false);\n  const renameInputRef = useRef();\n  const toggleDir = useCallback(path => {\n    props.toggleDir(path);\n  }, [props.toggleDir]);\n  const setSelection = useCallback(path => {\n    props.setSelection(path);\n  }, [props.setSelection]);\n  const rename = useCallback(() => {\n    props.renameSelected(renameInputRef.current.value);\n    setRenameMode(false);\n  }, [setRenameMode, props.renameSelected]);\n  const renameInput = useCallback(name => {\n    return React.createElement(\"input\", {\n      type: \"text\",\n      className: \"rename-input\",\n      defaultValue: name,\n      ref: renameInputRef,\n      onBlur: rename.bind(null),\n      onKeyPress: event => {\n        if (event.key === \"Enter\") rename();\n      },\n      autoFocus: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    });\n  });\n  const [dirClickHandler] = useDoubleClick({\n    clickHandler: setSelection,\n    doubleClickHandler: toggleDir\n  });\n  const getDirElement = useCallback((name, path, open, empty) => {\n    let currentSelected = false;\n\n    if ([...path, name].join(\"\") === props.currentSelection.join(\"\")) {\n      currentSelected = true;\n    }\n\n    const liClassList = ClassName(\"list-item item-dir\", {\n      \"item-dir--empty\": empty\n    }, {\n      \"item--selected\": currentSelected\n    });\n    let content = name;\n\n    if (currentSelected && renameMode) {\n      content = renameInput(name);\n    }\n\n    return React.createElement(\"li\", {\n      onClick: !renameMode ? fileClickHandler.bind(null, [...path, name]) : null,\n      onContextMenu: setSelection.bind(null, [...path, name]),\n      className: liClassList,\n      \"data-path\": path.join(\"/\"),\n      key: UUID.genV1(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, !empty && React.createElement(\"button\", {\n      className: \"btn-dir \" + (open ? \"btn-dir--expand\" : \"btn-dir--colapse\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(FontAwesomeIcon, {\n      className: \"icon\",\n      icon: open ? faAngleDown : faAngleRight,\n      onClick: toggleDir.bind(null, [...path, name]),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    })), React.createElement(FontAwesomeIcon, {\n      className: \"icon icon-dir\",\n      icon: faFolder,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }), content);\n  });\n  const [fileClickHandler] = useDoubleClick({\n    clickHandler: setSelection,\n    doubleClickHandler: props.setCurrentPlaylist\n  });\n  const getFileElement = useCallback((name, path) => {\n    let currentSelected = false;\n\n    if ([...path, name].join(\"\") === props.currentSelection.join(\"\")) {\n      currentSelected = true;\n    }\n\n    const liClassList = ClassName(\"list-item item-file\", {\n      \"item--selected\": currentSelected\n    });\n    let content = name;\n\n    if (currentSelected && renameMode) {\n      content = renameInput(name);\n    }\n\n    return React.createElement(\"li\", {\n      className: liClassList,\n      onClick: !renameMode ? fileClickHandler.bind(null, [...path, name]) : null,\n      onContextMenu: setSelection.bind(null, [...path, name]),\n      \"data-path\": path.join(\"/\"),\n      key: UUID.genV1(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(FontAwesomeIcon, {\n      className: \"icon icon-file\",\n      icon: faFile,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }), content);\n  });\n  const renderDirElements = useCallback((name, content, path) => {\n    content = sortObj(content);\n\n    if (content instanceof Array) {\n      return getFileElement(name, path);\n    } else {\n      if (content._open === true) {\n        return React.createElement(Fragment, {\n          key: UUID.genV1(),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 126\n          },\n          __self: this\n        }, getDirElement(name, path, true), renderDir(content, [...path, name]));\n      } else {\n        if (isEmpty(content)) {\n          return getDirElement(name, path, false, true);\n        }\n\n        return getDirElement(name, path, false);\n      }\n    }\n  });\n  const renderDir = useCallback((dir, path) => {\n    return React.createElement(\"ul\", {\n      className: \"list-dir dir-content\",\n      key: UUID.generate(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, Object.entries(dir).map(([name, content]) => {\n      if (name === \"_open\") {\n        return null;\n      }\n\n      return renderDirElements(name, content, path);\n    }));\n  });\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  }, React.createElement(ContextMenuTrigger, {\n    id: \"explorer_context_menu\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"explorer-tree\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159\n    },\n    __self: this\n  }, renderDir(props.root, ['root']))), React.createElement(ExplorerContextMenu, {\n    id: \"explorer_context_menu\",\n    items: {\n      \"Rename\": setRenameMode.bind(null, true),\n      \"Delete\": null\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164\n    },\n    __self: this\n  }));\n};\n\nconst mapStateToProps = state => ({\n  root: state.playList.root,\n  currentSelection: state.playList.currentSelection\n});\n\nconst mapDispatchToProps = dispatch => ({\n  toggleDir: path => dispatch(toggleDirAction(path)),\n  setSelection: path => dispatch(setSelection(path)),\n  setCurrentPlaylist: path => dispatch(setCurrentPlaylist(path)),\n  renameSelected: newName => dispatch(renameSelected(newName))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ExplorerTree);","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/pages/app/components/PlayListExplorer/Explorer/ExplorerTree/ExplorerTree.js"],"names":["React","useCallback","useState","useRef","Fragment","useEffect","connect","toggleDir","toggleDirAction","setSelection","setCurrentPlaylist","renameSelected","isEmpty","sortObj","UUID","FontAwesomeIcon","ClassName","faFolder","faFile","faAngleRight","faAngleDown","useDoubleClick","ExplorerContextMenu","ContextMenuTrigger","ExplorerTree","props","renameMode","setRenameMode","renameInputRef","path","rename","current","value","renameInput","name","bind","event","key","dirClickHandler","clickHandler","doubleClickHandler","getDirElement","open","empty","currentSelected","join","currentSelection","liClassList","content","fileClickHandler","genV1","getFileElement","renderDirElements","Array","_open","renderDir","dir","generate","Object","entries","map","root","mapStateToProps","state","playList","mapDispatchToProps","dispatch","newName"],"mappings":"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","sourcesContent":["import React, { useCallback, useState, useRef, Fragment, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport \"./explorer-tree.scss\";\r\nimport { toggleDir as toggleDirAction, setSelection, setCurrentPlaylist, renameSelected } from \"./../../../../../../actions\"\r\nimport { isEmpty, sortObj } from \"./../../../../../../utils/objects/helpers\";\r\nimport UUID from \"uuidjs\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport ClassName from \"classnames\";\r\nimport { faFolder, faFile, faAngleRight, faAngleDown } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { useDoubleClick } from \"./useDoubleClick\";\r\nimport ExplorerContextMenu from \"./ContextMenu/ExplorerContextMenu\";\r\nimport { ContextMenuTrigger } from \"react-contextmenu\";\r\nconst ExplorerTree = props => {\r\n\r\n    const [renameMode, setRenameMode] = useState(false);\r\n    const renameInputRef = useRef();\r\n\r\n    const toggleDir = useCallback((path) => {\r\n        props.toggleDir(path);\r\n    }, [props.toggleDir])\r\n\r\n    const setSelection = useCallback((path) => {\r\n        props.setSelection(path);\r\n    }, [props.setSelection])\r\n\r\n\r\n    const rename = useCallback(() => {\r\n        props.renameSelected(renameInputRef.current.value)\r\n        setRenameMode(false);\r\n    }, [setRenameMode, props.renameSelected])\r\n\r\n\r\n    const renameInput = useCallback((name) => {\r\n        return (\r\n            <input\r\n                type=\"text\"\r\n                className=\"rename-input\"\r\n                defaultValue={name}\r\n                ref={renameInputRef}\r\n                onBlur={rename.bind(null)}\r\n                onKeyPress={event => { if (event.key === \"Enter\") rename() }}\r\n                autoFocus\r\n            />\r\n        )\r\n    })\r\n\r\n    const [dirClickHandler] = useDoubleClick({\r\n        clickHandler: setSelection,\r\n        doubleClickHandler: toggleDir\r\n    })\r\n\r\n\r\n    const getDirElement = useCallback((name, path, open, empty) => {\r\n        let currentSelected = false;\r\n        if ([...path, name].join(\"\") === props.currentSelection.join(\"\")) {\r\n            currentSelected = true;\r\n        }\r\n        const liClassList = ClassName(\r\n            \"list-item item-dir\",\r\n            { \"item-dir--empty\": empty },\r\n            { \"item--selected\": currentSelected }\r\n        )\r\n        let content = name;\r\n        if (currentSelected && renameMode) {\r\n            content = renameInput(name)\r\n        }\r\n        return (\r\n            <li\r\n                onClick={((!renameMode) ? fileClickHandler.bind(null, [...path, name]) : null)}\r\n                onContextMenu={setSelection.bind(null, [...path, name])}\r\n                className={liClassList}\r\n                data-path={path.join(\"/\")}\r\n                key={UUID.genV1()}>\r\n                {!empty &&\r\n                    <button\r\n                        className={\"btn-dir \" + ((open) ? \"btn-dir--expand\" : \"btn-dir--colapse\")}>\r\n                        <FontAwesomeIcon\r\n                            className=\"icon\"\r\n                            icon={(open) ? faAngleDown : faAngleRight}\r\n                            onClick={toggleDir.bind(null, [...path, name])} />\r\n                    </button>}\r\n                <FontAwesomeIcon className=\"icon icon-dir\" icon={faFolder} />\r\n                {content}\r\n            </li>\r\n        )\r\n    })\r\n\r\n    const [fileClickHandler] = useDoubleClick({\r\n        clickHandler: setSelection,\r\n        doubleClickHandler: props.setCurrentPlaylist\r\n    })\r\n\r\n    const getFileElement = useCallback((name, path) => {\r\n        let currentSelected = false;\r\n        if ([...path, name].join(\"\") === props.currentSelection.join(\"\")) {\r\n            currentSelected = true;\r\n        }\r\n        const liClassList = ClassName(\r\n            \"list-item item-file\",\r\n            { \"item--selected\": currentSelected }\r\n        )\r\n        let content = name;\r\n        if (currentSelected && renameMode) {\r\n            content = renameInput(name)\r\n        }\r\n        return (\r\n            <li\r\n                className={liClassList}\r\n                onClick={((!renameMode) ? fileClickHandler.bind(null, [...path, name]) : null)}\r\n                onContextMenu={setSelection.bind(null, [...path, name])}\r\n                data-path={path.join(\"/\")}\r\n                key={UUID.genV1()}>\r\n                <FontAwesomeIcon className=\"icon icon-file\" icon={faFile} />\r\n                {content}\r\n            </li>\r\n        );\r\n    })\r\n\r\n    const renderDirElements = useCallback((name, content, path) => {\r\n        content = sortObj(content);\r\n        if (content instanceof Array) {\r\n            return getFileElement(name, path)\r\n        } else {\r\n            if (content._open === true) {\r\n                return (\r\n                    <Fragment key={UUID.genV1()}>\r\n                        {getDirElement(name, path, true)}\r\n                        {renderDir(content, [...path, name])}\r\n                    </Fragment>\r\n                )\r\n            } else {\r\n                if (isEmpty(content)) {\r\n                    return getDirElement(name, path, false, true)\r\n                }\r\n                return getDirElement(name, path, false)\r\n            }\r\n        }\r\n    })\r\n\r\n\r\n    const renderDir = useCallback((dir, path) => {\r\n        return (\r\n            <ul className=\"list-dir dir-content\" key={UUID.generate()}>\r\n                {\r\n                    Object.entries(dir).map(([name, content]) => {\r\n                        if (name === \"_open\") {\r\n                            return null;\r\n                        }\r\n                        return renderDirElements(name, content, path);\r\n                    })\r\n                }\r\n            </ul>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <Fragment>\r\n            <ContextMenuTrigger id=\"explorer_context_menu\">\r\n                <div className=\"explorer-tree\">\r\n                    {renderDir(props.root, ['root'])}\r\n                </div>\r\n            </ContextMenuTrigger>\r\n\r\n            <ExplorerContextMenu\r\n                id=\"explorer_context_menu\"\r\n                items={{\r\n                    \"Rename\": setRenameMode.bind(null, true),\r\n                    \"Delete\": null\r\n                }} />\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    root: state.playList.root,\r\n    currentSelection: state.playList.currentSelection\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    toggleDir: path => dispatch(toggleDirAction(path)),\r\n    setSelection: path => dispatch(setSelection(path)),\r\n    setCurrentPlaylist: path => dispatch(setCurrentPlaylist(path)),\r\n    renameSelected: newName => dispatch(renameSelected(newName))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ExplorerTree);"]},"metadata":{},"sourceType":"module"}