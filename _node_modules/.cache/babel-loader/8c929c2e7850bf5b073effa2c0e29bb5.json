{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJEKTY\\\\APKI\\\\DjTruck\\\\djtruck\\\\src\\\\components\\\\Mixer\\\\Channel\\\\PeakLevelMeter\\\\PeakLevelMeter.js\";\nimport React from \"react\";\nimport Console from \"./../../../../core/console/console\";\nimport \"./peak-level-meter.scss\"; // there is 20 leds indicators\n// 15 is blue and calc from bottom last 15 is zero dB.\n// scale range is between -40 dB and + 10 dB\n// this means that on led is 2.5 dB\n\nclass PeakLevelMater extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      ledStates: new Array(20).fill(false),\n      mixerChannelInterface: Console.Get().getMixerChannelInterface(this.props.name)\n    };\n\n    this.mouseOverHandler = event => {};\n  }\n\n  componentDidMount() {\n    let updateLedStates = () => {\n      let nextLedState = new Array(this.state.ledStates.length).fill(false);\n      let peakMeter = this.state.mixerChannelInterface.getPeakMeter();\n      let ledOn = 15 + peakMeter.peakdB / 2.5;\n\n      for (let i = 0; i < ledOn && i < this.state.ledStates.length; i++) {\n        nextLedState[i] = true;\n      }\n\n      this.setState({ ...this.state,\n        ledStates: nextLedState\n      });\n      requestAnimationFrame(updateLedStates);\n    };\n\n    updateLedStates();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"peak-level-meter\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, this.state.ledStates.map((ledState, index) => {\n      return React.createElement(\"div\", {\n        key: index,\n        className: \"level-meter-led led-\" + index + (ledState ? \" led-on\" : \" led-off\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      });\n    }));\n  }\n\n}\n\nexport default PeakLevelMater;","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/components/Mixer/Channel/PeakLevelMeter/PeakLevelMeter.js"],"names":["React","Console","PeakLevelMater","Component","state","ledStates","Array","fill","mixerChannelInterface","Get","getMixerChannelInterface","props","name","mouseOverHandler","event","componentDidMount","updateLedStates","nextLedState","length","peakMeter","getPeakMeter","ledOn","peakdB","i","setState","requestAnimationFrame","render","map","ledState","index"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,oCAApB;AACA,OAAO,yBAAP,C,CAEA;AACA;AACA;AACA;;AAEA,MAAMC,cAAN,SAA6BF,KAAK,CAACG,SAAnC,CAA4C;AAAA;AAAA;AAAA,SAExCC,KAFwC,GAEhC;AACJC,MAAAA,SAAS,EAAI,IAAIC,KAAJ,CAAU,EAAV,CAAD,CAAgBC,IAAhB,CAAqB,KAArB,CADR;AAEJC,MAAAA,qBAAqB,EAAGP,OAAO,CAACQ,GAAR,GAAcC,wBAAd,CAAuC,KAAKC,KAAL,CAAWC,IAAlD;AAFpB,KAFgC;;AAAA,SAQxCC,gBARwC,GAQpBC,KAAD,IAAW,CAE7B,CAVuC;AAAA;;AAYxCC,EAAAA,iBAAiB,GAAE;AACf,QAAIC,eAAe,GAAG,MAAK;AACxB,UAAIC,YAAY,GAAI,IAAIX,KAAJ,CAAU,KAAKF,KAAL,CAAWC,SAAX,CAAqBa,MAA/B,CAAD,CAAyCX,IAAzC,CAA8C,KAA9C,CAAnB;AAEC,UAAIY,SAAS,GAAG,KAAKf,KAAL,CAAWI,qBAAX,CAAiCY,YAAjC,EAAhB;AACA,UAAIC,KAAK,GAAG,KAAKF,SAAS,CAACG,MAAV,GAAmB,GAApC;;AAEA,WAAI,IAAIC,CAAC,GAAG,CAAZ,EAAiBA,CAAC,GAAGF,KAAJ,IAAaE,CAAC,GAAG,KAAKnB,KAAL,CAAWC,SAAX,CAAqBa,MAAvD,EAAgEK,CAAC,EAAjE,EAAqE;AACjEN,QAAAA,YAAY,CAACM,CAAD,CAAZ,GAAkB,IAAlB;AACH;;AAED,WAAKC,QAAL,CAAc,EAAC,GAAG,KAAKpB,KAAT;AAAgBC,QAAAA,SAAS,EAAGY;AAA5B,OAAd;AACAQ,MAAAA,qBAAqB,CAACT,eAAD,CAArB;AACH,KAZD;;AAcAA,IAAAA,eAAe;AAClB;;AAEDU,EAAAA,MAAM,GAAE;AACJ,WACI;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACM,KAAKtB,KAAL,CAAWC,SAAX,CAAqBsB,GAArB,CAAyB,CAACC,QAAD,EAAWC,KAAX,KAAmB;AACzC,aAAQ;AAAK,QAAA,GAAG,EAAEA,KAAV;AAAiB,QAAA,SAAS,EAAE,yBAAwBA,KAAxB,IAAkCD,QAAD,GAAa,SAAb,GAAyB,UAA1D,CAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAR;AACJ,KAFC,CADN,CADJ;AAOH;;AAtCuC;;AA0C5C,eAAe1B,cAAf","sourcesContent":["import React from \"react\"\r\nimport Console from \"./../../../../core/console/console\";\r\nimport \"./peak-level-meter.scss\";\r\n\r\n// there is 20 leds indicators\r\n// 15 is blue and calc from bottom last 15 is zero dB.\r\n// scale range is between -40 dB and + 10 dB\r\n// this means that on led is 2.5 dB\r\n\r\nclass PeakLevelMater extends React.Component{\r\n\r\n    state = {\r\n        ledStates : (new Array(20)).fill(false),\r\n        mixerChannelInterface : Console.Get().getMixerChannelInterface(this.props.name),\r\n\r\n    }\r\n\r\n    mouseOverHandler = (event) => {\r\n\r\n    }\r\n\r\n    componentDidMount(){\r\n        let updateLedStates = () =>{\r\n           let nextLedState = (new Array(this.state.ledStates.length)).fill(false);\r\n\r\n            let peakMeter = this.state.mixerChannelInterface.getPeakMeter();\r\n            let ledOn = 15 + peakMeter.peakdB / 2.5;\r\n\r\n            for(let i = 0 ; (i < ledOn && i < this.state.ledStates.length); i++) {\r\n                nextLedState[i] = true;\r\n            }\r\n\r\n            this.setState({...this.state, ledStates : nextLedState})\r\n            requestAnimationFrame(updateLedStates);\r\n        }\r\n        \r\n        updateLedStates();\r\n    }\r\n    \r\n    render(){\r\n        return (\r\n            <div className=\"peak-level-meter\">\r\n                { this.state.ledStates.map((ledState, index)=>{\r\n                     return (<div key={index} className={\"level-meter-led led-\"+ index + ((ledState) ? \" led-on\" : \" led-off\") }/>)\r\n                })}\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default PeakLevelMater;"]},"metadata":{},"sourceType":"module"}