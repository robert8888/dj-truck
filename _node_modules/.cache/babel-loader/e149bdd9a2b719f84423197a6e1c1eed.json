{"ast":null,"code":"import config from \"./../../../../components/Deck/Player/configuration\";\nimport WaveSurfer from \"wavesurfer\";\nimport { setChannelReady, setLoadingProgress, setTimeLeft } from \"./../../../../actions\";\nimport store from \"./../../../../store\";\nexport default class ChannelBuilder {\n  constructor() {\n    this.startSync = channel => {\n      channel.syncHandle = setInterval(() => {\n        channel.slave.drawer.progress(channel.master.getCurrentTime() / this.currentDuration);\n      }, 100);\n    };\n\n    this.dispatch = store.dispatch;\n  }\n\n  create(channelName, masterContaier, slaveContainer) {\n    let channel = {};\n    channel.masterConfig = config.master(masterContaier, channelName);\n    channel.slaveConfig = config.slave(slaveContainer, channelName);\n    channel.master = WaveSurfer.create(channel.masterConfig);\n\n    channel.master.__proto__.loadWithEvent = function (...args) {\n      this.fireEvent(\"load\");\n      this.load(...args);\n    };\n\n    channel.slave = WaveSurfer.create(channel.slaveConfig);\n    channel.master.on(\"load\", () => {\n      this.clearState(channel);\n    });\n    channel.master.on(\"loading\", progress => {\n      this.dispatch(setLoadingProgress(channelName, progress));\n    });\n    channel.master.on(\"ready\", () => {\n      channel.currentDuration = channel.master.getDuration();\n      let resolution = 430;\n      channel.slave.load(null, channel.master.backend.getPeaks(resolution, 0, resolution));\n      channel.setLoading(100);\n      this.dispatch(setChannelReady(true, channelName));\n      this.startSync(channel);\n    });\n    channel.slave.on(\"seek\", progress => {\n      const wasPlaying = this.master.isPlaying();\n      channel.master.backend.seekTo(progress * this.currentDuration);\n      channel.master.drawer.progress(progress);\n      channel.master.fireEvent(\"seek\", progress);\n      channel.slave.drawer.progress(progress);\n      const timeLeft = this.master.getDuration() - this.master.getDuration() * progress;\n      this.dispatch(setTimeLeft(channelName, timeLeft));\n\n      if (wasPlaying) {\n        channel.master.play();\n      }\n    });\n    return channel.master;\n  }\n\n  clearState(channel) {\n    channel.slave.load(null, []);\n\n    if (channel.barsElements) {\n      channel.barsElements.forEach(htmlElement => htmlElement.remove());\n    }\n  }\n\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/core/console/channels/channelBuilder/channelBuilder.js"],"names":["config","WaveSurfer","setChannelReady","setLoadingProgress","setTimeLeft","store","ChannelBuilder","constructor","startSync","channel","syncHandle","setInterval","slave","drawer","progress","master","getCurrentTime","currentDuration","dispatch","create","channelName","masterContaier","slaveContainer","masterConfig","slaveConfig","__proto__","loadWithEvent","args","fireEvent","load","on","clearState","getDuration","resolution","backend","getPeaks","setLoading","wasPlaying","isPlaying","seekTo","timeLeft","play","barsElements","forEach","htmlElement","remove"],"mappings":"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","sourcesContent":["import config from \"./../../../../components/Deck/Player/configuration\";\r\nimport WaveSurfer from \"wavesurfer\";\r\nimport { setChannelReady, setLoadingProgress,  setTimeLeft } from \"./../../../../actions\";\r\nimport store from \"./../../../../store\";\r\n\r\nexport default class ChannelBuilder {\r\n  constructor() {\r\n    this.dispatch = store.dispatch;\r\n  }\r\n\r\n  create(channelName, masterContaier, slaveContainer) {\r\n    let channel = {};\r\n\r\n    channel.masterConfig = config.master(masterContaier, channelName);\r\n    channel.slaveConfig = config.slave(slaveContainer, channelName);\r\n\r\n    channel.master = WaveSurfer.create(channel.masterConfig);\r\n    channel.master.__proto__.loadWithEvent = function(...args) {\r\n      this.fireEvent(\"load\");\r\n      this.load(...args);\r\n    };\r\n    channel.slave = WaveSurfer.create(channel.slaveConfig);\r\n\r\n    channel.master.on(\"load\", () => {\r\n      this.clearState(channel);\r\n    });\r\n\r\n    channel.master.on(\"loading\", progress => {\r\n      this.dispatch(setLoadingProgress(channelName, progress))\r\n    });\r\n\r\n    channel.master.on(\"ready\", () => {\r\n      channel.currentDuration = channel.master.getDuration();\r\n      let resolution = 430;\r\n      channel.slave.load(\r\n        null,\r\n        channel.master.backend.getPeaks(resolution, 0, resolution)\r\n      );\r\n      channel.setLoading(100);\r\n      this.dispatch(setChannelReady(true, channelName))\r\n      this.startSync(channel);\r\n    });\r\n\r\n    channel.slave.on(\"seek\", progress => {\r\n      const wasPlaying = this.master.isPlaying();\r\n\r\n      channel.master.backend.seekTo(progress * this.currentDuration);\r\n      channel.master.drawer.progress(progress);\r\n      channel.master.fireEvent(\"seek\", progress);\r\n\r\n      channel.slave.drawer.progress(progress);\r\n\r\n      const timeLeft = this.master.getDuration() - (this.master.getDuration() * progress);\r\n      this.dispatch(setTimeLeft(channelName, timeLeft));\r\n      if (wasPlaying) {\r\n        channel.master.play();\r\n      }\r\n    });\r\n\r\n\r\n\r\n    return channel.master;\r\n  }\r\n\r\n  clearState(channel) {\r\n    channel.slave.load(null, []);\r\n    if (channel.barsElements) {\r\n      channel.barsElements.forEach(htmlElement => htmlElement.remove());\r\n    }\r\n  }\r\n\r\n  startSync = (channel) => {\r\n    channel.syncHandle = setInterval(() => {\r\n      channel.slave.drawer.progress(\r\n        channel.master.getCurrentTime() / this.currentDuration\r\n      );\r\n    }, 100);\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}