{"ast":null,"code":"import { OfflineAudioContext } from 'standardized-audio-context';\nexport var render = function render(audioBuffer, offset, duration) {\n  var offlineAudioContext = new OfflineAudioContext(audioBuffer.numberOfChannels, duration * audioBuffer.sampleRate, audioBuffer.sampleRate);\n  var biquadFilter = offlineAudioContext.createBiquadFilter();\n  var bufferSourceNode = offlineAudioContext.createBufferSource();\n  biquadFilter.frequency.value = 240;\n  biquadFilter.type = 'lowpass';\n  bufferSourceNode.buffer = audioBuffer;\n  bufferSourceNode.connect(biquadFilter).connect(offlineAudioContext.destination);\n  bufferSourceNode.start(0, offset, duration);\n  return offlineAudioContext.startRendering().then(function (renderedBuffer) {\n    var channelData = renderedBuffer.getChannelData(0);\n    var sampleRate = renderedBuffer.sampleRate;\n    return {\n      channelData: channelData,\n      sampleRate: sampleRate\n    };\n  });\n};","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/node_modules/web-audio-beat-detector-broker/build/es2019/helpers/render.js"],"names":["OfflineAudioContext","render","audioBuffer","offset","duration","offlineAudioContext","numberOfChannels","sampleRate","biquadFilter","createBiquadFilter","bufferSourceNode","createBufferSource","frequency","value","type","buffer","connect","destination","start","startRendering","then","renderedBuffer","channelData","getChannelData"],"mappings":"AAAA,SAASA,mBAAT,QAAoC,4BAApC;AACA,OAAO,IAAMC,MAAM,GAAG,SAATA,MAAS,CAACC,WAAD,EAAcC,MAAd,EAAsBC,QAAtB,EAAmC;AACrD,MAAMC,mBAAmB,GAAG,IAAIL,mBAAJ,CAAwBE,WAAW,CAACI,gBAApC,EAAsDF,QAAQ,GAAGF,WAAW,CAACK,UAA7E,EAAyFL,WAAW,CAACK,UAArG,CAA5B;AACA,MAAMC,YAAY,GAAGH,mBAAmB,CAACI,kBAApB,EAArB;AACA,MAAMC,gBAAgB,GAAGL,mBAAmB,CAACM,kBAApB,EAAzB;AACAH,EAAAA,YAAY,CAACI,SAAb,CAAuBC,KAAvB,GAA+B,GAA/B;AACAL,EAAAA,YAAY,CAACM,IAAb,GAAoB,SAApB;AACAJ,EAAAA,gBAAgB,CAACK,MAAjB,GAA0Bb,WAA1B;AACAQ,EAAAA,gBAAgB,CACXM,OADL,CACaR,YADb,EAEKQ,OAFL,CAEaX,mBAAmB,CAACY,WAFjC;AAGAP,EAAAA,gBAAgB,CAACQ,KAAjB,CAAuB,CAAvB,EAA0Bf,MAA1B,EAAkCC,QAAlC;AACA,SAAOC,mBAAmB,CACrBc,cADE,GAEFC,IAFE,CAEG,UAACC,cAAD,EAAoB;AAC1B,QAAMC,WAAW,GAAGD,cAAc,CAACE,cAAf,CAA8B,CAA9B,CAApB;AACA,QAAMhB,UAAU,GAAGc,cAAc,CAACd,UAAlC;AACA,WAAO;AAAEe,MAAAA,WAAW,EAAXA,WAAF;AAAef,MAAAA,UAAU,EAAVA;AAAf,KAAP;AACH,GANM,CAAP;AAOH,CAlBM","sourcesContent":["import { OfflineAudioContext } from 'standardized-audio-context';\nexport const render = (audioBuffer, offset, duration) => {\n    const offlineAudioContext = new OfflineAudioContext(audioBuffer.numberOfChannels, duration * audioBuffer.sampleRate, audioBuffer.sampleRate);\n    const biquadFilter = offlineAudioContext.createBiquadFilter();\n    const bufferSourceNode = offlineAudioContext.createBufferSource();\n    biquadFilter.frequency.value = 240;\n    biquadFilter.type = 'lowpass';\n    bufferSourceNode.buffer = audioBuffer;\n    bufferSourceNode\n        .connect(biquadFilter)\n        .connect(offlineAudioContext.destination);\n    bufferSourceNode.start(0, offset, duration);\n    return offlineAudioContext\n        .startRendering()\n        .then((renderedBuffer) => {\n        const channelData = renderedBuffer.getChannelData(0);\n        const sampleRate = renderedBuffer.sampleRate;\n        return { channelData, sampleRate };\n    });\n};\n//# sourceMappingURL=/build/es2019/helpers/render.js.map"]},"metadata":{},"sourceType":"module"}