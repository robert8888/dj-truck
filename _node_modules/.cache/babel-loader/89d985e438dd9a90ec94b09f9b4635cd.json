{"ast":null,"code":"import { useCallback, useEffect, useState } from \"react\";\nimport { Log, Logger } from \"../../../utils/logger/logger\";\nimport { getApi } from \"./../../../apis/apiProvider\";\nimport { PLAYBACK_STATE } from \"./usePlabackState\"; //getRecordUrl\n\nclass PlayerBus {\n  constructor() {\n    this.progressUpdaterHandler = null;\n    this.current = {\n      id: null,\n      source: \"RecordsStore\",\n      start: 0,\n      duration: 0,\n      progress: 0,\n      state: null,\n      buffered: 0\n    };\n    this.btnStateHandlers = {};\n    this.progressSubscribers = {};\n    this.bufferedSubscribers = [];\n    this.progressProviders = {};\n    this.currentSubscribers = [];\n\n    if (!PlayerBus.instance) {\n      PlayerBus.instance = this;\n    }\n\n    return PlayerBus.instance;\n  }\n\n  setCurrent(nextCurrent) {\n    this.current = nextCurrent;\n    this.spreadCurrentChange();\n  }\n\n  subscribeCurrent(handler) {\n    this.currentSubscribers.push(handler);\n    handler(this.current);\n  }\n\n  unSubscribeCurrent(handler) {\n    this.currentSubscribers = this.currentSubscribers.filter(fun => !fun === handler);\n  }\n\n  spreadCurrentChange() {\n    for (let handler of this.currentSubscribers) {\n      handler(this.current);\n    }\n  }\n\n  getCurrent() {\n    return this.current;\n  }\n\n  subscribePlayback(id, handler) {\n    this.btnStateHandlers[id] = handler;\n  }\n\n  unSubscribePlayback(id) {\n    delete this.btnStateHandlers[id];\n  }\n\n  setPlaybackState(id, state) {\n    if (this.btnStateHandlers[id]) {\n      this.btnStateHandlers[id](state);\n    }\n  }\n\n  subscribeProgress(id, handler) {\n    if (this.progressSubscribers[id]) {\n      this.progressSubscribers[id].push(handler);\n    } else {\n      this.progressSubscribers[id] = [handler];\n    }\n  }\n\n  unSubscribeProgress(id, handler) {\n    this.progressSubscribers[id] = this.progressSubscribers[id].filter(fun => fun !== handler);\n  }\n\n  setProgress(progress) {\n    this.current.progress = progress;\n    this.spreadProgressChanges();\n  }\n\n  spreadProgressChanges() {\n    const {\n      id,\n      progress\n    } = this.current;\n\n    for (let handler of this.progressSubscribers[id]) {\n      handler(progress);\n    }\n\n    for (let handler of this.progressSubscribers['#'] || []) {\n      handler(progress);\n    }\n  }\n\n  addProgressProvider(id, handler) {\n    this.progressProviders[id] = handler;\n  }\n\n  removeProgressProvider(id) {\n    delete this.progressProviders[id];\n  }\n\n  getProgress(id) {\n    if (!id) {\n      return this.getProgress(this.current.id);\n    }\n\n    return this.progressProviders[id]();\n  }\n\n  setBuffered(buffered) {\n    if (this.current.id) {\n      this.current.buffered = buffered;\n    }\n\n    this.spreadBufferChanges();\n  }\n\n  subscribeBuffred(handel) {\n    this.bufferedSubscribers.push(handel);\n  }\n\n  unSubscribeBuffered(handler) {\n    this.bufferedSubscribers = this.bufferedSubscribers.filter(fun => fun !== handler);\n  }\n\n  spreadBufferChanges() {\n    for (let handler of this.bufferedSubscribers) {\n      handler(this.current.buffered);\n    }\n  }\n\n}\n\nexport function usePlayer() {\n  const [player] = useState(new PlayerBus());\n  useEffect(() => {\n    player.mediaElement = player.mediaElement || document.createElement('audio'); // player.mediaElement.type = \"audio/mp3\";\n  }, [player]);\n  const startUpdateProg = useCallback(() => {\n    const handler = setInterval(() => {\n      const mediaEl = player.mediaElement;\n      const progress = mediaEl.currentTime / (player.current.duration / 1000);\n      player.setProgress(progress); //--\n\n      const bufferdTimeRanges = mediaEl.buffered;\n\n      if (bufferdTimeRanges.length) {\n        const end = bufferdTimeRanges.end(bufferdTimeRanges.length - 1);\n        player.setBuffered(end / (player.current.duration / 1000));\n      }\n    }, 400);\n    player.progressUpdaterHandler = handler;\n  }, [player]);\n  const stopUpdateProg = useCallback(() => {\n    clearInterval(player.progressUpdaterHandler);\n  }, [player]);\n  useEffect(() => {\n    const media = player.mediaElement;\n\n    if (media) {\n      media.addEventListener(\"ended\", () => {\n        if (player.current.state === PLAYBACK_STATE.PLAY) {\n          player.setCurrent({ ...player.current,\n            state: PLAYBACK_STATE.PAUSE\n          });\n          player.setBtnState(player.current.id, PLAYBACK_STATE.PAUSE);\n        }\n\n        stopUpdateProg();\n      });\n      media.addEventListener('progress', () => {\n        const bufferdTimeRanges = media.buffered;\n\n        if (bufferdTimeRanges.length) {\n          const end = bufferdTimeRanges.end(bufferdTimeRanges.length - 1);\n          player.setBuffered(end / (player.current.duration / 1000));\n        }\n      });\n    }\n  }, [player, stopUpdateProg]);\n  const playback = useCallback((id, pbState, source = 'RecordsStore') => {\n    const media = player.mediaElement;\n    const current = id ? false : true;\n    const api = getApi(source);\n    id = id || player.current.id;\n\n    if (!id) {\n      return;\n    }\n\n    if (pbState === PLAYBACK_STATE.PLAY) {\n      let progress, duration;\n\n      if (current) {\n        ({\n          progress,\n          duration\n        } = player.getProgress(\"#\"));\n      } else {\n        ({\n          progress,\n          duration\n        } = player.getProgress(id));\n      }\n\n      const position = duration / 1000 * progress;\n      media.src = api.getStreamUrl(id);\n      media.currentTime = position;\n      media.play().catch(error => {\n        Logger.push(Log.Error(['usePlayer', 'playback method'], 'Media element play method error' + error.message, error));\n      });\n\n      if (player.current.id && !current) {\n        player.setBtnState(player.current.id, PLAYBACK_STATE.PAUSE);\n      }\n\n      player.setCurrent({\n        id,\n        source,\n        duration,\n        progress: progress,\n        buffered: 0,\n        state: PLAYBACK_STATE.PLAY\n      });\n      startUpdateProg();\n    } else if (pbState === PLAYBACK_STATE.PAUSE) {\n      if (media.readyState >= 2) {\n        media.pause();\n      } else {\n        media.load();\n      }\n\n      player.setCurrent({ ...player.current,\n        state: PLAYBACK_STATE.PAUSE\n      });\n      stopUpdateProg();\n    }\n\n    if (current) {\n      player.setBtnState(id, pbState);\n    }\n  }, [player, stopUpdateProg, startUpdateProg]);\n  const seek = useCallback(({\n    id = player.current.id,\n    progress,\n    duration = player.current.duration,\n    source = 'RecordsStore'\n  }) => {\n    const mediaEl = player.mediaElement;\n    const api = getApi(source);\n\n    if (!id || !duration) {\n      return;\n    }\n\n    if (player.current.id && player.current.id !== id) {\n      player.setBtnState(player.current.id, PLAYBACK_STATE.PAUSE);\n    }\n\n    const position = duration / 1000 * progress;\n\n    if (isNaN(position)) {\n      return;\n    }\n\n    stopUpdateProg();\n\n    if (player.current.id !== id) {\n      mediaEl.src = api.getStreamUrl(id);\n      mediaEl.currentTime = position;\n      player.setBtnState(id, PLAYBACK_STATE.PLAY);\n      player.setCurrent({ ...player.current,\n        id,\n        source,\n        duration,\n        state: PLAYBACK_STATE.PLAY\n      });\n      player.setProgress(progress);\n    }\n\n    mediaEl.currentTime = position;\n\n    if (mediaEl.pause) {\n      mediaEl.play().catch(err => console.log('Play action was aborded' + err));\n      player.setBtnState(player.current.id, PLAYBACK_STATE.PLAY);\n      player.setCurrent({ ...player.current,\n        state: PLAYBACK_STATE.PLAY\n      });\n    }\n\n    startUpdateProg();\n  }, [player, stopUpdateProg, startUpdateProg]);\n  const setVolume = useCallback(level => {\n    const mediaElement = player.mediaElement;\n\n    if (!mediaElement) {\n      return;\n    }\n\n    mediaElement.volume = level;\n  }, [player]);\n  const stop = useCallback(() => {\n    const mediaElement = player.mediaElement;\n    mediaElement.load();\n  }, [player]);\n  const controls = {\n    playback,\n    seek,\n    setVolume,\n    stop\n  };\n  return [controls, player];\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/pages/common/Hooks/usePlayer.js"],"names":["useCallback","useEffect","useState","Log","Logger","getApi","PLAYBACK_STATE","PlayerBus","constructor","progressUpdaterHandler","current","id","source","start","duration","progress","state","buffered","btnStateHandlers","progressSubscribers","bufferedSubscribers","progressProviders","currentSubscribers","instance","setCurrent","nextCurrent","spreadCurrentChange","subscribeCurrent","handler","push","unSubscribeCurrent","filter","fun","getCurrent","subscribePlayback","unSubscribePlayback","setPlaybackState","subscribeProgress","unSubscribeProgress","setProgress","spreadProgressChanges","addProgressProvider","removeProgressProvider","getProgress","setBuffered","spreadBufferChanges","subscribeBuffred","handel","unSubscribeBuffered","usePlayer","player","mediaElement","document","createElement","startUpdateProg","setInterval","mediaEl","currentTime","bufferdTimeRanges","length","end","stopUpdateProg","clearInterval","media","addEventListener","PLAY","PAUSE","setBtnState","playback","pbState","api","position","src","getStreamUrl","play","catch","error","Error","message","readyState","pause","load","seek","isNaN","err","console","log","setVolume","level","volume","stop","controls"],"mappings":"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","sourcesContent":["import { useCallback, useEffect, useState } from \"react\";\r\nimport { Log, Logger } from \"../../../utils/logger/logger\";\r\nimport { getApi } from \"./../../../apis/apiProvider\";\r\nimport { PLAYBACK_STATE } from \"./usePlabackState\";\r\n\r\n//getRecordUrl\r\nclass PlayerBus {\r\n    constructor() {\r\n        if (!PlayerBus.instance) {\r\n            PlayerBus.instance = this;\r\n        }\r\n\r\n        return PlayerBus.instance;\r\n    }\r\n\r\n\r\n    progressUpdaterHandler = null;\r\n\r\n    current = {\r\n        id: null,\r\n        source: \"RecordsStore\",\r\n        start: 0,\r\n        duration: 0,\r\n        progress: 0,\r\n        state: null,\r\n        buffered: 0,\r\n    };\r\n\r\n    btnStateHandlers = {}\r\n    progressSubscribers = {}\r\n    bufferedSubscribers = []\r\n    progressProviders = {};\r\n    currentSubscribers = [];\r\n\r\n    setCurrent(nextCurrent) {\r\n        this.current = nextCurrent;\r\n        this.spreadCurrentChange();\r\n    }\r\n\r\n    subscribeCurrent(handler) {\r\n        this.currentSubscribers.push(handler)\r\n        handler(this.current)\r\n    }\r\n\r\n    unSubscribeCurrent(handler) {\r\n        this.currentSubscribers = this.currentSubscribers.filter(fun => !fun === handler);\r\n    }\r\n\r\n    spreadCurrentChange() {\r\n        for (let handler of this.currentSubscribers) {\r\n            handler(this.current);\r\n        }\r\n    }\r\n\r\n    getCurrent() {\r\n        return this.current;\r\n    }\r\n\r\n    subscribePlayback(id, handler) {\r\n        this.btnStateHandlers[id] = handler;\r\n    }\r\n\r\n    unSubscribePlayback(id) {\r\n        delete this.btnStateHandlers[id]\r\n    }\r\n\r\n    setPlaybackState(id, state) {\r\n        if (this.btnStateHandlers[id]) {\r\n            this.btnStateHandlers[id](state)\r\n        }\r\n    }\r\n\r\n\r\n    subscribeProgress(id, handler) {\r\n        if (this.progressSubscribers[id]) {\r\n            this.progressSubscribers[id].push(handler);\r\n\r\n        } else {\r\n            this.progressSubscribers[id] = [handler];\r\n        }\r\n    }\r\n\r\n    unSubscribeProgress(id, handler) {\r\n        this.progressSubscribers[id] = this.progressSubscribers[id].filter(fun => fun !== handler);\r\n    }\r\n\r\n    setProgress(progress) {\r\n        this.current.progress = progress;\r\n        this.spreadProgressChanges();\r\n    }\r\n\r\n    spreadProgressChanges() {\r\n        const { id, progress } = this.current;\r\n        for (let handler of this.progressSubscribers[id]) {\r\n            handler(progress);\r\n        }\r\n        for (let handler of this.progressSubscribers['#'] || []) {\r\n            handler(progress);\r\n        }\r\n    }\r\n\r\n    addProgressProvider(id, handler) {\r\n        this.progressProviders[id] = handler;\r\n    }\r\n\r\n    removeProgressProvider(id) {\r\n        delete this.progressProviders[id];\r\n    }\r\n\r\n    getProgress(id) {\r\n        if (!id) {\r\n            return this.getProgress(this.current.id);\r\n        }\r\n        return this.progressProviders[id]();\r\n    }\r\n\r\n    setBuffered(buffered) {\r\n        if (this.current.id) {\r\n            this.current.buffered = buffered;\r\n        }\r\n        this.spreadBufferChanges();\r\n    }\r\n\r\n    subscribeBuffred(handel) {\r\n        this.bufferedSubscribers.push(handel)\r\n    }\r\n\r\n    unSubscribeBuffered(handler) {\r\n        this.bufferedSubscribers = this.bufferedSubscribers.filter(fun =>\r\n            fun !== handler\r\n        );\r\n    }\r\n\r\n    spreadBufferChanges() {\r\n        for (let handler of this.bufferedSubscribers) {\r\n            handler(this.current.buffered);\r\n        }\r\n    }\r\n}\r\n\r\nexport function usePlayer() {\r\n    const [player,] = useState(new PlayerBus())\r\n\r\n\r\n    useEffect(() => {\r\n        player.mediaElement = player.mediaElement || document.createElement('audio');\r\n        // player.mediaElement.type = \"audio/mp3\";\r\n    }, [player])\r\n\r\n    const startUpdateProg = useCallback(() => {\r\n        const handler = setInterval(() => {\r\n            const mediaEl = player.mediaElement;\r\n            const progress = mediaEl.currentTime / (player.current.duration / 1000);\r\n            player.setProgress(progress);\r\n            //--\r\n            const bufferdTimeRanges = mediaEl.buffered;\r\n            if (bufferdTimeRanges.length) {\r\n                const end = bufferdTimeRanges.end(bufferdTimeRanges.length - 1);\r\n                player.setBuffered(end / (player.current.duration / 1000))\r\n            }\r\n        }, 400)\r\n        player.progressUpdaterHandler = handler;\r\n\r\n    }, [player])\r\n\r\n    const stopUpdateProg = useCallback(() => {\r\n        clearInterval(player.progressUpdaterHandler);\r\n    }, [player])\r\n\r\n    useEffect(() => {\r\n        const media = player.mediaElement;\r\n        if (media) {\r\n            media.addEventListener(\"ended\", () => {\r\n                if (player.current.state === PLAYBACK_STATE.PLAY) {\r\n                    player.setCurrent({\r\n                        ...player.current,\r\n                        state: PLAYBACK_STATE.PAUSE,\r\n                    })\r\n                    player.setBtnState(player.current.id, PLAYBACK_STATE.PAUSE)\r\n                }\r\n                stopUpdateProg();\r\n            })\r\n            media.addEventListener('progress', () => {\r\n                const bufferdTimeRanges = media.buffered;\r\n                if (bufferdTimeRanges.length) {\r\n                    const end = bufferdTimeRanges.end(bufferdTimeRanges.length - 1);\r\n                    player.setBuffered(end / (player.current.duration / 1000))\r\n                }\r\n            })\r\n        }\r\n    }, [player, stopUpdateProg])\r\n\r\n    const playback = useCallback((id, pbState, source = 'RecordsStore') => {\r\n        const media = player.mediaElement;\r\n        const current = (id) ? false : true;\r\n        const api = getApi(source);\r\n        id = id || player.current.id;\r\n        if (!id) {\r\n            return;\r\n        }\r\n\r\n        if (pbState === PLAYBACK_STATE.PLAY) {\r\n            let progress, duration;\r\n            if (current) {\r\n                ({ progress, duration } = player.getProgress(\"#\"));\r\n            } else {\r\n                ({ progress, duration } = player.getProgress(id));\r\n            }\r\n            const position = (duration / 1000) * progress;\r\n            media.src = api.getStreamUrl(id);\r\n            media.currentTime = position;\r\n            media.play().catch(error => {\r\n                Logger.push(Log.Error(\r\n                    ['usePlayer', 'playback method'], \r\n                    'Media element play method error' + error.message,\r\n                    error))\r\n            });\r\n            if (player.current.id && !current) {\r\n                player.setBtnState(player.current.id, PLAYBACK_STATE.PAUSE)\r\n            }\r\n            player.setCurrent({\r\n                id,\r\n                source,\r\n                duration,\r\n                progress: progress,\r\n                buffered: 0,\r\n                state: PLAYBACK_STATE.PLAY,\r\n            })\r\n            startUpdateProg()\r\n        } else if (pbState === PLAYBACK_STATE.PAUSE) {\r\n            if (media.readyState >= 2) {\r\n                media.pause();\r\n            } else {\r\n                media.load();\r\n            }\r\n\r\n            player.setCurrent({\r\n                ...player.current,\r\n                state: PLAYBACK_STATE.PAUSE\r\n            })\r\n            stopUpdateProg();\r\n        }\r\n        if (current) {\r\n            player.setBtnState(id, pbState)\r\n        }\r\n    }, [player,\r\n        stopUpdateProg,\r\n        startUpdateProg,\r\n    ])\r\n\r\n    const seek = useCallback(({\r\n        id = player.current.id,\r\n        progress,\r\n        duration = player.current.duration,\r\n        source = 'RecordsStore',\r\n    }) => {\r\n        \r\n        const mediaEl = player.mediaElement;\r\n        const api = getApi(source);\r\n\r\n        if (!id || !duration) {\r\n            return;\r\n        }\r\n\r\n        if (player.current.id && player.current.id !== id) {\r\n            player.setBtnState(player.current.id, PLAYBACK_STATE.PAUSE);\r\n        }\r\n        const position = (duration / 1000) * progress;\r\n\r\n        if (isNaN(position)) {\r\n            return;\r\n        }\r\n\r\n        stopUpdateProg();\r\n\r\n        if (player.current.id !== id) {\r\n            mediaEl.src = api.getStreamUrl(id);\r\n            mediaEl.currentTime = position;\r\n            player.setBtnState(id, PLAYBACK_STATE.PLAY);\r\n            player.setCurrent({\r\n                ...player.current,\r\n                id,\r\n                source,\r\n                duration,\r\n                state: PLAYBACK_STATE.PLAY\r\n            })\r\n            player.setProgress(progress);\r\n        }\r\n\r\n        mediaEl.currentTime = position;\r\n        if (mediaEl.pause) {\r\n            mediaEl.play().catch(err => console.log('Play action was aborded' + err));\r\n            player.setBtnState(player.current.id, PLAYBACK_STATE.PLAY);\r\n            player.setCurrent({\r\n                ...player.current,\r\n                state: PLAYBACK_STATE.PLAY\r\n            })\r\n        }\r\n        startUpdateProg();\r\n    }, [player, stopUpdateProg, startUpdateProg])\r\n\r\n    const setVolume = useCallback((level) => {\r\n        const mediaElement = player.mediaElement;\r\n        if (!mediaElement) {\r\n            return;\r\n        }\r\n        mediaElement.volume = level;\r\n    }, [player])\r\n\r\n    const stop = useCallback(() => {\r\n        const mediaElement = player.mediaElement;\r\n        mediaElement.load();\r\n    }, [player])\r\n\r\n    const controls = {\r\n        playback,\r\n        seek,\r\n        setVolume,\r\n        stop,\r\n    }\r\n\r\n    return [\r\n        controls,\r\n        player\r\n    ]\r\n}"]},"metadata":{},"sourceType":"module"}