{"ast":null,"code":"import { put, select, takeEvery } from \"redux-saga/effects\";\nimport { ACTIONS, pushLog, updateStartTime } from \"../../../actions\";\nimport RECORD_STATE from \"./../../../reducers/console/recorder/stateDef\";\nimport Log from \"./../../../utils/logger/logger\";\nexport default function* interceptPlay() {\n  yield takeEvery(ACTIONS.CANCEL_CUE_AND_PLAY, handel);\n}\n\nconst getChannelState = (state, channel) => state.console.channel[channel];\n\nconst isRecording = state => state.recorder.recordingState === RECORD_STATE.RECORDING;\n\nfunction* handel(action) {\n  try {\n    const channel = action.destination;\n    const channelState = yield select(getChannelState, channel);\n    const recording = yield select(isRecording);\n    if (!recording) return;\n    yield put(updateStartTime(channelState.track.id));\n  } catch (error) {\n    yield put(pushLog(Log.Error(['saga', 'recorder', 'tracklis', 'intercept play after cue action'], \"Can't add track to tracklist. :\" + error.message, error)));\n  }\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/sagas/recorder/tracklist/playtrack.js"],"names":["put","select","takeEvery","ACTIONS","pushLog","updateStartTime","RECORD_STATE","Log","interceptPlay","CANCEL_CUE_AND_PLAY","handel","getChannelState","state","channel","console","isRecording","recorder","recordingState","RECORDING","action","destination","channelState","recording","track","id","error","Error","message"],"mappings":"AAAA,SAASA,GAAT,EAAcC,MAAd,EAAsBC,SAAtB,QAAuC,oBAAvC;AACA,SAASC,OAAT,EAAkBC,OAAlB,EAA2BC,eAA3B,QAAkD,kBAAlD;AACA,OAAOC,YAAP,MAAyB,+CAAzB;AACA,OAAOC,GAAP,MAAgB,gCAAhB;AAEA,eAAe,UAAUC,aAAV,GAA0B;AACrC,QAAMN,SAAS,CAACC,OAAO,CAACM,mBAAT,EAA8BC,MAA9B,CAAf;AACH;;AAED,MAAMC,eAAe,GAAG,CAACC,KAAD,EAAQC,OAAR,KAAoBD,KAAK,CAACE,OAAN,CAAcD,OAAd,CAAsBA,OAAtB,CAA5C;;AAEA,MAAME,WAAW,GAAGH,KAAK,IAAIA,KAAK,CAACI,QAAN,CAAeC,cAAf,KAAkCX,YAAY,CAACY,SAA5E;;AAEA,UAAUR,MAAV,CAAiBS,MAAjB,EAAwB;AACpB,MAAG;AACC,UAAMN,OAAO,GAAGM,MAAM,CAACC,WAAvB;AACA,UAAMC,YAAY,GAAG,MAAMpB,MAAM,CAACU,eAAD,EAAkBE,OAAlB,CAAjC;AAEA,UAAMS,SAAS,GAAG,MAAMrB,MAAM,CAACc,WAAD,CAA9B;AACA,QAAG,CAACO,SAAJ,EAAe;AAEf,UAAMtB,GAAG,CAACK,eAAe,CAACgB,YAAY,CAACE,KAAb,CAAmBC,EAApB,CAAhB,CAAT;AACH,GARD,CAQE,OAAOC,KAAP,EAAa;AACX,UAAMzB,GAAG,CAACI,OAAO,CAACG,GAAG,CAACmB,KAAJ,CACd,CAAC,MAAD,EAAS,UAAT,EAAqB,UAArB,EAAiC,iCAAjC,CADc,EAEd,oCAAoCD,KAAK,CAACE,OAF5B,EAGdF,KAHc,CAAD,CAAR,CAAT;AAKH;AAEJ","sourcesContent":["import { put, select, takeEvery } from \"redux-saga/effects\";\r\nimport { ACTIONS, pushLog, updateStartTime } from \"../../../actions\";\r\nimport RECORD_STATE from \"./../../../reducers/console/recorder/stateDef\";\r\nimport Log from \"./../../../utils/logger/logger\";\r\n\r\nexport default function* interceptPlay() {\r\n    yield takeEvery(ACTIONS.CANCEL_CUE_AND_PLAY, handel);\r\n}\r\n\r\nconst getChannelState = (state, channel) => state.console.channel[channel];\r\n\r\nconst isRecording = state => state.recorder.recordingState === RECORD_STATE.RECORDING; \r\n\r\nfunction* handel(action){\r\n    try{\r\n        const channel = action.destination;\r\n        const channelState = yield select(getChannelState, channel)\r\n    \r\n        const recording = yield select(isRecording);\r\n        if(!recording) return;\r\n    \r\n        yield put(updateStartTime(channelState.track.id))\r\n    } catch (error){\r\n        yield put(pushLog(Log.Error(\r\n            ['saga', 'recorder', 'tracklis', 'intercept play after cue action'],\r\n            \"Can't add track to tracklist. :\" + error.message,\r\n            error\r\n        )))\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}