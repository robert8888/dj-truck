{"ast":null,"code":"import { ACTIONS } from \"./../actions/actions.js\";\nconst deck = {\n  track: {\n    title: \"\",\n    bmp: 0,\n    quality: \"\",\n    duration: \"\",\n    source: \"\",\n    id: \"\",\n    thumbnail: {}\n  },\n  // \n  state: {\n    paused: true,\n    cue: 0,\n    pitch: 0,\n    timeLeft: null\n  }\n};\nconst chanel = {\n  volume: 100,\n  low: 100,\n  mid: 100,\n  high: 100,\n  gain: 100\n};\nconst initState = {\n  deck: {\n    A: { ...deck\n    },\n    B: { ...deck\n    }\n  },\n  mikser: {\n    chanelA: { ...chanel\n    },\n    chanelB: { ...chanel\n    },\n    fader: {\n      position: 50 //A: 0 <-> B:100\n\n    }\n  }\n};\n\nfunction consoleReducer(state = initState, action) {\n  switch (action.type) {\n    case ACTIONS.LOAD_TRACK:\n      {\n        let destination = action.destination;\n        let track = action.track;\n        let newState = { ...state\n        };\n\n        if (newState.deck[destination]) {\n          newState.deck[destination].track = {\n            title: track.title,\n            bmp: track.bpm || 0,\n            quality: track.quality,\n            duration: track.duration,\n            source: track.source,\n            id: track.id,\n            thumbnail: track.thumbnail\n          };\n        }\n\n        return newState;\n      }\n\n    case ACTIONS.SET_PITCH:\n      {\n        const _state = { ...state\n        };\n\n        if (_state.deck[action.destination]) {\n          _state.deck[action.destination].state.pitch = action.pitch;\n        }\n      }\n\n    default:\n      return state;\n  }\n}\n\nexport default consoleReducer;","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/reducers/consoleReducer.js"],"names":["ACTIONS","deck","track","title","bmp","quality","duration","source","id","thumbnail","state","paused","cue","pitch","timeLeft","chanel","volume","low","mid","high","gain","initState","A","B","mikser","chanelA","chanelB","fader","position","consoleReducer","action","type","LOAD_TRACK","destination","newState","bpm","SET_PITCH","_state"],"mappings":"AAAA,SAAUA,OAAV,QAAyB,yBAAzB;AAGA,MAAMC,IAAI,GAAG;AACTC,EAAAA,KAAK,EAAG;AACJC,IAAAA,KAAK,EAAG,EADJ;AAEJC,IAAAA,GAAG,EAAG,CAFF;AAGJC,IAAAA,OAAO,EAAG,EAHN;AAIJC,IAAAA,QAAQ,EAAG,EAJP;AAKJC,IAAAA,MAAM,EAAG,EALL;AAMJC,IAAAA,EAAE,EAAE,EANA;AAOJC,IAAAA,SAAS,EAAG;AAPR,GADC;AASN;AACHC,EAAAA,KAAK,EAAG;AACJC,IAAAA,MAAM,EAAE,IADJ;AAEJC,IAAAA,GAAG,EAAE,CAFD;AAGJC,IAAAA,KAAK,EAAE,CAHH;AAIJC,IAAAA,QAAQ,EAAG;AAJP;AAVC,CAAb;AAkBA,MAAMC,MAAM,GAAG;AACXC,EAAAA,MAAM,EAAE,GADG;AAEXC,EAAAA,GAAG,EAAE,GAFM;AAGXC,EAAAA,GAAG,EAAG,GAHK;AAIXC,EAAAA,IAAI,EAAG,GAJI;AAKXC,EAAAA,IAAI,EAAE;AALK,CAAf;AAQA,MAAMC,SAAS,GAAG;AACdpB,EAAAA,IAAI,EAAE;AACFqB,IAAAA,CAAC,EAAC,EACE,GAAGrB;AADL,KADA;AAIFsB,IAAAA,CAAC,EAAC,EACE,GAAGtB;AADL;AAJA,GADQ;AAUduB,EAAAA,MAAM,EAAG;AACLC,IAAAA,OAAO,EAAG,EACN,GAAGV;AADG,KADL;AAILW,IAAAA,OAAO,EAAG,EACN,GAAGX;AADG,KAJL;AAOLY,IAAAA,KAAK,EAAG;AACJC,MAAAA,QAAQ,EAAG,EADP,CACU;;AADV;AAPH;AAVK,CAAlB;;AAuBA,SAASC,cAAT,CAAwBnB,KAAK,GAAGW,SAAhC,EAA2CS,MAA3C,EAAkD;AAC9C,UAAOA,MAAM,CAACC,IAAd;AACI,SAAK/B,OAAO,CAACgC,UAAb;AAA0B;AACtB,YAAIC,WAAW,GAAGH,MAAM,CAACG,WAAzB;AACA,YAAI/B,KAAK,GAAG4B,MAAM,CAAC5B,KAAnB;AACA,YAAIgC,QAAQ,GAAG,EAAC,GAAGxB;AAAJ,SAAf;;AACA,YAAGwB,QAAQ,CAACjC,IAAT,CAAcgC,WAAd,CAAH,EAA8B;AAC1BC,UAAAA,QAAQ,CAACjC,IAAT,CAAcgC,WAAd,EAA2B/B,KAA3B,GAAmC;AAC/BC,YAAAA,KAAK,EAAGD,KAAK,CAACC,KADiB;AAE/BC,YAAAA,GAAG,EAAGF,KAAK,CAACiC,GAAN,IAAa,CAFY;AAG/B9B,YAAAA,OAAO,EAAGH,KAAK,CAACG,OAHe;AAI/BC,YAAAA,QAAQ,EAAGJ,KAAK,CAACI,QAJc;AAK/BC,YAAAA,MAAM,EAAGL,KAAK,CAACK,MALgB;AAM/BC,YAAAA,EAAE,EAAGN,KAAK,CAACM,EANoB;AAO/BC,YAAAA,SAAS,EAAGP,KAAK,CAACO;AAPa,WAAnC;AASH;;AACD,eAAOyB,QAAP;AACH;;AAED,SAAKlC,OAAO,CAACoC,SAAb;AAAyB;AACrB,cAAMC,MAAM,GAAG,EAAC,GAAG3B;AAAJ,SAAf;;AACA,YAAG2B,MAAM,CAACpC,IAAP,CAAY6B,MAAM,CAACG,WAAnB,CAAH,EAAmC;AAC/BI,UAAAA,MAAM,CAACpC,IAAP,CAAY6B,MAAM,CAACG,WAAnB,EAAgCvB,KAAhC,CAAsCG,KAAtC,GAA8CiB,MAAM,CAACjB,KAArD;AACH;AACJ;;AAED;AAAU,aAAOH,KAAP;AA1Bd;AA4BH;;AAED,eAAemB,cAAf","sourcesContent":["import {  ACTIONS } from \"./../actions/actions.js\";\r\n\r\n\r\nconst deck = {\r\n    track : {\r\n        title : \"\",\r\n        bmp : 0,\r\n        quality : \"\",\r\n        duration : \"\",\r\n        source : \"\",\r\n        id: \"\",\r\n        thumbnail : {}\r\n    }, // \r\n    state : {\r\n        paused: true,\r\n        cue: 0,\r\n        pitch: 0,\r\n        timeLeft : null\r\n    }\r\n}\r\n\r\nconst chanel = {\r\n    volume: 100,\r\n    low: 100,\r\n    mid : 100,\r\n    high : 100,\r\n    gain: 100\r\n}\r\n\r\nconst initState = {\r\n    deck: {\r\n        A:{\r\n            ...deck\r\n        },\r\n        B:{\r\n            ...deck\r\n        }\r\n    },\r\n   \r\n    mikser : {\r\n        chanelA : {\r\n            ...chanel,\r\n        },\r\n        chanelB : {\r\n            ...chanel,\r\n        },\r\n        fader : {\r\n            position : 50 //A: 0 <-> B:100\r\n        }\r\n    }\r\n}\r\n\r\nfunction consoleReducer(state = initState, action){\r\n    switch(action.type){\r\n        case ACTIONS.LOAD_TRACK : {\r\n            let destination = action.destination;\r\n            let track = action.track;\r\n            let newState = {...state};\r\n            if(newState.deck[destination]){\r\n                newState.deck[destination].track = {\r\n                    title : track.title,\r\n                    bmp : track.bpm || 0,\r\n                    quality : track.quality,\r\n                    duration : track.duration,\r\n                    source : track.source,\r\n                    id : track.id,\r\n                    thumbnail : track.thumbnail,\r\n                }\r\n            }\r\n            return newState;\r\n        }\r\n\r\n        case ACTIONS.SET_PITCH : {\r\n            const _state = {...state};\r\n            if(_state.deck[action.destination]){\r\n                _state.deck[action.destination].state.pitch = action.pitch\r\n            }\r\n        }\r\n\r\n        default : return state;\r\n    }\r\n}\r\n\r\nexport default consoleReducer;"]},"metadata":{},"sourceType":"module"}