{"ast":null,"code":"'use strict';\n\nvar xtend = require('xtend');\n\nvar entities = require('stringify-entities');\n\nmodule.exports = serializeComment; // See: <https://html.spec.whatwg.org/multipage/syntax.html#comments>\n\nvar breakout = /^>|^->|<!--|-->|--!>|<!-$/g;\nvar subset = ['<', '>'];\nvar bogusSubset = ['>'];\n\nfunction serializeComment(ctx, node) {\n  var value = node.value;\n\n  if (ctx.bogusComments) {\n    return '<?' + entities(value, xtend(ctx.entities, {\n      subset: bogusSubset\n    })) + '>';\n  }\n\n  return '<!--' + value.replace(breakout, encode) + '-->';\n\n  function encode($0) {\n    return entities($0, xtend(ctx.entities, {\n      subset: subset\n    }));\n  }\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/node_modules/hast-util-to-html/lib/comment.js"],"names":["xtend","require","entities","module","exports","serializeComment","breakout","subset","bogusSubset","ctx","node","value","bogusComments","replace","encode","$0"],"mappings":"AAAA;;AAEA,IAAIA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAAnB;;AACA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,oBAAD,CAAtB;;AAEAE,MAAM,CAACC,OAAP,GAAiBC,gBAAjB,C,CAEA;;AACA,IAAIC,QAAQ,GAAG,4BAAf;AACA,IAAIC,MAAM,GAAG,CAAC,GAAD,EAAM,GAAN,CAAb;AACA,IAAIC,WAAW,GAAG,CAAC,GAAD,CAAlB;;AAEA,SAASH,gBAAT,CAA0BI,GAA1B,EAA+BC,IAA/B,EAAqC;AACnC,MAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;;AAEA,MAAIF,GAAG,CAACG,aAAR,EAAuB;AACrB,WACE,OAAOV,QAAQ,CAACS,KAAD,EAAQX,KAAK,CAACS,GAAG,CAACP,QAAL,EAAe;AAACK,MAAAA,MAAM,EAAEC;AAAT,KAAf,CAAb,CAAf,GAAqE,GADvE;AAGD;;AAED,SAAO,SAASG,KAAK,CAACE,OAAN,CAAcP,QAAd,EAAwBQ,MAAxB,CAAT,GAA2C,KAAlD;;AAEA,WAASA,MAAT,CAAgBC,EAAhB,EAAoB;AAClB,WAAOb,QAAQ,CAACa,EAAD,EAAKf,KAAK,CAACS,GAAG,CAACP,QAAL,EAAe;AAACK,MAAAA,MAAM,EAAEA;AAAT,KAAf,CAAV,CAAf;AACD;AACF","sourcesContent":["'use strict'\n\nvar xtend = require('xtend')\nvar entities = require('stringify-entities')\n\nmodule.exports = serializeComment\n\n// See: <https://html.spec.whatwg.org/multipage/syntax.html#comments>\nvar breakout = /^>|^->|<!--|-->|--!>|<!-$/g\nvar subset = ['<', '>']\nvar bogusSubset = ['>']\n\nfunction serializeComment(ctx, node) {\n  var value = node.value\n\n  if (ctx.bogusComments) {\n    return (\n      '<?' + entities(value, xtend(ctx.entities, {subset: bogusSubset})) + '>'\n    )\n  }\n\n  return '<!--' + value.replace(breakout, encode) + '-->'\n\n  function encode($0) {\n    return entities($0, xtend(ctx.entities, {subset: subset}))\n  }\n}\n"]},"metadata":{},"sourceType":"script"}