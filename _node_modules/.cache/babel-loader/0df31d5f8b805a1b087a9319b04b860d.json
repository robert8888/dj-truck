{"ast":null,"code":"'use strict'; // Characters.\n\nvar nil = '\\0';\nvar ampersand = '&';\nvar space = ' ';\nvar tab = '\\t';\nvar graveAccent = '`';\nvar quotationMark = '\"';\nvar apostrophe = \"'\";\nvar equalsTo = '=';\nvar lessThan = '<';\nvar greaterThan = '>';\nvar slash = '/';\nvar lineFeed = '\\n';\nvar carriageReturn = '\\r';\nvar formFeed = '\\f';\nvar whitespace = [space, tab, lineFeed, carriageReturn, formFeed]; // See: <https://html.spec.whatwg.org/#attribute-name-state>.\n\nvar name = whitespace.concat(ampersand, slash, greaterThan, equalsTo); // See: <https://html.spec.whatwg.org/#attribute-value-(unquoted)-state>.\n\nvar unquoted = whitespace.concat(ampersand, greaterThan);\nvar unquotedSafe = unquoted.concat(nil, quotationMark, apostrophe, lessThan, equalsTo, graveAccent); // See: <https://html.spec.whatwg.org/#attribute-value-(single-quoted)-state>.\n\nvar singleQuoted = [ampersand, apostrophe]; // See: <https://html.spec.whatwg.org/#attribute-value-(double-quoted)-state>.\n\nvar doubleQuoted = [ampersand, quotationMark]; // Maps of subsets.\n// Each value is a matrix of tuples.\n// The first value causes parse errors, the second is valid.\n// Of both values, the first value is unsafe, and the second is safe.\n\nmodule.exports = {\n  name: [[name, name.concat(quotationMark, apostrophe, graveAccent)], [name.concat(nil, quotationMark, apostrophe, lessThan), name.concat(nil, quotationMark, apostrophe, lessThan, graveAccent)]],\n  unquoted: [[unquoted, unquotedSafe], [unquotedSafe, unquotedSafe]],\n  single: [[singleQuoted, singleQuoted.concat(quotationMark, graveAccent)], [singleQuoted.concat(nil), singleQuoted.concat(nil, quotationMark, graveAccent)]],\n  double: [[doubleQuoted, doubleQuoted.concat(apostrophe, graveAccent)], [doubleQuoted.concat(nil), doubleQuoted.concat(nil, apostrophe, graveAccent)]]\n};","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/node_modules/hast-util-to-html/lib/constants.js"],"names":["nil","ampersand","space","tab","graveAccent","quotationMark","apostrophe","equalsTo","lessThan","greaterThan","slash","lineFeed","carriageReturn","formFeed","whitespace","name","concat","unquoted","unquotedSafe","singleQuoted","doubleQuoted","module","exports","single","double"],"mappings":"AAAA,a,CAEA;;AACA,IAAIA,GAAG,GAAG,IAAV;AACA,IAAIC,SAAS,GAAG,GAAhB;AACA,IAAIC,KAAK,GAAG,GAAZ;AACA,IAAIC,GAAG,GAAG,IAAV;AACA,IAAIC,WAAW,GAAG,GAAlB;AACA,IAAIC,aAAa,GAAG,GAApB;AACA,IAAIC,UAAU,GAAG,GAAjB;AACA,IAAIC,QAAQ,GAAG,GAAf;AACA,IAAIC,QAAQ,GAAG,GAAf;AACA,IAAIC,WAAW,GAAG,GAAlB;AACA,IAAIC,KAAK,GAAG,GAAZ;AACA,IAAIC,QAAQ,GAAG,IAAf;AACA,IAAIC,cAAc,GAAG,IAArB;AACA,IAAIC,QAAQ,GAAG,IAAf;AAEA,IAAIC,UAAU,GAAG,CAACZ,KAAD,EAAQC,GAAR,EAAaQ,QAAb,EAAuBC,cAAvB,EAAuCC,QAAvC,CAAjB,C,CAEA;;AACA,IAAIE,IAAI,GAAGD,UAAU,CAACE,MAAX,CAAkBf,SAAlB,EAA6BS,KAA7B,EAAoCD,WAApC,EAAiDF,QAAjD,CAAX,C,CAEA;;AACA,IAAIU,QAAQ,GAAGH,UAAU,CAACE,MAAX,CAAkBf,SAAlB,EAA6BQ,WAA7B,CAAf;AACA,IAAIS,YAAY,GAAGD,QAAQ,CAACD,MAAT,CACjBhB,GADiB,EAEjBK,aAFiB,EAGjBC,UAHiB,EAIjBE,QAJiB,EAKjBD,QALiB,EAMjBH,WANiB,CAAnB,C,CASA;;AACA,IAAIe,YAAY,GAAG,CAAClB,SAAD,EAAYK,UAAZ,CAAnB,C,CAEA;;AACA,IAAIc,YAAY,GAAG,CAACnB,SAAD,EAAYI,aAAZ,CAAnB,C,CAEA;AACA;AACA;AACA;;AACAgB,MAAM,CAACC,OAAP,GAAiB;AACfP,EAAAA,IAAI,EAAE,CACJ,CAACA,IAAD,EAAOA,IAAI,CAACC,MAAL,CAAYX,aAAZ,EAA2BC,UAA3B,EAAuCF,WAAvC,CAAP,CADI,EAEJ,CACEW,IAAI,CAACC,MAAL,CAAYhB,GAAZ,EAAiBK,aAAjB,EAAgCC,UAAhC,EAA4CE,QAA5C,CADF,EAEEO,IAAI,CAACC,MAAL,CAAYhB,GAAZ,EAAiBK,aAAjB,EAAgCC,UAAhC,EAA4CE,QAA5C,EAAsDJ,WAAtD,CAFF,CAFI,CADS;AAQfa,EAAAA,QAAQ,EAAE,CACR,CAACA,QAAD,EAAWC,YAAX,CADQ,EAER,CAACA,YAAD,EAAeA,YAAf,CAFQ,CARK;AAYfK,EAAAA,MAAM,EAAE,CACN,CAACJ,YAAD,EAAeA,YAAY,CAACH,MAAb,CAAoBX,aAApB,EAAmCD,WAAnC,CAAf,CADM,EAEN,CACEe,YAAY,CAACH,MAAb,CAAoBhB,GAApB,CADF,EAEEmB,YAAY,CAACH,MAAb,CAAoBhB,GAApB,EAAyBK,aAAzB,EAAwCD,WAAxC,CAFF,CAFM,CAZO;AAmBfoB,EAAAA,MAAM,EAAE,CACN,CAACJ,YAAD,EAAeA,YAAY,CAACJ,MAAb,CAAoBV,UAApB,EAAgCF,WAAhC,CAAf,CADM,EAEN,CACEgB,YAAY,CAACJ,MAAb,CAAoBhB,GAApB,CADF,EAEEoB,YAAY,CAACJ,MAAb,CAAoBhB,GAApB,EAAyBM,UAAzB,EAAqCF,WAArC,CAFF,CAFM;AAnBO,CAAjB","sourcesContent":["'use strict'\n\n// Characters.\nvar nil = '\\0'\nvar ampersand = '&'\nvar space = ' '\nvar tab = '\\t'\nvar graveAccent = '`'\nvar quotationMark = '\"'\nvar apostrophe = \"'\"\nvar equalsTo = '='\nvar lessThan = '<'\nvar greaterThan = '>'\nvar slash = '/'\nvar lineFeed = '\\n'\nvar carriageReturn = '\\r'\nvar formFeed = '\\f'\n\nvar whitespace = [space, tab, lineFeed, carriageReturn, formFeed]\n\n// See: <https://html.spec.whatwg.org/#attribute-name-state>.\nvar name = whitespace.concat(ampersand, slash, greaterThan, equalsTo)\n\n// See: <https://html.spec.whatwg.org/#attribute-value-(unquoted)-state>.\nvar unquoted = whitespace.concat(ampersand, greaterThan)\nvar unquotedSafe = unquoted.concat(\n  nil,\n  quotationMark,\n  apostrophe,\n  lessThan,\n  equalsTo,\n  graveAccent\n)\n\n// See: <https://html.spec.whatwg.org/#attribute-value-(single-quoted)-state>.\nvar singleQuoted = [ampersand, apostrophe]\n\n// See: <https://html.spec.whatwg.org/#attribute-value-(double-quoted)-state>.\nvar doubleQuoted = [ampersand, quotationMark]\n\n// Maps of subsets.\n// Each value is a matrix of tuples.\n// The first value causes parse errors, the second is valid.\n// Of both values, the first value is unsafe, and the second is safe.\nmodule.exports = {\n  name: [\n    [name, name.concat(quotationMark, apostrophe, graveAccent)],\n    [\n      name.concat(nil, quotationMark, apostrophe, lessThan),\n      name.concat(nil, quotationMark, apostrophe, lessThan, graveAccent)\n    ]\n  ],\n  unquoted: [\n    [unquoted, unquotedSafe],\n    [unquotedSafe, unquotedSafe]\n  ],\n  single: [\n    [singleQuoted, singleQuoted.concat(quotationMark, graveAccent)],\n    [\n      singleQuoted.concat(nil),\n      singleQuoted.concat(nil, quotationMark, graveAccent)\n    ]\n  ],\n  double: [\n    [doubleQuoted, doubleQuoted.concat(apostrophe, graveAccent)],\n    [\n      doubleQuoted.concat(nil),\n      doubleQuoted.concat(nil, apostrophe, graveAccent)\n    ]\n  ]\n}\n"]},"metadata":{},"sourceType":"script"}