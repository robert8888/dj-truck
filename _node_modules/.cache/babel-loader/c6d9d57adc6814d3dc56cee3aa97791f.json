{"ast":null,"code":"//const map = require('unist-util-map');\nconst vFile = require('vfile');\n\nmodule.exports = attacher;\n\nconst newFileFrom = (vfile, contents) => {\n  return vFile({ ...vfile,\n    contents: contents\n  });\n};\n\nfunction attacher() {\n  // console.log(\"the this\", this.Parser);\n  const pattern = /{\\.(\\w+)}/;\n  const processor = this;\n\n  function transformer(tree, file) {\n    let inlineMethods = processor.Parser.prototype.inlineMethods;\n    let blockMethods = processor.Parser.prototype.blockMethods;\n    console.log(\"before modification\", tree);\n\n    const modify = node => {\n      console.log(\"in modify\", node);\n      if (!node.children) return node;\n      let parent = node;\n      const children = node.children.map(node => {\n        var _processor$parse;\n\n        if (node.type !== \"text\") return node;\n        let match = pattern.exec(node.value);\n        if (!match) return node;\n        const value = node.value.replace(match[0], \"\");\n        const subNodes = (_processor$parse = processor.parse(newFileFrom(file, value))) === null || _processor$parse === void 0 ? void 0 : _processor$parse.children;\n        return node; // if(node.type !== \"text\") return modify(node);\n        // console.log(\"node in\", node)\n        // let match = pattern.exec(node.value);\n        // if(!match) return node;\n        // const value = node.value.replace(match[0], \"\");\n        // const subNodes = processor.parse(newFileFrom(file, value))?.children;\n        // // console.log(\"parnet subnodes\", parent, subNodes)\n        // if(subNodes.some( subNode => subNode.type === \"thematicBreak\")\n        //     && parent.type === \"paragraph\"){\n        //     parent = subNodes.find( subNode => subNode.type === \"thematicBreak\");\n        //     parent.className = match[1];\n        //     parent.position = node.position;\n        //     parent.position.end.column-=match[0].length;\n        //     parent.position.end.offset-=match[0].length;\n        //\n        // }\n      }); //  node = parent;\n\n      parent.children = children;\n      return parent;\n    };\n\n    const next = modify(tree);\n    console.log(\"after modyfication\", next);\n    return next;\n  }\n\n  return transformer;\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/pages/introduction/MarkDonwExtesnion/reamark-hclass.js"],"names":["vFile","require","module","exports","attacher","newFileFrom","vfile","contents","pattern","processor","transformer","tree","file","inlineMethods","Parser","prototype","blockMethods","console","log","modify","node","children","parent","map","type","match","exec","value","replace","subNodes","parse","next"],"mappings":"AAAA;AACA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AAGAC,MAAM,CAACC,OAAP,GAAiBC,QAAjB;;AAEA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AACrC,SAAOP,KAAK,CAAC,EAAC,GAAGM,KAAJ;AAAWC,IAAAA,QAAQ,EAAEA;AAArB,GAAD,CAAZ;AACH,CAFD;;AAIA,SAASH,QAAT,GAAoB;AACjB;AACC,QAAMI,OAAO,GAAG,WAAhB;AACA,QAAMC,SAAS,GAAG,IAAlB;;AACA,WAASC,WAAT,CAAqBC,IAArB,EAA2BC,IAA3B,EAAiC;AAC7B,QAAIC,aAAa,GAAEJ,SAAS,CAACK,MAAV,CAAiBC,SAAjB,CAA2BF,aAA9C;AACA,QAAIG,YAAY,GAAGP,SAAS,CAACK,MAAV,CAAiBC,SAAjB,CAA2BC,YAA9C;AAEAC,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCP,IAAnC;;AAEA,UAAMQ,MAAM,GAAGC,IAAI,IAAI;AACnBH,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBE,IAAzB;AACA,UAAG,CAACA,IAAI,CAACC,QAAT,EAAmB,OAAOD,IAAP;AACnB,UAAIE,MAAM,GAAGF,IAAb;AACA,YAAMC,QAAQ,GAAGD,IAAI,CAACC,QAAL,CAAcE,GAAd,CAAmBH,IAAI,IAAI;AAAA;;AACxC,YAAGA,IAAI,CAACI,IAAL,KAAc,MAAjB,EAAyB,OAAOJ,IAAP;AAEzB,YAAIK,KAAK,GAAGjB,OAAO,CAACkB,IAAR,CAAaN,IAAI,CAACO,KAAlB,CAAZ;AACA,YAAG,CAACF,KAAJ,EAAW,OAAOL,IAAP;AACX,cAAMO,KAAK,GAAGP,IAAI,CAACO,KAAL,CAAWC,OAAX,CAAmBH,KAAK,CAAC,CAAD,CAAxB,EAA6B,EAA7B,CAAd;AACA,cAAMI,QAAQ,uBAAGpB,SAAS,CAACqB,KAAV,CAAgBzB,WAAW,CAACO,IAAD,EAAOe,KAAP,CAA3B,CAAH,qDAAG,iBAA2CN,QAA5D;AAEA,eAAOD,IAAP,CARwC,CASxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,OAzBgB,CAAjB,CAJmB,CA8BrB;;AACEE,MAAAA,MAAM,CAACD,QAAP,GAAkBA,QAAlB;AACA,aAAOC,MAAP;AACH,KAjCD;;AAoCA,UAAMS,IAAI,GAAIZ,MAAM,CAACR,IAAD,CAApB;AACAM,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCa,IAAlC;AACA,WAAOA,IAAP;AACH;;AAED,SAAOrB,WAAP;AACH","sourcesContent":["//const map = require('unist-util-map');\r\nconst vFile = require('vfile');\r\n\r\n\r\nmodule.exports = attacher\r\n\r\nconst newFileFrom = (vfile, contents) => {\r\n    return vFile({...vfile, contents: contents})\r\n}\r\n\r\nfunction attacher() {\r\n   // console.log(\"the this\", this.Parser);\r\n    const pattern = /{\\.(\\w+)}/;\r\n    const processor = this;\r\n    function transformer(tree, file) {\r\n        let inlineMethods =processor.Parser.prototype.inlineMethods;\r\n        let blockMethods = processor.Parser.prototype.blockMethods;\r\n\r\n        console.log(\"before modification\", tree)\r\n\r\n        const modify = node => {\r\n            console.log(\"in modify\", node)\r\n            if(!node.children) return node;\r\n            let parent = node;\r\n            const children = node.children.map( node => {\r\n                if(node.type !== \"text\") return node;\r\n\r\n                let match = pattern.exec(node.value);\r\n                if(!match) return node;\r\n                const value = node.value.replace(match[0], \"\");\r\n                const subNodes = processor.parse(newFileFrom(file, value))?.children;\r\n                \r\n                return node;\r\n                // if(node.type !== \"text\") return modify(node);\r\n                // console.log(\"node in\", node)\r\n                // let match = pattern.exec(node.value);\r\n                // if(!match) return node;\r\n                // const value = node.value.replace(match[0], \"\");\r\n                // const subNodes = processor.parse(newFileFrom(file, value))?.children;\r\n                // // console.log(\"parnet subnodes\", parent, subNodes)\r\n                // if(subNodes.some( subNode => subNode.type === \"thematicBreak\")\r\n                //     && parent.type === \"paragraph\"){\r\n                //     parent = subNodes.find( subNode => subNode.type === \"thematicBreak\");\r\n                //     parent.className = match[1];\r\n                //     parent.position = node.position;\r\n                //     parent.position.end.column-=match[0].length;\r\n                //     parent.position.end.offset-=match[0].length;\r\n                //\r\n                // }\r\n            })\r\n          //  node = parent;\r\n            parent.children = children;\r\n            return parent;\r\n        }\r\n\r\n\r\n        const next =  modify(tree);\r\n        console.log(\"after modyfication\", next);\r\n        return next;\r\n    }\r\n\r\n    return transformer\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}