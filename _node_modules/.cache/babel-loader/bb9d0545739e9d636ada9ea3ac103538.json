{"ast":null,"code":"import store from \"./../../../../../../store\";\nimport { setChannelReady, setLoadingProgress, setTimeLeft, togglePlay, setLoop } from \"./../../../../../../actions\";\nexport default class EventHandler {\n  constructor() {\n    this.startSync = channel => {\n      channel.syncHandle = setInterval(() => {\n        channel.slave.drawer.progress(channel.master.getCurrentTime() / channel.currentDuration);\n      }, 100);\n    };\n\n    this.dispatch = store.dispatch;\n  }\n\n  CreateEventHandling(channel) {\n    this.onLoad(channel);\n    this.onLoading(channel);\n    this.onReady(channel);\n    this.onPlay(channel);\n    this.onStop(channel);\n    this.onSlaveSeek(channel);\n    this.onMasterSeek(channel);\n    this.onFinish(channel);\n  } // --- events below\n\n\n  onLoad(channel) {\n    channel.master.on(\"load\", () => {\n      this.clearState(channel);\n    });\n  }\n\n  onLoading(channel) {\n    channel.master.on(\"loading\", progress => {\n      this.dispatch(setLoadingProgress(channel.channelName, progress));\n    });\n  }\n\n  onReady(channel) {\n    channel.master.on(\"ready\", () => {\n      let image = channel.master.backend.drawer.getImage('image/png', 1);\n      let img = document.createElement('img');\n      img.src = image;\n      document.body.appendChild(img);\n      channel.currentDuration = channel.master.getDuration(); //resolution value is taken from manual test\n\n      const resolution = 280;\n      channel.slave.load(null, channel.master.backend.getPeaks(resolution, 0, resolution));\n      this.dispatch(setLoadingProgress(channel.channelName, 100));\n      this.dispatch(setChannelReady(true, channel.channelName));\n      this.startSync(channel);\n    });\n  }\n\n  onPlay(channel) {\n    channel.master.on(\"play\", () => {\n      channel._clockHandle = setInterval(() => {\n        const timeLeft = parseInt(channel.master.getDuration() - channel.master.getCurrentTime());\n        this.dispatch(setTimeLeft(channel.channelName, timeLeft));\n      }, 500);\n    });\n  }\n\n  onStop(channel) {\n    channel.master.on('pause', () => {\n      clearInterval(channel._clockHandle);\n    });\n  }\n\n  onSlaveSeek(channel) {\n    channel.slave.on(\"seek\", progress => {\n      const wasPlaying = channel.master.isPlaying();\n      channel.master.backend.seekTo(progress * channel.currentDuration);\n      channel.master.drawer.progress(progress);\n      channel.master.fireEvent(\"seek\", progress);\n      channel.slave.drawer.progress(progress);\n      const timeLeft = parseInt(channel.master.getDuration() - channel.master.getDuration() * progress);\n      this.dispatch(setTimeLeft(channel.channelName, timeLeft));\n\n      if (wasPlaying) {\n        channel.master.play();\n      }\n    });\n  }\n\n  onMasterSeek(channel) {\n    // updating time Left value\n    ///Because on seek event is called a 1000 time per second, is created watcher witch update\n    // value after 500 ms with last progress value\n    let watcher = null;\n    let lastCall = {\n      time: new Date().getTime(),\n      value: null\n    };\n    channel.master.on(\"seek\", progress => {\n      lastCall.time = new Date().getTime();\n      lastCall.progress = progress;\n\n      if (!watcher) {\n        watcher = setTimeout(() => {\n          if (new Date().getTime() - lastCall.time >= 100) {\n            const timeLeft = parseInt(channel.master.getDuration() * lastCall.progress);\n            this.dispatch(setTimeLeft(channel.channelName, timeLeft));\n            clearTimeout(watcher);\n            watcher = null;\n          }\n        }, 500);\n      }\n    });\n    this.dispatch(setLoop(channel.channelName, false));\n  }\n\n  onFinish(channel) {\n    channel.master.on(\"finish\", () => {\n      this.dispatch(togglePlay(channel.channelName));\n      clearInterval(channel._clockHandle);\n    });\n  } //---------------------------------------\n\n\n  clearState(channel) {\n    channel.slave.load(null, []);\n\n    if (channel.barsElements) {\n      channel.barsElements.forEach(htmlElement => htmlElement.remove());\n    }\n  }\n\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/pages/app/core/console/channels/channelEvnetHandler/channelEvnetHandler.js"],"names":["store","setChannelReady","setLoadingProgress","setTimeLeft","togglePlay","setLoop","EventHandler","constructor","startSync","channel","syncHandle","setInterval","slave","drawer","progress","master","getCurrentTime","currentDuration","dispatch","CreateEventHandling","onLoad","onLoading","onReady","onPlay","onStop","onSlaveSeek","onMasterSeek","onFinish","on","clearState","channelName","image","backend","getImage","img","document","createElement","src","body","appendChild","getDuration","resolution","load","getPeaks","_clockHandle","timeLeft","parseInt","clearInterval","wasPlaying","isPlaying","seekTo","fireEvent","play","watcher","lastCall","time","Date","getTime","value","setTimeout","clearTimeout","barsElements","forEach","htmlElement","remove"],"mappings":"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","sourcesContent":["import store from \"./../../../../../../store\";\r\n\r\nimport {\r\n  setChannelReady,\r\n  setLoadingProgress,\r\n  setTimeLeft,\r\n  togglePlay,\r\n  setLoop\r\n} from \"./../../../../../../actions\";\r\n\r\nexport default class EventHandler {\r\n  constructor() {\r\n    this.dispatch = store.dispatch;\r\n  }\r\n\r\n  CreateEventHandling(channel) {\r\n    this.onLoad(channel);\r\n    this.onLoading(channel);\r\n    this.onReady(channel);\r\n    this.onPlay(channel);\r\n    this.onStop(channel);\r\n\r\n    this.onSlaveSeek(channel);\r\n    this.onMasterSeek(channel);\r\n    this.onFinish(channel);\r\n  }\r\n  // --- events below\r\n\r\n  onLoad(channel) {\r\n    channel.master.on(\"load\", () => {\r\n      this.clearState(channel);\r\n    });\r\n  }\r\n\r\n  onLoading(channel) {\r\n    channel.master.on(\"loading\", progress => {\r\n      this.dispatch(setLoadingProgress(channel.channelName, progress));\r\n    });\r\n  }\r\n\r\n  onReady(channel) {\r\n    channel.master.on(\"ready\", () => {\r\n      let image = channel.master.backend.drawer.getImage('image/png', 1)\r\n      let img = document.createElement('img');\r\n      img.src = image;\r\n      document.body.appendChild(img);\r\n\r\n      channel.currentDuration = channel.master.getDuration();\r\n      //resolution value is taken from manual test\r\n      const resolution = 280;\r\n      channel.slave.load(null, channel.master.backend.getPeaks(resolution, 0, resolution) );\r\n      this.dispatch(setLoadingProgress(channel.channelName, 100));\r\n\r\n      this.dispatch(setChannelReady(true, channel.channelName));\r\n      this.startSync(channel);\r\n    });\r\n  }\r\n\r\n\r\n  onPlay(channel){\r\n    channel.master.on(\"play\", ()=>{\r\n        channel._clockHandle = setInterval(()=>{\r\n          const timeLeft = parseInt(channel.master.getDuration() - channel.master.getCurrentTime());\r\n          this.dispatch(setTimeLeft(channel.channelName, timeLeft))\r\n        }, 500)\r\n    })\r\n  }\r\n\r\n  onStop(channel){\r\n    channel.master.on('pause', ()=>{\r\n      clearInterval(channel._clockHandle)\r\n    })\r\n  }\r\n\r\n  onSlaveSeek(channel) {\r\n    channel.slave.on(\"seek\", progress => {\r\n      const wasPlaying = channel.master.isPlaying();\r\n\r\n      channel.master.backend.seekTo(progress * channel.currentDuration);\r\n      channel.master.drawer.progress(progress);\r\n      channel.master.fireEvent(\"seek\", progress);\r\n\r\n      channel.slave.drawer.progress(progress);\r\n\r\n      const timeLeft = parseInt(channel.master.getDuration() - channel.master.getDuration() * progress);\r\n      this.dispatch(setTimeLeft(channel.channelName, timeLeft));\r\n\r\n      if (wasPlaying) {\r\n        channel.master.play();\r\n      }\r\n    });\r\n  }\r\n\r\n  onMasterSeek(channel) {\r\n    // updating time Left value\r\n    ///Because on seek event is called a 1000 time per second, is created watcher witch update\r\n    // value after 500 ms with last progress value\r\n    let watcher = null;\r\n    let lastCall = {\r\n      time: new Date().getTime(),\r\n      value: null\r\n    };\r\n\r\n    channel.master.on(\"seek\", progress => {\r\n      lastCall.time = new Date().getTime();\r\n      lastCall.progress = progress;\r\n      if (!watcher) {\r\n        watcher = setTimeout(() => {\r\n          if (new Date().getTime() - lastCall.time >= 100) {\r\n            const timeLeft = parseInt(channel.master.getDuration() * lastCall.progress);\r\n            this.dispatch(setTimeLeft(channel.channelName, timeLeft));\r\n            clearTimeout(watcher);\r\n            watcher = null;\r\n          }\r\n        }, 500);\r\n      }\r\n    });\r\n\r\n    this.dispatch(setLoop(channel.channelName, false));\r\n  }\r\n\r\n\r\n  onFinish(channel) {\r\n    channel.master.on(\"finish\", () => {\r\n      this.dispatch(togglePlay(channel.channelName));\r\n      clearInterval(channel._clockHandle);\r\n    });\r\n  }\r\n\r\n  //---------------------------------------\r\n  clearState(channel) {\r\n    channel.slave.load(null, []);\r\n    if (channel.barsElements) {\r\n      channel.barsElements.forEach(htmlElement => htmlElement.remove());\r\n    }\r\n  }\r\n\r\n  startSync = channel => {\r\n    channel.syncHandle = setInterval(() => {\r\n      channel.slave.drawer.progress(\r\n        channel.master.getCurrentTime() / channel.currentDuration\r\n      );\r\n    }, 100);\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}