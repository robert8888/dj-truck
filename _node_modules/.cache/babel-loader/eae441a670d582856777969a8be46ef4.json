{"ast":null,"code":"import store from \"./../../../../../../store\";\nimport config from \"./../../../../components/Console/Deck/Player/configuration\";\nimport WaveSurfer from \"wavesurfer\";\nimport ChannelEvnetHandler from \"./../channelEvnetHandler/channelEvnetHandler\";\nimport { getBeatLength } from \"./../../../../../../utils/bpm/converter\";\nexport default class ChannelBuilder {\n  constructor() {\n    this.eventHandler = new ChannelEvnetHandler();\n    this.dispatch = store.dispatch;\n  }\n\n  create(channelName, masterContainer, slaveContainer, mainAudioContext) {\n    let channel = {\n      channelName,\n      masterContainer,\n      slaveContainer\n    }; //--configs\n\n    channel.masterConfig = config.master(masterContainer, channelName);\n    channel.slaveConfig = config.slave(slaveContainer, channelName); //--master waveSurfer obj\n\n    channel.masterConfig.audioContext = mainAudioContext;\n    channel.master = WaveSurfer.create(channel.masterConfig);\n    this.monkyMock(channel.master);\n\n    channel.master.__proto__.loadWithEvent = function (...args) {\n      this.fireEvent(\"load\");\n      this.load(...args);\n    };\n\n    channel.slave = WaveSurfer.create(channel.slaveConfig);\n    this.eventHandler.CreateEventHandling(channel);\n    return channel;\n  } //!!! turn off !\n\n\n  createBars(channel, {\n    bpm,\n    offset\n  }) {\n    return;\n    let wrapper = channel.master.drawer.wrapper;\n    let styleApply = WaveSurfer.Drawer.style;\n    let minPxPerSec = channel.master.params.minPxPerSec;\n    let bitLength = getBeatLength(bpm);\n    let barPostions = [];\n\n    for (let i = offset; i < channel.master.getDuration(); i += bitLength) {\n      barPostions.push(i);\n    }\n\n    let barStyle = position => ({\n      position: \"absolute\",\n      left: position + \"px\",\n      top: \"0px\",\n      width: \"1px\",\n      maxWidth: \"1px\",\n      height: \"100%\",\n      background: \"rgba(255,255,255, 0.5)\"\n    });\n\n    channel.barsElements = [];\n    barPostions.forEach(position => {\n      let bar = document.createElement(\"div\");\n      let style = barStyle(minPxPerSec * position);\n      styleApply(bar, style);\n      wrapper.appendChild(bar);\n      channel.barsElements.push(bar);\n    });\n  }\n\n  monkyMock(waveSurf) {\n    /*    waveSurf.drawer.recenter = function (percent) {\r\n          var position = this.wrapper.scrollWidth * percent;\r\n          this.recenterOnPosition(position, true);\r\n        }*/\n\n    /*waveSurf.drawer.canvasupdateProgress = function (progress) {\r\n      this.style(this.progressWave, { transform: 'scaleX(' +  progress + ')'});\r\n    }*/\n    waveSurf.drawer.progress = function (progress) {\n      var minPxDelta = 1 / this.params.pixelRatio;\n      var pos = Math.round(progress * this.width) * minPxDelta;\n\n      if (pos < this.lastPos || pos - this.lastPos >= minPxDelta) {\n        this.lastPos = pos;\n\n        if (this.params.scrollParent && this.params.autoCenter) {\n          var newPos = ~~(this.wrapper.scrollWidth * progress);\n          this.recenterOnPosition(pos);\n        }\n\n        this.updateProgress(pos);\n      }\n    };\n\n    waveSurf.drawer.recenterOnPosition = function (position, immediate) {\n      console.log(position);\n      var scrollLeft = this.wrapper.scrollLeft;\n      var half = ~~(this.wrapper.clientWidth / 2);\n      var target = position - half;\n      var offset = target - scrollLeft; //var maxScroll = this.wrapper.scrollWidth - this.wrapper.clientWidth;\n      //    if (maxScroll == 0) {\n      // no need to continue if scrollbar is not there\n      //   return;\n      //  }\n      // if the cursor is currently visible...\n\n      if (!immediate && -half <= offset && offset < half) {\n        // we'll limit the \"re-center\" rate.\n        var rate = 5;\n        offset = Math.max(-rate, Math.min(rate, offset));\n        target = scrollLeft + offset;\n      } // limit target to valid range (0 to maxScroll)\n      //  target = Math.max(0, Math.min(maxScroll, target));\n      // no use attempting to scroll if we're not moving\n\n\n      if (target != scrollLeft) {\n        //     this.wrapper.scrollLeft = target;\n        //this.wrapper._scrollLeft = target;\n        console.log(this.wrapper.firstElementChild.style.width);\n        [...this.wrapper.children].forEach(element => {\n          element.style.transform = \"translateX(-\" + target + \"px)\";\n        });\n      }\n    };\n  }\n\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/pages/app/core/console/channels/channelBuilder/channelBuilder.js"],"names":["store","config","WaveSurfer","ChannelEvnetHandler","getBeatLength","ChannelBuilder","constructor","eventHandler","dispatch","create","channelName","masterContainer","slaveContainer","mainAudioContext","channel","masterConfig","master","slaveConfig","slave","audioContext","monkyMock","__proto__","loadWithEvent","args","fireEvent","load","CreateEventHandling","createBars","bpm","offset","wrapper","drawer","styleApply","Drawer","style","minPxPerSec","params","bitLength","barPostions","i","getDuration","push","barStyle","position","left","top","width","maxWidth","height","background","barsElements","forEach","bar","document","createElement","appendChild","waveSurf","progress","minPxDelta","pixelRatio","pos","Math","round","lastPos","scrollParent","autoCenter","newPos","scrollWidth","recenterOnPosition","updateProgress","immediate","console","log","scrollLeft","half","clientWidth","target","rate","max","min","firstElementChild","children","element","transform"],"mappings":"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","sourcesContent":["import store from \"./../../../../../../store\";\r\nimport config from \"./../../../../components/Console/Deck/Player/configuration\"\r\n\r\nimport WaveSurfer from \"wavesurfer\";\r\nimport ChannelEvnetHandler from \"./../channelEvnetHandler/channelEvnetHandler\"\r\nimport { getBeatLength } from \"./../../../../../../utils/bpm/converter\";\r\n\r\n\r\n\r\nexport default class ChannelBuilder {\r\n  constructor() {\r\n    this.eventHandler = new ChannelEvnetHandler();\r\n    this.dispatch = store.dispatch;\r\n  }\r\n\r\n  create(channelName, masterContainer, slaveContainer, mainAudioContext) {\r\n    let channel = { channelName, masterContainer, slaveContainer };\r\n\r\n    //--configs\r\n    channel.masterConfig = config.master(masterContainer, channelName);\r\n    channel.slaveConfig = config.slave(slaveContainer, channelName);\r\n\r\n    //--master waveSurfer obj\r\n    channel.masterConfig.audioContext = mainAudioContext;\r\n    channel.master = WaveSurfer.create(channel.masterConfig);\r\n    this.monkyMock(channel.master)\r\n\r\n    channel.master.__proto__.loadWithEvent = function (...args) {\r\n      this.fireEvent(\"load\");\r\n      this.load(...args);\r\n    };\r\n\r\n    channel.slave = WaveSurfer.create(channel.slaveConfig);\r\n\r\n    this.eventHandler.CreateEventHandling(channel)\r\n\r\n    return channel;\r\n  }\r\n\r\n  //!!! turn off !\r\n  createBars(channel, { bpm, offset }) {\r\n    return\r\n    let wrapper = channel.master.drawer.wrapper;\r\n    let styleApply = WaveSurfer.Drawer.style;\r\n    let minPxPerSec = channel.master.params.minPxPerSec;\r\n    let bitLength = getBeatLength(bpm);\r\n\r\n    let barPostions = [];\r\n\r\n    for (let i = offset; i < channel.master.getDuration(); i += bitLength) {\r\n      barPostions.push(i);\r\n    }\r\n\r\n    let barStyle = position => ({\r\n      position: \"absolute\",\r\n      left: position + \"px\",\r\n      top: \"0px\",\r\n      width: \"1px\",\r\n      maxWidth: \"1px\",\r\n      height: \"100%\",\r\n      background: \"rgba(255,255,255, 0.5)\"\r\n    });\r\n\r\n    channel.barsElements = [];\r\n    barPostions.forEach(position => {\r\n      let bar = document.createElement(\"div\");\r\n      let style = barStyle(minPxPerSec * position);\r\n      styleApply(bar, style);\r\n      wrapper.appendChild(bar);\r\n      channel.barsElements.push(bar);\r\n    });\r\n  }\r\n\r\n  monkyMock(waveSurf) {\r\n    /*    waveSurf.drawer.recenter = function (percent) {\r\n          var position = this.wrapper.scrollWidth * percent;\r\n          this.recenterOnPosition(position, true);\r\n        }*/\r\n\r\n    /*waveSurf.drawer.canvasupdateProgress = function (progress) {\r\n      this.style(this.progressWave, { transform: 'scaleX(' +  progress + ')'});\r\n    }*/\r\n\r\n    waveSurf.drawer.progress = function (progress) {\r\n      var minPxDelta = 1 / this.params.pixelRatio;\r\n      var pos = Math.round(progress * this.width) * minPxDelta;\r\n\r\n      if (pos < this.lastPos || pos - this.lastPos >= minPxDelta) {\r\n          this.lastPos = pos;\r\n\r\n          if (this.params.scrollParent && this.params.autoCenter) {\r\n              var newPos = ~~(this.wrapper.scrollWidth * progress);\r\n              this.recenterOnPosition(pos);\r\n          }\r\n\r\n          this.updateProgress(pos);\r\n      }\r\n    };\r\n\r\n    waveSurf.drawer.recenterOnPosition = function (position, immediate) {\r\n      console.log(position)\r\n      var scrollLeft = this.wrapper.scrollLeft;\r\n      var half = ~~(this.wrapper.clientWidth / 2);\r\n      var target = position - half;\r\n      var offset = target - scrollLeft;\r\n      //var maxScroll = this.wrapper.scrollWidth - this.wrapper.clientWidth;\r\n\r\n  //    if (maxScroll == 0) {\r\n        // no need to continue if scrollbar is not there\r\n     //   return;\r\n    //  }\r\n\r\n      // if the cursor is currently visible...\r\n      if (!immediate && -half <= offset && offset < half) {\r\n        // we'll limit the \"re-center\" rate.\r\n        var rate = 5;\r\n        offset = Math.max(-rate, Math.min(rate, offset));\r\n        target = scrollLeft + offset;\r\n      }\r\n\r\n      // limit target to valid range (0 to maxScroll)\r\n    //  target = Math.max(0, Math.min(maxScroll, target));\r\n      // no use attempting to scroll if we're not moving\r\n      if (target != scrollLeft) {\r\n   //     this.wrapper.scrollLeft = target;\r\n        //this.wrapper._scrollLeft = target;\r\n        console.log(this.wrapper.firstElementChild.style.width);\r\n        [...this.wrapper.children].forEach(element => {\r\n          element.style.transform = \"translateX(-\" + target + \"px)\"\r\n        })\r\n\r\n      }\r\n\r\n    }\r\n  }\r\n\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}