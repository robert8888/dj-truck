{"ast":null,"code":"import { ACTIONS, startRecording, recordingRquestFail } from \"../../actions\";\nimport { takeEvery, select, put } from \"redux-saga/effects\";\nimport { getApi } from \"./../../apis/apiProvider\";\nimport { format } from 'date-fns';\nexport default function* createRecordRequest() {\n  yield takeEvery(ACTIONS.R_CREATE_RECORD_REQEST, handel);\n}\n\nconst getToken = state => state.user.token;\n\nconst getInitTracklist = state => {};\n\nfunction* handel(action) {\n  const token = yield select(getToken);\n\n  if (token) {\n    try {\n      var _action$recName, _result$data, _result$data$createRe;\n\n      const {\n        callQuery,\n        queries\n      } = getApi(\"UserAssets\");\n      let title = ((_action$recName = action.recName) === null || _action$recName === void 0 ? void 0 : _action$recName.split(\"_\").join(\" \")) || \"Record \" + format(new Date(), 'yy-MM-dd HH:mm');\n      const query = queries.createRecordQl(title);\n      const result = yield callQuery(query, token);\n      const id = result === null || result === void 0 ? void 0 : (_result$data = result.data) === null || _result$data === void 0 ? void 0 : (_result$data$createRe = _result$data.createRecord) === null || _result$data$createRe === void 0 ? void 0 : _result$data$createRe.id;\n      let tracklist;\n\n      if (id) {\n        tracklist = yield select(getInitTracklist);\n      }\n\n      if (!result.errors && id) {\n        yield put(startRecording(title, id, trakclist));\n      } else {\n        throw new Error(\"Create new record metadata fails\");\n      }\n    } catch {\n      yield put(recordingRquestFail());\n    }\n  }\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/sagas/recorder/createRecordRequestSaga.js"],"names":["ACTIONS","startRecording","recordingRquestFail","takeEvery","select","put","getApi","format","createRecordRequest","R_CREATE_RECORD_REQEST","handel","getToken","state","user","token","getInitTracklist","action","callQuery","queries","title","recName","split","join","Date","query","createRecordQl","result","id","data","createRecord","tracklist","errors","trakclist","Error"],"mappings":"AAAA,SAAUA,OAAV,EAAoBC,cAApB,EAAoCC,mBAApC,QAA+D,eAA/D;AACA,SAASC,SAAT,EAAoBC,MAApB,EAA4BC,GAA5B,QAAuC,oBAAvC;AACA,SAASC,MAAT,QAAuB,0BAAvB;AACA,SAASC,MAAT,QAAuB,UAAvB;AAEA,eAAe,UAAUC,mBAAV,GAAgC;AAC3C,QAAML,SAAS,CAACH,OAAO,CAACS,sBAAT,EAAiCC,MAAjC,CAAf;AACH;;AAED,MAAMC,QAAQ,GAAGC,KAAK,IAAIA,KAAK,CAACC,IAAN,CAAWC,KAArC;;AAGA,MAAMC,gBAAgB,GAAGH,KAAK,IAAI,CAEjC,CAFD;;AAIA,UAAUF,MAAV,CAAiBM,MAAjB,EAAyB;AACrB,QAAMF,KAAK,GAAG,MAAMV,MAAM,CAACO,QAAD,CAA1B;;AAEA,MAAGG,KAAH,EAAS;AACL,QAAG;AAAA;;AACC,YAAM;AAAEG,QAAAA,SAAF;AAAcC,QAAAA;AAAd,UAA0BZ,MAAM,CAAC,YAAD,CAAtC;AACA,UAAIa,KAAK,GAAG,oBAAAH,MAAM,CAACI,OAAP,oEAAgBC,KAAhB,CAAsB,GAAtB,EAA2BC,IAA3B,CAAgC,GAAhC,MAAwC,YAAYf,MAAM,CAAC,IAAIgB,IAAJ,EAAD,EAAa,gBAAb,CAAtE;AACA,YAAMC,KAAK,GAAGN,OAAO,CAACO,cAAR,CAAuBN,KAAvB,CAAd;AACA,YAAMO,MAAM,GAAG,MAAMT,SAAS,CAACO,KAAD,EAAQV,KAAR,CAA9B;AACA,YAAMa,EAAE,GAAGD,MAAH,aAAGA,MAAH,uCAAGA,MAAM,CAAEE,IAAX,0EAAG,aAAcC,YAAjB,0DAAG,sBAA4BF,EAAvC;AACA,UAAIG,SAAJ;;AACA,UAAGH,EAAH,EAAM;AACFG,QAAAA,SAAS,GAAG,MAAM1B,MAAM,CAACW,gBAAD,CAAxB;AACH;;AACD,UAAG,CAACW,MAAM,CAACK,MAAR,IAAkBJ,EAArB,EAAwB;AACpB,cAAMtB,GAAG,CAACJ,cAAc,CAACkB,KAAD,EAAQQ,EAAR,EAAYK,SAAZ,CAAf,CAAT;AACH,OAFD,MAEO;AACH,cAAM,IAAIC,KAAJ,CAAU,kCAAV,CAAN;AACH;AACJ,KAfD,CAeE,MAAM;AACJ,YAAM5B,GAAG,CAACH,mBAAmB,EAApB,CAAT;AACH;AAEJ;AAEJ","sourcesContent":["import {  ACTIONS,  startRecording, recordingRquestFail } from \"../../actions\";\r\nimport { takeEvery, select, put,} from \"redux-saga/effects\";\r\nimport { getApi } from \"./../../apis/apiProvider\";\r\nimport { format } from 'date-fns'\r\n\r\nexport default function* createRecordRequest() {\r\n    yield takeEvery(ACTIONS.R_CREATE_RECORD_REQEST, handel)\r\n}\r\n\r\nconst getToken = state => state.user.token\r\n\r\n\r\nconst getInitTracklist = state => {\r\n\r\n}\r\n\r\nfunction* handel(action) {\r\n    const token = yield select(getToken);\r\n\r\n    if(token){\r\n        try{\r\n            const { callQuery , queries } = getApi(\"UserAssets\");\r\n            let title = action.recName?.split(\"_\").join(\" \") || \"Record \" + format(new Date(), 'yy-MM-dd HH:mm')\r\n            const query = queries.createRecordQl(title);\r\n            const result = yield callQuery(query, token);\r\n            const id = result?.data?.createRecord?.id;\r\n            let tracklist;\r\n            if(id){\r\n                tracklist = yield select(getInitTracklist);\r\n            }\r\n            if(!result.errors && id){\r\n                yield put(startRecording(title, id, trakclist))\r\n            } else {\r\n                throw new Error(\"Create new record metadata fails\")\r\n            }  \r\n        } catch {\r\n            yield put(recordingRquestFail())\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}