{"ast":null,"code":"import Effect from \"../effect\";\nexport default class Quadrafuzz extends Effect {\n  static defaultParams() {\n    return {\n      params: {\n        lowGain: {\n          min: 0,\n          max: 100,\n          defaultValue: 0,\n          type: \"float\",\n          description: \"low\"\n        },\n        midLowGain: {\n          min: 0,\n          max: 100,\n          defaultValue: 0,\n          type: \"float\",\n          description: \"m-low\"\n        },\n        midHighGain: {\n          min: 0,\n          max: 100,\n          defaultValue: 0,\n          type: \"float\",\n          description: \"m-high\"\n        },\n        highGain: {\n          min: 0,\n          max: 100,\n          defaultValue: 0,\n          type: \"float\",\n          description: \"high\"\n        }\n      }\n    };\n  }\n\n  constructor(context, params) {\n    super();\n    this._context = context;\n    this._default = Quadrafuzz.defaultParams().params;\n\n    this._buildNodes();\n\n    this._initParams(params);\n  }\n\n  _buildNodes() {\n    this.inputNode = this._context.createGain();\n    this.outputNode = this._context.createGain();\n    this.wetGainNode = this._context.createGain();\n    this.lowpassLeft = this._context.createBiquadFilter();\n    this.lowpassLeft.type = 'lowpass';\n    this.lowpassLeft.frequency.value = 147;\n    this.lowpassLeft.Q.value = 0.7071;\n    this.bandpass1Left = this._context.createBiquadFilter();\n    this.bandpass1Left.type = 'bandpass';\n    this.bandpass1Left.frequency.value = 587;\n    this.bandpass1Left.Q.value = 0.7071;\n    this.bandpass2Left = this._context.createBiquadFilter();\n    this.bandpass2Left.type = 'bandpass';\n    this.bandpass2Left.frequency.value = 2490;\n    this.bandpass2Left.Q.value = 0.7071;\n    this.highpassLeft = this._context.createBiquadFilter();\n    this.highpassLeft.type = 'highpass';\n    this.highpassLeft.frequency.value = 4980;\n    this.highpassLeft.Q.value = 0.7071;\n    this.overdrives = [];\n\n    for (var i = 0; i < 4; i++) {\n      this.overdrives[i] = this._context.createWaveShaper();\n      this.overdrives[i].curve = this.getDistortionCurve();\n    }\n\n    this.inputNode.connect(this.wetGainNode);\n    var filters = [this.lowpassLeft, this.bandpass1Left, this.bandpass2Left, this.highpassLeft];\n\n    for (i = 0; i < filters.length; i++) {\n      this.wetGainNode.connect(filters[i]);\n      filters[i].connect(this.overdrives[i]);\n      this.overdrives[i].connect(this.outputNode);\n    }\n  }\n\n  getDistortionCurve(gain) {\n    var sampleRate = this._context.sampleRate;\n    var curve = new Float32Array(sampleRate);\n    var deg = Math.PI / 180;\n\n    for (var i = 0; i < sampleRate; i++) {\n      var x = i * 2 / sampleRate - 1;\n      curve[i] = (3 + gain) * x * 20 * deg / (Math.PI + gain * Math.abs(x));\n    }\n\n    return curve;\n  }\n\n  get name() {\n    return \"Quadrafuzz\";\n  }\n\n  get lowGain() {\n    return this._lowGain;\n  }\n\n  set lowGain(value) {\n    value = this._valueToRange(value, \"lowGain\");\n    this._lowGain = value;\n    this.overdrives[0].curve = this.getDistortionCurve(this.lowGain, 0, 150);\n  }\n\n  get midLowGain() {\n    return this._midLowGain;\n  }\n\n  set midLowGain(value) {\n    value = this._valueToRange(value, \"midLowGain\");\n    this._midLowGain = value;\n    this.overdrives[1].curve = this.getDistortionCurve(this.midLowGain, 0, 150);\n  }\n\n  get midHighGain() {\n    return this._midHighGain;\n  }\n\n  set midHighGain(value) {\n    value = this._valueToRange(value, \"midHighGain\");\n    this._midHighGain = value;\n    this.overdrives[2].curve = this.getDistortionCurve(this.midHighGain, 0, 150);\n  }\n\n  get highGain() {\n    return this._highGain;\n  }\n\n  set highGain(value) {\n    value = this._valueToRange(value, \"highGain\");\n    this._highGain = value;\n    this.overdrives[3].curve = this.getDistortionCurve(this.highGain, 0, 150);\n  }\n\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/pages/app/core/console/effector/effects/quadrafuzz/quadrafuzz.js"],"names":["Effect","Quadrafuzz","defaultParams","params","lowGain","min","max","defaultValue","type","description","midLowGain","midHighGain","highGain","constructor","context","_context","_default","_buildNodes","_initParams","inputNode","createGain","outputNode","wetGainNode","lowpassLeft","createBiquadFilter","frequency","value","Q","bandpass1Left","bandpass2Left","highpassLeft","overdrives","i","createWaveShaper","curve","getDistortionCurve","connect","filters","length","gain","sampleRate","Float32Array","deg","Math","PI","x","abs","name","_lowGain","_valueToRange","_midLowGain","_midHighGain","_highGain"],"mappings":"AACA,OAAOA,MAAP,MAAmB,WAAnB;AAEA,eAAe,MAAMC,UAAN,SAAyBD,MAAzB,CAA+B;AAE1C,SAAOE,aAAP,GAAsB;AAClB,WAAO;AACHC,MAAAA,MAAM,EAAG;AACLC,QAAAA,OAAO,EAAE;AACLC,UAAAA,GAAG,EAAE,CADA;AAELC,UAAAA,GAAG,EAAE,GAFA;AAGLC,UAAAA,YAAY,EAAE,CAHT;AAILC,UAAAA,IAAI,EAAE,OAJD;AAKLC,UAAAA,WAAW,EAAG;AALT,SADJ;AAQLC,QAAAA,UAAU,EAAE;AACRL,UAAAA,GAAG,EAAE,CADG;AAERC,UAAAA,GAAG,EAAE,GAFG;AAGRC,UAAAA,YAAY,EAAE,CAHN;AAIRC,UAAAA,IAAI,EAAE,OAJE;AAKRC,UAAAA,WAAW,EAAE;AALL,SARP;AAeLE,QAAAA,WAAW,EAAE;AACTN,UAAAA,GAAG,EAAE,CADI;AAETC,UAAAA,GAAG,EAAE,GAFI;AAGTC,UAAAA,YAAY,EAAE,CAHL;AAITC,UAAAA,IAAI,EAAE,OAJG;AAKTC,UAAAA,WAAW,EAAE;AALJ,SAfR;AAsBLG,QAAAA,QAAQ,EAAE;AACNP,UAAAA,GAAG,EAAE,CADC;AAENC,UAAAA,GAAG,EAAE,GAFC;AAGNC,UAAAA,YAAY,EAAE,CAHR;AAINC,UAAAA,IAAI,EAAE,OAJA;AAKNC,UAAAA,WAAW,EAAE;AALP;AAtBL;AADN,KAAP;AAgCH;;AACDI,EAAAA,WAAW,CAACC,OAAD,EAAUX,MAAV,EAAiB;AACxB;AACA,SAAKY,QAAL,GAAgBD,OAAhB;AACA,SAAKE,QAAL,GAAgBf,UAAU,CAACC,aAAX,GAA2BC,MAA3C;;AAEA,SAAKc,WAAL;;AACA,SAAKC,WAAL,CAAiBf,MAAjB;AACH;;AAEDc,EAAAA,WAAW,GAAE;AACT,SAAKE,SAAL,GAAiB,KAAKJ,QAAL,CAAcK,UAAd,EAAjB;AACA,SAAKC,UAAL,GAAkB,KAAKN,QAAL,CAAcK,UAAd,EAAlB;AACA,SAAKE,WAAL,GAAmB,KAAKP,QAAL,CAAcK,UAAd,EAAnB;AAGA,SAAKG,WAAL,GAAmB,KAAKR,QAAL,CAAcS,kBAAd,EAAnB;AACA,SAAKD,WAAL,CAAiBf,IAAjB,GAAwB,SAAxB;AACA,SAAKe,WAAL,CAAiBE,SAAjB,CAA2BC,KAA3B,GAAmC,GAAnC;AACA,SAAKH,WAAL,CAAiBI,CAAjB,CAAmBD,KAAnB,GAA2B,MAA3B;AAEA,SAAKE,aAAL,GAAqB,KAAKb,QAAL,CAAcS,kBAAd,EAArB;AACA,SAAKI,aAAL,CAAmBpB,IAAnB,GAA0B,UAA1B;AACA,SAAKoB,aAAL,CAAmBH,SAAnB,CAA6BC,KAA7B,GAAqC,GAArC;AACA,SAAKE,aAAL,CAAmBD,CAAnB,CAAqBD,KAArB,GAA6B,MAA7B;AAEA,SAAKG,aAAL,GAAqB,KAAKd,QAAL,CAAcS,kBAAd,EAArB;AACA,SAAKK,aAAL,CAAmBrB,IAAnB,GAA0B,UAA1B;AACA,SAAKqB,aAAL,CAAmBJ,SAAnB,CAA6BC,KAA7B,GAAqC,IAArC;AACA,SAAKG,aAAL,CAAmBF,CAAnB,CAAqBD,KAArB,GAA6B,MAA7B;AAEA,SAAKI,YAAL,GAAoB,KAAKf,QAAL,CAAcS,kBAAd,EAApB;AACA,SAAKM,YAAL,CAAkBtB,IAAlB,GAAyB,UAAzB;AACA,SAAKsB,YAAL,CAAkBL,SAAlB,CAA4BC,KAA5B,GAAoC,IAApC;AACA,SAAKI,YAAL,CAAkBH,CAAlB,CAAoBD,KAApB,GAA4B,MAA5B;AAGA,SAAKK,UAAL,GAAkB,EAAlB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AACxB,WAAKD,UAAL,CAAgBC,CAAhB,IAAqB,KAAKjB,QAAL,CAAckB,gBAAd,EAArB;AACA,WAAKF,UAAL,CAAgBC,CAAhB,EAAmBE,KAAnB,GAA2B,KAAKC,kBAAL,EAA3B;AACH;;AAGD,SAAKhB,SAAL,CAAeiB,OAAf,CAAuB,KAAKd,WAA5B;AAGA,QAAIe,OAAO,GAAG,CAAC,KAAKd,WAAN,EAAmB,KAAKK,aAAxB,EAAuC,KAAKC,aAA5C,EAA2D,KAAKC,YAAhE,CAAd;;AACA,SAAKE,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGK,OAAO,CAACC,MAAxB,EAAgCN,CAAC,EAAjC,EAAqC;AACjC,WAAKV,WAAL,CAAiBc,OAAjB,CAAyBC,OAAO,CAACL,CAAD,CAAhC;AACAK,MAAAA,OAAO,CAACL,CAAD,CAAP,CAAWI,OAAX,CAAmB,KAAKL,UAAL,CAAgBC,CAAhB,CAAnB;AACA,WAAKD,UAAL,CAAgBC,CAAhB,EAAmBI,OAAnB,CAA2B,KAAKf,UAAhC;AACH;AACJ;;AAEDc,EAAAA,kBAAkB,CAACI,IAAD,EAAO;AACrB,QAAIC,UAAU,GAAG,KAAKzB,QAAL,CAAcyB,UAA/B;AACA,QAAIN,KAAK,GAAG,IAAIO,YAAJ,CAAiBD,UAAjB,CAAZ;AACA,QAAIE,GAAG,GAAGC,IAAI,CAACC,EAAL,GAAU,GAApB;;AAEA,SAAK,IAAIZ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGQ,UAApB,EAAgCR,CAAC,EAAjC,EAAqC;AACjC,UAAIa,CAAC,GAAGb,CAAC,GAAG,CAAJ,GAAQQ,UAAR,GAAqB,CAA7B;AACAN,MAAAA,KAAK,CAACF,CAAD,CAAL,GAAW,CAAC,IAAIO,IAAL,IAAaM,CAAb,GAAiB,EAAjB,GAAsBH,GAAtB,IAA6BC,IAAI,CAACC,EAAL,GAAUL,IAAI,GAAGI,IAAI,CAACG,GAAL,CAASD,CAAT,CAA9C,CAAX;AACH;;AACD,WAAOX,KAAP;AACH;;AAED,MAAIa,IAAJ,GAAU;AACN,WAAO,YAAP;AACH;;AAED,MAAI3C,OAAJ,GAAa;AACT,WAAO,KAAK4C,QAAZ;AACH;;AAED,MAAI5C,OAAJ,CAAYsB,KAAZ,EAAkB;AACdA,IAAAA,KAAK,GAAG,KAAKuB,aAAL,CAAmBvB,KAAnB,EAA0B,SAA1B,CAAR;AACA,SAAKsB,QAAL,GAAgBtB,KAAhB;AACA,SAAKK,UAAL,CAAgB,CAAhB,EAAmBG,KAAnB,GAA2B,KAAKC,kBAAL,CAAwB,KAAK/B,OAA7B,EAAsC,CAAtC,EAAyC,GAAzC,CAA3B;AACH;;AAED,MAAIM,UAAJ,GAAgB;AACZ,WAAO,KAAKwC,WAAZ;AACH;;AAED,MAAIxC,UAAJ,CAAegB,KAAf,EAAqB;AACjBA,IAAAA,KAAK,GAAG,KAAKuB,aAAL,CAAmBvB,KAAnB,EAA0B,YAA1B,CAAR;AACA,SAAKwB,WAAL,GAAmBxB,KAAnB;AACA,SAAKK,UAAL,CAAgB,CAAhB,EAAmBG,KAAnB,GAA2B,KAAKC,kBAAL,CAAwB,KAAKzB,UAA7B,EAAyC,CAAzC,EAA4C,GAA5C,CAA3B;AACH;;AAED,MAAIC,WAAJ,GAAiB;AACb,WAAO,KAAKwC,YAAZ;AACH;;AAED,MAAIxC,WAAJ,CAAgBe,KAAhB,EAAsB;AAClBA,IAAAA,KAAK,GAAG,KAAKuB,aAAL,CAAmBvB,KAAnB,EAA0B,aAA1B,CAAR;AACA,SAAKyB,YAAL,GAAmBzB,KAAnB;AACA,SAAKK,UAAL,CAAgB,CAAhB,EAAmBG,KAAnB,GAA2B,KAAKC,kBAAL,CAAwB,KAAKxB,WAA7B,EAA0C,CAA1C,EAA6C,GAA7C,CAA3B;AACH;;AAED,MAAIC,QAAJ,GAAc;AACV,WAAO,KAAKwC,SAAZ;AACH;;AAED,MAAIxC,QAAJ,CAAac,KAAb,EAAmB;AACfA,IAAAA,KAAK,GAAG,KAAKuB,aAAL,CAAmBvB,KAAnB,EAA0B,UAA1B,CAAR;AACA,SAAK0B,SAAL,GAAgB1B,KAAhB;AACA,SAAKK,UAAL,CAAgB,CAAhB,EAAmBG,KAAnB,GAA2B,KAAKC,kBAAL,CAAwB,KAAKvB,QAA7B,EAAuC,CAAvC,EAA0C,GAA1C,CAA3B;AACH;;AAhJyC","sourcesContent":["\r\nimport Effect from \"../effect\";\r\n\r\nexport default class Quadrafuzz extends Effect{\r\n\r\n    static defaultParams(){\r\n        return {\r\n            params : {\r\n                lowGain: {\r\n                    min: 0,\r\n                    max: 100,\r\n                    defaultValue: 0,\r\n                    type: \"float\",\r\n                    description : \"low\"\r\n                },\r\n                midLowGain: {\r\n                    min: 0,\r\n                    max: 100,\r\n                    defaultValue: 0,\r\n                    type: \"float\",\r\n                    description: \"m-low\"\r\n                },\r\n                midHighGain: {\r\n                    min: 0,\r\n                    max: 100,\r\n                    defaultValue: 0,\r\n                    type: \"float\",\r\n                    description: \"m-high\"\r\n                },\r\n                highGain: {\r\n                    min: 0,\r\n                    max: 100,\r\n                    defaultValue: 0,\r\n                    type: \"float\",\r\n                    description: \"high\"\r\n                },\r\n            }\r\n        }\r\n    }\r\n    constructor(context, params){\r\n        super();\r\n        this._context = context;\r\n        this._default = Quadrafuzz.defaultParams().params;\r\n\r\n        this._buildNodes();\r\n        this._initParams(params);\r\n    }\r\n\r\n    _buildNodes(){\r\n        this.inputNode = this._context.createGain();\r\n        this.outputNode = this._context.createGain();\r\n        this.wetGainNode = this._context.createGain();\r\n\r\n\r\n        this.lowpassLeft = this._context.createBiquadFilter();\r\n        this.lowpassLeft.type = 'lowpass';\r\n        this.lowpassLeft.frequency.value = 147;\r\n        this.lowpassLeft.Q.value = 0.7071;\r\n\r\n        this.bandpass1Left = this._context.createBiquadFilter();\r\n        this.bandpass1Left.type = 'bandpass';\r\n        this.bandpass1Left.frequency.value = 587;\r\n        this.bandpass1Left.Q.value = 0.7071;\r\n\r\n        this.bandpass2Left = this._context.createBiquadFilter();\r\n        this.bandpass2Left.type = 'bandpass';\r\n        this.bandpass2Left.frequency.value = 2490;\r\n        this.bandpass2Left.Q.value = 0.7071;\r\n\r\n        this.highpassLeft = this._context.createBiquadFilter();\r\n        this.highpassLeft.type = 'highpass';\r\n        this.highpassLeft.frequency.value = 4980;\r\n        this.highpassLeft.Q.value = 0.7071;\r\n\r\n\r\n        this.overdrives = [];\r\n        for (var i = 0; i < 4; i++) {\r\n            this.overdrives[i] = this._context.createWaveShaper();\r\n            this.overdrives[i].curve = this.getDistortionCurve();\r\n        }\r\n\r\n\r\n        this.inputNode.connect(this.wetGainNode);\r\n\r\n\r\n        var filters = [this.lowpassLeft, this.bandpass1Left, this.bandpass2Left, this.highpassLeft];\r\n        for (i = 0; i < filters.length; i++) {\r\n            this.wetGainNode.connect(filters[i]);\r\n            filters[i].connect(this.overdrives[i]);\r\n            this.overdrives[i].connect(this.outputNode);\r\n        }\r\n    }\r\n\r\n    getDistortionCurve(gain) {\r\n        var sampleRate = this._context.sampleRate;\r\n        var curve = new Float32Array(sampleRate);\r\n        var deg = Math.PI / 180;\r\n    \r\n        for (var i = 0; i < sampleRate; i++) {\r\n            var x = i * 2 / sampleRate - 1;\r\n            curve[i] = (3 + gain) * x * 20 * deg / (Math.PI + gain * Math.abs(x));\r\n        }\r\n        return curve;\r\n    }\r\n\r\n    get name(){\r\n        return \"Quadrafuzz\"\r\n    }\r\n\r\n    get lowGain(){\r\n        return this._lowGain;\r\n    }\r\n    \r\n    set lowGain(value){\r\n        value = this._valueToRange(value, \"lowGain\");\r\n        this._lowGain = value;\r\n        this.overdrives[0].curve = this.getDistortionCurve(this.lowGain, 0, 150);\r\n    }\r\n\r\n    get midLowGain(){\r\n        return this._midLowGain;\r\n    }\r\n\r\n    set midLowGain(value){\r\n        value = this._valueToRange(value, \"midLowGain\");\r\n        this._midLowGain = value;\r\n        this.overdrives[1].curve = this.getDistortionCurve(this.midLowGain, 0, 150);\r\n    }\r\n\r\n    get midHighGain(){\r\n        return this._midHighGain;\r\n    }\r\n\r\n    set midHighGain(value){\r\n        value = this._valueToRange(value, \"midHighGain\");\r\n        this._midHighGain =value;\r\n        this.overdrives[2].curve = this.getDistortionCurve(this.midHighGain, 0, 150);\r\n    }\r\n\r\n    get highGain(){\r\n        return this._highGain;\r\n    }\r\n\r\n    set highGain(value){\r\n        value = this._valueToRange(value, \"highGain\");\r\n        this._highGain =value;\r\n        this.overdrives[3].curve = this.getDistortionCurve(this.highGain, 0, 150)\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}