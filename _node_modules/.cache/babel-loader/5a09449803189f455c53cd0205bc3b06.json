{"ast":null,"code":"import { renameSelected, ACTIONS } from \"../../actions\";\nimport { takeEvery, select, put } from \"redux-saga/effects\";\nimport { getApi } from \"./../../apis/apiProvider\"; // import { renameDir, renamePlaylist } from \"./../../qlQueries/rename\";\n\nimport { get } from \"lodash/object\";\nimport { generateTemplateName as generateName, findClosesDir } from \"./../../reducers/console/playlist/utils\";\nexport default function* renameSelectedRequestSaga() {\n  yield takeEvery(ACTIONS.PL_RENAME_SELECTED_REQUEST, callApi);\n}\n\nconst getToken = state => state.user.token;\n\nconst getCurrentSelection = state => state.playList.currentSelection;\n\nconst getCurrent = (state, path) => get(state.playList, path);\n\nconst parentDirPath = (state, path) => findClosesDir(state.playList, path);\n\nconst parseName = (state, path, name) => generateName(state.playList, path, name);\n\nfunction* callApi(action) {\n  const {\n    callQuery,\n    queries\n  } = getApi(\"UserAssets\");\n  const token = yield select(getToken);\n\n  if (!token) {\n    yield put(renameSelected(action.name));\n    return;\n  }\n\n  try {\n    const currentSelection = yield select(getCurrentSelection);\n    const current = yield select(getCurrent, currentSelection);\n    const parentPath = yield select(parentDirPath, currentSelection);\n    const id = current._id;\n    const isPlaylist = current instanceof Array;\n    const name = yield select(parseName, parentPath, action.name);\n    console.log(\"current in rename\", current._id, current);\n\n    if (!id) {\n      console.log(\"no id in reanem\");\n      return;\n    }\n\n    let query;\n\n    if (isPlaylist) {\n      query = queries.renameQl.renamePlaylist(id, name);\n    } else {\n      // dir\n      query = queries.renameQl.renameDir(id, name);\n    }\n\n    let res = yield callQuery(query, token);\n    console.log(\"rendame response\", res);\n\n    if (!res.erorrs) {\n      console.log(\"dispatch rename\");\n      yield put(renameSelected(name));\n    } else {\n      throw new Error(JSON.stringify(res.errors));\n    }\n  } catch (err) {\n    console.log(\"Can't reaname element in database. Api call problem\");\n    console.log(err.message);\n  }\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/sagas/playlists/renameSelectedSaga.js"],"names":["renameSelected","ACTIONS","takeEvery","select","put","getApi","get","generateTemplateName","generateName","findClosesDir","renameSelectedRequestSaga","PL_RENAME_SELECTED_REQUEST","callApi","getToken","state","user","token","getCurrentSelection","playList","currentSelection","getCurrent","path","parentDirPath","parseName","name","action","callQuery","queries","current","parentPath","id","_id","isPlaylist","Array","console","log","query","renameQl","renamePlaylist","renameDir","res","erorrs","Error","JSON","stringify","errors","err","message"],"mappings":"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","sourcesContent":["import { renameSelected, ACTIONS } from \"../../actions\";\r\nimport { takeEvery, select, put } from \"redux-saga/effects\"\r\nimport { getApi } from \"./../../apis/apiProvider\";\r\n// import { renameDir, renamePlaylist } from \"./../../qlQueries/rename\";\r\nimport { get } from \"lodash/object\";\r\nimport { \r\n    generateTemplateName as generateName, \r\n    findClosesDir    \r\n    } from \"./../../reducers/console/playlist/utils\"\r\n\r\nexport default function* renameSelectedRequestSaga() {\r\n    yield takeEvery(ACTIONS.PL_RENAME_SELECTED_REQUEST, callApi)\r\n}\r\n\r\nconst getToken = state => state.user.token;\r\n\r\nconst getCurrentSelection = state => state.playList.currentSelection;\r\n\r\nconst getCurrent = (state, path) => get(state.playList, path);\r\n\r\nconst parentDirPath = (state , path) => findClosesDir(state.playList, path);\r\n\r\nconst parseName = (state, path, name) => generateName(state.playList, path, name);\r\n\r\nfunction* callApi(action) {\r\n    const { callQuery , queries} = getApi(\"UserAssets\");\r\n    const token = yield select(getToken);\r\n    if(!token){\r\n        yield put(renameSelected(action.name));\r\n        return;\r\n    }\r\n    try{\r\n        const currentSelection = yield select(getCurrentSelection);\r\n        const current = yield select(getCurrent, currentSelection);\r\n        const parentPath = yield select(parentDirPath, currentSelection);\r\n    \r\n        const id = current._id;\r\n        const isPlaylist = current instanceof Array;\r\n     \r\n        const name = yield select(parseName, parentPath, action.name)\r\n        console.log(\"current in rename\", current._id, current);\r\n    \r\n        if(!id){\r\n            console.log(\"no id in reanem\");\r\n            return;\r\n        }\r\n    \r\n        let query;\r\n        if (isPlaylist) {\r\n            query = queries.renameQl.renamePlaylist(id, name)\r\n        } else { // dir\r\n            query = queries.renameQl.renameDir(id, name)\r\n        }\r\n    \r\n        let res = yield callQuery(query, token);\r\n        console.log(\"rendame response\", res)\r\n        if (!res.erorrs) {\r\n            console.log(\"dispatch rename\")\r\n            yield put(renameSelected(name));\r\n        } else {\r\n            throw new Error(JSON.stringify(res.errors))\r\n        }\r\n    } catch (err){\r\n        console.log(\"Can't reaname element in database. Api call problem\");\r\n        console.log(err.message);\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}