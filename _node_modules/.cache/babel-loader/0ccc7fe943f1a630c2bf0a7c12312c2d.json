{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\src\\\\pages\\\\console\\\\components\\\\Console\\\\Mixer\\\\Recorder\\\\Recorder.js\";\nimport React, { useState, useCallback, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { createRecordinRequest, endRecording } from \"./../../../../../../actions\";\nimport RecordButton from \"./../componets/RecordButton/RecordButton\";\nimport RecordNameInput from \"./../componets/RecordNameInput/RecordNameInput\";\nimport RecordTime from \"../componets/RecordTime/RecordTime\";\nimport RECORDER_STATE from \"./../../../../../../reducers/console/recorder/stateDef\";\nimport \"./recorder.scss\";\n\nconst Recorder = ({\n  recordingState,\n  startRecording,\n  endRecording,\n  userLogged\n}) => {\n  const [buttonDisabled, setButtonDisabled] = useState(false);\n  const [inputDisabled, setInputDisabled] = useState(false);\n  const [timeRuning, setTimeRuning] = useState(false);\n  const [prepering, setPrepering] = useState(false);\n  const [recName, setRecName] = useState(null);\n  const [clearTime, setClearTimeHandler] = useState(null);\n  useEffect(() => {\n    setInputDisabled(!userLogged);\n    setButtonDisabled(!userLogged);\n  }, [userLogged, setButtonDisabled, setInputDisabled]);\n  const assignClearHandler = useCallback(handler => {\n    setClearTimeHandler(() => handler);\n  }, [setClearTimeHandler]);\n  const recordStateChange = useCallback(state => {\n    if (state) {\n      startRecording(recName);\n      setPrepering(true);\n    } else {\n      endRecording();\n      clearTime();\n    }\n\n    setInputDisabled(state);\n  }, [setInputDisabled, setTimeRuning, startRecording, endRecording, recName, clearTime]); //time runing after state change in respone to server\n\n  useEffect(() => {\n    // setTimeRuning(true);\n    // setPrepering(false);\n    console.log(recordingState);\n\n    switch (recordingState) {\n      case RECORDER_STATE.INIT:\n        {\n          setPrepering(true);\n          break;\n        }\n\n      case RECORDER_STATE.FAIL:\n        {\n          setPrepering(false);\n          break;\n        }\n\n      case RECORDER_STATE.RECORDING:\n        {\n          setPrepering(false);\n          setTimeRuning(true);\n          break;\n        }\n\n      case RECORDER_STATE.IDLE:\n        {\n          setPrepering(false);\n          setTimeRuning(false);\n          break;\n        }\n    }\n  }, [recordingState, setTimeRuning, setPrepering]);\n  return React.createElement(\"div\", {\n    className: \"recorder\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, \"REC\"), React.createElement(RecordButton, {\n    onChange: recordStateChange,\n    disabled: buttonDisabled,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }), React.createElement(RecordNameInput, {\n    disabled: inputDisabled,\n    onChange: str => setRecName(str),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }), React.createElement(RecordTime, {\n    prepering: prepering,\n    runing: timeRuning,\n    clearHandler: assignClearHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }));\n};\n\nconst mapStateToProps = state => ({\n  recordingState: state.recorder.recordingState,\n  userLogged: state.user.logged\n});\n\nconst mapDispatchToProps = dispatch => ({\n  startRecording: recName => dispatch(createRecordinRequest(recName)),\n  endRecording: () => dispatch(endRecording())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Recorder);","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/pages/console/components/Console/Mixer/Recorder/Recorder.js"],"names":["React","useState","useCallback","useEffect","connect","createRecordinRequest","endRecording","RecordButton","RecordNameInput","RecordTime","RECORDER_STATE","Recorder","recordingState","startRecording","userLogged","buttonDisabled","setButtonDisabled","inputDisabled","setInputDisabled","timeRuning","setTimeRuning","prepering","setPrepering","recName","setRecName","clearTime","setClearTimeHandler","assignClearHandler","handler","recordStateChange","state","console","log","INIT","FAIL","RECORDING","IDLE","str","mapStateToProps","recorder","user","logged","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useState,  useCallback, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { createRecordinRequest , endRecording } from \"./../../../../../../actions\";\r\nimport RecordButton from \"./../componets/RecordButton/RecordButton\";\r\nimport RecordNameInput from \"./../componets/RecordNameInput/RecordNameInput\";\r\nimport RecordTime from \"../componets/RecordTime/RecordTime\";\r\nimport RECORDER_STATE from \"./../../../../../../reducers/console/recorder/stateDef\";\r\nimport \"./recorder.scss\";\r\n\r\n\r\nconst Recorder = ({ recordingState, startRecording, endRecording , userLogged }) =>{\r\n    const [buttonDisabled, setButtonDisabled] = useState(false);\r\n    const [inputDisabled, setInputDisabled] = useState(false);\r\n    const [timeRuning, setTimeRuning] = useState(false)\r\n    const [prepering, setPrepering] = useState(false)\r\n    const [recName , setRecName] = useState(null);\r\n\r\n    const [clearTime , setClearTimeHandler] = useState(null);\r\n\r\n    useEffect(()=>{\r\n        setInputDisabled(!userLogged);\r\n        setButtonDisabled(!userLogged);\r\n    }, [userLogged, setButtonDisabled, setInputDisabled])\r\n\r\n    const assignClearHandler = useCallback( handler => {\r\n        setClearTimeHandler(() => handler)\r\n    }, [setClearTimeHandler])\r\n\r\n\r\n    const recordStateChange = useCallback((state)=>{\r\n        if(state){\r\n            startRecording(recName);\r\n            setPrepering(true)\r\n        } else {\r\n            endRecording();\r\n            clearTime();\r\n        }\r\n        setInputDisabled(state);\r\n    }, [setInputDisabled, \r\n        setTimeRuning, \r\n        startRecording, \r\n        endRecording, \r\n        recName, \r\n        clearTime])\r\n\r\n    //time runing after state change in respone to server\r\n    useEffect(()=>{\r\n        // setTimeRuning(true);\r\n        // setPrepering(false);\r\n        console.log(recordingState)\r\n        switch(recordingState){\r\n            case RECORDER_STATE.INIT:{\r\n                setPrepering(true);\r\n                break;\r\n            }\r\n            case RECORDER_STATE.FAIL:{\r\n                setPrepering(false);\r\n                break;\r\n            }\r\n            case RECORDER_STATE.RECORDING : {\r\n                setPrepering(false);\r\n                setTimeRuning(true);\r\n                break;\r\n            }\r\n            case RECORDER_STATE.IDLE : {\r\n                setPrepering(false);\r\n                setTimeRuning(false);\r\n                break;\r\n            }\r\n        }\r\n    }, [recordingState, setTimeRuning, setPrepering])\r\n\r\n\r\n    return (\r\n        <div className=\"recorder\">\r\n            <div className=\"label\">REC</div>\r\n            <RecordButton \r\n                onChange={recordStateChange}\r\n                disabled={buttonDisabled} />\r\n            <RecordNameInput \r\n                disabled={inputDisabled}\r\n                onChange={str => setRecName(str)}/>\r\n            <RecordTime \r\n                prepering={prepering}\r\n                runing={timeRuning} \r\n                clearHandler={ assignClearHandler }/>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    recordingState : state.recorder.recordingState,\r\n    userLogged : state.user.logged,\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    startRecording : recName => dispatch(createRecordinRequest(recName)),\r\n    endRecording : () => dispatch(endRecording())\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Recorder);"]},"metadata":{},"sourceType":"module"}