{"ast":null,"code":"import _regeneratorRuntime from \"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _objectSpread from \"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _asyncToGenerator from \"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport var createPannerNodeRendererFactory = function createPannerNodeRendererFactory(connectAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, createNativeGainNode, createNativePannerNode, getNativeAudioNode, nativeOfflineAudioContextConstructor, renderAutomation, renderInputsOfAudioNode, renderNativeOfflineAudioContext) {\n  return function () {\n    var renderedNativeAudioNodes = new WeakMap();\n    var renderedBufferPromise = null;\n\n    var createAudioNode =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(proxy, nativeOfflineAudioContext, trace) {\n        var nativeGainNode, nativePannerNode, commonAudioNodeOptions, commonNativePannerNodeOptions, nativePannerNodeIsOwnedByContext, options, _ret;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                nativeGainNode = null;\n                nativePannerNode = getNativeAudioNode(proxy);\n                commonAudioNodeOptions = {\n                  channelCount: nativePannerNode.channelCount,\n                  channelCountMode: nativePannerNode.channelCountMode,\n                  channelInterpretation: nativePannerNode.channelInterpretation\n                };\n                commonNativePannerNodeOptions = _objectSpread({}, commonAudioNodeOptions, {\n                  coneInnerAngle: nativePannerNode.coneInnerAngle,\n                  coneOuterAngle: nativePannerNode.coneOuterAngle,\n                  coneOuterGain: nativePannerNode.coneOuterGain,\n                  distanceModel: nativePannerNode.distanceModel,\n                  maxDistance: nativePannerNode.maxDistance,\n                  panningModel: nativePannerNode.panningModel,\n                  refDistance: nativePannerNode.refDistance,\n                  rolloffFactor: nativePannerNode.rolloffFactor\n                }); // If the initially used nativePannerNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n                nativePannerNodeIsOwnedByContext = isOwnedByContext(nativePannerNode, nativeOfflineAudioContext); // Bug #124: Edge & Safari do not support modifying the orientation and the position with AudioParams.\n\n                if ('bufferSize' in nativePannerNode) {\n                  nativeGainNode = createNativeGainNode(nativeOfflineAudioContext, _objectSpread({}, commonAudioNodeOptions, {\n                    gain: 1\n                  }));\n                } else if (!nativePannerNodeIsOwnedByContext) {\n                  options = _objectSpread({}, commonNativePannerNodeOptions, {\n                    orientationX: nativePannerNode.orientationX.value,\n                    orientationY: nativePannerNode.orientationY.value,\n                    orientationZ: nativePannerNode.orientationZ.value,\n                    positionX: nativePannerNode.positionX.value,\n                    positionY: nativePannerNode.positionY.value,\n                    positionZ: nativePannerNode.positionZ.value\n                  });\n                  nativePannerNode = createNativePannerNode(nativeOfflineAudioContext, options);\n                }\n\n                renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeGainNode === null ? nativePannerNode : nativeGainNode);\n\n                if (!(nativeGainNode !== null)) {\n                  _context4.next = 12;\n                  break;\n                }\n\n                return _context4.delegateYield(\n                /*#__PURE__*/\n                _regeneratorRuntime.mark(function _callee3() {\n                  var partialOfflineAudioContext, nativeChannelMergerNode, renderedBuffer, inputGainNode, channelDatas, i, lastOrientation, lastPosition, gateGainNode, partialPannerNode, _i, orientation, positon, currentTime;\n\n                  return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                    while (1) {\n                      switch (_context3.prev = _context3.next) {\n                        case 0:\n                          if (!(renderedBufferPromise === null)) {\n                            _context3.next = 7;\n                            break;\n                          }\n\n                          if (!(nativeOfflineAudioContextConstructor === null)) {\n                            _context3.next = 3;\n                            break;\n                          }\n\n                          throw new Error('Missing the native OfflineAudioContext constructor.');\n\n                        case 3:\n                          partialOfflineAudioContext = new nativeOfflineAudioContextConstructor(6, // Bug #17: Safari does not yet expose the length.\n                          proxy.context.length, nativeOfflineAudioContext.sampleRate);\n                          nativeChannelMergerNode = createNativeChannelMergerNode(partialOfflineAudioContext, {\n                            channelCount: 1,\n                            channelCountMode: 'explicit',\n                            channelInterpretation: 'speakers',\n                            numberOfInputs: 6\n                          });\n                          nativeChannelMergerNode.connect(partialOfflineAudioContext.destination);\n                          renderedBufferPromise = _asyncToGenerator(\n                          /*#__PURE__*/\n                          _regeneratorRuntime.mark(function _callee2() {\n                            var nativeConstantSourceNodes, i;\n                            return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                              while (1) {\n                                switch (_context2.prev = _context2.next) {\n                                  case 0:\n                                    _context2.next = 2;\n                                    return Promise.all([proxy.orientationX, proxy.orientationY, proxy.orientationZ, proxy.positionX, proxy.positionY, proxy.positionZ].map(\n                                    /*#__PURE__*/\n                                    function () {\n                                      var _ref3 = _asyncToGenerator(\n                                      /*#__PURE__*/\n                                      _regeneratorRuntime.mark(function _callee(audioParam, index) {\n                                        var nativeConstantSourceNode;\n                                        return _regeneratorRuntime.wrap(function _callee$(_context) {\n                                          while (1) {\n                                            switch (_context.prev = _context.next) {\n                                              case 0:\n                                                nativeConstantSourceNode = createNativeConstantSourceNode(partialOfflineAudioContext, {\n                                                  channelCount: 1,\n                                                  channelCountMode: 'explicit',\n                                                  channelInterpretation: 'discrete',\n                                                  offset: index === 0 ? 1 : 0\n                                                });\n                                                _context.next = 3;\n                                                return renderAutomation(partialOfflineAudioContext, audioParam, nativeConstantSourceNode.offset, trace);\n\n                                              case 3:\n                                                return _context.abrupt(\"return\", nativeConstantSourceNode);\n\n                                              case 4:\n                                              case \"end\":\n                                                return _context.stop();\n                                            }\n                                          }\n                                        }, _callee);\n                                      }));\n\n                                      return function (_x4, _x5) {\n                                        return _ref3.apply(this, arguments);\n                                      };\n                                    }()));\n\n                                  case 2:\n                                    nativeConstantSourceNodes = _context2.sent;\n\n                                    for (i = 0; i < 6; i += 1) {\n                                      nativeConstantSourceNodes[i].connect(nativeChannelMergerNode, 0, i);\n                                      nativeConstantSourceNodes[i].start(0);\n                                    }\n\n                                    return _context2.abrupt(\"return\", renderNativeOfflineAudioContext(partialOfflineAudioContext));\n\n                                  case 5:\n                                  case \"end\":\n                                    return _context2.stop();\n                                }\n                              }\n                            }, _callee2);\n                          }))();\n\n                        case 7:\n                          _context3.next = 9;\n                          return renderedBufferPromise;\n\n                        case 9:\n                          renderedBuffer = _context3.sent;\n                          inputGainNode = createNativeGainNode(nativeOfflineAudioContext, _objectSpread({}, commonAudioNodeOptions, {\n                            gain: 1\n                          }));\n                          _context3.next = 13;\n                          return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, inputGainNode, trace);\n\n                        case 13:\n                          channelDatas = [];\n\n                          for (i = 0; i < renderedBuffer.numberOfChannels; i += 1) {\n                            channelDatas.push(renderedBuffer.getChannelData(i));\n                          }\n\n                          lastOrientation = [channelDatas[0][0], channelDatas[1][0], channelDatas[2][0]];\n                          lastPosition = [channelDatas[3][0], channelDatas[4][0], channelDatas[5][0]];\n                          gateGainNode = createNativeGainNode(nativeOfflineAudioContext, _objectSpread({}, commonAudioNodeOptions, {\n                            gain: 1\n                          }));\n                          partialPannerNode = createNativePannerNode(nativeOfflineAudioContext, _objectSpread({}, commonNativePannerNodeOptions, {\n                            orientationX: lastOrientation[0],\n                            orientationY: lastOrientation[1],\n                            orientationZ: lastOrientation[2],\n                            positionX: lastPosition[0],\n                            positionY: lastPosition[1],\n                            positionZ: lastPosition[2]\n                          }));\n                          inputGainNode.connect(gateGainNode).connect(partialPannerNode.inputs[0]);\n                          partialPannerNode.connect(nativeGainNode);\n\n                          for (_i = 128; _i < renderedBuffer.length; _i += 128) {\n                            orientation = [channelDatas[0][_i], channelDatas[1][_i], channelDatas[2][_i]];\n                            positon = [channelDatas[3][_i], channelDatas[4][_i], channelDatas[5][_i]];\n\n                            if (orientation.some(function (value, index) {\n                              return value !== lastOrientation[index];\n                            }) || positon.some(function (value, index) {\n                              return value !== lastPosition[index];\n                            })) {\n                              lastOrientation = orientation;\n                              lastPosition = positon;\n                              currentTime = _i / nativeOfflineAudioContext.sampleRate;\n                              gateGainNode.gain.setValueAtTime(0, currentTime);\n                              gateGainNode = createNativeGainNode(nativeOfflineAudioContext, _objectSpread({}, commonAudioNodeOptions, {\n                                gain: 0\n                              }));\n                              partialPannerNode = createNativePannerNode(nativeOfflineAudioContext, _objectSpread({}, commonNativePannerNodeOptions, {\n                                orientationX: lastOrientation[0],\n                                orientationY: lastOrientation[1],\n                                orientationZ: lastOrientation[2],\n                                positionX: lastPosition[0],\n                                positionY: lastPosition[1],\n                                positionZ: lastPosition[2]\n                              }));\n                              gateGainNode.gain.setValueAtTime(1, currentTime);\n                              inputGainNode.connect(gateGainNode).connect(partialPannerNode.inputs[0]);\n                              partialPannerNode.connect(nativeGainNode);\n                            }\n                          }\n\n                          return _context3.abrupt(\"return\", {\n                            v: nativeGainNode\n                          });\n\n                        case 23:\n                        case \"end\":\n                          return _context3.stop();\n                      }\n                    }\n                  }, _callee3);\n                })(), \"t0\", 9);\n\n              case 9:\n                _ret = _context4.t0;\n\n                if (!(typeof _ret === \"object\")) {\n                  _context4.next = 12;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", _ret.v);\n\n              case 12:\n                if (nativePannerNodeIsOwnedByContext) {\n                  _context4.next = 27;\n                  break;\n                }\n\n                _context4.next = 15;\n                return renderAutomation(nativeOfflineAudioContext, proxy.orientationX, nativePannerNode.orientationX, trace);\n\n              case 15:\n                _context4.next = 17;\n                return renderAutomation(nativeOfflineAudioContext, proxy.orientationY, nativePannerNode.orientationY, trace);\n\n              case 17:\n                _context4.next = 19;\n                return renderAutomation(nativeOfflineAudioContext, proxy.orientationZ, nativePannerNode.orientationZ, trace);\n\n              case 19:\n                _context4.next = 21;\n                return renderAutomation(nativeOfflineAudioContext, proxy.positionX, nativePannerNode.positionX, trace);\n\n              case 21:\n                _context4.next = 23;\n                return renderAutomation(nativeOfflineAudioContext, proxy.positionY, nativePannerNode.positionY, trace);\n\n              case 23:\n                _context4.next = 25;\n                return renderAutomation(nativeOfflineAudioContext, proxy.positionZ, nativePannerNode.positionZ, trace);\n\n              case 25:\n                _context4.next = 39;\n                break;\n\n              case 27:\n                _context4.next = 29;\n                return connectAudioParam(nativeOfflineAudioContext, proxy.orientationX, nativePannerNode.orientationX, trace);\n\n              case 29:\n                _context4.next = 31;\n                return connectAudioParam(nativeOfflineAudioContext, proxy.orientationY, nativePannerNode.orientationY, trace);\n\n              case 31:\n                _context4.next = 33;\n                return connectAudioParam(nativeOfflineAudioContext, proxy.orientationZ, nativePannerNode.orientationZ, trace);\n\n              case 33:\n                _context4.next = 35;\n                return connectAudioParam(nativeOfflineAudioContext, proxy.positionX, nativePannerNode.positionX, trace);\n\n              case 35:\n                _context4.next = 37;\n                return connectAudioParam(nativeOfflineAudioContext, proxy.positionY, nativePannerNode.positionY, trace);\n\n              case 37:\n                _context4.next = 39;\n                return connectAudioParam(nativeOfflineAudioContext, proxy.positionZ, nativePannerNode.positionZ, trace);\n\n              case 39:\n                if (!isNativeAudioNodeFaker(nativePannerNode)) {\n                  _context4.next = 44;\n                  break;\n                }\n\n                _context4.next = 42;\n                return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativePannerNode.inputs[0], trace);\n\n              case 42:\n                _context4.next = 46;\n                break;\n\n              case 44:\n                _context4.next = 46;\n                return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativePannerNode, trace);\n\n              case 46:\n                return _context4.abrupt(\"return\", nativePannerNode);\n\n              case 47:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      return function createAudioNode(_x, _x2, _x3) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return {\n      render: function render(proxy, nativeOfflineAudioContext, trace) {\n        var renderedNativeGainNodeOrNativePannerNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeGainNodeOrNativePannerNode !== undefined) {\n          return Promise.resolve(renderedNativeGainNodeOrNativePannerNode);\n        }\n\n        return createAudioNode(proxy, nativeOfflineAudioContext, trace);\n      }\n    };\n  };\n};","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/node_modules/standardized-audio-context/build/es2019/factories/panner-node-renderer-factory.js"],"names":["isNativeAudioNodeFaker","isOwnedByContext","createPannerNodeRendererFactory","connectAudioParam","createNativeChannelMergerNode","createNativeConstantSourceNode","createNativeGainNode","createNativePannerNode","getNativeAudioNode","nativeOfflineAudioContextConstructor","renderAutomation","renderInputsOfAudioNode","renderNativeOfflineAudioContext","renderedNativeAudioNodes","WeakMap","renderedBufferPromise","createAudioNode","proxy","nativeOfflineAudioContext","trace","nativeGainNode","nativePannerNode","commonAudioNodeOptions","channelCount","channelCountMode","channelInterpretation","commonNativePannerNodeOptions","coneInnerAngle","coneOuterAngle","coneOuterGain","distanceModel","maxDistance","panningModel","refDistance","rolloffFactor","nativePannerNodeIsOwnedByContext","gain","options","orientationX","value","orientationY","orientationZ","positionX","positionY","positionZ","set","Error","partialOfflineAudioContext","context","length","sampleRate","nativeChannelMergerNode","numberOfInputs","connect","destination","Promise","all","map","audioParam","index","nativeConstantSourceNode","offset","nativeConstantSourceNodes","i","start","renderedBuffer","inputGainNode","channelDatas","numberOfChannels","push","getChannelData","lastOrientation","lastPosition","gateGainNode","partialPannerNode","inputs","orientation","positon","some","currentTime","setValueAtTime","render","renderedNativeGainNodeOrNativePannerNode","get","undefined","resolve"],"mappings":";;;AAAA,SAASA,sBAAT,QAAuC,mCAAvC;AACA,SAASC,gBAAT,QAAiC,gCAAjC;AACA,OAAO,IAAMC,+BAA+B,GAAG,SAAlCA,+BAAkC,CAACC,iBAAD,EAAoBC,6BAApB,EAAmDC,8BAAnD,EAAmFC,oBAAnF,EAAyGC,sBAAzG,EAAiIC,kBAAjI,EAAqJC,oCAArJ,EAA2LC,gBAA3L,EAA6MC,uBAA7M,EAAsOC,+BAAtO,EAA0Q;AACrT,SAAO,YAAM;AACT,QAAMC,wBAAwB,GAAG,IAAIC,OAAJ,EAAjC;AACA,QAAIC,qBAAqB,GAAG,IAA5B;;AACA,QAAMC,eAAe;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAG,kBAAOC,KAAP,EAAcC,yBAAd,EAAyCC,KAAzC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAChBC,gBAAAA,cADgB,GACC,IADD;AAEhBC,gBAAAA,gBAFgB,GAEGb,kBAAkB,CAACS,KAAD,CAFrB;AAGdK,gBAAAA,sBAHc,GAGW;AAC3BC,kBAAAA,YAAY,EAAEF,gBAAgB,CAACE,YADJ;AAE3BC,kBAAAA,gBAAgB,EAAEH,gBAAgB,CAACG,gBAFR;AAG3BC,kBAAAA,qBAAqB,EAAEJ,gBAAgB,CAACI;AAHb,iBAHX;AAQdC,gBAAAA,6BARc,qBASbJ,sBATa;AAUhBK,kBAAAA,cAAc,EAAEN,gBAAgB,CAACM,cAVjB;AAWhBC,kBAAAA,cAAc,EAAEP,gBAAgB,CAACO,cAXjB;AAYhBC,kBAAAA,aAAa,EAAER,gBAAgB,CAACQ,aAZhB;AAahBC,kBAAAA,aAAa,EAAET,gBAAgB,CAACS,aAbhB;AAchBC,kBAAAA,WAAW,EAAEV,gBAAgB,CAACU,WAdd;AAehBC,kBAAAA,YAAY,EAAEX,gBAAgB,CAACW,YAff;AAgBhBC,kBAAAA,WAAW,EAAEZ,gBAAgB,CAACY,WAhBd;AAiBhBC,kBAAAA,aAAa,EAAEb,gBAAgB,CAACa;AAjBhB,oBAmBpB;;AACMC,gBAAAA,gCApBc,GAoBqBlC,gBAAgB,CAACoB,gBAAD,EAAmBH,yBAAnB,CApBrC,EAqBpB;;AACA,oBAAI,gBAAgBG,gBAApB,EAAsC;AAClCD,kBAAAA,cAAc,GAAGd,oBAAoB,CAACY,yBAAD,oBAAiCI,sBAAjC;AAAyDc,oBAAAA,IAAI,EAAE;AAA/D,qBAArC;AACH,iBAFD,MAGK,IAAI,CAACD,gCAAL,EAAuC;AAClCE,kBAAAA,OADkC,qBAEjCX,6BAFiC;AAGpCY,oBAAAA,YAAY,EAAEjB,gBAAgB,CAACiB,YAAjB,CAA8BC,KAHR;AAIpCC,oBAAAA,YAAY,EAAEnB,gBAAgB,CAACmB,YAAjB,CAA8BD,KAJR;AAKpCE,oBAAAA,YAAY,EAAEpB,gBAAgB,CAACoB,YAAjB,CAA8BF,KALR;AAMpCG,oBAAAA,SAAS,EAAErB,gBAAgB,CAACqB,SAAjB,CAA2BH,KANF;AAOpCI,oBAAAA,SAAS,EAAEtB,gBAAgB,CAACsB,SAAjB,CAA2BJ,KAPF;AAQpCK,oBAAAA,SAAS,EAAEvB,gBAAgB,CAACuB,SAAjB,CAA2BL;AARF;AAUxClB,kBAAAA,gBAAgB,GAAGd,sBAAsB,CAACW,yBAAD,EAA4BmB,OAA5B,CAAzC;AACH;;AACDxB,gBAAAA,wBAAwB,CAACgC,GAAzB,CAA6B3B,yBAA7B,EAAyDE,cAAc,KAAK,IAApB,GAA4BC,gBAA5B,GAA+CD,cAAvG;;AArCoB,sBAsChBA,cAAc,KAAK,IAtCH;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,gCAuCZL,qBAAqB,KAAK,IAvCd;AAAA;AAAA;AAAA;;AAAA,gCAwCRN,oCAAoC,KAAK,IAxCjC;AAAA;AAAA;AAAA;;AAAA,gCAyCF,IAAIqC,KAAJ,CAAU,qDAAV,CAzCE;;AAAA;AA2CNC,0BAAAA,0BA3CM,GA2CuB,IAAItC,oCAAJ,CAAyC,CAAzC,EACnC;AACAQ,0BAAAA,KAAK,CAAC+B,OAAN,CAAcC,MAFqB,EAEb/B,yBAAyB,CAACgC,UAFb,CA3CvB;AA8CNC,0BAAAA,uBA9CM,GA8CoB/C,6BAA6B,CAAC2C,0BAAD,EAA6B;AACtFxB,4BAAAA,YAAY,EAAE,CADwE;AAEtFC,4BAAAA,gBAAgB,EAAE,UAFoE;AAGtFC,4BAAAA,qBAAqB,EAAE,UAH+D;AAItF2B,4BAAAA,cAAc,EAAE;AAJsE,2BAA7B,CA9CjD;AAoDZD,0BAAAA,uBAAuB,CAACE,OAAxB,CAAgCN,0BAA0B,CAACO,WAA3D;AACAvC,0BAAAA,qBAAqB,GAAG;AAAA;AAAA,mDAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACmBwC,OAAO,CAC1CC,GADmC,CAC/B,CACLvC,KAAK,CAACqB,YADD,EAELrB,KAAK,CAACuB,YAFD,EAGLvB,KAAK,CAACwB,YAHD,EAILxB,KAAK,CAACyB,SAJD,EAKLzB,KAAK,CAAC0B,SALD,EAML1B,KAAK,CAAC2B,SAND,EAQJa,GARI;AAAA;AAAA;AAAA;AAAA;AAAA,+DAQA,iBAAOC,UAAP,EAAmBC,KAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AACCC,gDAAAA,wBADD,GAC4BvD,8BAA8B,CAAC0C,0BAAD,EAA6B;AACxFxB,kDAAAA,YAAY,EAAE,CAD0E;AAExFC,kDAAAA,gBAAgB,EAAE,UAFsE;AAGxFC,kDAAAA,qBAAqB,EAAE,UAHiE;AAIxFoC,kDAAAA,MAAM,EAAGF,KAAK,KAAK,CAAX,GAAgB,CAAhB,GAAoB;AAJ4D,iDAA7B,CAD1D;AAAA;AAAA,uDAOCjD,gBAAgB,CAACqC,0BAAD,EAA6BW,UAA7B,EAAyCE,wBAAwB,CAACC,MAAlE,EAA0E1C,KAA1E,CAPjB;;AAAA;AAAA,iFAQEyC,wBARF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCARA;;AAAA;AAAA;AAAA;AAAA,wCAD+B,CADnB;;AAAA;AACfE,oCAAAA,yBADe;;AAoBrB,yCAASC,CAAT,GAAa,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,IAAI,CAA5B,EAA+B;AAC3BD,sCAAAA,yBAAyB,CAACC,CAAD,CAAzB,CAA6BV,OAA7B,CAAqCF,uBAArC,EAA8D,CAA9D,EAAiEY,CAAjE;AACAD,sCAAAA,yBAAyB,CAACC,CAAD,CAAzB,CAA6BC,KAA7B,CAAmC,CAAnC;AACH;;AAvBoB,sEAwBdpD,+BAA+B,CAACmC,0BAAD,CAxBjB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAD,IAAxB;;AArDY;AAAA;AAAA,iCAgFahC,qBAhFb;;AAAA;AAgFVkD,0BAAAA,cAhFU;AAiFVC,0BAAAA,aAjFU,GAiFM5D,oBAAoB,CAACY,yBAAD,oBAAiCI,sBAAjC;AAAyDc,4BAAAA,IAAI,EAAE;AAA/D,6BAjF1B;AAAA;AAAA,iCAkFVzB,uBAAuB,CAACM,KAAD,EAAQC,yBAAR,EAAmCgD,aAAnC,EAAkD/C,KAAlD,CAlFb;;AAAA;AAmFVgD,0BAAAA,YAnFU,GAmFK,EAnFL;;AAoFhB,+BAASJ,CAAT,GAAa,CAAb,EAAgBA,CAAC,GAAGE,cAAc,CAACG,gBAAnC,EAAqDL,CAAC,IAAI,CAA1D,EAA6D;AACzDI,4BAAAA,YAAY,CAACE,IAAb,CAAkBJ,cAAc,CAACK,cAAf,CAA8BP,CAA9B,CAAlB;AACH;;AACGQ,0BAAAA,eAvFY,GAuFM,CAACJ,YAAY,CAAC,CAAD,CAAZ,CAAgB,CAAhB,CAAD,EAAqBA,YAAY,CAAC,CAAD,CAAZ,CAAgB,CAAhB,CAArB,EAAyCA,YAAY,CAAC,CAAD,CAAZ,CAAgB,CAAhB,CAAzC,CAvFN;AAwFZK,0BAAAA,YAxFY,GAwFG,CAACL,YAAY,CAAC,CAAD,CAAZ,CAAgB,CAAhB,CAAD,EAAqBA,YAAY,CAAC,CAAD,CAAZ,CAAgB,CAAhB,CAArB,EAAyCA,YAAY,CAAC,CAAD,CAAZ,CAAgB,CAAhB,CAAzC,CAxFH;AAyFZM,0BAAAA,YAzFY,GAyFGnE,oBAAoB,CAACY,yBAAD,oBAAiCI,sBAAjC;AAAyDc,4BAAAA,IAAI,EAAE;AAA/D,6BAzFvB;AA0FZsC,0BAAAA,iBA1FY,GA0FQnE,sBAAsB,CAACW,yBAAD,oBACvCQ,6BADuC;AAE1CY,4BAAAA,YAAY,EAAEiC,eAAe,CAAC,CAAD,CAFa;AAG1C/B,4BAAAA,YAAY,EAAE+B,eAAe,CAAC,CAAD,CAHa;AAI1C9B,4BAAAA,YAAY,EAAE8B,eAAe,CAAC,CAAD,CAJa;AAK1C7B,4BAAAA,SAAS,EAAE8B,YAAY,CAAC,CAAD,CALmB;AAM1C7B,4BAAAA,SAAS,EAAE6B,YAAY,CAAC,CAAD,CANmB;AAO1C5B,4BAAAA,SAAS,EAAE4B,YAAY,CAAC,CAAD;AAPmB,6BA1F9B;AAmGhBN,0BAAAA,aAAa,CACRb,OADL,CACaoB,YADb,EAEKpB,OAFL,CAEaqB,iBAAiB,CAACC,MAAlB,CAAyB,CAAzB,CAFb;AAGAD,0BAAAA,iBAAiB,CAACrB,OAAlB,CAA0BjC,cAA1B;;AACA,+BAAS2C,EAAT,GAAa,GAAb,EAAkBA,EAAC,GAAGE,cAAc,CAAChB,MAArC,EAA6Cc,EAAC,IAAI,GAAlD,EAAuD;AAC7Ca,4BAAAA,WAD6C,GAC/B,CAACT,YAAY,CAAC,CAAD,CAAZ,CAAgBJ,EAAhB,CAAD,EAAqBI,YAAY,CAAC,CAAD,CAAZ,CAAgBJ,EAAhB,CAArB,EAAyCI,YAAY,CAAC,CAAD,CAAZ,CAAgBJ,EAAhB,CAAzC,CAD+B;AAE7Cc,4BAAAA,OAF6C,GAEnC,CAACV,YAAY,CAAC,CAAD,CAAZ,CAAgBJ,EAAhB,CAAD,EAAqBI,YAAY,CAAC,CAAD,CAAZ,CAAgBJ,EAAhB,CAArB,EAAyCI,YAAY,CAAC,CAAD,CAAZ,CAAgBJ,EAAhB,CAAzC,CAFmC;;AAGnD,gCAAIa,WAAW,CAACE,IAAZ,CAAiB,UAACvC,KAAD,EAAQoB,KAAR;AAAA,qCAAmBpB,KAAK,KAAKgC,eAAe,CAACZ,KAAD,CAA5C;AAAA,6BAAjB,KACGkB,OAAO,CAACC,IAAR,CAAa,UAACvC,KAAD,EAAQoB,KAAR;AAAA,qCAAmBpB,KAAK,KAAKiC,YAAY,CAACb,KAAD,CAAzC;AAAA,6BAAb,CADP,EACwE;AACpEY,8BAAAA,eAAe,GAAGK,WAAlB;AACAJ,8BAAAA,YAAY,GAAGK,OAAf;AACME,8BAAAA,WAH8D,GAGhDhB,EAAC,GAAG7C,yBAAyB,CAACgC,UAHkB;AAIpEuB,8BAAAA,YAAY,CAACrC,IAAb,CAAkB4C,cAAlB,CAAiC,CAAjC,EAAoCD,WAApC;AACAN,8BAAAA,YAAY,GAAGnE,oBAAoB,CAACY,yBAAD,oBAAiCI,sBAAjC;AAAyDc,gCAAAA,IAAI,EAAE;AAA/D,iCAAnC;AACAsC,8BAAAA,iBAAiB,GAAGnE,sBAAsB,CAACW,yBAAD,oBACnCQ,6BADmC;AAEtCY,gCAAAA,YAAY,EAAEiC,eAAe,CAAC,CAAD,CAFS;AAGtC/B,gCAAAA,YAAY,EAAE+B,eAAe,CAAC,CAAD,CAHS;AAItC9B,gCAAAA,YAAY,EAAE8B,eAAe,CAAC,CAAD,CAJS;AAKtC7B,gCAAAA,SAAS,EAAE8B,YAAY,CAAC,CAAD,CALe;AAMtC7B,gCAAAA,SAAS,EAAE6B,YAAY,CAAC,CAAD,CANe;AAOtC5B,gCAAAA,SAAS,EAAE4B,YAAY,CAAC,CAAD;AAPe,iCAA1C;AASAC,8BAAAA,YAAY,CAACrC,IAAb,CAAkB4C,cAAlB,CAAiC,CAAjC,EAAoCD,WAApC;AACAb,8BAAAA,aAAa,CACRb,OADL,CACaoB,YADb,EAEKpB,OAFL,CAEaqB,iBAAiB,CAACC,MAAlB,CAAyB,CAAzB,CAFb;AAGAD,8BAAAA,iBAAiB,CAACrB,OAAlB,CAA0BjC,cAA1B;AACH;AACJ;;AAhIe;AAAA,+BAiITA;AAjIS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,oBAmIfe,gCAnIe;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAoIVzB,gBAAgB,CAACQ,yBAAD,EAA4BD,KAAK,CAACqB,YAAlC,EAAgDjB,gBAAgB,CAACiB,YAAjE,EAA+EnB,KAA/E,CApIN;;AAAA;AAAA;AAAA,uBAqIVT,gBAAgB,CAACQ,yBAAD,EAA4BD,KAAK,CAACuB,YAAlC,EAAgDnB,gBAAgB,CAACmB,YAAjE,EAA+ErB,KAA/E,CArIN;;AAAA;AAAA;AAAA,uBAsIVT,gBAAgB,CAACQ,yBAAD,EAA4BD,KAAK,CAACwB,YAAlC,EAAgDpB,gBAAgB,CAACoB,YAAjE,EAA+EtB,KAA/E,CAtIN;;AAAA;AAAA;AAAA,uBAuIVT,gBAAgB,CAACQ,yBAAD,EAA4BD,KAAK,CAACyB,SAAlC,EAA6CrB,gBAAgB,CAACqB,SAA9D,EAAyEvB,KAAzE,CAvIN;;AAAA;AAAA;AAAA,uBAwIVT,gBAAgB,CAACQ,yBAAD,EAA4BD,KAAK,CAAC0B,SAAlC,EAA6CtB,gBAAgB,CAACsB,SAA9D,EAAyExB,KAAzE,CAxIN;;AAAA;AAAA;AAAA,uBAyIVT,gBAAgB,CAACQ,yBAAD,EAA4BD,KAAK,CAAC2B,SAAlC,EAA6CvB,gBAAgB,CAACuB,SAA9D,EAAyEzB,KAAzE,CAzIN;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,uBA4IVhB,iBAAiB,CAACe,yBAAD,EAA4BD,KAAK,CAACqB,YAAlC,EAAgDjB,gBAAgB,CAACiB,YAAjE,EAA+EnB,KAA/E,CA5IP;;AAAA;AAAA;AAAA,uBA6IVhB,iBAAiB,CAACe,yBAAD,EAA4BD,KAAK,CAACuB,YAAlC,EAAgDnB,gBAAgB,CAACmB,YAAjE,EAA+ErB,KAA/E,CA7IP;;AAAA;AAAA;AAAA,uBA8IVhB,iBAAiB,CAACe,yBAAD,EAA4BD,KAAK,CAACwB,YAAlC,EAAgDpB,gBAAgB,CAACoB,YAAjE,EAA+EtB,KAA/E,CA9IP;;AAAA;AAAA;AAAA,uBA+IVhB,iBAAiB,CAACe,yBAAD,EAA4BD,KAAK,CAACyB,SAAlC,EAA6CrB,gBAAgB,CAACqB,SAA9D,EAAyEvB,KAAzE,CA/IP;;AAAA;AAAA;AAAA,uBAgJVhB,iBAAiB,CAACe,yBAAD,EAA4BD,KAAK,CAAC0B,SAAlC,EAA6CtB,gBAAgB,CAACsB,SAA9D,EAAyExB,KAAzE,CAhJP;;AAAA;AAAA;AAAA,uBAiJVhB,iBAAiB,CAACe,yBAAD,EAA4BD,KAAK,CAAC2B,SAAlC,EAA6CvB,gBAAgB,CAACuB,SAA9D,EAAyEzB,KAAzE,CAjJP;;AAAA;AAAA,qBAmJhBnB,sBAAsB,CAACqB,gBAAD,CAnJN;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAoJVV,uBAAuB,CAACM,KAAD,EAAQC,yBAAR,EAAmCG,gBAAgB,CAACsD,MAAjB,CAAwB,CAAxB,CAAnC,EAA+DxD,KAA/D,CApJb;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,uBAuJVR,uBAAuB,CAACM,KAAD,EAAQC,yBAAR,EAAmCG,gBAAnC,EAAqDF,KAArD,CAvJb;;AAAA;AAAA,kDAyJbE,gBAzJa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;;AAAA,sBAAfL,eAAe;AAAA;AAAA;AAAA,OAArB;;AA2JA,WAAO;AACHiE,MAAAA,MADG,kBACIhE,KADJ,EACWC,yBADX,EACsCC,KADtC,EAC6C;AAC5C,YAAM+D,wCAAwC,GAAGrE,wBAAwB,CAACsE,GAAzB,CAA6BjE,yBAA7B,CAAjD;;AACA,YAAIgE,wCAAwC,KAAKE,SAAjD,EAA4D;AACxD,iBAAO7B,OAAO,CAAC8B,OAAR,CAAgBH,wCAAhB,CAAP;AACH;;AACD,eAAOlE,eAAe,CAACC,KAAD,EAAQC,yBAAR,EAAmCC,KAAnC,CAAtB;AACH;AAPE,KAAP;AASH,GAvKD;AAwKH,CAzKM","sourcesContent":["import { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createPannerNodeRendererFactory = (connectAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, createNativeGainNode, createNativePannerNode, getNativeAudioNode, nativeOfflineAudioContextConstructor, renderAutomation, renderInputsOfAudioNode, renderNativeOfflineAudioContext) => {\n    return () => {\n        const renderedNativeAudioNodes = new WeakMap();\n        let renderedBufferPromise = null;\n        const createAudioNode = async (proxy, nativeOfflineAudioContext, trace) => {\n            let nativeGainNode = null;\n            let nativePannerNode = getNativeAudioNode(proxy);\n            const commonAudioNodeOptions = {\n                channelCount: nativePannerNode.channelCount,\n                channelCountMode: nativePannerNode.channelCountMode,\n                channelInterpretation: nativePannerNode.channelInterpretation\n            };\n            const commonNativePannerNodeOptions = {\n                ...commonAudioNodeOptions,\n                coneInnerAngle: nativePannerNode.coneInnerAngle,\n                coneOuterAngle: nativePannerNode.coneOuterAngle,\n                coneOuterGain: nativePannerNode.coneOuterGain,\n                distanceModel: nativePannerNode.distanceModel,\n                maxDistance: nativePannerNode.maxDistance,\n                panningModel: nativePannerNode.panningModel,\n                refDistance: nativePannerNode.refDistance,\n                rolloffFactor: nativePannerNode.rolloffFactor\n            };\n            // If the initially used nativePannerNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativePannerNodeIsOwnedByContext = isOwnedByContext(nativePannerNode, nativeOfflineAudioContext);\n            // Bug #124: Edge & Safari do not support modifying the orientation and the position with AudioParams.\n            if ('bufferSize' in nativePannerNode) {\n                nativeGainNode = createNativeGainNode(nativeOfflineAudioContext, { ...commonAudioNodeOptions, gain: 1 });\n            }\n            else if (!nativePannerNodeIsOwnedByContext) {\n                const options = {\n                    ...commonNativePannerNodeOptions,\n                    orientationX: nativePannerNode.orientationX.value,\n                    orientationY: nativePannerNode.orientationY.value,\n                    orientationZ: nativePannerNode.orientationZ.value,\n                    positionX: nativePannerNode.positionX.value,\n                    positionY: nativePannerNode.positionY.value,\n                    positionZ: nativePannerNode.positionZ.value\n                };\n                nativePannerNode = createNativePannerNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeAudioNodes.set(nativeOfflineAudioContext, (nativeGainNode === null) ? nativePannerNode : nativeGainNode);\n            if (nativeGainNode !== null) {\n                if (renderedBufferPromise === null) {\n                    if (nativeOfflineAudioContextConstructor === null) {\n                        throw new Error('Missing the native OfflineAudioContext constructor.');\n                    }\n                    const partialOfflineAudioContext = new nativeOfflineAudioContextConstructor(6, \n                    // Bug #17: Safari does not yet expose the length.\n                    proxy.context.length, nativeOfflineAudioContext.sampleRate);\n                    const nativeChannelMergerNode = createNativeChannelMergerNode(partialOfflineAudioContext, {\n                        channelCount: 1,\n                        channelCountMode: 'explicit',\n                        channelInterpretation: 'speakers',\n                        numberOfInputs: 6\n                    });\n                    nativeChannelMergerNode.connect(partialOfflineAudioContext.destination);\n                    renderedBufferPromise = (async () => {\n                        const nativeConstantSourceNodes = await Promise\n                            .all([\n                            proxy.orientationX,\n                            proxy.orientationY,\n                            proxy.orientationZ,\n                            proxy.positionX,\n                            proxy.positionY,\n                            proxy.positionZ\n                        ]\n                            .map(async (audioParam, index) => {\n                            const nativeConstantSourceNode = createNativeConstantSourceNode(partialOfflineAudioContext, {\n                                channelCount: 1,\n                                channelCountMode: 'explicit',\n                                channelInterpretation: 'discrete',\n                                offset: (index === 0) ? 1 : 0\n                            });\n                            await renderAutomation(partialOfflineAudioContext, audioParam, nativeConstantSourceNode.offset, trace);\n                            return nativeConstantSourceNode;\n                        }));\n                        for (let i = 0; i < 6; i += 1) {\n                            nativeConstantSourceNodes[i].connect(nativeChannelMergerNode, 0, i);\n                            nativeConstantSourceNodes[i].start(0);\n                        }\n                        return renderNativeOfflineAudioContext(partialOfflineAudioContext);\n                    })();\n                }\n                const renderedBuffer = await renderedBufferPromise;\n                const inputGainNode = createNativeGainNode(nativeOfflineAudioContext, { ...commonAudioNodeOptions, gain: 1 });\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, inputGainNode, trace);\n                const channelDatas = [];\n                for (let i = 0; i < renderedBuffer.numberOfChannels; i += 1) {\n                    channelDatas.push(renderedBuffer.getChannelData(i));\n                }\n                let lastOrientation = [channelDatas[0][0], channelDatas[1][0], channelDatas[2][0]];\n                let lastPosition = [channelDatas[3][0], channelDatas[4][0], channelDatas[5][0]];\n                let gateGainNode = createNativeGainNode(nativeOfflineAudioContext, { ...commonAudioNodeOptions, gain: 1 });\n                let partialPannerNode = createNativePannerNode(nativeOfflineAudioContext, {\n                    ...commonNativePannerNodeOptions,\n                    orientationX: lastOrientation[0],\n                    orientationY: lastOrientation[1],\n                    orientationZ: lastOrientation[2],\n                    positionX: lastPosition[0],\n                    positionY: lastPosition[1],\n                    positionZ: lastPosition[2]\n                });\n                inputGainNode\n                    .connect(gateGainNode)\n                    .connect(partialPannerNode.inputs[0]);\n                partialPannerNode.connect(nativeGainNode);\n                for (let i = 128; i < renderedBuffer.length; i += 128) {\n                    const orientation = [channelDatas[0][i], channelDatas[1][i], channelDatas[2][i]];\n                    const positon = [channelDatas[3][i], channelDatas[4][i], channelDatas[5][i]];\n                    if (orientation.some((value, index) => (value !== lastOrientation[index]))\n                        || positon.some((value, index) => (value !== lastPosition[index]))) {\n                        lastOrientation = orientation;\n                        lastPosition = positon;\n                        const currentTime = i / nativeOfflineAudioContext.sampleRate;\n                        gateGainNode.gain.setValueAtTime(0, currentTime);\n                        gateGainNode = createNativeGainNode(nativeOfflineAudioContext, { ...commonAudioNodeOptions, gain: 0 });\n                        partialPannerNode = createNativePannerNode(nativeOfflineAudioContext, {\n                            ...commonNativePannerNodeOptions,\n                            orientationX: lastOrientation[0],\n                            orientationY: lastOrientation[1],\n                            orientationZ: lastOrientation[2],\n                            positionX: lastPosition[0],\n                            positionY: lastPosition[1],\n                            positionZ: lastPosition[2]\n                        });\n                        gateGainNode.gain.setValueAtTime(1, currentTime);\n                        inputGainNode\n                            .connect(gateGainNode)\n                            .connect(partialPannerNode.inputs[0]);\n                        partialPannerNode.connect(nativeGainNode);\n                    }\n                }\n                return nativeGainNode;\n            }\n            if (!nativePannerNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.orientationX, nativePannerNode.orientationX, trace);\n                await renderAutomation(nativeOfflineAudioContext, proxy.orientationY, nativePannerNode.orientationY, trace);\n                await renderAutomation(nativeOfflineAudioContext, proxy.orientationZ, nativePannerNode.orientationZ, trace);\n                await renderAutomation(nativeOfflineAudioContext, proxy.positionX, nativePannerNode.positionX, trace);\n                await renderAutomation(nativeOfflineAudioContext, proxy.positionY, nativePannerNode.positionY, trace);\n                await renderAutomation(nativeOfflineAudioContext, proxy.positionZ, nativePannerNode.positionZ, trace);\n            }\n            else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.orientationX, nativePannerNode.orientationX, trace);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.orientationY, nativePannerNode.orientationY, trace);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.orientationZ, nativePannerNode.orientationZ, trace);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.positionX, nativePannerNode.positionX, trace);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.positionY, nativePannerNode.positionY, trace);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.positionZ, nativePannerNode.positionZ, trace);\n            }\n            if (isNativeAudioNodeFaker(nativePannerNode)) {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativePannerNode.inputs[0], trace);\n            }\n            else {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativePannerNode, trace);\n            }\n            return nativePannerNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext, trace) {\n                const renderedNativeGainNodeOrNativePannerNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeGainNodeOrNativePannerNode !== undefined) {\n                    return Promise.resolve(renderedNativeGainNodeOrNativePannerNode);\n                }\n                return createAudioNode(proxy, nativeOfflineAudioContext, trace);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/panner-node-renderer-factory.js.map"]},"metadata":{},"sourceType":"module"}