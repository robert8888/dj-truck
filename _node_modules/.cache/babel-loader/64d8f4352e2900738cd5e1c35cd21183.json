{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJEKTY\\\\APKI\\\\DjTruck\\\\djtruck\\\\src\\\\pages\\\\app\\\\components\\\\Console\\\\Effector\\\\Effector.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport \"./effector-channel.scss\";\nimport DryWetKnob from \"./DryWetKnob/DryWetKnob\";\nimport EffectorButton from \"./EffectorButton/EffectorButton\";\nimport KnobDescribed from \"./../../common/KnobDescribed/KnobDescribed\";\nimport { Dropdown, DropdownButton } from \"react-bootstrap\";\n\nconst Effector = props => {\n  const [currentEffect, setCurrentEffect] = useState('none');\n  const [effectorParams, setEffectorParams] = useState([]);\n  useEffect(() => {\n    setEffectorParams(Object.entries(props.effects).map(([name, params]) => {\n      console.log(name, params);\n\n      if (params.type === \"float\") {\n        return React.createElement(KnobDescribed, {\n          alt: params.describe,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 17\n          },\n          __self: this\n        });\n      } else if (params.type === \"bool\") {\n        return React.createElement(EffectorButton, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 21\n          },\n          __self: this\n        });\n      }\n    }));\n  }, [currentEffect, props.effects]);\n  const availableEffects = Object.keys(props.effects).map((effect, index) => {\n    return React.createElement(Dropdown.Item, {\n      key: effect + \"-\" + index,\n      onClick: setCurrentEffect.bind(null, effect),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, effect);\n  });\n  return React.createElement(\"div\", {\n    className: \"effector-channel\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"dra-wet-knob\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, React.createElement(DryWetKnob, {\n    alt: \"D/W\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"effect-selector\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, React.createElement(DropdownButton, {\n    title: currentEffect,\n    className: \"btn-effect-select\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, availableEffects)), React.createElement(\"div\", {\n    className: \"effector-param\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, effectorParams));\n};\n\nconst mapStateToProps = (state, ownProps) => ({\n  effects: state.effector.effects\n});\n\nexport default connect(mapStateToProps)(Effector);","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/pages/app/components/Console/Effector/Effector.js"],"names":["React","useState","useEffect","connect","DryWetKnob","EffectorButton","KnobDescribed","Dropdown","DropdownButton","Effector","props","currentEffect","setCurrentEffect","effectorParams","setEffectorParams","Object","entries","effects","map","name","params","console","log","type","describe","availableEffects","keys","effect","index","bind","mapStateToProps","state","ownProps","effector"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAO,yBAAP;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,cAAP,MAA2B,iCAA3B;AACA,OAAOC,aAAP,MAA0B,4CAA1B;AACA,SAASC,QAAT,EAAmBC,cAAnB,QAAyC,iBAAzC;;AACA,MAAMC,QAAQ,GAAGC,KAAK,IAAI;AAEtB,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCX,QAAQ,CAAC,MAAD,CAAlD;AACA,QAAM,CAACY,cAAD,EAAiBC,iBAAjB,IAAsCb,QAAQ,CAAC,EAAD,CAApD;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZY,IAAAA,iBAAiB,CAACC,MAAM,CAACC,OAAP,CAAeN,KAAK,CAACO,OAArB,EAA8BC,GAA9B,CAAkC,CAAC,CAACC,IAAD,EAAOC,MAAP,CAAD,KAAoB;AACpEC,MAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ,EAAkBC,MAAlB;;AACA,UAAIA,MAAM,CAACG,IAAP,KAAgB,OAApB,EAA6B;AACzB,eAAO,oBAAC,aAAD;AACG,UAAA,GAAG,EAAEH,MAAM,CAACI,QADf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAGH,OAJD,MAIO,IAAIJ,MAAM,CAACG,IAAP,KAAgB,MAApB,EAA2B;AAC9B,eAAO,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACH;AACJ,KATiB,CAAD,CAAjB;AAUH,GAXQ,EAWN,CAACZ,aAAD,EAAgBD,KAAK,CAACO,OAAtB,CAXM,CAAT;AAcA,QAAMQ,gBAAgB,GAAGV,MAAM,CAACW,IAAP,CAAYhB,KAAK,CAACO,OAAlB,EAA2BC,GAA3B,CAA+B,CAACS,MAAD,EAASC,KAAT,KAAmB;AACvE,WAAQ,oBAAC,QAAD,CAAU,IAAV;AAAe,MAAA,GAAG,EAAED,MAAM,GAAG,GAAT,GAAeC,KAAnC;AAA0C,MAAA,OAAO,EAAEhB,gBAAgB,CAACiB,IAAjB,CAAsB,IAAtB,EAA4BF,MAA5B,CAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAyFA,MAAzF,CAAR;AACH,GAFwB,CAAzB;AAIA,SACI;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,UAAD;AAAY,IAAA,GAAG,EAAC,KAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ,EAII;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,cAAD;AAAgB,IAAA,KAAK,EAAEhB,aAAvB;AAAsC,IAAA,SAAS,EAAC,mBAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKc,gBADL,CADJ,CAJJ,EASI;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKZ,cADL,CATJ,CADJ;AAeH,CAtCD;;AAwCA,MAAMiB,eAAe,GAAG,CAACC,KAAD,EAAQC,QAAR,MAAsB;AAC1Cf,EAAAA,OAAO,EAAEc,KAAK,CAACE,QAAN,CAAehB;AADkB,CAAtB,CAAxB;;AAIA,eAAed,OAAO,CAAC2B,eAAD,CAAP,CAAyBrB,QAAzB,CAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport \"./effector-channel.scss\";\r\nimport DryWetKnob from \"./DryWetKnob/DryWetKnob\";\r\nimport EffectorButton from \"./EffectorButton/EffectorButton\";\r\nimport KnobDescribed from \"./../../common/KnobDescribed/KnobDescribed\";\r\nimport { Dropdown, DropdownButton } from \"react-bootstrap\";\r\nconst Effector = props => {\r\n\r\n    const [currentEffect, setCurrentEffect] = useState('none');\r\n    const [effectorParams, setEffectorParams] = useState([]);\r\n\r\n    useEffect(() => {\r\n        setEffectorParams(Object.entries(props.effects).map(([name, params]) => {\r\n            console.log(name, params)\r\n            if (params.type === \"float\") {\r\n                return <KnobDescribed\r\n                          alt={params.describe}\r\n                       />\r\n            } else if (params.type === \"bool\"){\r\n                return <EffectorButton/>;\r\n            }\r\n        }))\r\n    }, [currentEffect, props.effects])\r\n\r\n\r\n    const availableEffects = Object.keys(props.effects).map((effect, index) => {\r\n        return (<Dropdown.Item key={effect + \"-\" + index} onClick={setCurrentEffect.bind(null, effect)}>{effect}</Dropdown.Item>)\r\n    })\r\n\r\n    return (\r\n        <div className=\"effector-channel\">\r\n            <div className=\"dra-wet-knob\">\r\n                <DryWetKnob alt=\"D/W\" />\r\n            </div>\r\n            <div className=\"effect-selector\">\r\n                <DropdownButton title={currentEffect} className=\"btn-effect-select\">\r\n                    {availableEffects}\r\n                </DropdownButton>\r\n            </div>\r\n            <div className=\"effector-param\">\r\n                {effectorParams}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => ({\r\n    effects: state.effector.effects,\r\n})\r\n\r\nexport default connect(mapStateToProps)(Effector);\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}