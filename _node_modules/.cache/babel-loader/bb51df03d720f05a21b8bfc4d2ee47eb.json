{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJEKTY\\\\APKI\\\\DjTruck\\\\djtruck\\\\src\\\\pages\\\\app\\\\components\\\\PlayListExplorer\\\\Explorer\\\\ExplorerTree\\\\ExplorerTree.js\";\nimport React, { useCallback, Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport \"./explorer-tree.scss\";\nimport { toogleDir } from \"./../../../../../../actions\";\nimport { isEmpty, sortObj } from \"./../../../../../../utils/objects/helpers\";\nimport UUID from \"uuidjs\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faFolder, faPlus, faMinus, faFile } from \"@fortawesome/free-solid-svg-icons\";\n\nconst ExplorerTree = props => {\n  const toogleDir = useCallback(path => {\n    props.toogleDir(path);\n  }, [props.toogleDir]);\n  const getDirElement = useCallback((name, path, open, empty) => {\n    return React.createElement(\"li\", {\n      onDoubleClick: toogleDir.bind(null, [...path, name]),\n      className: \"list-item item-dir \" + (empty ? \"item-dir--empty\" : \"\"),\n      \"data-path\": path.join(\"/\"),\n      key: UUID.genV1(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }, !empty && React.createElement(\"button\", {\n      className: \"btn-dir \" + (open ? \"btn-dir--expand\" : \"btn-dir--colapse\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, React.createElement(FontAwesomeIcon, {\n      className: \"icon\",\n      icon: open ? faMinus : faPlus,\n      onClick: toogleDir.bind(null, [...path, name]),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    })), React.createElement(FontAwesomeIcon, {\n      className: \"icon icon-dir\",\n      icon: faFolder,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }), name);\n  });\n  const getFileElement = useCallback((name, path) => {\n    return React.createElement(\"li\", {\n      className: \"list-item item-file \",\n      \"data-path\": path.join(\"/\"),\n      key: UUID.genV1(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, React.createElement(FontAwesomeIcon, {\n      className: \"icon icon-file\",\n      icon: faFile,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }), name);\n  });\n\n  const renderDirElements = (name, content, path) => {\n    content = sortObj(content);\n\n    if (content instanceof Array) {\n      return getFileElement(name, path);\n    } else {\n      if (content._open === true) {\n        return React.createElement(Fragment, {\n          key: UUID.genV1(),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 56\n          },\n          __self: this\n        }, getDirElement(name, path, true), renderDir(content, [...path, name]));\n      } else {\n        if (isEmpty(content)) {\n          return getDirElement(name, path, false, true);\n        }\n\n        return getDirElement(name, path, false);\n      }\n    }\n  };\n\n  const renderDir = (dir, path) => {\n    return React.createElement(\"ul\", {\n      className: \"list-dir dir-content\",\n      key: UUID.generate(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, Object.entries(dir).map(([name, content]) => {\n      if (name === \"_open\") {\n        return null;\n      }\n\n      return renderDirElements(name, content, path);\n    }));\n  };\n\n  return React.createElement(\"div\", {\n    className: \"explorer-tree\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, renderDir(props.root, ['root']));\n};\n\nconst mapStateToProps = state => ({\n  root: state.playList.root\n});\n\nconst mapDispatchToProps = dispatch => ({\n  toogleDir: path => dispatch(toogleDir(path))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ExplorerTree);","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/pages/app/components/PlayListExplorer/Explorer/ExplorerTree/ExplorerTree.js"],"names":["React","useCallback","Fragment","connect","toogleDir","isEmpty","sortObj","UUID","FontAwesomeIcon","faFolder","faPlus","faMinus","faFile","ExplorerTree","props","path","getDirElement","name","open","empty","bind","join","genV1","getFileElement","renderDirElements","content","Array","_open","renderDir","dir","generate","Object","entries","map","root","mapStateToProps","state","playList","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useCallback, Fragment } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport \"./explorer-tree.scss\";\r\nimport { toogleDir } from \"./../../../../../../actions\"\r\nimport { isEmpty, sortObj } from \"./../../../../../../utils/objects/helpers\";\r\nimport UUID from \"uuidjs\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faFolder, faPlus, faMinus, faFile } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst ExplorerTree = props => {\r\n\r\n    const toogleDir = useCallback((path) => {\r\n        props.toogleDir(path);\r\n    }, [props.toogleDir])\r\n\r\n    const getDirElement = useCallback((name, path, open, empty) => {\r\n        return (\r\n            <li\r\n                onDoubleClick={toogleDir.bind(null, [...path, name])}\r\n                className={\"list-item item-dir \" + ((empty) ? \"item-dir--empty\" : \"\")}\r\n                data-path={path.join(\"/\")}\r\n                key={UUID.genV1()}>\r\n                {!empty &&\r\n                    <button\r\n                        className={\"btn-dir \" + ((open) ? \"btn-dir--expand\" : \"btn-dir--colapse\")}>\r\n                        <FontAwesomeIcon \r\n                            className=\"icon\" \r\n                            icon={(open) ? faMinus : faPlus} \r\n                            onClick={toogleDir.bind(null, [...path, name])}/>\r\n                    </button>}\r\n                    <FontAwesomeIcon className=\"icon icon-dir\" icon={faFolder} />\r\n                    {name}\r\n            </li>\r\n        )\r\n    })\r\n\r\n    const getFileElement = useCallback((name, path) => {\r\n        return (\r\n            <li\r\n                className=\"list-item item-file \"\r\n                data-path={path.join(\"/\")}\r\n                key={UUID.genV1()}>\r\n                <FontAwesomeIcon className=\"icon icon-file\" icon={faFile} />\r\n                {name}\r\n            </li>\r\n        );\r\n    })\r\n\r\n    const renderDirElements = (name, content, path) => {\r\n        content = sortObj(content);\r\n        if (content instanceof Array) {\r\n            return getFileElement(name, path)\r\n        } else {\r\n            if (content._open === true) {\r\n                return (\r\n                    <Fragment key={UUID.genV1()}>\r\n                        {getDirElement(name, path, true)}\r\n                        {renderDir(content, [...path, name])}\r\n                    </Fragment>\r\n                )\r\n            } else {\r\n                if (isEmpty(content)) {\r\n                    return getDirElement(name, path, false, true)\r\n                }\r\n                return getDirElement(name, path, false)\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    const renderDir = (dir, path) => {\r\n        return (\r\n            <ul className=\"list-dir dir-content\" key={UUID.generate()}>\r\n                {\r\n                    Object.entries(dir).map(([name, content]) => {\r\n                        if (name === \"_open\") {\r\n                            return null;\r\n                        }\r\n                        return renderDirElements(name, content, path);\r\n                    })\r\n                }\r\n            </ul>\r\n        )\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"explorer-tree\">\r\n            {renderDir(props.root, ['root'])}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    root: state.playList.root,\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    toogleDir: path => dispatch(toogleDir(path)),\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ExplorerTree);"]},"metadata":{},"sourceType":"module"}