{"ast":null,"code":"import { put, select, takeEvery } from \"redux-saga/effects\";\nimport { ACTIONS, updateStartTime } from \"../../../actions\";\nimport RECORD_STATE from \"./../../../reducers/console/recorder/stateDef\";\nexport default function* interceptPlay() {\n  yield takeEvery(ACTIONS.CANCEL_CUE_AND_PLAY, handel);\n}\n\nconst getChannelState = (state, channel) => state.console.channel[channel];\n\nconst isRecording = state => state.recorder.recordingState === RECORD_STATE.RECORDING;\n\nfunction* handel(action) {\n  const channel = action.destination;\n  const channelState = yield select(getChannelState, channel);\n  const recording = yield select(isRecording);\n  if (!recording) return;\n  yield put(updateStartTime(channelState.track.id));\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/sagas/recorder/tracklist/playtrack.js"],"names":["put","select","takeEvery","ACTIONS","updateStartTime","RECORD_STATE","interceptPlay","CANCEL_CUE_AND_PLAY","handel","getChannelState","state","channel","console","isRecording","recorder","recordingState","RECORDING","action","destination","channelState","recording","track","id"],"mappings":"AAAA,SAASA,GAAT,EAAcC,MAAd,EAAsBC,SAAtB,QAAuC,oBAAvC;AACA,SAASC,OAAT,EAAkBC,eAAlB,QAAyC,kBAAzC;AACA,OAAOC,YAAP,MAAyB,+CAAzB;AAEA,eAAe,UAAUC,aAAV,GAA0B;AACrC,QAAMJ,SAAS,CAACC,OAAO,CAACI,mBAAT,EAA8BC,MAA9B,CAAf;AACH;;AAED,MAAMC,eAAe,GAAG,CAACC,KAAD,EAAQC,OAAR,KAAoBD,KAAK,CAACE,OAAN,CAAcD,OAAd,CAAsBA,OAAtB,CAA5C;;AAEA,MAAME,WAAW,GAAGH,KAAK,IAAIA,KAAK,CAACI,QAAN,CAAeC,cAAf,KAAkCV,YAAY,CAACW,SAA5E;;AAEA,UAAUR,MAAV,CAAiBS,MAAjB,EAAwB;AAEpB,QAAMN,OAAO,GAAGM,MAAM,CAACC,WAAvB;AACA,QAAMC,YAAY,GAAG,MAAMlB,MAAM,CAACQ,eAAD,EAAkBE,OAAlB,CAAjC;AAEA,QAAMS,SAAS,GAAG,MAAMnB,MAAM,CAACY,WAAD,CAA9B;AACA,MAAG,CAACO,SAAJ,EAAe;AAGf,QAAMpB,GAAG,CAACI,eAAe,CAACe,YAAY,CAACE,KAAb,CAAmBC,EAApB,CAAhB,CAAT;AACH","sourcesContent":["import { put, select, takeEvery } from \"redux-saga/effects\";\r\nimport { ACTIONS, updateStartTime } from \"../../../actions\";\r\nimport RECORD_STATE from \"./../../../reducers/console/recorder/stateDef\";\r\n\r\nexport default function* interceptPlay() {\r\n    yield takeEvery(ACTIONS.CANCEL_CUE_AND_PLAY, handel);\r\n}\r\n\r\nconst getChannelState = (state, channel) => state.console.channel[channel];\r\n\r\nconst isRecording = state => state.recorder.recordingState === RECORD_STATE.RECORDING; \r\n\r\nfunction* handel(action){\r\n\r\n    const channel = action.destination;\r\n    const channelState = yield select(getChannelState, channel)\r\n\r\n    const recording = yield select(isRecording);\r\n    if(!recording) return;\r\n\r\n\r\n    yield put(updateStartTime(channelState.track.id))\r\n}"]},"metadata":{},"sourceType":"module"}