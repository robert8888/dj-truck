{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\src\\\\pages\\\\common\\\\components\\\\RecordList\\\\ListItem\\\\WaveSurrferPlayer\\\\WaveSurferPlayer.js\";\nimport React, { useRef, useEffect, useState, useCallback, useContext } from \"react\";\nimport WaveSurfer from \"wavesurfer\";\nimport style from \"./wave-surfer-player.scss\"; // import {PLAYBACK_STATE} from \"./../PlaybackButton/PlaybackButton\"\n\nimport { PlayerContext } from \"./../../useRecordPlayer\"; // //input is kind of heap array where n element have [2n] posivitive and [2n+1] negative value\n// const interpolateArr = (input, outputSize) => {\n//     const inputSize = input.length;\n//     const output = new Array(outputSize * 2);\n//     return output;\n// }\n\nconst WaveSurferPlayer = ({\n  item: {\n    peaks,\n    id,\n    duration,\n    fileSize\n  },\n  seekHandler\n}) => {\n  // const containerRef = useRef(null)\n  const [container, setContainerRef] = useState(null);\n  const [ws, setWs] = useState(null);\n  const [progress, setProgress] = useState(0);\n  const [loaded, setLoaded] = useState(false);\n  const playerContext = useContext(PlayerContext);\n  const onContainerRef = useCallback(ref => {\n    setContainerRef(ref);\n  }, [setContainerRef]);\n  useEffect(() => {\n    if (container && !loaded) {\n      const ws = new Promise((res, rej) => {\n        try {\n          const ws = WaveSurfer.create({\n            container: container,\n            barWidth: 2,\n            height: 100,\n            waveColor: style.waveColor,\n            progressColor: style.progressColor,\n            barMinHeight: 0\n          });\n          res(ws);\n        } catch (err) {\n          rej(err);\n        }\n      });\n      ws.then(ws => {\n        setWs(ws);\n        return ws;\n      });\n      ws.then(ws => {\n        if (peaks) {\n          // const containerWidth = container?.getBoundingClientRect().width;\n          // if(containerWidth){\n          //     interpolateArr(peaks, containerWidth);\n          // }\n          const width = (container === null || container === void 0 ? void 0 : container.getBoundingClientRect().width) - 10;\n          const start = 0;\n          const end = width * 2; //ws.load(null, peaks);\n\n          ws.drawer.drawPeaks(peaks, width, start, end);\n          setLoaded(true);\n        }\n\n        if (seekHandler) {\n          ws.on('seek', progress => {\n            const filePosition = ~~(parseInt(fileSize) * progress);\n            seekHandler({\n              id,\n              filePosition,\n              progress,\n              duration\n            });\n            ws.drawer.progress(progress);\n          });\n        }\n      });\n    }\n  }, [container, peaks, setWs]);\n  useEffect(() => {\n    if (ws && progress) {\n      ws.drawer.progress(progress);\n    }\n  }, [ws, progress]);\n  const getProgressData = useCallback(() => {\n    return {\n      duration,\n      progress,\n      filePosition: ~~(parseInt(fileSize) * progress)\n    };\n  }, [duration, progress, fileSize]);\n  useEffect(() => {\n    playerContext.setProgressHandler(id, setProgress);\n  }, [playerContext]);\n  useEffect(() => {\n    playerContext.setProgressDataHandler(id, getProgressData);\n  }, [progress, playerContext]);\n  return React.createElement(\"div\", {\n    key: \"ws\" + id,\n    className: \"ws-player-container\",\n    ref: onContainerRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  });\n};\n\nexport default WaveSurferPlayer;","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/pages/common/components/RecordList/ListItem/WaveSurrferPlayer/WaveSurferPlayer.js"],"names":["React","useRef","useEffect","useState","useCallback","useContext","WaveSurfer","style","PlayerContext","WaveSurferPlayer","item","peaks","id","duration","fileSize","seekHandler","container","setContainerRef","ws","setWs","progress","setProgress","loaded","setLoaded","playerContext","onContainerRef","ref","Promise","res","rej","create","barWidth","height","waveColor","progressColor","barMinHeight","err","then","width","getBoundingClientRect","start","end","drawer","drawPeaks","on","filePosition","parseInt","getProgressData","setProgressHandler","setProgressDataHandler"],"mappings":"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","sourcesContent":["import React, {useRef, useEffect, useState, useCallback, useContext} from \"react\";\r\nimport WaveSurfer from \"wavesurfer\";\r\nimport style from \"./wave-surfer-player.scss\";\r\n// import {PLAYBACK_STATE} from \"./../PlaybackButton/PlaybackButton\"\r\nimport {PlayerContext} from \"./../../useRecordPlayer\";\r\n\r\n\r\n// //input is kind of heap array where n element have [2n] posivitive and [2n+1] negative value\r\n// const interpolateArr = (input, outputSize) => {\r\n//     const inputSize = input.length;\r\n//     const output = new Array(outputSize * 2);\r\n\r\n\r\n//     return output;\r\n// }\r\n\r\n\r\nconst WaveSurferPlayer = ({item : {peaks, id, duration, fileSize}, seekHandler}) => {\r\n   // const containerRef = useRef(null)\r\n    const [container, setContainerRef] = useState(null);\r\n    const [ws, setWs] = useState(null);\r\n    const [progress, setProgress] = useState(0);\r\n    const [loaded, setLoaded] = useState(false);\r\n    const playerContext = useContext(PlayerContext);\r\n\r\n    const onContainerRef = useCallback( (ref) => {\r\n        setContainerRef(ref);\r\n    }, [setContainerRef])\r\n\r\n    useEffect(()=>{\r\n        if(container && !loaded){\r\n            const ws = new Promise((res, rej)=>{\r\n                try{\r\n                    const ws = WaveSurfer.create({\r\n                        container: container,\r\n                        barWidth: 2,\r\n                        height: 100,\r\n                        waveColor: style.waveColor,\r\n                        progressColor: style.progressColor,\r\n                        barMinHeight: 0\r\n                    })\r\n                    res(ws)\r\n                } catch (err){\r\n                    rej(err)\r\n                }\r\n            })\r\n            ws.then( ws => {\r\n                setWs(ws);\r\n                return ws;\r\n            })\r\n\r\n            ws.then((ws) =>{\r\n                if(peaks){\r\n                    // const containerWidth = container?.getBoundingClientRect().width;\r\n                    // if(containerWidth){\r\n                    //     interpolateArr(peaks, containerWidth);\r\n                    // }\r\n                    const width = container?.getBoundingClientRect().width - 10;\r\n                    const start = 0;\r\n                    const end = width * 2 ;\r\n                    //ws.load(null, peaks);\r\n                    ws.drawer.drawPeaks(peaks, width, start, end);\r\n                    setLoaded(true)\r\n                }\r\n                if(seekHandler){\r\n                    ws.on('seek', (progress)=>{\r\n                        const filePosition = ~~(parseInt(fileSize)  * progress);\r\n                        seekHandler({\r\n                            id, \r\n                            filePosition, \r\n                            progress,\r\n                            duration,\r\n                        })\r\n                        ws.drawer.progress(progress);\r\n                    })\r\n                }\r\n            })\r\n        }\r\n    }, [container, peaks, setWs ])\r\n\r\n    useEffect(()=>{\r\n        if(ws && progress){\r\n            ws.drawer.progress(progress);\r\n        }\r\n    },[ws, progress])\r\n\r\n    const getProgressData = useCallback(()=>{\r\n        return {\r\n            duration,\r\n            progress,\r\n            filePosition: ~~(parseInt(fileSize)  * progress)\r\n        }\r\n    }, [duration, progress, fileSize])\r\n\r\n    useEffect(()=>{\r\n        playerContext.setProgressHandler(id, setProgress)\r\n\r\n    }, [playerContext])\r\n\r\n    useEffect(()=>{\r\n        playerContext.setProgressDataHandler(id, getProgressData);\r\n    }, [progress, playerContext])\r\n\r\n    return (\r\n        <div key={\"ws\"+id} className=\"ws-player-container\" ref={onContainerRef}/>\r\n    )\r\n}\r\n\r\nexport default WaveSurferPlayer"]},"metadata":{},"sourceType":"module"}