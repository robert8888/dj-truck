{"ast":null,"code":"import STATUS from\"./../STATUS\";export default function checkLoopLength(prev,current){prev=prev.console;current=current.console;var response=null;for(var _i=0,_Object$keys=Object.keys(prev.channel);_i<_Object$keys.length;_i++){var channelName=_Object$keys[_i];var prevLoopLength=prev.channel[channelName].deckState.loopLength;var currentLoopLength=current.channel[channelName].deckState.loopLength;var currentLopp=current.channel[channelName].playBackState.loop;if(!currentLopp)continue;if(prevLoopLength!==currentLoopLength){response=response||[];response.push({status:STATUS.LOOP_LENGTH_CHANGE,channel:channelName,currentValue:{state:currentLopp,loopLength:currentLoopLength}});}}return response;}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/pages/console/core/console/observer/comparators/loopLength.js"],"names":["STATUS","checkLoopLength","prev","current","console","response","Object","keys","channel","channelName","prevLoopLength","deckState","loopLength","currentLoopLength","currentLopp","playBackState","loop","push","status","LOOP_LENGTH_CHANGE","currentValue","state"],"mappings":"AAAA,MAAOA,CAAAA,MAAP,KAAoB,aAApB,CAEA,cAAe,SAASC,CAAAA,eAAT,CAAyBC,IAAzB,CAA+BC,OAA/B,CAAuC,CAClDD,IAAI,CAAGA,IAAI,CAACE,OAAZ,CACAD,OAAO,CAAGA,OAAO,CAACC,OAAlB,CACA,GAAIC,CAAAA,QAAQ,CAAG,IAAf,CACA,0BAAuBC,MAAM,CAACC,IAAP,CAAYL,IAAI,CAACM,OAAjB,CAAvB,6BAAiD,CAA7C,GAAIC,CAAAA,WAAW,iBAAf,CACA,GAAMC,CAAAA,cAAc,CAAGR,IAAI,CAACM,OAAL,CAAaC,WAAb,EAA0BE,SAA1B,CAAoCC,UAA3D,CACA,GAAMC,CAAAA,iBAAiB,CAAGV,OAAO,CAACK,OAAR,CAAgBC,WAAhB,EAA6BE,SAA7B,CAAuCC,UAAjE,CACA,GAAME,CAAAA,WAAW,CAAGX,OAAO,CAACK,OAAR,CAAgBC,WAAhB,EAA6BM,aAA7B,CAA2CC,IAA/D,CAEA,GAAG,CAACF,WAAJ,CAAiB,SAEjB,GAAGJ,cAAc,GAAKG,iBAAtB,CAAwC,CACpCR,QAAQ,CAAGA,QAAQ,EAAI,EAAvB,CACAA,QAAQ,CAACY,IAAT,CAAc,CACVC,MAAM,CAAGlB,MAAM,CAACmB,kBADN,CAEVX,OAAO,CAAGC,WAFA,CAGVW,YAAY,CAAG,CACXC,KAAK,CAAGP,WADG,CAEXF,UAAU,CAAGC,iBAFF,CAHL,CAAd,EAQH,CACJ,CACD,MAAOR,CAAAA,QAAP,CACH","sourcesContent":["import STATUS from  \"./../STATUS\";\r\n\r\nexport default function checkLoopLength(prev, current){\r\n    prev = prev.console;\r\n    current = current.console;\r\n    let response = null;\r\n    for(let channelName of Object.keys(prev.channel)){\r\n        const prevLoopLength = prev.channel[channelName].deckState.loopLength;\r\n        const currentLoopLength = current.channel[channelName].deckState.loopLength;\r\n        const currentLopp = current.channel[channelName].playBackState.loop;\r\n\r\n        if(!currentLopp) continue;\r\n\r\n        if(prevLoopLength !== currentLoopLength){\r\n            response = response || [];\r\n            response.push({\r\n                status : STATUS.LOOP_LENGTH_CHANGE,\r\n                channel : channelName,\r\n                currentValue : {\r\n                    state : currentLopp,\r\n                    loopLength : currentLoopLength\r\n                }\r\n            })                \r\n        }\r\n    }\r\n    return response;\r\n}"]},"metadata":{},"sourceType":"module"}