{"ast":null,"code":"import { fork, put, select, takeEvery } from \"redux-saga/effects\";\nimport { ACTIONS, pushLog } from \"../../actions\";\nimport { getApi } from \"./../../apis/apiProvider\";\nimport { Log } from \"./../../utils/logger/logger\";\nimport errorParser from \"./../../utils/serverErrorParser/errorParser\";\nexport default function* renameSelectedRequestSaga() {\n  yield takeEvery(ACTIONS.PL_UPDATE_TRACK_POSITION_REQUST, handel);\n}\n\nfunction* handel(action) {\n  yield fork(sendDataToApi, action);\n}\n\nconst getToken = state => state.user.token;\n\nfunction* sendDataToApi(action) {\n  const path = ['saga', 'playlist', 'request updated tracks positios'];\n  const token = yield select(getToken);\n\n  if (token) {\n    try {\n      const {\n        callQuery,\n        queries\n      } = getApi(\"UserAssets\");\n      const response = yield callQuery(queries.updateTracksPositionsQl, token, {\n        tracksPositions: action.tracksPositions\n      });\n\n      if (response.errors) {\n        throw new Error('Server response contains errors ' + errorParser(response.errors));\n      }\n\n      yield put(pushLog(new Log(\"Tracks position on playlist updated\", path)));\n    } catch (error) {\n      yield put(pushLog(Log.Error(path, \"Can't update tracks position on playlist in database\" + error.message, \"Sorry. During process of updating track position on playlist occurred a problem\", error)));\n    }\n  }\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/sagas/playlists/reqUpdateTrackPositionSaga.js"],"names":["fork","put","select","takeEvery","ACTIONS","pushLog","getApi","Log","errorParser","renameSelectedRequestSaga","PL_UPDATE_TRACK_POSITION_REQUST","handel","action","sendDataToApi","getToken","state","user","token","path","callQuery","queries","response","updateTracksPositionsQl","tracksPositions","errors","Error","error","message"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,MAApB,EAA4BC,SAA5B,QAA6C,oBAA7C;AACA,SAASC,OAAT,EAAkBC,OAAlB,QAAiC,eAAjC;AACA,SAASC,MAAT,QAAuB,0BAAvB;AACA,SAASC,GAAT,QAAoB,6BAApB;AACA,OAAOC,WAAP,MAAwB,6CAAxB;AAEA,eAAe,UAAUC,yBAAV,GAAsC;AACjD,QAAMN,SAAS,CAACC,OAAO,CAACM,+BAAT,EAA0CC,MAA1C,CAAf;AACH;;AAED,UAAUA,MAAV,CAAiBC,MAAjB,EAAwB;AACpB,QAAMZ,IAAI,CAACa,aAAD,EAAgBD,MAAhB,CAAV;AACH;;AAED,MAAME,QAAQ,GAAGC,KAAK,IAAIA,KAAK,CAACC,IAAN,CAAWC,KAArC;;AAEA,UAAUJ,aAAV,CAAwBD,MAAxB,EAAgC;AAC5B,QAAMM,IAAI,GAAG,CAAC,MAAD,EAAS,UAAT,EAAqB,iCAArB,CAAb;AACA,QAAMD,KAAK,GAAG,MAAMf,MAAM,CAACY,QAAD,CAA1B;;AACA,MAAGG,KAAH,EAAS;AACL,QAAG;AACC,YAAM;AAAEE,QAAAA,SAAF;AAAcC,QAAAA;AAAd,UAA0Bd,MAAM,CAAC,YAAD,CAAtC;AACA,YAAMe,QAAQ,GAAG,MAAMF,SAAS,CAACC,OAAO,CAACE,uBAAT,EAAkCL,KAAlC,EAA0C;AACtEM,QAAAA,eAAe,EAAEX,MAAM,CAACW;AAD8C,OAA1C,CAAhC;;AAIA,UAAGF,QAAQ,CAACG,MAAZ,EAAmB;AACf,cAAM,IAAIC,KAAJ,CAAU,qCAAoCjB,WAAW,CAACa,QAAQ,CAACG,MAAV,CAAzD,CAAN;AACH;;AAED,YAAMvB,GAAG,CAACI,OAAO,CAAC,IAAIE,GAAJ,CAAQ,qCAAR,EAA+CW,IAA/C,CAAD,CAAR,CAAT;AACH,KAXD,CAWE,OAAOQ,KAAP,EAAa;AACX,YAAMzB,GAAG,CAACI,OAAO,CAACE,GAAG,CAACkB,KAAJ,CACdP,IADc,EAEd,yDAAyDQ,KAAK,CAACC,OAFjD,EAGd,iFAHc,EAIdD,KAJc,CAAD,CAAR,CAAT;AAMH;AACJ;AACJ","sourcesContent":["import { fork, put, select, takeEvery } from \"redux-saga/effects\";\r\nimport { ACTIONS, pushLog } from \"../../actions\";\r\nimport { getApi } from \"./../../apis/apiProvider\";\r\nimport { Log } from \"./../../utils/logger/logger\";\r\nimport errorParser from \"./../../utils/serverErrorParser/errorParser\";\r\n\r\nexport default function* renameSelectedRequestSaga() {\r\n    yield takeEvery(ACTIONS.PL_UPDATE_TRACK_POSITION_REQUST, handel)\r\n}\r\n\r\nfunction* handel(action){\r\n    yield fork(sendDataToApi, action)\r\n}\r\n\r\nconst getToken = state => state.user.token;\r\n\r\nfunction* sendDataToApi(action) {\r\n    const path = ['saga', 'playlist', 'request updated tracks positios']\r\n    const token = yield select(getToken);\r\n    if(token){\r\n        try{\r\n            const { callQuery , queries } = getApi(\"UserAssets\");\r\n            const response = yield callQuery(queries.updateTracksPositionsQl, token , {\r\n                tracksPositions: action.tracksPositions,\r\n            })\r\n\r\n            if(response.errors){\r\n                throw new Error('Server response contains errors '+ errorParser(response.errors))\r\n            }\r\n\r\n            yield put(pushLog(new Log(\"Tracks position on playlist updated\", path)))\r\n        } catch (error){\r\n            yield put(pushLog(Log.Error(\r\n                path,\r\n                \"Can't update tracks position on playlist in database\" + error.message,\r\n                \"Sorry. During process of updating track position on playlist occurred a problem\",\r\n                error\r\n            )))\r\n        }\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}