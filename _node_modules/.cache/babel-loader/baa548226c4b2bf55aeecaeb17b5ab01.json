{"ast":null,"code":"import{analyze,guess}from\"web-audio-beat-detector\";export function calcBpm(url){return fetch(url).then(function(response){return response.arrayBuffer();}).then(function(arrayBuffer){var audioCtx=new AudioContext();return audioCtx.decodeAudioData(arrayBuffer);}).then(function(audioBuffer){return analyze(audioBuffer);}).catch(function(error){return 0;});}export function calcBpmAndOffset(url){return fetch(url).then(function(response){return response.arrayBuffer();}).then(function(arrayBuffer){var audioCtx=new AudioContext();return audioCtx.decodeAudioData(arrayBuffer);}).then(function(audioBuffer){return guess(audioBuffer);}).catch(function(error){return{bpm:0,offset:0};});}export function calcAccurateBpmAndOffset(url){return fetch(url).then(function(response){return response.arrayBuffer();}).then(function(arrayBuffer){return new AudioContext().decodeAudioData(arrayBuffer);}).then(function(audioBuffer){return Promise.all([guess(audioBuffer),analyze(audioBuffer)]);}).then(function(results){return{bpmRounded:results[0].bpm,offset:results[0].offset,bpm:results[1]};}).catch(function(error){return{bpm:0,offset:0,bpmRounded:0,err:error};});}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/utils/bpm/analyzer.js"],"names":["analyze","guess","calcBpm","url","fetch","then","response","arrayBuffer","audioCtx","AudioContext","decodeAudioData","audioBuffer","catch","error","calcBpmAndOffset","bpm","offset","calcAccurateBpmAndOffset","Promise","all","results","bpmRounded","err"],"mappings":"AAAA,OAASA,OAAT,CAAkBC,KAAlB,KAA+B,yBAA/B,CAEA,MAAO,SAASC,CAAAA,OAAT,CAAiBC,GAAjB,CAAsB,CAC3B,MAAOC,CAAAA,KAAK,CAACD,GAAD,CAAL,CACJE,IADI,CACC,SAAAC,QAAQ,QAAIA,CAAAA,QAAQ,CAACC,WAAT,EAAJ,EADT,EAEJF,IAFI,CAEC,SAAAE,WAAW,CAAI,CACnB,GAAMC,CAAAA,QAAQ,CAAG,GAAIC,CAAAA,YAAJ,EAAjB,CACA,MAAOD,CAAAA,QAAQ,CAACE,eAAT,CAAyBH,WAAzB,CAAP,CACD,CALI,EAMJF,IANI,CAMC,SAAAM,WAAW,QAAIX,CAAAA,OAAO,CAACW,WAAD,CAAX,EANZ,EAOJC,KAPI,CAOE,SAAAC,KAAK,QAAI,EAAJ,EAPP,CAAP,CAQD,CAED,MAAO,SAASC,CAAAA,gBAAT,CAA0BX,GAA1B,CAA+B,CACpC,MAAOC,CAAAA,KAAK,CAACD,GAAD,CAAL,CACJE,IADI,CACC,SAAAC,QAAQ,QAAIA,CAAAA,QAAQ,CAACC,WAAT,EAAJ,EADT,EAEJF,IAFI,CAEC,SAAAE,WAAW,CAAI,CACnB,GAAMC,CAAAA,QAAQ,CAAG,GAAIC,CAAAA,YAAJ,EAAjB,CACA,MAAOD,CAAAA,QAAQ,CAACE,eAAT,CAAyBH,WAAzB,CAAP,CACD,CALI,EAMJF,IANI,CAMC,SAAAM,WAAW,QAAIV,CAAAA,KAAK,CAACU,WAAD,CAAT,EANZ,EAOJC,KAPI,CAOE,SAAAC,KAAK,QAAK,CAAEE,GAAG,CAAE,CAAP,CAAUC,MAAM,CAAE,CAAlB,CAAL,EAPP,CAAP,CAQD,CAED,MAAO,SAASC,CAAAA,wBAAT,CAAkCd,GAAlC,CAAuC,CAC5C,MAAOC,CAAAA,KAAK,CAACD,GAAD,CAAL,CACJE,IADI,CACC,SAAAC,QAAQ,QAAIA,CAAAA,QAAQ,CAACC,WAAT,EAAJ,EADT,EAEJF,IAFI,CAEC,SAAAE,WAAW,QAAI,IAAIE,CAAAA,YAAJ,GAAmBC,eAAnB,CAAmCH,WAAnC,CAAJ,EAFZ,EAGJF,IAHI,CAGC,SAAAM,WAAW,QAAIO,CAAAA,OAAO,CAACC,GAAR,CACjB,CAAClB,KAAK,CAACU,WAAD,CAAN,CACCX,OAAO,CAACW,WAAD,CADR,CADiB,CAAJ,EAHZ,EAOJN,IAPI,CAOE,SAAAe,OAAO,QAAK,CACfC,UAAU,CAAED,OAAO,CAAC,CAAD,CAAP,CAAWL,GADR,CAEfC,MAAM,CAAEI,OAAO,CAAC,CAAD,CAAP,CAAWJ,MAFJ,CAGfD,GAAG,CAAEK,OAAO,CAAC,CAAD,CAHG,CAAL,EAPT,EAYJR,KAZI,CAYE,SAAAC,KAAK,QAAK,CACfE,GAAG,CAAE,CADU,CAEfC,MAAM,CAAE,CAFO,CAGfK,UAAU,CAAE,CAHG,CAIfC,GAAG,CAAET,KAJU,CAAL,EAZP,CAAP,CAkBD","sourcesContent":["import { analyze, guess } from \"web-audio-beat-detector\";\r\n\r\nexport function calcBpm(url) {\r\n  return fetch(url)\r\n    .then(response => response.arrayBuffer())\r\n    .then(arrayBuffer => {\r\n      const audioCtx = new AudioContext();\r\n      return audioCtx.decodeAudioData(arrayBuffer);\r\n    })\r\n    .then(audioBuffer => analyze(audioBuffer))\r\n    .catch(error => 0);\r\n}\r\n\r\nexport function calcBpmAndOffset(url) {\r\n  return fetch(url)\r\n    .then(response => response.arrayBuffer())\r\n    .then(arrayBuffer => {\r\n      const audioCtx = new AudioContext();\r\n      return audioCtx.decodeAudioData(arrayBuffer);\r\n    })\r\n    .then(audioBuffer => guess(audioBuffer))\r\n    .catch(error => ({ bpm: 0, offset: 0 }));\r\n}\r\n\r\nexport function calcAccurateBpmAndOffset(url) {\r\n  return fetch(url)\r\n    .then(response => response.arrayBuffer())\r\n    .then(arrayBuffer => new AudioContext().decodeAudioData(arrayBuffer))\r\n    .then(audioBuffer => Promise.all(\r\n        [guess(audioBuffer), \r\n         analyze(audioBuffer)]\r\n        ))\r\n    .then( results => ({\r\n        bpmRounded: results[0].bpm,\r\n        offset: results[0].offset,\r\n        bpm: results[1]\r\n      }))\r\n    .catch(error => ({\r\n      bpm: 0,\r\n      offset: 0,\r\n      bpmRounded: 0, \r\n      err: error\r\n    }));\r\n}\r\n"]},"metadata":{},"sourceType":"module"}