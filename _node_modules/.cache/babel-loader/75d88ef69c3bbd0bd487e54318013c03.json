{"ast":null,"code":"import _regeneratorRuntime from\"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\node_modules\\\\@babel\\\\runtime/regenerator\";var _marked2=/*#__PURE__*/_regeneratorRuntime.mark(copyTrackToListSaga),_marked3=/*#__PURE__*/_regeneratorRuntime.mark(handle);import{get}from\"lodash/object\";import{hideLoading,showLoading}from'react-redux-loading-bar';import{fork,put,select,takeEvery}from\"redux-saga/effects\";import{ACTIONS,pushLog}from\"../../actions\";import{getApi}from\"./../../apis/apiProvider\";import{Log}from\"./../../utils/logger/logger\";import errorParser from\"./../../utils/serverErrorParser/errorParser\";import{formater}from\"./../../utils/time/timeFromater\";export default function copyTrackToListSaga(){var _marked,forkHandle;return _regeneratorRuntime.wrap(function copyTrackToListSaga$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:forkHandle=function _ref(action){return _regeneratorRuntime.wrap(function forkHandle$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return fork(handle,action);case 2:case\"end\":return _context.stop();}}},_marked);};_marked=/*#__PURE__*/_regeneratorRuntime.mark(forkHandle);_context2.next=4;return takeEvery(ACTIONS.PL_COPY_TRACK_TO_LIST,forkHandle);case 4:case\"end\":return _context2.stop();}}},_marked2);}var getToken=function getToken(state){return state.user.token;};var getPlaylist=function getPlaylist(state,path){return get(state.playList,path);};function handle(action){var path,token,_getApi,callQuery,queries,playlist,playlistId,playlistLength,response;return _regeneratorRuntime.wrap(function handle$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:path=['saga','playlist','request copy'];_context3.next=3;return select(getToken);case 3:token=_context3.sent;if(token){_context3.next=6;break;}return _context3.abrupt(\"return\");case 6:_context3.prev=6;_context3.next=9;return put(showLoading());case 9:_getApi=getApi(\"UserAssets\"),callQuery=_getApi.callQuery,queries=_getApi.queries;_context3.next=12;return select(getPlaylist,action.path);case 12:playlist=_context3.sent;playlistId=playlist._id;playlistLength=playlist._content.length;if(playlistId){_context3.next=17;break;}throw new Error(\"Internal error - playlist id not found\");case 17:console.e.log(\"before calling\");_context3.next=20;return callQuery(queries.createTrackQl,token,{playlist:playlistId,title:action.track.title,source:action.track.source,sourceId:action.track.sourceId.toString(),quality:action.track.quality,bpm:action.bpm==='calculating'?0:action.track.bpm,offset:action.track.offset,duration:typeof action.track.duration===\"string\"?formater.ytToSeconds(action.track.duration):action.track.duration,thumbnails:action.track.thumbnails,position:playlistLength});case 20:response=_context3.sent;console.log(response);if(!response.errors){_context3.next=24;break;}throw new Error('Server response contains errors '+errorParser(response.errors));case 24:_context3.next=26;return put(pushLog(new Log(\"Copy track id:\".concat(action.track.id,\"to playlist id:\").concat(playlistId,\" successful\"),path)));case 26:_context3.next=32;break;case 28:_context3.prev=28;_context3.t0=_context3[\"catch\"](6);_context3.next=32;return put(pushLog(Log.Error(path,\"Can't copy trakc \"+_context3.t0.message,\"Sorry. During process of coping track to playlist occurred a problem\",_context3.t0)));case 32:_context3.prev=32;_context3.next=35;return put(hideLoading());case 35:return _context3.finish(32);case 36:case\"end\":return _context3.stop();}}},_marked3,null,[[6,28,32,36]]);}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/sagas/playlists/reqCopySaga.js"],"names":["copyTrackToListSaga","handle","get","hideLoading","showLoading","fork","put","select","takeEvery","ACTIONS","pushLog","getApi","Log","errorParser","formater","forkHandle","action","PL_COPY_TRACK_TO_LIST","getToken","state","user","token","getPlaylist","path","playList","callQuery","queries","playlist","playlistId","_id","playlistLength","_content","length","Error","console","e","log","createTrackQl","title","track","source","sourceId","toString","quality","bpm","offset","duration","ytToSeconds","thumbnails","position","response","errors","id","message"],"mappings":"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","sourcesContent":["import { get } from \"lodash/object\";\r\nimport { hideLoading, showLoading } from 'react-redux-loading-bar';\r\nimport { fork, put, select, takeEvery } from \"redux-saga/effects\";\r\nimport { ACTIONS, pushLog } from \"../../actions\";\r\nimport { getApi } from \"./../../apis/apiProvider\";\r\nimport { Log } from \"./../../utils/logger/logger\";\r\nimport errorParser from \"./../../utils/serverErrorParser/errorParser\";\r\nimport { formater } from \"./../../utils/time/timeFromater\";\r\n\r\nexport default function* copyTrackToListSaga() {\r\n    yield takeEvery(ACTIONS.PL_COPY_TRACK_TO_LIST, forkHandle)\r\n    function* forkHandle(action){\r\n        yield fork(handle, action)\r\n    }\r\n}\r\n\r\nconst getToken = state => state.user.token;\r\n\r\nconst getPlaylist = (state, path) => get(state.playList, path);\r\n\r\nfunction* handle(action) {\r\n    const path = ['saga', 'playlist', 'request copy'];\r\n    const token = yield select(getToken);\r\n    if (!token) {\r\n        return;\r\n    }\r\n    try {\r\n        yield put(showLoading());\r\n        const { callQuery, queries } = getApi(\"UserAssets\");\r\n        const playlist = yield select(getPlaylist, action.path);\r\n        let playlistId = playlist._id;\r\n        let playlistLength = playlist._content.length;\r\n\r\n        if(!playlistId){\r\n            throw new Error(\"Internal error - playlist id not found\")\r\n        }\r\n\r\n        console.e.log(\"before calling\")\r\n        const response = yield callQuery(queries.createTrackQl, token, {\r\n            playlist: playlistId,\r\n            title: action.track.title,\r\n            source: action.track.source,\r\n            sourceId: action.track.sourceId.toString(),\r\n            quality: action.track.quality,\r\n            bpm: (action.bpm === 'calculating') ? 0 : action.track.bpm,\r\n            offset: action.track.offset,\r\n            duration: (typeof action.track.duration === \"string\") ?\r\n                formater.ytToSeconds(action.track.duration) :\r\n                action.track.duration,\r\n            thumbnails: action.track.thumbnails,\r\n            position: playlistLength,\r\n        });\r\n        console.log(response)\r\n\r\n        if(response.errors){\r\n            throw new Error('Server response contains errors '+ errorParser(response.errors))\r\n        }\r\n\r\n        yield put(pushLog(\r\n                new Log(`Copy track id:${action.track.id}to playlist id:${playlistId} successful`, path)\r\n            ))\r\n    } catch (error) {\r\n        yield put(pushLog(Log.Error(\r\n            path,\r\n            \"Can't copy trakc \" + error.message,\r\n            \"Sorry. During process of coping track to playlist occurred a problem\",\r\n            error\r\n        )))\r\n    } finally {\r\n        yield put(hideLoading())\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}