{"ast":null,"code":"//const map = require('unist-util-map');\nconst vFile = require('vfile');\n\nconst flatMap = require('unist-util-flatmap');\n\nmodule.exports = attacher;\n\nconst newFileFrom = (vfile, contents) => {\n  return vFile({ ...vfile,\n    contents: contents\n  });\n};\n\nfunction attacher() {\n  // console.log(\"the this\", this.Parser);\n  const pattern = /{\\.(\\w+)}/;\n  const processor = this;\n\n  function transformer(tree, file) {\n    let inlineMethods = processor.Parser.prototype.inlineMethods;\n    let blockMethods = processor.Parser.prototype.blockMethods;\n    console.log(\"before modification\", tree);\n    tree = produce(tree, state => state); //   console.log(file);\n    //  console.log(inlineMethods)\n    //console.log(tree);\n\n    const next = flatMap(tree, (node, index, parent) => {\n      if (node.type === \"text\" || !node.children) return node;\n      const _node = node;\n      parent = node;\n      let children = node.children.map(node => {\n        var _processor$parse;\n\n        if (node.type !== \"text\") return node;\n        console.log(\"node in\", node);\n        let match = pattern.exec(node.value);\n        if (!match) return node;\n        const value = node.value.replace(match[0], \"\");\n        const subNodes = (_processor$parse = processor.parse(newFileFrom(file, value))) === null || _processor$parse === void 0 ? void 0 : _processor$parse.children; // console.log(\"parnet subnodes\", parent, subNodes)\n\n        if (subNodes.some(subNode => subNode.type === \"thematicBreak\") && parent.type === \"paragraph\") {\n          parent = subNodes.find(subNode => subNode.type === \"thematicBreak\");\n          parent.className = match[1];\n          parent.position = _node.position;\n          parent.position.end.column -= match[0].length;\n          parent.position.end.offset -= match[0].length;\n        }\n      });\n      node = parent; //     node.children = [...children];\n\n      if (node.type === \"thematicBreak\" || node.type === \"text\") {\n        console.log(\"before dlelet\", node);\n        delete node.children;\n        console.log(\"after delete\", node);\n      }\n\n      console.log(\"node before modification\", _node);\n      console.log(\"node before return\", node);\n      return node;\n    });\n    console.log(\"mod tree\", next);\n    return next;\n  }\n\n  return transformer;\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/pages/introduction/MarkDonwExtesnion/reamark-hclass.js"],"names":["vFile","require","flatMap","module","exports","attacher","newFileFrom","vfile","contents","pattern","processor","transformer","tree","file","inlineMethods","Parser","prototype","blockMethods","console","log","produce","state","next","node","index","parent","type","children","_node","map","match","exec","value","replace","subNodes","parse","some","subNode","find","className","position","end","column","length","offset"],"mappings":"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","sourcesContent":["//const map = require('unist-util-map');\r\nconst vFile = require('vfile');\r\nconst flatMap = require('unist-util-flatmap')\r\n\r\nmodule.exports = attacher\r\n\r\nconst newFileFrom = (vfile, contents) => {\r\n    return vFile({...vfile, contents: contents})\r\n}\r\n\r\nfunction attacher() {\r\n   // console.log(\"the this\", this.Parser);\r\n    const pattern = /{\\.(\\w+)}/;\r\n    const processor = this;\r\n    function transformer(tree, file) {\r\n        let inlineMethods =processor.Parser.prototype.inlineMethods;\r\n        let blockMethods = processor.Parser.prototype.blockMethods;\r\n\r\n        console.log(\"before modification\", tree)\r\n        tree = produce(tree, state => state);\r\n     //   console.log(file);\r\n      //  console.log(inlineMethods)\r\n        //console.log(tree);\r\n        const next = flatMap(tree, (node , index, parent)=> {\r\n            if(node.type === \"text\" || !node.children) return node;\r\n            const _node = node;\r\n            parent = node;\r\n            let children = node.children.map( node => {\r\n\r\n                if(node.type !== \"text\") return node;\r\n                console.log(\"node in\", node)\r\n                let match = pattern.exec(node.value);\r\n                if(!match) return node;\r\n                const value = node.value.replace(match[0], \"\");\r\n                const subNodes = processor.parse(newFileFrom(file, value))?.children;\r\n               // console.log(\"parnet subnodes\", parent, subNodes)\r\n                if(subNodes.some( subNode => subNode.type === \"thematicBreak\")\r\n                    && parent.type === \"paragraph\"){\r\n                    parent = subNodes.find( subNode => subNode.type === \"thematicBreak\");\r\n                    parent.className = match[1];\r\n                    parent.position = _node.position;\r\n                    parent.position.end.column-=match[0].length;\r\n                    parent.position.end.offset-=match[0].length;\r\n\r\n                }\r\n            })\r\n            node = parent;\r\n       //     node.children = [...children];\r\n            if(node.type === \"thematicBreak\" || node.type=== \"text\"){\r\n                console.log(\"before dlelet\", node)\r\n                delete node.children;\r\n\r\n                console.log(\"after delete\", node)\r\n            }\r\n\r\n            console.log(\"node before modification\", _node)\r\n            console.log(\"node before return\", node)\r\n            return node;\r\n        })\r\n\r\n        console.log(\"mod tree\", next)\r\n        return next;\r\n    }\r\n\r\n    return transformer\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}