{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\src\\\\pages\\\\common\\\\components\\\\RecordComments\\\\RecordComments.js\";\nimport React, { useState, useCallback } from \"react\";\nimport { reqPostComment } from \"./../../../../actions\";\nimport { connect } from \"react-redux\";\nimport CommentContent from \"./Comment/Comment\";\nimport { useRecordPlayer } from \"./../../Hooks/useRecordPlayer\";\nimport \"./record-comments.scss\";\n\nconst RecordComments = ({\n  userId,\n  record,\n  postComment\n}) => {\n  const [, player] = useRecordPlayer();\n  const submitComment = useCallback(e => {\n    e.preventDefault(); // if(!postComment || !record || !userId) return;\n    // const timeOfComment = 0;\n    // const currentPlayback = player.getCurrent();\n    // if(currentPlayback.id === record.id){\n    //     timeOfComment = currentPlayback.progress * currentPlayback.duration;\n    // }\n    // const commentData = {\n    //     recordId : record.id,\n    //     userId: userId,\n    //     text: comment,\n    //     time: timeOfComment,\n    // }\n    // console.log(commentData);\n    // postComment(commentData)\n    // setComment(\"\")\n    // setShowButton(false)\n  }, [postComment]);\n  const onChange = useCallback((content, id) => {}, []);\n  return React.createElement(\"div\", {\n    className: \"record-comments\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, userId && React.createElement(\"div\", {\n    className: \"comment-post-form\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, React.createElement(CommentContent, {\n    header: \"Post your comment:\",\n    editable: true,\n    text: \"abs\",\n    onChange: e => console.log(e),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  })));\n};\n\nconst mapStateToProps = state => ({\n  record: state.records.currentRecord,\n  userId: state.user.dbId\n});\n\nconst mapDispatchToProps = dispatch => ({\n  postComment: data => dispatch(reqPostComment(data)) // deleteComment: (id) => dispatch(null),\n  // editComment : (id, comment) => dispatch(null)\n\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RecordComments);","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/pages/common/components/RecordComments/RecordComments.js"],"names":["React","useState","useCallback","reqPostComment","connect","CommentContent","useRecordPlayer","RecordComments","userId","record","postComment","player","submitComment","e","preventDefault","onChange","content","id","console","log","mapStateToProps","state","records","currentRecord","user","dbId","mapDispatchToProps","dispatch","data"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,WAA1B,QAA6C,OAA7C;AACA,SAAQC,cAAR,QAA6B,uBAA7B;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,OAAOC,cAAP,MAA2B,mBAA3B;AAEA,SAAQC,eAAR,QAA8B,+BAA9B;AACA,OAAO,wBAAP;;AAGA,MAAMC,cAAc,GAAG,CAAC;AAChBC,EAAAA,MADgB;AAEhBC,EAAAA,MAFgB;AAGhBC,EAAAA;AAHgB,CAAD,KAId;AACL,QAAM,GAAGC,MAAH,IAAaL,eAAe,EAAlC;AAIA,QAAMM,aAAa,GAAGV,WAAW,CAAEW,CAAD,IAAO;AACrCA,IAAAA,CAAC,CAACC,cAAF,GADqC,CAErC;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACH,GArBgC,EAqB/B,CAAEJ,WAAF,CArB+B,CAAjC;AAwBA,QAAMK,QAAQ,GAAGb,WAAW,CAAC,CAACc,OAAD,EAAUC,EAAV,KAAiB,CAE7C,CAF2B,EAEzB,EAFyB,CAA5B;AAIA,SACI;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKT,MAAM,IAAI;AAAK,IAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAmBP,oBAAC,cAAD;AAAgB,IAAA,MAAM,EAAC,oBAAvB;AAA4C,IAAA,QAAQ,MAApD;AAAqD,IAAA,IAAI,EAAE,KAA3D;AAAkE,IAAA,QAAQ,EAAGK,CAAC,IAAIK,OAAO,CAACC,GAAR,CAAYN,CAAZ,CAAlF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAnBO,CADf,CADJ;AA2BH,CAhED;;AAiEA,MAAMO,eAAe,GAAGC,KAAK,KAAK;AAC9BZ,EAAAA,MAAM,EAAEY,KAAK,CAACC,OAAN,CAAcC,aADQ;AAE9Bf,EAAAA,MAAM,EAAEa,KAAK,CAACG,IAAN,CAAWC;AAFW,CAAL,CAA7B;;AAKA,MAAMC,kBAAkB,GAAGC,QAAQ,KAAK;AACpCjB,EAAAA,WAAW,EAAGkB,IAAD,IAAUD,QAAQ,CAACxB,cAAc,CAACyB,IAAD,CAAf,CADK,CAEpC;AACA;;AAHoC,CAAL,CAAnC;;AAMA,eAAexB,OAAO,CAACgB,eAAD,EAAkBM,kBAAlB,CAAP,CAA6CnB,cAA7C,CAAf","sourcesContent":["import React, { useState, useCallback } from \"react\";\r\nimport {reqPostComment} from \"./../../../../actions\";\r\nimport {connect} from \"react-redux\";\r\nimport CommentContent from \"./Comment/Comment\";\r\n\r\nimport {useRecordPlayer} from \"./../../Hooks/useRecordPlayer\";\r\nimport \"./record-comments.scss\";\r\n\r\n\r\nconst RecordComments = ({\r\n        userId,\r\n        record, \r\n        postComment, \r\n    }) =>{\r\n    const [, player] = useRecordPlayer();\r\n\r\n\r\n\r\n    const submitComment = useCallback((e) => {\r\n        e.preventDefault();\r\n        // if(!postComment || !record || !userId) return;\r\n\r\n        // const timeOfComment = 0;\r\n        // const currentPlayback = player.getCurrent();\r\n        // if(currentPlayback.id === record.id){\r\n        //     timeOfComment = currentPlayback.progress * currentPlayback.duration;\r\n        // }\r\n\r\n        // const commentData = {\r\n        //     recordId : record.id,\r\n        //     userId: userId,\r\n        //     text: comment,\r\n        //     time: timeOfComment,\r\n        // }\r\n        // console.log(commentData);\r\n        // postComment(commentData)\r\n\r\n        // setComment(\"\")\r\n        // setShowButton(false)\r\n    },[ postComment, ])\r\n\r\n\r\n    const onChange = useCallback((content, id) => {\r\n\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"record-comments\">\r\n            {userId && <div className=\"comment-post-form\">\r\n                {/* <Form onSubmit={submitComment}\r\n                    onFocus={setShowButton.bind(null, true)}\r\n                    onBlur={onBlur}>\r\n                    <Form.Group>\r\n                        <Form.Label>\r\n                            Post your comment:\r\n                        </Form.Label>\r\n                        <Form.Control \r\n                            className=\"record-comments-control\"\r\n                            type=\"textarea\" \r\n                            as=\"textarea\"\r\n                            name=\"comment-conntent\"\r\n                            value={comment}\r\n\r\n                            onChange={updateComment}/>\r\n                    </Form.Group>\r\n                    {showButton && <Button type=\"submit\">Post</Button>}\r\n                </Form> */}\r\n                <CommentContent header=\"Post your comment:\" editable text={\"abs\"} onChange={ e => console.log(e)}/>\r\n            </div>}\r\n\r\n                       \r\n        </div>\r\n    )\r\n}\r\nconst mapStateToProps = state => ({\r\n    record: state.records.currentRecord,\r\n    userId: state.user.dbId,\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    postComment: (data) => dispatch(reqPostComment(data)),\r\n    // deleteComment: (id) => dispatch(null),\r\n    // editComment : (id, comment) => dispatch(null)\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(RecordComments)"]},"metadata":{},"sourceType":"module"}