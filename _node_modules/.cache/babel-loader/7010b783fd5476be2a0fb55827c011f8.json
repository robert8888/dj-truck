{"ast":null,"code":"export default (() => {\n  self.addEventListener(\"message\", e => {\n    /* eslint-disable-line no-restricted-globals */\n    console.log('in worker get message', e);\n\n    if (!e || !(e.data[0] instanceof Array)) {\n      return;\n    }\n\n    const peaks = e.data[0];\n    console.log(\"in send back peaks\");\n    interpolate(peaks).then(peaks => postMessage([peaks])); //setTimeout(()=>postMessage([peaks]), 2000);\n  }); //simple iterpolate by const factor\n  //output is between 1000 and 2000 element \n\n  async function interpolate(input) {\n    let output = [];\n    const targetBoundry = {\n      max: 2000,\n      min: 1000\n    };\n    let inputSize = input.length;\n    return output;\n  }\n});","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/pages/console/core/console/mixer/recorder/interpolatePeaksWorker.js"],"names":["self","addEventListener","e","console","log","data","Array","peaks","interpolate","then","postMessage","input","output","targetBoundry","max","min","inputSize","length"],"mappings":"AAAA,gBAAe,MAAK;AAChBA,EAAAA,IAAI,CAACC,gBAAL,CAAsB,SAAtB,EAAiCC,CAAC,IAAI;AAAC;AACnCC,IAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCF,CAArC;;AACA,QAAG,CAACA,CAAD,IAAM,EAAEA,CAAC,CAACG,IAAF,CAAO,CAAP,aAAqBC,KAAvB,CAAT,EAAuC;AACnC;AACH;;AACD,UAAMC,KAAK,GAAGL,CAAC,CAACG,IAAF,CAAO,CAAP,CAAd;AAEAF,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACAI,IAAAA,WAAW,CAACD,KAAD,CAAX,CAAmBE,IAAnB,CAAwBF,KAAK,IAAIG,WAAW,CAAC,CAACH,KAAD,CAAD,CAA5C,EARkC,CASlC;AACH,GAVD,EADgB,CAYhB;AACA;;AAEA,iBAAeC,WAAf,CAA2BG,KAA3B,EAAiC;AAC7B,QAAIC,MAAM,GAAG,EAAb;AACA,UAAMC,aAAa,GAAG;AAClBC,MAAAA,GAAG,EAAE,IADa;AAElBC,MAAAA,GAAG,EAAE;AAFa,KAAtB;AAIA,QAAIC,SAAS,GAAGL,KAAK,CAACM,MAAtB;AAEA,WAAOL,MAAP;AACH;AACJ,CAzBD","sourcesContent":["export default () =>{\r\n    self.addEventListener(\"message\", e => {/* eslint-disable-line no-restricted-globals */\r\n        console.log('in worker get message', e)\r\n        if(!e || !(e.data[0] instanceof Array)){\r\n            return;\r\n        }\r\n        const peaks = e.data[0]\r\n\r\n        console.log(\"in send back peaks\")\r\n        interpolate(peaks).then(peaks => postMessage([peaks]))\r\n        //setTimeout(()=>postMessage([peaks]), 2000);\r\n    })\r\n    //simple iterpolate by const factor\r\n    //output is between 1000 and 2000 element \r\n\r\n    async function interpolate(input){\r\n        let output = [];\r\n        const targetBoundry = {\r\n            max: 2000,\r\n            min: 1000,\r\n        }\r\n        let inputSize = input.length;\r\n\r\n        return output;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}