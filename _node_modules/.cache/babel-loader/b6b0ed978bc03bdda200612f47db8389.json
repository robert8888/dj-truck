{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJEKTY\\\\APKI\\\\DjTruck\\\\djtruck\\\\src\\\\pages\\\\app\\\\components\\\\PlayListExplorer\\\\PlayList\\\\Playlist_Item\\\\PlaylistItem.js\";\nimport React, { useContext, useRef } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Button } from \"react-bootstrap\";\nimport { loadTrack, deleteTrack } from \"../../../../../../actions\";\nimport PlaylistContext from \"./../PlaylistContext\";\nimport { useDrag, useDrop } from \"react-dnd\";\nimport ItemTypes from \"./../../../../appItemTypes\";\n\nconst PlaylistItem = props => {\n  const ref = useRef(null);\n  const ctx = useContext(PlaylistContext);\n  let track = { ...props.item\n  };\n  track.source = track.source;\n  const [{\n    isDragging\n  }, drag] = useDrag({\n    item: {\n      type: ItemTypes.TRACK,\n      index: props.listIndex,\n      track: track\n    },\n    collect: monitor => ({\n      isDragging: monitor.isDragging()\n    })\n  });\n  const [_, drop] = useDrop({\n    accept: ItemTypes.TRACK,\n\n    hover(item, monitor) {\n      if (!ref.current) {\n        return;\n      }\n\n      const dragIndex = item.index;\n      const hoverIndex = props.listIndex;\n\n      if (dragIndex === hoverIndex) {\n        return;\n      }\n\n      const hoverBoundingRect = ref.current.getBoundingClientRect();\n      const hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\n      const clientOffset = monitor.getClientOffset();\n      const hoverClientY = clientOffset.y - hoverBoundingRect.top; // only if more than half\n\n      if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n        return;\n      } // only if more than half\n\n\n      if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n        return;\n      }\n\n      props.swapItems(dragIndex, hoverIndex);\n      item.index = hoverIndex;\n    }\n\n  });\n  drag(drop(ref));\n  const style = {\n    opacity: isDragging ? 0 : 1\n  }; ///--------- formatingg\n\n  const timeFormating = time => time.substr(2, time.length).toLowerCase();\n\n  const bpmFromating = bpm => {\n    if (!bpm) {\n      return null;\n    } else if (bpm = \"calculating\") {\n      return \"calculating\";\n    } else {\n      return bpm.toFixed(2);\n    }\n  };\n\n  return React.createElement(\"tr\", {\n    ref: ref,\n    className: \"track-list-table-row\",\n    style: style,\n    onMouseEnter: ctx.setHover.bind(null, props.listIndex),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    className: \"track-list-table-col source\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, props.listIndex + 1), React.createElement(\"td\", {\n    className: \"track-list-table-col source\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, track.source), React.createElement(\"td\", {\n    className: \"track-list-table-col title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, track.title), React.createElement(\"td\", {\n    className: \"track-list-table-col quality\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, track.quality), React.createElement(\"td\", {\n    className: \"track-list-table-col time\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, timeFormating(track.duration)), React.createElement(\"td\", {\n    className: \"track-list-table-col bpm\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, bpmFromating(track.bpm)));\n};\n\nconst mapDispatchToProps = dispach => ({\n  load: (track, destination) => dispach(loadTrack(track, destination))\n});\n\nexport default connect(null, mapDispatchToProps)(PlaylistItem);","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/pages/app/components/PlayListExplorer/PlayList/Playlist_Item/PlaylistItem.js"],"names":["React","useContext","useRef","connect","Button","loadTrack","deleteTrack","PlaylistContext","useDrag","useDrop","ItemTypes","PlaylistItem","props","ref","ctx","track","item","source","isDragging","drag","type","TRACK","index","listIndex","collect","monitor","_","drop","accept","hover","current","dragIndex","hoverIndex","hoverBoundingRect","getBoundingClientRect","hoverMiddleY","bottom","top","clientOffset","getClientOffset","hoverClientY","y","swapItems","style","opacity","timeFormating","time","substr","length","toLowerCase","bpmFromating","bpm","toFixed","setHover","bind","title","quality","duration","mapDispatchToProps","dispach","load","destination"],"mappings":"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","sourcesContent":["import React, { useContext, useRef } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport { loadTrack, deleteTrack } from \"../../../../../../actions\";\r\nimport PlaylistContext from \"./../PlaylistContext\";\r\nimport { useDrag , useDrop } from \"react-dnd\";\r\nimport ItemTypes from \"./../../../../appItemTypes\";\r\n\r\n\r\nconst PlaylistItem = props => {\r\n    const ref = useRef(null)\r\n\r\n    const ctx = useContext(PlaylistContext);\r\n\r\n    let track = {\r\n        ...props.item\r\n    }\r\n    track.source = track.source;\r\n\r\n    const [ {isDragging}, drag] = useDrag({\r\n        item: { \r\n             type: ItemTypes.TRACK,\r\n             index: props.listIndex,\r\n             track: track\r\n            },\r\n        collect: (monitor) =>({\r\n            isDragging: monitor.isDragging()\r\n        })\r\n    })\r\n\r\n    const [ _ , drop] = useDrop({\r\n        accept : ItemTypes.TRACK,\r\n        hover(item, monitor) {\r\n            if (!ref.current) {\r\n              return\r\n            }\r\n            const dragIndex = item.index;\r\n            const hoverIndex = props.listIndex;\r\n\r\n            if (dragIndex === hoverIndex) {\r\n              return\r\n            }\r\n            const hoverBoundingRect = ref.current.getBoundingClientRect()\r\n            const hoverMiddleY =\r\n              (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2\r\n\r\n            const clientOffset = monitor.getClientOffset()\r\n\r\n            const hoverClientY = clientOffset.y - hoverBoundingRect.top\r\n            // only if more than half\r\n            if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\r\n              return\r\n            }\r\n            // only if more than half\r\n            if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\r\n              return\r\n            }\r\n\r\n            props.swapItems(dragIndex, hoverIndex)\r\n\r\n            item.index = hoverIndex\r\n        }\r\n    })\r\n\r\n    drag(drop(ref));\r\n\r\n    const style = {\r\n        opacity: (isDragging)? 0 : 1 \r\n    }\r\n\r\n    ///--------- formatingg\r\n    const timeFormating = time => time.substr(2, time.length).toLowerCase();\r\n\r\n    const bpmFromating = bpm => {\r\n      if(!bpm){\r\n        return null;\r\n      } else if(bpm =\"calculating\"){\r\n        return \"calculating\"\r\n      } else {\r\n        return bpm.toFixed(2)\r\n      }\r\n    }\r\n    \r\n    return (\r\n        <tr\r\n            ref={ref}\r\n            className=\"track-list-table-row\"\r\n            style={style}\r\n            onMouseEnter={ctx.setHover.bind(null, props.listIndex)}>\r\n              <td className=\"track-list-table-col source\">{props.listIndex + 1}</td>\r\n              <td className=\"track-list-table-col source\">{track.source}</td>\r\n              <td className=\"track-list-table-col title\">{track.title}</td>\r\n              <td className=\"track-list-table-col quality\">{track.quality}</td>\r\n              <td className=\"track-list-table-col time\">{timeFormating(track.duration)}</td>\r\n              <td className=\"track-list-table-col bpm\">{ bpmFromating(track.bpm)}</td>\r\n            {/*  <td className=\"track-list-table-col\">\r\n                    <Button className=\"btn-dest dest-a\" onClick={e => props.load(track, \"A\")}>A</Button>\r\n                    <Button className=\"btn-dest dest-b\" onClick={e => props.load(track, \"B\")}>B</Button>\r\n        </td>*/}\r\n        </tr>\r\n    )\r\n}\r\n\r\nconst mapDispatchToProps = dispach => ({\r\n    load: (track, destination) => dispach(loadTrack(track, destination))\r\n})\r\n\r\nexport default connect(null, mapDispatchToProps)(PlaylistItem);\r\n\r\n"]},"metadata":{},"sourceType":"module"}