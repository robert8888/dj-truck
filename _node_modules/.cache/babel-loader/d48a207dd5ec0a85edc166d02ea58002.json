{"ast":null,"code":"import store from \"./../../../../store\";\nimport WaveSurfer from \"wavesurfer\";\nimport { hexToRgb } from \"./../../../../utils/colors/converter\";\nimport { getBeatLength } from \"./../../../../utils/bpm/converter\";\nexport default class Looper {\n  constructor() {}\n\n  makeLoop(channel, loopLength) {\n    const state = store.getState();\n    const channelName = channel.channelName;\n    const beatLength = getBeatLength(state.console.channel[channelName].track.bpm);\n    const beatOffset = state.console.channel[channelName].playBackState.offset;\n    const currentPosition = channel.master.getCurrentTime();\n    const audioBufferSource = channel.master.backend.source;\n    const start = currentPosition + (beatLength - (currentPosition - beatOffset) % beatLength);\n    const end = start + beatLength * loopLength;\n    audioBufferSource.loopStart = start;\n    audioBufferSource.loopEnd = end;\n    audioBufferSource.loop = true;\n\n    channel.looperWatch = time => {\n      if (time > end) {\n        channel.master.backend.startPosition = start;\n        channel.master.backend.lastPlay = channel.master.backend.ac.currentTime;\n        channel.master.drawer.progress(channel.master.backend.getPlayedPercents());\n        console.log(\"looped\");\n      }\n    };\n\n    channel.master.on(\"audioprocess\", channel.looperWatch);\n    this.drawLoop(channel, start, end);\n    console.log(\"start loop\", channel, loopLength);\n  }\n\n  endLoop(channel) {\n    console.log(\"stop loop\", channel);\n    channel.master.un(\"audioprocess\", channel.looperWatch);\n    channel.master.backend.source.loop = false;\n    this.clearDraw(channel);\n  }\n\n  drawLoop(channel, start, end) {\n    let wrapper = channel.master.drawer.wrapper;\n    let styleApply = WaveSurfer.Drawer.style;\n    let minPxPerSec = channel.master.params.minPxPerSec;\n    let color = hexToRgb(channel.master.params.waveColor);\n\n    for (let i = offset; i < channel.master.getDuration(); i += bitLength) {\n      barPostions.push(i);\n    }\n\n    regionStyle = {\n      position: \"absolute\",\n      top: \"0px\",\n      height: \"100%\",\n      background: \"rgba(\" + color.r + \",\" + color.g + \",\" + color.b + \" 0.5)\"\n    };\n    let region = document.createElement(\"div\");\n    style.left = channel.master.getDuration() / start * minPxPerSec + \"px\";\n    style.width = channel.master.getDuration() / (end - start) * minPxPerSec + \"px\";\n    styleApply(region, regionStyle);\n    wrapper.appendChild(region);\n    channel.loopRegion = region;\n  }\n\n  clearDraw() {}\n\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/core/console/channels/looper/looper.js"],"names":["store","WaveSurfer","hexToRgb","getBeatLength","Looper","constructor","makeLoop","channel","loopLength","state","getState","channelName","beatLength","console","track","bpm","beatOffset","playBackState","offset","currentPosition","master","getCurrentTime","audioBufferSource","backend","source","start","end","loopStart","loopEnd","loop","looperWatch","time","startPosition","lastPlay","ac","currentTime","drawer","progress","getPlayedPercents","log","on","drawLoop","endLoop","un","clearDraw","wrapper","styleApply","Drawer","style","minPxPerSec","params","color","waveColor","i","getDuration","bitLength","barPostions","push","regionStyle","position","top","height","background","r","g","b","region","document","createElement","left","width","appendChild","loopRegion"],"mappings":"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","sourcesContent":["import store from \"./../../../../store\";\r\nimport WaveSurfer from \"wavesurfer\";\r\nimport {hexToRgb} from \"./../../../../utils/colors/converter\";\r\nimport {getBeatLength} from \"./../../../../utils/bpm/converter\";\r\n\r\nexport default class Looper{\r\n    constructor(){\r\n\r\n    }\r\n\r\n\r\n    makeLoop(channel, loopLength){\r\n        const state = store.getState();\r\n        const channelName = channel.channelName;\r\n\r\n        const beatLength = getBeatLength(state.console.channel[channelName].track.bpm);\r\n        const beatOffset = state.console.channel[channelName].playBackState.offset;\r\n        const currentPosition = channel.master.getCurrentTime();\r\n        const audioBufferSource = channel.master.backend.source;\r\n\r\n        const start = currentPosition + (beatLength - (currentPosition - beatOffset) % beatLength);\r\n        const end = start + beatLength * loopLength;\r\n\r\n\r\n        audioBufferSource.loopStart = start;\r\n        audioBufferSource.loopEnd = end;\r\n        audioBufferSource.loop = true;\r\n\r\n        channel.looperWatch = (time)=>{\r\n            if(time > end){\r\n                channel.master.backend.startPosition = start;\r\n                channel.master.backend.lastPlay = channel.master.backend.ac.currentTime;\r\n                channel.master.drawer.progress(channel.master.backend.getPlayedPercents())\r\n                console.log(\"looped\")\r\n            }\r\n        }\r\n\r\n        channel.master.on(\"audioprocess\", channel.looperWatch);\r\n        this.drawLoop(channel, start, end);\r\n        console.log(\"start loop\", channel, loopLength)\r\n    }\r\n\r\n\r\n\r\n\r\n    endLoop(channel){\r\n        console.log(\"stop loop\", channel);\r\n        channel.master.un(\"audioprocess\", channel.looperWatch);\r\n        channel.master.backend.source.loop = false;\r\n        this.clearDraw(channel);\r\n    }\r\n\r\n    drawLoop(channel, start, end){\r\n        let wrapper = channel.master.drawer.wrapper;\r\n        let styleApply = WaveSurfer.Drawer.style;\r\n        let minPxPerSec = channel.master.params.minPxPerSec;\r\n        let color = hexToRgb(channel.master.params.waveColor);\r\n    \r\n        for (let i = offset; i < channel.master.getDuration(); i += bitLength) {\r\n          barPostions.push(i);\r\n        }\r\n    \r\n        regionStyle = {\r\n          position: \"absolute\",\r\n          top: \"0px\",\r\n          height: \"100%\",\r\n          background: \"rgba(\" + color.r + \",\" + color.g + \",\" + color.b + \" 0.5)\"\r\n        };\r\n    \r\n        let region = document.createElement(\"div\");\r\n        style.left = ((channel.master.getDuration() / start) * minPxPerSec) + \"px\";\r\n        style.width = ((channel.master.getDuration() / (end - start)) * minPxPerSec) + \"px\";\r\n\r\n        styleApply(region, regionStyle);\r\n        wrapper.appendChild(region);\r\n        channel.loopRegion = region;\r\n    }\r\n\r\n    clearDraw(){\r\n\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}