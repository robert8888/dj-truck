{"ast":null,"code":"import { put, select, takeEvery } from \"redux-saga/effects\";\nimport { ACTIONS, pushLog, setRecDeleteStatus } from \"../../actions\";\nimport { getApi } from \"./../../apis/apiProvider\";\nimport { Log } from \"./../../utils/logger/logger\";\nimport errorParser from \"./../../utils/serverErrorParser/errorParser\";\nexport default function* requestDeleteRecord() {\n  yield takeEvery(ACTIONS.RECS_REQ_DELETE, handel);\n}\n\nconst getToken = state => state.user.token;\n\nfunction* handel(action) {\n  const token = yield select(getToken);\n\n  try {\n    var _response$data;\n\n    const {\n      callQuery,\n      queries\n    } = getApi(\"UserAssets\");\n    const {\n      deleteRecord: deleteRecordFromStore\n    } = getApi('RecordsStore');\n    const query = queries.deleteRecordQl(action.recordId);\n    const response = yield callQuery(query, token);\n\n    if (response.errors) {\n      throw new Error(\"Server response contains errors \" + errorParser(response.errors));\n    }\n\n    let success = response === null || response === void 0 ? void 0 : (_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.deleteRecord;\n\n    if (success) {\n      const status = yield deleteRecordFromStore(action.recordId);\n      success = status === 'success';\n    }\n\n    if (!success) {\n      throw new Error(\"Can't delete reacords from record store database\");\n    }\n\n    yield put(setRecDeleteStatus(\"SUCCESS\"));\n    yield put(pushLog(new Log(`Record successfully deleted in database, record id: ${action.recordId}`)));\n  } catch (error) {\n    console.log(\"i get error \", error);\n    yield put(setRecDeleteStatus(\"FAIL\"));\n    yield pushLog(Log.Error(['saga', 'record', 'request download record'], \"Can't delete record in database\", \"Sorry. During process of deleteing record from database occurred a problem\", error));\n  }\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/sagas/records/reqDeleteRecord.js"],"names":["put","select","takeEvery","ACTIONS","pushLog","setRecDeleteStatus","getApi","Log","errorParser","requestDeleteRecord","RECS_REQ_DELETE","handel","getToken","state","user","token","action","callQuery","queries","deleteRecord","deleteRecordFromStore","query","deleteRecordQl","recordId","response","errors","Error","success","data","status","error","console","log"],"mappings":"AAAA,SAASA,GAAT,EAAcC,MAAd,EAAsBC,SAAtB,QAAuC,oBAAvC;AACA,SAASC,OAAT,EAAkBC,OAAlB,EAA2BC,kBAA3B,QAAqD,eAArD;AACA,SAASC,MAAT,QAAuB,0BAAvB;AACA,SAASC,GAAT,QAAoB,6BAApB;AACA,OAAOC,WAAP,MAAwB,6CAAxB;AAGA,eAAe,UAAUC,mBAAV,GAAgC;AAC3C,QAAMP,SAAS,CAACC,OAAO,CAACO,eAAT,EAA0BC,MAA1B,CAAf;AACH;;AAED,MAAMC,QAAQ,GAAGC,KAAK,IAAIA,KAAK,CAACC,IAAN,CAAWC,KAArC;;AAEA,UAAUJ,MAAV,CAAiBK,MAAjB,EAAyB;AACrB,QAAMD,KAAK,GAAG,MAAMd,MAAM,CAACW,QAAD,CAA1B;;AAEA,MAAI;AAAA;;AACA,UAAM;AAAEK,MAAAA,SAAF;AAAaC,MAAAA;AAAb,QAAyBZ,MAAM,CAAC,YAAD,CAArC;AACA,UAAM;AAAEa,MAAAA,YAAY,EAAEC;AAAhB,QAA0Cd,MAAM,CAAC,cAAD,CAAtD;AAEA,UAAMe,KAAK,GAAGH,OAAO,CAACI,cAAR,CAAuBN,MAAM,CAACO,QAA9B,CAAd;AACA,UAAMC,QAAQ,GAAG,MAAMP,SAAS,CAACI,KAAD,EAAQN,KAAR,CAAhC;;AACA,QAAIS,QAAQ,CAACC,MAAb,EAAqB;AACjB,YAAM,IAAIC,KAAJ,CAAU,qCAAqClB,WAAW,CAACgB,QAAQ,CAACC,MAAV,CAA1D,CAAN;AACH;;AAED,QAAIE,OAAO,GAAGH,QAAH,aAAGA,QAAH,yCAAGA,QAAQ,CAAEI,IAAb,mDAAG,eAAgBT,YAA9B;;AACA,QAAIQ,OAAJ,EAAa;AACT,YAAME,MAAM,GAAG,MAAMT,qBAAqB,CAACJ,MAAM,CAACO,QAAR,CAA1C;AACAI,MAAAA,OAAO,GAAIE,MAAM,KAAK,SAAtB;AACH;;AAGD,QAAI,CAACF,OAAL,EAAc;AACV,YAAM,IAAID,KAAJ,CAAU,kDAAV,CAAN;AACH;;AAED,UAAM1B,GAAG,CAACK,kBAAkB,CAAC,SAAD,CAAnB,CAAT;AAEA,UAAML,GAAG,CAACI,OAAO,CAAC,IAAIG,GAAJ,CAAS,uDAAsDS,MAAM,CAACO,QAAS,EAA/E,CAAD,CAAR,CAAT;AACH,GAxBD,CAwBE,OAAOO,KAAP,EAAc;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BF,KAA5B;AACA,UAAM9B,GAAG,CAACK,kBAAkB,CAAC,MAAD,CAAnB,CAAT;AACA,UAAMD,OAAO,CAACG,GAAG,CAACmB,KAAJ,CACV,CAAC,MAAD,EAAS,QAAT,EAAmB,yBAAnB,CADU,EAEV,iCAFU,EAGV,4EAHU,EAIVI,KAJU,CAAD,CAAb;AAMH;AAIJ","sourcesContent":["import { put, select, takeEvery } from \"redux-saga/effects\";\r\nimport { ACTIONS, pushLog, setRecDeleteStatus } from \"../../actions\";\r\nimport { getApi } from \"./../../apis/apiProvider\";\r\nimport { Log } from \"./../../utils/logger/logger\";\r\nimport errorParser from \"./../../utils/serverErrorParser/errorParser\";\r\n\r\n\r\nexport default function* requestDeleteRecord() {\r\n    yield takeEvery(ACTIONS.RECS_REQ_DELETE, handel)\r\n}\r\n\r\nconst getToken = state => state.user.token\r\n\r\nfunction* handel(action) {\r\n    const token = yield select(getToken);\r\n\r\n    try {\r\n        const { callQuery, queries } = getApi(\"UserAssets\");\r\n        const { deleteRecord: deleteRecordFromStore } = getApi('RecordsStore')\r\n\r\n        const query = queries.deleteRecordQl(action.recordId);\r\n        const response = yield callQuery(query, token);\r\n        if (response.errors) {\r\n            throw new Error(\"Server response contains errors \" + errorParser(response.errors));\r\n        }\r\n\r\n        let success = response?.data?.deleteRecord;\r\n        if (success) {\r\n            const status = yield deleteRecordFromStore(action.recordId);\r\n            success = (status === 'success')\r\n        }\r\n\r\n\r\n        if (!success) {\r\n            throw new Error(\"Can't delete reacords from record store database\")\r\n        } \r\n\r\n        yield put(setRecDeleteStatus(\"SUCCESS\"))\r\n\r\n        yield put(pushLog(new Log(`Record successfully deleted in database, record id: ${action.recordId}`)))\r\n    } catch (error) {\r\n        console.log(\"i get error \", error)\r\n        yield put(setRecDeleteStatus(\"FAIL\"))\r\n        yield pushLog(Log.Error(\r\n            ['saga', 'record', 'request download record'],\r\n            \"Can't delete record in database\",\r\n            \"Sorry. During process of deleteing record from database occurred a problem\",\r\n            error\r\n        ))\r\n    }\r\n\r\n\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}