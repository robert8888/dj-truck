{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJEKTY\\\\APKI\\\\DjTruck\\\\djtruck\\\\src\\\\components\\\\Deck\\\\PitchSlider\\\\Slider\\\\Slider.js\";\nimport React from \"react\";\nimport \"./slider.scss\";\n\nclass Slider extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      sliderRange: null,\n      sliderCurrnetPosition: null,\n      sliderPrevPosition: null,\n      isDragged: false,\n      thumbHeight: 0,\n      sliderAreaTopOffset: 0\n    };\n\n    this.getRange = () => {\n      const from = this.props.from;\n      const to = this.props.to;\n      return {\n        from,\n        to,\n        range: from * to < 0 ? Math.abs(to) + Math.abs(from) : to - from\n      };\n    };\n\n    this.evalValue = () => {\n      const {\n        from,\n        to,\n        range\n      } = this.getRange();\n      const progress = (this.state.sliderCurrnetPosition - this.state.thumbHeight / 2) / this.state.sliderRange;\n      let value = range * progress + from;\n\n      if (this.props.quantize !== undefined) {\n        console.log(this.state.sliderCurrnetPosition);\n        const rest = value % this.props.quantize;\n        return value === from || value === to ? value : value - rest;\n      }\n\n      return value;\n    };\n\n    this.setValue = value => {\n      const {\n        from,\n        range\n      } = this.getRange();\n      const progress = (value - from) / range;\n      const position = progress * this.state.sliderRange;\n      this.setPosition(position + this.state.thumbHeight / 2);\n    };\n\n    this.setPosition = (currentPosition, prevPosition) => {\n      this.setState({ ...this.state,\n        sliderCurrnetPosition: currentPosition,\n        sliderPrevPosition: prevPosition || this.state.sliderPrevPosition\n      }, () => {\n        if (this.props.onChange) {\n          this.props.onChange(this.evalValue());\n        }\n      });\n    };\n\n    this.mouseDownHandle = event => {\n      if (event.target === this.sliderAreaElement.current || event.target === this.sliderRangeElement.current) {\n        //temporary\n        let clickY = event.clientY - this.sliderAreaElement.current.getBoundingClientRect().top;\n        this.setPosition(clickY, this.state.sliderCurrnetPosition);\n      } else // dragging \n        if (event.target === this.sliderThumbElement.current) {\n          this.setState({ ...this.state,\n            isDragged: true\n          });\n          const shiftY = event.clientY - this.sliderThumbElement.current.getBoundingClientRect().top;\n          document.addEventListener('mousemove', e => this.mouseMoveHandler.call(this, e, shiftY));\n          document.addEventListener('dragstart', e => e.preventDefault());\n        }\n\n      document.addEventListener('mouseup', this.mouseUpHandler);\n      document.addEventListener('dragend', this.mouseUpHandler);\n    };\n\n    this.mouseUpHandler = event => {\n      if (this.state.isDragged) {\n        this.setState({ ...this.state,\n          isDragged: false\n        });\n      } else {\n        this.setPosition(this.state.sliderPrevPosition);\n      }\n\n      document.removeEventListener('mousemove', this.mouseMoveHandler.bind(this));\n      document.removeEventListener('mouseup', this.mouseUpHandler);\n      document.removeEventListener('dragend', this.mouseUpHandler);\n    };\n\n    this.mouseMoveHandler = (event, shiftY) => {\n      if (!this.state.isDragged) return;\n      let position = event.clientY - this.state.sliderAreaTopOffset - shiftY + this.state.thumbHeight / 2;\n      position = Math.min(Math.max(position, this.state.thumbHeight / 2), this.state.sliderRange + this.state.thumbHeight / 2);\n      this.setPosition(position);\n    };\n\n    this.sliderRangeElement = React.createRef();\n    this.sliderThumbElement = React.createRef();\n    this.sliderAreaElement = React.createRef();\n  }\n\n  componentDidMount() {\n    const thumbHeight = this.sliderThumbElement.current.getBoundingClientRect().height;\n    const topOffset = this.sliderAreaElement.current.getBoundingClientRect().top;\n    const top = parseInt(window.getComputedStyle(this.sliderThumbElement.current).top);\n    const range = parseInt(window.getComputedStyle(this.sliderRangeElement.current).height);\n    this.setState(state => {\n      const _state = { ...state\n      };\n      _state.sliderCurrnetPosition = top;\n      _state.sliderRange = range;\n      _state.thumbHeight = thumbHeight;\n      _state.sliderAreaTopOffset = topOffset;\n      return _state;\n    }, () => {\n      if (this.props.value !== undefined) {\n        this.setValue(this.props.initValue);\n      }\n    });\n    this.sliderAreaElement.current.addEventListener('mousedown', this.mouseDownHandle.bind(this));\n  }\n\n  shouldComponentUpdate(nextProps) {\n    return nextProps.value !== this.props.value;\n  }\n\n  render() {\n    console.log('render slider');\n    this.setValue(this.props.initValue);\n    return React.createElement(\"div\", {\n      className: \"slider\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      ref: this.sliderAreaElement,\n      className: \"slider-area\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      ref: this.sliderRangeElement,\n      className: \"slider-range\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"slider-thumb\",\n      ref: this.sliderThumbElement,\n      style: (this.state.sliderCurrnetPosition !== null || this.state.sliderCurrnetPosition !== undefined) && {\n        top: this.state.sliderCurrnetPosition\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default Slider;","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/components/Deck/PitchSlider/Slider/Slider.js"],"names":["React","Slider","Component","constructor","state","sliderRange","sliderCurrnetPosition","sliderPrevPosition","isDragged","thumbHeight","sliderAreaTopOffset","getRange","from","props","to","range","Math","abs","evalValue","progress","value","quantize","undefined","console","log","rest","setValue","position","setPosition","currentPosition","prevPosition","setState","onChange","mouseDownHandle","event","target","sliderAreaElement","current","sliderRangeElement","clickY","clientY","getBoundingClientRect","top","sliderThumbElement","shiftY","document","addEventListener","e","mouseMoveHandler","call","preventDefault","mouseUpHandler","removeEventListener","bind","min","max","createRef","componentDidMount","height","topOffset","parseInt","window","getComputedStyle","_state","initValue","shouldComponentUpdate","nextProps","render"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport \"./slider.scss\";\r\n\r\nclass Slider extends React.Component{\r\n    constructor() {\r\n        super();\r\n\r\n        this.sliderRangeElement = React.createRef();\r\n        this.sliderThumbElement = React.createRef();\r\n        this.sliderAreaElement = React.createRef();\r\n    }\r\n\r\n    state = {\r\n        sliderRange: null,\r\n        sliderCurrnetPosition: null,\r\n        sliderPrevPosition: null,\r\n        isDragged : false,\r\n\r\n        thumbHeight: 0,\r\n        sliderAreaTopOffset : 0,\r\n    }\r\n\r\n    getRange = () => {\r\n        const from = this.props.from;\r\n        const to = this.props.to;\r\n        return{\r\n            from,\r\n            to,\r\n            range : (from * to < 0) ?  Math.abs(to) + Math.abs(from) : to - from,\r\n        }\r\n  \r\n    }\r\n\r\n    evalValue = () => {\r\n        const {from , to,  range} = this.getRange();\r\n        const progress = (this.state.sliderCurrnetPosition - this.state.thumbHeight / 2)\r\n                         / this.state.sliderRange;\r\n\r\n        let value =  range * progress + from;\r\n        if(this.props.quantize !== undefined){\r\n            console.log(this.state.sliderCurrnetPosition)\r\n            const rest = value % this.props.quantize;\r\n            return  (value === from || value === to) ? value : value - rest;\r\n        } \r\n        return value;\r\n    }\r\n\r\n    setValue = (value) => {\r\n        const { from , range } = this.getRange();\r\n        const progress = (value - from)/ range;  \r\n        const position = progress * (this.state.sliderRange);\r\n        this.setPosition(position + this.state.thumbHeight / 2 )\r\n    }\r\n\r\n    setPosition = (currentPosition, prevPosition) => {\r\n        this.setState({...this.state, \r\n            sliderCurrnetPosition : currentPosition,\r\n            sliderPrevPosition : prevPosition || this.state.sliderPrevPosition,\r\n        }, ()=>{\r\n            if(this.props.onChange){\r\n                this.props.onChange(this.evalValue());\r\n            }\r\n        });\r\n    }\r\n\r\n    mouseDownHandle = (event) =>{\r\n        if(event.target === this.sliderAreaElement.current || event.target === this.sliderRangeElement.current){ //temporary\r\n            let clickY = event.clientY - this.sliderAreaElement.current.getBoundingClientRect().top;\r\n            this.setPosition(clickY, this.state.sliderCurrnetPosition);\r\n        } else // dragging \r\n            if(event.target === this.sliderThumbElement.current){ \r\n            this.setState({...this.state, isDragged: true});\r\n            const shiftY = event.clientY - this.sliderThumbElement.current.getBoundingClientRect().top;\r\n            document.addEventListener('mousemove', e =>  this.mouseMoveHandler.call(this, e, shiftY))\r\n            document.addEventListener('dragstart', e => e.preventDefault())\r\n        }\r\n        document.addEventListener('mouseup', this.mouseUpHandler);\r\n        document.addEventListener('dragend', this.mouseUpHandler);\r\n    }\r\n\r\n    mouseUpHandler = event => {\r\n        if(this.state.isDragged){\r\n            this.setState({...this.state, isDragged: false});\r\n        } else {\r\n            this.setPosition(this.state.sliderPrevPosition);\r\n        }\r\n\r\n        document.removeEventListener('mousemove', this.mouseMoveHandler.bind(this));\r\n        document.removeEventListener('mouseup', this.mouseUpHandler);\r\n        document.removeEventListener('dragend', this.mouseUpHandler);\r\n    }\r\n\r\n    mouseMoveHandler = (event, shiftY) =>{\r\n        if(!this.state.isDragged) return;\r\n        let position = event.clientY \r\n                        - this.state.sliderAreaTopOffset \r\n                        - shiftY \r\n                        + (this.state.thumbHeight/2);\r\n\r\n        position = Math.min( Math.max(position, this.state.thumbHeight/2), \r\n                            this.state.sliderRange + this.state.thumbHeight/2 );\r\n       \r\n        this.setPosition(position);\r\n    }\r\n\r\n    componentDidMount(){\r\n        const thumbHeight = this.sliderThumbElement.current.getBoundingClientRect().height;\r\n        const topOffset = this.sliderAreaElement.current.getBoundingClientRect().top;\r\n        const top = parseInt(window.getComputedStyle(this.sliderThumbElement.current).top) ;\r\n        const range = parseInt(window.getComputedStyle(this.sliderRangeElement.current).height)\r\n\r\n\r\n        this.setState( state => {\r\n            const _state = {...state};\r\n            _state.sliderCurrnetPosition = top;\r\n            _state.sliderRange = range;\r\n            _state.thumbHeight = thumbHeight;\r\n            _state.sliderAreaTopOffset = topOffset;\r\n            return _state;\r\n        }, () => {\r\n            if(this.props.value !== undefined){\r\n                this.setValue(this.props.initValue);\r\n            }\r\n        })\r\n\r\n        this.sliderAreaElement.current.addEventListener('mousedown',  this.mouseDownHandle.bind(this));\r\n    }\r\n    shouldComponentUpdate(nextProps){\r\n        return (nextProps.value !== this.props.value)\r\n    }\r\n\r\n\r\n    render() {\r\n        console.log('render slider');\r\n        this.setValue(this.props.initValue);\r\n            return (\r\n                <div className=\"slider\" >\r\n                    <div ref={this.sliderAreaElement} className=\"slider-area\">\r\n                        <div ref={this.sliderRangeElement} className=\"slider-range\"/>\r\n                        <div className=\"slider-thumb\" \r\n                             ref={this.sliderThumbElement} \r\n                             style={ (this.state.sliderCurrnetPosition !== null || this.state.sliderCurrnetPosition !== undefined)\r\n                                     && {top: this.state.sliderCurrnetPosition}} />\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n}\r\n\r\nexport default Slider;"]},"metadata":{},"sourceType":"module"}