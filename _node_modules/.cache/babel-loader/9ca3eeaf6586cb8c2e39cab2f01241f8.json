{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJEKTY\\\\APKI\\\\DjTruck\\\\djtruck\\\\src\\\\components\\\\Mixer\\\\Channel\\\\PeakLevelMeter\\\\PeakLevelMeter.js\";\nimport React from \"react\";\nimport Console from \"./../../../../core/console/console\";\nimport \"./peak-level-meter.scss\"; // there is 20 leds indicators\n// 15 is blue and calc from bottom last 15 is zero dB.\n// scale range is between -40 dB and + 10 dB\n// this means that on led is 2.5 dB\n\nclass PeakLevelMater extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      ledStates: {\n        left: new Array(50).fill(false),\n        right: new Array(50).fill(false)\n      },\n      mixerChannelInterface: Console.Get().getMixerChannelInterface(this.props.name)\n    };\n\n    this.mouseOverHandler = event => {};\n  }\n\n  componentDidMount() {\n    let updateLedStates = () => {\n      let nextLedState = new Array(this.state.ledStates.length).fill(false);\n      let peakMeter = this.state.mixerChannelInterface.getPeakMeter();\n      let ledOn = 15 + peakMeter.peakdB / 2.5;\n\n      for (let i = 0; i < ledOn && i < this.state.ledStates.length; i++) {\n        nextLedState[i] = true;\n      }\n\n      this.setState({ ...this.state,\n        ledStates: {\n          left: nextLedStat,\n          right: nextLedState\n        }\n      });\n      requestAnimationFrame(updateLedStates);\n    };\n\n    updateLedStates();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"peak-level-meter\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"meter-channel\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, this.state.ledStates.left.map((ledState, index) => {\n      return React.createElement(\"div\", {\n        key: index,\n        className: \"level-meter-led led-\" + index + (ledState ? \" led-on\" : \" led-off\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      });\n    })));\n  }\n\n}\n\nexport default PeakLevelMater;","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/components/Mixer/Channel/PeakLevelMeter/PeakLevelMeter.js"],"names":["React","Console","PeakLevelMater","Component","state","ledStates","left","Array","fill","right","mixerChannelInterface","Get","getMixerChannelInterface","props","name","mouseOverHandler","event","componentDidMount","updateLedStates","nextLedState","length","peakMeter","getPeakMeter","ledOn","peakdB","i","setState","nextLedStat","requestAnimationFrame","render","map","ledState","index"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,oCAApB;AACA,OAAO,yBAAP,C,CAEA;AACA;AACA;AACA;;AAEA,MAAMC,cAAN,SAA6BF,KAAK,CAACG,SAAnC,CAA4C;AAAA;AAAA;AAAA,SAExCC,KAFwC,GAEhC;AACJC,MAAAA,SAAS,EAAG;AACRC,QAAAA,IAAI,EAAG,IAAIC,KAAJ,CAAU,EAAV,CAAD,CAAgBC,IAAhB,CAAqB,KAArB,CADE;AAERC,QAAAA,KAAK,EAAG,IAAIF,KAAJ,CAAU,EAAV,CAAD,CAAgBC,IAAhB,CAAqB,KAArB;AAFC,OADR;AAKJE,MAAAA,qBAAqB,EAAGT,OAAO,CAACU,GAAR,GAAcC,wBAAd,CAAuC,KAAKC,KAAL,CAAWC,IAAlD;AALpB,KAFgC;;AAAA,SAUxCC,gBAVwC,GAUpBC,KAAD,IAAW,CAE7B,CAZuC;AAAA;;AAcxCC,EAAAA,iBAAiB,GAAE;AACf,QAAIC,eAAe,GAAG,MAAK;AACxB,UAAIC,YAAY,GAAI,IAAIZ,KAAJ,CAAU,KAAKH,KAAL,CAAWC,SAAX,CAAqBe,MAA/B,CAAD,CAAyCZ,IAAzC,CAA8C,KAA9C,CAAnB;AAEC,UAAIa,SAAS,GAAG,KAAKjB,KAAL,CAAWM,qBAAX,CAAiCY,YAAjC,EAAhB;AACA,UAAIC,KAAK,GAAG,KAAKF,SAAS,CAACG,MAAV,GAAmB,GAApC;;AAEA,WAAI,IAAIC,CAAC,GAAG,CAAZ,EAAiBA,CAAC,GAAGF,KAAJ,IAAaE,CAAC,GAAG,KAAKrB,KAAL,CAAWC,SAAX,CAAqBe,MAAvD,EAAgEK,CAAC,EAAjE,EAAqE;AACjEN,QAAAA,YAAY,CAACM,CAAD,CAAZ,GAAkB,IAAlB;AACH;;AAED,WAAKC,QAAL,CAAc,EACV,GAAG,KAAKtB,KADE;AAEVC,QAAAA,SAAS,EAAG;AACRC,UAAAA,IAAI,EAAEqB,WADE;AAERlB,UAAAA,KAAK,EAAEU;AAFC;AAFF,OAAd;AAOAS,MAAAA,qBAAqB,CAACV,eAAD,CAArB;AACH,KAlBD;;AAoBAA,IAAAA,eAAe;AAClB;;AAEDW,EAAAA,MAAM,GAAE;AACJ,WACI;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACM,KAAKzB,KAAL,CAAWC,SAAX,CAAqBC,IAArB,CAA0BwB,GAA1B,CAA8B,CAACC,QAAD,EAAWC,KAAX,KAAmB;AAC/C,aAAQ;AAAK,QAAA,GAAG,EAAEA,KAAV;AAAiB,QAAA,SAAS,EAAE,yBAAwBA,KAAxB,IAAkCD,QAAD,GAAa,SAAb,GAAyB,UAA1D,CAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAR;AACH,KAFC,CADN,CADJ,CADJ;AASH;;AAhDuC;;AAoD5C,eAAe7B,cAAf","sourcesContent":["import React from \"react\"\r\nimport Console from \"./../../../../core/console/console\";\r\nimport \"./peak-level-meter.scss\";\r\n\r\n// there is 20 leds indicators\r\n// 15 is blue and calc from bottom last 15 is zero dB.\r\n// scale range is between -40 dB and + 10 dB\r\n// this means that on led is 2.5 dB\r\n\r\nclass PeakLevelMater extends React.Component{\r\n\r\n    state = {\r\n        ledStates : {\r\n            left: (new Array(50)).fill(false),\r\n            right: (new Array(50)).fill(false)\r\n        },\r\n        mixerChannelInterface : Console.Get().getMixerChannelInterface(this.props.name),\r\n    }\r\n\r\n    mouseOverHandler = (event) => {\r\n\r\n    }\r\n\r\n    componentDidMount(){\r\n        let updateLedStates = () =>{\r\n           let nextLedState = (new Array(this.state.ledStates.length)).fill(false);\r\n\r\n            let peakMeter = this.state.mixerChannelInterface.getPeakMeter();\r\n            let ledOn = 15 + peakMeter.peakdB / 2.5;\r\n\r\n            for(let i = 0 ; (i < ledOn && i < this.state.ledStates.length); i++) {\r\n                nextLedState[i] = true;\r\n            }\r\n\r\n            this.setState({\r\n                ...this.state, \r\n                ledStates : {\r\n                    left: nextLedStat,\r\n                    right: nextLedState,\r\n                }\r\n            })\r\n            requestAnimationFrame(updateLedStates);\r\n        }\r\n        \r\n        updateLedStates();\r\n    }\r\n    \r\n    render(){\r\n        return (\r\n            <div className=\"peak-level-meter\">\r\n                <div className=\"meter-channel\">\r\n                    { this.state.ledStates.left.map((ledState, index)=>{\r\n                        return (<div key={index} className={\"level-meter-led led-\"+ index + ((ledState) ? \" led-on\" : \" led-off\") }/>)\r\n                    })}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default PeakLevelMater;"]},"metadata":{},"sourceType":"module"}