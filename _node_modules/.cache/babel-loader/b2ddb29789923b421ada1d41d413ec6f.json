{"ast":null,"code":"import React, { useMemo, useState, useEffect, useCallback, useContext } from \"react\";\nimport { getApi } from \"./../../../../apis/apiProvider\";\nimport { PLAYBACK_STATE } from \"./ListItem/PlaybackButton/PlaybackButton\"; //getRecordUrl\n\nexport const PlayerContext = React.createContext({\n  btnStateHandlers: {},\n  setProgressHandlers: [],\n  getProgressDataHandler: [],\n  progressUpdaterHandler: null,\n\n  setBtnCtrlHandler(id, handler) {\n    this.btnStateHandlers[id] = handler;\n  },\n\n  setBtnState(id, state) {\n    this.btnStateHandlers[id](state);\n  },\n\n  setProgressHandler(id, handler) {\n    if (this.setProgressHandlers[id]) {\n      this.setProgressHandlers[id].push(handler);\n    }\n\n    this.setProgressHandlers[id] = [handler];\n  },\n\n  setProgress(id, progress) {\n    for (let handler of this.setProgressHandlers[id]) {\n      handler(progress);\n    }\n  },\n\n  setProgressDataHandler(id, handler) {\n    this.getProgressDataHandler[id] = handler;\n  },\n\n  getProgress(id) {\n    return this.getProgressDataHandler[id]();\n  }\n\n});\nexport function useRecordPlayer() {\n  const [mediaElement, setMediaElement] = useState(null); // const [current, setCurrent] = useState(null);\n  // const [currentStart, setCurrentStart] = useState(0);\n\n  const [current, setCurrent] = useState({\n    id: null,\n    start: 0,\n    duration: 0\n  });\n  const [progressUpdater, setProgressUpdater] = useState(null);\n  const ctrContext = useContext(PlayerContext);\n  const api = useMemo(() => {\n    return getApi('RecordsStore');\n  }, [getApi]);\n  useEffect(() => {\n    const medEl = document.createElement('audio');\n    medEl.autoplay = true;\n    medEl.preload = 'metadata';\n    setMediaElement(medEl);\n  }, [setMediaElement]);\n  const startUpdateProg = useCallback(current => {\n    const handler = setInterval(() => {\n      if (!current.id || !current.duration) {\n        return;\n      }\n\n      const startTime = current.start * (current.duration / 1000);\n      const currTime = startTime + mediaElement.currentTime;\n      const progress = currTime / (current.duration / 1000);\n      ctrContext.setProgress(current.id, progress);\n    }, 200);\n    ctrContext.progressUpdaterHandler = handler;\n  }, [setProgressUpdater, mediaElement, ctrContext]);\n  const stopUpdateProg = useCallback(() => {\n    clearInterval(ctrContext.progressUpdaterHandler);\n  }, [ctrContext]);\n  const playback = useCallback((id, pbState) => {\n    if (pbState === PLAYBACK_STATE.PLAY) {\n      const {\n        progress,\n        duration,\n        filePosition\n      } = ctrContext.getProgress(id);\n      mediaElement.src = api.getRecordUrl(id, filePosition);\n      mediaElement.play();\n\n      if (current.id) {\n        ctrContext.setBtnState(current.id, PLAYBACK_STATE.PAUSE);\n      }\n\n      const curr = { ...current,\n        id,\n        duration,\n        start: progress\n      };\n      setCurrent(curr);\n      startUpdateProg(curr);\n    } else if (pbState === PLAYBACK_STATE.PAUSE) {\n      mediaElement.pause();\n      stopUpdateProg();\n    }\n  }, [mediaElement, api, current, setCurrent, stopUpdateProg, startUpdateProg, progressUpdater]);\n  const seek = useCallback(({\n    id,\n    filePosition,\n    progress,\n    duration\n  }) => {\n    stopUpdateProg();\n    mediaElement.src = api.getRecordUrl(id, filePosition);\n    ctrContext.setBtnState(id, PLAYBACK_STATE.PLAY);\n    ctrContext.setProgress(id, progress);\n    const curr = {\n      id,\n      start: progress,\n      duration\n    };\n    setCurrent(curr);\n    startUpdateProg(curr);\n  }, [stopUpdateProg, startUpdateProg, setCurrent, ctrContext, api, mediaElement]);\n  return [playback, seek];\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/pages/common/components/RecordList/useRecordPlayer.js"],"names":["React","useMemo","useState","useEffect","useCallback","useContext","getApi","PLAYBACK_STATE","PlayerContext","createContext","btnStateHandlers","setProgressHandlers","getProgressDataHandler","progressUpdaterHandler","setBtnCtrlHandler","id","handler","setBtnState","state","setProgressHandler","push","setProgress","progress","setProgressDataHandler","getProgress","useRecordPlayer","mediaElement","setMediaElement","current","setCurrent","start","duration","progressUpdater","setProgressUpdater","ctrContext","api","medEl","document","createElement","autoplay","preload","startUpdateProg","setInterval","startTime","currTime","currentTime","stopUpdateProg","clearInterval","playback","pbState","PLAY","filePosition","src","getRecordUrl","play","PAUSE","curr","pause","seek"],"mappings":"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","sourcesContent":["import React, { useMemo, useState, useEffect, useCallback, useContext } from \"react\"\r\nimport { getApi } from \"./../../../../apis/apiProvider\";\r\nimport {PLAYBACK_STATE} from \"./ListItem/PlaybackButton/PlaybackButton\";\r\n\r\n//getRecordUrl\r\nexport const PlayerContext = React.createContext({\r\n    btnStateHandlers: {},\r\n    setProgressHandlers:[],\r\n    getProgressDataHandler: [],\r\n    progressUpdaterHandler: null, \r\n\r\n    setBtnCtrlHandler(id, handler){\r\n        this.btnStateHandlers[id] = handler;\r\n    },\r\n\r\n    setBtnState(id, state){\r\n        this.btnStateHandlers[id](state)\r\n    },\r\n\r\n    setProgressHandler(id, handler){\r\n        if(this.setProgressHandlers[id]){\r\n            this.setProgressHandlers[id].push(handler);\r\n        }\r\n        this.setProgressHandlers[id] = [handler];\r\n    },\r\n\r\n    setProgress(id, progress){\r\n        for(let handler of this.setProgressHandlers[id]){\r\n            handler(progress)\r\n        }\r\n    },\r\n  \r\n    setProgressDataHandler(id, handler){\r\n        this.getProgressDataHandler[id] = handler;\r\n    },\r\n\r\n    getProgress(id){\r\n        return this.getProgressDataHandler[id]();\r\n    }\r\n})\r\n\r\nexport function useRecordPlayer(){\r\n    const [mediaElement, setMediaElement] = useState(null);\r\n    // const [current, setCurrent] = useState(null);\r\n    // const [currentStart, setCurrentStart] = useState(0);\r\n    const [current, setCurrent] = useState({\r\n        id: null,\r\n        start: 0,\r\n        duration: 0\r\n    })\r\n    const [progressUpdater, setProgressUpdater] = useState(null);\r\n    const ctrContext = useContext(PlayerContext);\r\n\r\n    const api = useMemo(()=>{\r\n        return getApi('RecordsStore');\r\n    }, [getApi])\r\n\r\n    useEffect(()=>{\r\n        const medEl = document.createElement('audio');\r\n        medEl.autoplay = true;\r\n        medEl.preload = 'metadata'\r\n        setMediaElement(medEl)\r\n    }, [setMediaElement])\r\n\r\n    const startUpdateProg = useCallback((current)=>{\r\n        const handler = setInterval(()=>{\r\n            if(!current.id || !current.duration){\r\n                return;\r\n            }\r\n            const startTime = current.start * (current.duration/1000);\r\n            const currTime = startTime + mediaElement.currentTime;\r\n            const progress = currTime / (current.duration/1000);\r\n            ctrContext.setProgress(current.id, progress);\r\n        }, 200)\r\n        ctrContext.progressUpdaterHandler = handler;\r\n    }, [setProgressUpdater, mediaElement, ctrContext])\r\n\r\n    const stopUpdateProg = useCallback(()=>{\r\n        clearInterval(ctrContext.progressUpdaterHandler);\r\n    }, [ctrContext])\r\n\r\n    const playback = useCallback((id, pbState)=>{\r\n        if(pbState === PLAYBACK_STATE.PLAY){\r\n            const {progress, duration, filePosition} = ctrContext.getProgress(id);\r\n            mediaElement.src = api.getRecordUrl(id, filePosition);\r\n            mediaElement.play();\r\n            if(current.id){\r\n                ctrContext.setBtnState(current.id, PLAYBACK_STATE.PAUSE)\r\n            } \r\n            const curr = {\r\n                ...current,\r\n                id,\r\n                duration,\r\n                start: progress\r\n            }\r\n            setCurrent(curr);\r\n            startUpdateProg(curr);\r\n        } else if(pbState === PLAYBACK_STATE.PAUSE){\r\n            mediaElement.pause();\r\n            stopUpdateProg(); \r\n        }\r\n    }, [\r\n        mediaElement, \r\n        api, \r\n        current, \r\n        setCurrent, \r\n        stopUpdateProg, \r\n        startUpdateProg,\r\n        progressUpdater\r\n    ])\r\n\r\n    const seek = useCallback(({id, filePosition, progress, duration}) => {\r\n        stopUpdateProg();\r\n        mediaElement.src = api.getRecordUrl(id, filePosition);\r\n        ctrContext.setBtnState(id, PLAYBACK_STATE.PLAY);\r\n        ctrContext.setProgress(id, progress);\r\n        const curr = {\r\n            id,\r\n            start: progress,\r\n            duration\r\n        }\r\n        setCurrent(curr)\r\n        startUpdateProg(curr);\r\n    }, [stopUpdateProg, startUpdateProg, setCurrent, ctrContext, api , mediaElement])\r\n\r\n\r\n\r\n    return [playback, seek ]\r\n}"]},"metadata":{},"sourceType":"module"}