{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJEKTY\\\\APKI\\\\DjTruck\\\\djtruck\\\\src\\\\pages\\\\app\\\\components\\\\Console\\\\Mixer\\\\Channel\\\\PeakLevelMeter\\\\PeakLevelMeter.js\";\nimport React from \"react\";\nimport Console from \"./../../../../core/console/console\";\nimport \"./peak-level-meter.scss\"; // there is 20 leds indicators\n// 15 is blue and calc from bottom last 15 is zero dB.\n// scale range is between -40 dB and + 10 dB\n// this means that on led is 2.5 dB\n\nclass PeakLevelMater extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      ledStates: {\n        left: {\n          peak: false,\n          states: new Array(this.size).fill(false)\n        },\n        right: {\n          peak: false,\n          states: new Array(this.size).fill(false)\n        }\n      },\n      mixerChannelInterface: Console.Get().getMixerChannelInterface(this.props.name)\n    };\n\n    this.mouseOverHandler = event => {};\n\n    this.size = 30;\n  }\n\n  componentDidMount() {\n    let updateLedStates = () => {\n      let nextLedState = new Array(this.size).fill(false);\n      let peakMeter = this.state.mixerChannelInterface.getPeakMeter();\n      let ledOn = 25 + peakMeter.peakdB / 2;\n\n      for (let i = 0; i < ledOn && i < this.size; i++) {\n        nextLedState[i] = true;\n      }\n\n      const channelState = {\n        peak: peakMeter.peakdB > 0,\n        states: nextLedState\n      };\n      this.setState({ ...this.state,\n        ledStates: {\n          left: channelState,\n          right: channelState\n        }\n      });\n      requestAnimationFrame(updateLedStates);\n    };\n\n    updateLedStates();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"peak-level-meter\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"meter-channel\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, this.state.ledStates.left.states.map((ledState, index) => {\n      return React.createElement(\"div\", {\n        key: index,\n        className: \"level-meter-led led-\" + index + (ledState ? \" led-on\" : \" led-off\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      });\n    })), React.createElement(\"div\", {\n      className: \"meter-channel\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, this.state.ledStates.right.states.map((ledState, index) => {\n      return React.createElement(\"div\", {\n        key: index,\n        className: \"level-meter-led led-\" + index + (ledState ? \" led-on\" : \" led-off\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      });\n    })));\n  }\n\n}\n\nexport default PeakLevelMater;","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/pages/app/components/Console/Mixer/Channel/PeakLevelMeter/PeakLevelMeter.js"],"names":["React","Console","PeakLevelMater","Component","constructor","args","state","ledStates","left","peak","states","Array","size","fill","right","mixerChannelInterface","Get","getMixerChannelInterface","props","name","mouseOverHandler","event","componentDidMount","updateLedStates","nextLedState","peakMeter","getPeakMeter","ledOn","peakdB","i","channelState","setState","requestAnimationFrame","render","map","ledState","index"],"mappings":"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","sourcesContent":["import React from \"react\"\r\nimport Console from \"./../../../../core/console/console\";\r\nimport \"./peak-level-meter.scss\";\r\n// there is 20 leds indicators\r\n// 15 is blue and calc from bottom last 15 is zero dB.\r\n// scale range is between -40 dB and + 10 dB\r\n// this means that on led is 2.5 dB\r\n\r\nclass PeakLevelMater extends React.Component{\r\n    constructor(...args){\r\n        super(...args);\r\n        this.size = 30;\r\n    }\r\n\r\n    state = {\r\n        ledStates : {\r\n            left: {\r\n                peak : false,\r\n                states : (new Array(this.size)).fill(false),\r\n            },\r\n            right: \r\n            {\r\n                peak : false,\r\n                states : (new Array(this.size)).fill(false),\r\n            },\r\n        },\r\n        mixerChannelInterface : Console.Get().getMixerChannelInterface(this.props.name),\r\n    }\r\n\r\n    mouseOverHandler = (event) => {\r\n\r\n    }\r\n\r\n    componentDidMount(){\r\n        let updateLedStates = () =>{\r\n           let nextLedState = (new Array(this.size)).fill(false);\r\n\r\n            let peakMeter = this.state.mixerChannelInterface.getPeakMeter();\r\n            let ledOn = 25 + peakMeter.peakdB / 2;\r\n\r\n            for(let i = 0 ; (i < ledOn && i < this.size); i++) {\r\n                nextLedState[i] = true;\r\n            }\r\n\r\n            const channelState = {\r\n                peak : (peakMeter.peakdB > 0),\r\n                states : nextLedState\r\n            }\r\n\r\n            this.setState({\r\n                ...this.state, \r\n                ledStates : {\r\n                    left: channelState,\r\n                    right: channelState,\r\n\r\n                }\r\n            })\r\n            requestAnimationFrame(updateLedStates);\r\n        }\r\n        \r\n        updateLedStates();\r\n    }\r\n    \r\n    render(){\r\n        return (\r\n            <div className=\"peak-level-meter\">\r\n                <div className=\"meter-channel\">\r\n                    { this.state.ledStates.left.states.map((ledState, index)=>{\r\n                        return (<div key={index} className={\"level-meter-led led-\"+ index + ((ledState) ? \" led-on\" : \" led-off\") }/>)\r\n                    })}\r\n                </div>\r\n                <div className=\"meter-channel\">\r\n                    { this.state.ledStates.right.states.map((ledState, index)=>{\r\n                        return (<div key={index} className={\"level-meter-led led-\"+ index + ((ledState) ? \" led-on\" : \" led-off\") }/>)\r\n                    })}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default PeakLevelMater;"]},"metadata":{},"sourceType":"module"}