{"ast":null,"code":"import { analyze, guess } from 'web-audio-beat-detector';\nexport function calcBpm(url) {\n  return fetch(url).then(response => response.arrayBuffer()).then(arrayBuffer => {\n    const audioCtx = new AudioContext();\n    return audioCtx.decodeAudioData(arrayBuffer);\n  }).then(audioBuffer => analyze(audioBuffer)).catch(error => 0);\n}\nexport function calcBpmAndOffset(url) {\n  return fetch(url).then(response => response.arrayBuffer()).then(arrayBuffer => {\n    const audioCtx = new AudioContext();\n    return audioCtx.decodeAudioData(arrayBuffer);\n  }).then(audioBuffer => guess(audioBuffer)).catch(error => ({\n    bpm: 0,\n    offset: 0\n  }));\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/utils/bpm/analyzer.js"],"names":["analyze","guess","calcBpm","url","fetch","then","response","arrayBuffer","audioCtx","AudioContext","decodeAudioData","audioBuffer","catch","error","calcBpmAndOffset","bpm","offset"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,KAAlB,QAA+B,yBAA/B;AAEA,OAAO,SAASC,OAAT,CAAiBC,GAAjB,EAAqB;AACxB,SAAOC,KAAK,CAACD,GAAD,CAAL,CACNE,IADM,CACDC,QAAQ,IAAIA,QAAQ,CAACC,WAAT,EADX,EAENF,IAFM,CAEDE,WAAW,IAAI;AACjB,UAAMC,QAAQ,GAAG,IAAIC,YAAJ,EAAjB;AACA,WAAOD,QAAQ,CAACE,eAAT,CAAyBH,WAAzB,CAAP;AACH,GALM,EAKJF,IALI,CAKEM,WAAW,IAAIX,OAAO,CAACW,WAAD,CALxB,EAMNC,KANM,CAMAC,KAAK,IAAI,CANT,CAAP;AAOH;AAED,OAAO,SAASC,gBAAT,CAA0BX,GAA1B,EAA8B;AACjC,SAAOC,KAAK,CAACD,GAAD,CAAL,CACNE,IADM,CACDC,QAAQ,IAAIA,QAAQ,CAACC,WAAT,EADX,EAENF,IAFM,CAEDE,WAAW,IAAI;AACjB,UAAMC,QAAQ,GAAG,IAAIC,YAAJ,EAAjB;AACA,WAAOD,QAAQ,CAACE,eAAT,CAAyBH,WAAzB,CAAP;AACH,GALM,EAKJF,IALI,CAKEM,WAAW,IAAIV,KAAK,CAACU,WAAD,CALtB,EAMNC,KANM,CAMAC,KAAK,KAAK;AAACE,IAAAA,GAAG,EAAE,CAAN;AAASC,IAAAA,MAAM,EAAC;AAAhB,GAAL,CANL,CAAP;AAOH","sourcesContent":["import { analyze, guess } from 'web-audio-beat-detector';\r\n\r\nexport function calcBpm(url){\r\n    return fetch(url)\r\n    .then(response => response.arrayBuffer())\r\n    .then(arrayBuffer => {\r\n        const audioCtx = new AudioContext();\r\n        return audioCtx.decodeAudioData(arrayBuffer);\r\n    }).then( audioBuffer => analyze(audioBuffer))\r\n    .catch(error => 0);\r\n}\r\n\r\nexport function calcBpmAndOffset(url){\r\n    return fetch(url)\r\n    .then(response => response.arrayBuffer())\r\n    .then(arrayBuffer => {\r\n        const audioCtx = new AudioContext();\r\n        return audioCtx.decodeAudioData(arrayBuffer);\r\n    }).then( audioBuffer => guess(audioBuffer))\r\n    .catch(error => ({bpm: 0, offset:0 }))\r\n}\r\n"]},"metadata":{},"sourceType":"module"}