{"ast":null,"code":"const {\n  tokenizeCssClass\n} = require(\"./tokenizeCssClass\");\n\nconst {\n  tokenizeCssClassBlock\n} = require(\"./tokenizeCssClassBlock\");\n\nmodule.exports = parseCssClass;\n\nfunction parseCssClass() {\n  console.log(\"this from pars class\", this);\n  let Parser = this.Parser;\n  let inlineTokenizers = Parser.prototype.inlineTokenizers;\n  let blockTokenizers = Parser.prototype.blockTokenizers;\n  let inlineMethods = Parser.prototype.inlineMethods;\n  let blockMethods = Parser.prototype.blockMethods; // console.log('inline methods', inlineMethods);\n  // console.log('block methods', blockMethods)\n  // Add an inline tokenizer (defined in the following example).\n\n  function locateMention(value, fromIndex) {\n    return value.indexOf('{.', fromIndex);\n  }\n\n  tokenizeCssClass.notInLink = true;\n  tokenizeCssClass.locator = locateMention;\n\n  function tokenizeCssClass(eat, value, silent) {\n    console.log(\"value\", value);\n    var match = /^{\\.(\\w+)}/.exec(value);\n\n    if (match) {\n      if (silent) {\n        return true;\n      } // let value = match[0].replace(match[1], value)\n\n\n      return eat(match[0])({\n        type: \"cssClass\",\n        className: match[1]\n      });\n    }\n  }\n\n  inlineTokenizers.cssClass = tokenizeCssClass;\n  blockTokenizers.cssClassBlock = tokenizeCssClassBlock; // Run it just before `text`.\n\n  inlineMethods.splice(inlineMethods.indexOf('thematicBreak'), 0, 'cssClass'); // blockMethods.splice(blockMethods.indexOf('paragraph'), 0, 'cssClassBlock')\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/pages/introduction/MarkDonwExtesnion/parseCssClass.js"],"names":["tokenizeCssClass","require","tokenizeCssClassBlock","module","exports","parseCssClass","console","log","Parser","inlineTokenizers","prototype","blockTokenizers","inlineMethods","blockMethods","locateMention","value","fromIndex","indexOf","notInLink","locator","eat","silent","match","exec","type","className","cssClass","cssClassBlock","splice"],"mappings":"AACA,MAAM;AAACA,EAAAA;AAAD,IAAqBC,OAAO,CAAC,oBAAD,CAAlC;;AACA,MAAM;AAACC,EAAAA;AAAD,IAA0BD,OAAO,CAAC,yBAAD,CAAvC;;AACAE,MAAM,CAACC,OAAP,GAAiBC,aAAjB;;AAEA,SAASA,aAAT,GAAyB;AACrBC,EAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoC,IAApC;AACA,MAAIC,MAAM,GAAG,KAAKA,MAAlB;AACA,MAAIC,gBAAgB,GAAGD,MAAM,CAACE,SAAP,CAAiBD,gBAAxC;AACA,MAAIE,eAAe,GAAGH,MAAM,CAACE,SAAP,CAAiBC,eAAvC;AACA,MAAIC,aAAa,GAAGJ,MAAM,CAACE,SAAP,CAAiBE,aAArC;AACA,MAAIC,YAAY,GAAGL,MAAM,CAACE,SAAP,CAAiBG,YAApC,CANqB,CAQtB;AACA;AACC;;AAGA,WAASC,aAAT,CAAuBC,KAAvB,EAA8BC,SAA9B,EAAyC;AACrC,WAAOD,KAAK,CAACE,OAAN,CAAc,IAAd,EAAoBD,SAApB,CAAP;AACH;;AAEDhB,EAAAA,gBAAgB,CAACkB,SAAjB,GAA6B,IAA7B;AACAlB,EAAAA,gBAAgB,CAACmB,OAAjB,GAA2BL,aAA3B;;AAEA,WAASd,gBAAT,CAA0BoB,GAA1B,EAA+BL,KAA/B,EAAsCM,MAAtC,EAA8C;AAC1Cf,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBQ,KAArB;AACA,QAAIO,KAAK,GAAG,aAAaC,IAAb,CAAkBR,KAAlB,CAAZ;;AAEA,QAAIO,KAAJ,EAAW;AACP,UAAID,MAAJ,EAAY;AACR,eAAO,IAAP;AACH,OAHM,CAIP;;;AACA,aAAOD,GAAG,CAACE,KAAK,CAAC,CAAD,CAAN,CAAH,CAAc;AACjBE,QAAAA,IAAI,EAAG,UADU;AAEjBC,QAAAA,SAAS,EAAEH,KAAK,CAAC,CAAD;AAFC,OAAd,CAAP;AAIH;AACJ;;AAIDb,EAAAA,gBAAgB,CAACiB,QAAjB,GAA4B1B,gBAA5B;AACAW,EAAAA,eAAe,CAACgB,aAAhB,GAAgCzB,qBAAhC,CAvCqB,CAyCrB;;AACAU,EAAAA,aAAa,CAACgB,MAAd,CAAqBhB,aAAa,CAACK,OAAd,CAAsB,eAAtB,CAArB,EAA6D,CAA7D,EAAgE,UAAhE,EA1CqB,CA2CtB;AACF","sourcesContent":["\r\nconst {tokenizeCssClass} = require(\"./tokenizeCssClass\");\r\nconst {tokenizeCssClassBlock} = require(\"./tokenizeCssClassBlock\")\r\nmodule.exports = parseCssClass;\r\n\r\nfunction parseCssClass() {\r\n    console.log(\"this from pars class\", this)\r\n    let Parser = this.Parser\r\n    let inlineTokenizers = Parser.prototype.inlineTokenizers\r\n    let blockTokenizers = Parser.prototype.blockTokenizers;\r\n    let inlineMethods = Parser.prototype.inlineMethods\r\n    let blockMethods = Parser.prototype.blockMethods;\r\n\r\n   // console.log('inline methods', inlineMethods);\r\n   // console.log('block methods', blockMethods)\r\n    // Add an inline tokenizer (defined in the following example).\r\n\r\n\r\n    function locateMention(value, fromIndex) {\r\n        return value.indexOf('{.', fromIndex)\r\n    }\r\n\r\n    tokenizeCssClass.notInLink = true\r\n    tokenizeCssClass.locator = locateMention\r\n\r\n    function tokenizeCssClass(eat, value, silent) {\r\n        console.log(\"value\", value)\r\n        var match = /^{\\.(\\w+)}/.exec(value)\r\n\r\n        if (match) {\r\n            if (silent) {\r\n                return true\r\n            }\r\n            // let value = match[0].replace(match[1], value)\r\n            return eat(match[0])({\r\n                type:  \"cssClass\",\r\n                className: match[1],\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n\r\n    inlineTokenizers.cssClass = tokenizeCssClass;\r\n    blockTokenizers.cssClassBlock = tokenizeCssClassBlock;\r\n\r\n    // Run it just before `text`.\r\n    inlineMethods.splice(inlineMethods.indexOf('thematicBreak'), 0, 'cssClass')\r\n   // blockMethods.splice(blockMethods.indexOf('paragraph'), 0, 'cssClassBlock')\r\n}"]},"metadata":{},"sourceType":"module"}