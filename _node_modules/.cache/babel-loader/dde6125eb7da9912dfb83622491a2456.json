{"ast":null,"code":"// ---------- PlayList---------------------\nconst ACTIONS = {\n  PL_ROOT_REQUEST: \"Call to api for root dir content\",\n  PL_LOAD_DIR_REQUEST: \"call to api for dir conent\",\n  PL_PUSH_DIR_CONTENT: \"Push  director contetn loaded  from api\",\n  PL_CREATE_DIR_REQEST: \"Call to api and create dir\",\n  PL_CREATE_DIR: \"Create dir in current\",\n  PL_TOGGLE_DIR_REQUEST: \"If is not loade load and then open\",\n  PL_TOGGLE_DIR: \"Open if is closed an vice versa by path\",\n  PL_CREATE_PLAYLIST_REQUEST: \"Call to api to create playlist in current selected dir of name\",\n  PL_CREATE_PLAYLIST: \"Create play list in current selected dir of name\",\n  PL_LOAD_PLAYLIST_REQUEST: \"Call to api to get current playlist content\",\n  PL_OPEN_CURRENT_PLAY_LIST: \"Open/explore current play list\",\n  PL_SET_PLAYLIST_CONTENT: \"Settinng content of current playlist from api\",\n  PL_RESET_CURRENT_PLAYLIST_CONTETN: \"Resetting playlist content after changing position from unsuccess dragging\",\n  PL_SET_SELECTION: \"Set current selected dir and playlist if is selected playlist\",\n  PL_RENAME_SELECTED_REQUEST: \"Call to api to rename current selected\",\n  PL_RENAME_SELECTED: \"Rename current selected element\",\n  PL_MOVE_TO_REQUEST: \"Call to api and move element from pathFrom to pathTo\",\n  PL_MOVE_TO: \"Move element of pathFrom to pathTo (from drag and drop)\",\n  PL_DELETE_SELECTED_REQUEST: \"Call to api and delete current selected element\",\n  PL_DELETE_SELECTED: \"Remove current selected element\",\n  PL_PUSH_TRACK_REQUEST: \"Call to api and add track to current playlist\",\n  PL_PUSH_TRACK: \"Push track on end of list\",\n  //update\n  PL_COPY_TRACK_TO_LIST: \"Add track to list (from drag and drop)\",\n  PL_UPDATE_TRACK_POSITION_REQUST: \"Update track position in database after swaping\",\n  PL_SWAP_TRACK_ON_CURRENT: \"Swap elements on current play list\",\n  PL_INIT_CALC_BPM: \"Start calculating bpm for track\",\n  // update\n  PL_SET_BPM_AND_OFFSET: \"Update Bpm and Offset track on playlist\",\n  // update\n  PL_DELETE_TRACK_REQUEST: \"Call to api to delete trac of given id from current plalist\",\n  PL_DELETE_TRACK: \"Remove track of given index from current playlist\"\n};\nexport { ACTIONS as PLAY_LIST_ACTIONS }; //------------- managing dir actions\n\nexport function rootDirRequest() {\n  return {\n    type: ACTIONS.PL_ROOT_REQUEST\n  };\n}\nexport function loadDirRequest(path, open) {\n  return {\n    type: ACTIONS.PL_LOAD_DIR_REQUEST,\n    path,\n    open\n  };\n}\nexport function pushDirContent(dirContent, isRoot, path, open) {\n  return {\n    type: ACTIONS.PL_PUSH_DIR_CONTENT,\n    dirContent,\n    isRoot,\n    path,\n    open\n  };\n}\nexport function createDirRequest(name) {\n  return {\n    type: ACTIONS.PL_CREATE_DIR_REQEST,\n    name\n  };\n}\nexport function createDir(name, id, renameMode) {\n  return {\n    type: ACTIONS.PL_CREATE_DIR,\n    name,\n    id,\n    renameMode\n  };\n}\nexport function toggleDirRequest(path) {\n  return {\n    type: ACTIONS.PL_TOGGLE_DIR_REQUEST,\n    path\n  };\n}\nexport function toggleDir(path) {\n  return {\n    type: ACTIONS.PL_TOGGLE_DIR,\n    path\n  };\n} //------------- managing playlist actions\n\nexport function createPlaylistRequest(name) {\n  return {\n    type: ACTIONS.PL_CREATE_PLAYLIST_REQUEST,\n    name\n  };\n}\nexport function createPlaylist(name, id, renameMode, setCurrent) {\n  return {\n    type: ACTIONS.PL_CREATE_PLAYLIST,\n    name,\n    id,\n    renameMode,\n    setCurrent\n  };\n}\nexport function openPlaylistRequest(path) {\n  return {\n    type: ACTIONS.PL_LOAD_PLAYLIST_REQUEST,\n    path\n  };\n}\nexport function openCurrentPlaylist() {\n  return {\n    type: ACTIONS.PL_OPEN_CURRENT_PLAY_LIST\n  };\n}\nexport function setPlaylistContent(playlistContent, path) {\n  return {\n    type: ACTIONS.PL_SET_PLAYLIST_CONTENT,\n    playlistContent,\n    path\n  };\n}\nexport function resetCurrentPlaylistContent(list) {\n  return {\n    type: ACTIONS.PL_RESET_CURRENT_PLAYLIST_CONTETN,\n    list\n  };\n} //-------------- elemenet selction and change element hierarych actions\n\nexport function setSelection(path) {\n  return {\n    type: ACTIONS.PL_SET_SELECTION,\n    path\n  };\n}\nexport function renameSelectedRequest(name) {\n  return {\n    type: ACTIONS.PL_RENAME_SELECTED_REQUEST,\n    name\n  };\n}\nexport function renameSelected(name) {\n  return {\n    type: ACTIONS.PL_RENAME_SELECTED,\n    name\n  };\n}\nexport function moveToRequest(pathFrom, pathTo) {\n  return {\n    type: ACTIONS.PL_MOVE_TO_REQUEST,\n    pathFrom,\n    pathTo\n  };\n}\nexport function moveTo(pathFrom, pathTo) {\n  return {\n    type: ACTIONS.PL_MOVE_TO,\n    pathFrom,\n    pathTo\n  };\n}\nexport function deleteSelectedRequest() {\n  return {\n    type: ACTIONS.PL_DELETE_SELECTED_REQUEST\n  };\n}\nexport function deleteSelected() {\n  return {\n    type: ACTIONS.PL_DELETE_SELECTED\n  };\n} //-------------- Track actions\n\nexport function pushTrackToListRequest(track, playlist) {\n  return {\n    type: ACTIONS.PL_PUSH_TRACK_REQUEST,\n    track,\n    playlist\n  };\n}\nexport function pushTrackToList(track, playlist) {\n  return {\n    type: ACTIONS.PL_PUSH_TRACK,\n    track,\n    playlist\n  };\n}\nexport function copyTrackToList(track, path) {\n  return {\n    type: ACTIONS.PL_COPY_TRACK_TO_LIST,\n    track,\n    path\n  };\n}\nexport function updateTrackPositionRequest(tracksPositions) {\n  return {\n    type: ACTIONS.PL_UPDATE_TRACK_POSITION_REQUST,\n    tracksPositions\n  };\n}\nexport function swapTrackOnList(from, to) {\n  return {\n    type: ACTIONS.PL_SWAP_TRACK_ON_CURRENT,\n    from,\n    to\n  };\n}\nexport function startCalcBpm(track, playlist) {\n  return {\n    type: ACTIONS.PL_INIT_CALC_BPM,\n    track,\n    playlist\n  };\n}\nexport function setBpmAndOffset(id, playlist, bpm, offset) {\n  return {\n    vtype: ACTIONS.SET_BPM,\n    id,\n    playlist,\n    bpm,\n    offset\n  };\n}\nexport function deleteTrackRequest(index, id) {\n  return {\n    type: ACTIONS.PL_DELETE_TRACK_REQUEST,\n    index,\n    id\n  };\n}\nexport function deleteTrack(index) {\n  return {\n    type: ACTIONS.PL_DELETE_TRACK,\n    index\n  };\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/actions/console/playList.js"],"names":["ACTIONS","PL_ROOT_REQUEST","PL_LOAD_DIR_REQUEST","PL_PUSH_DIR_CONTENT","PL_CREATE_DIR_REQEST","PL_CREATE_DIR","PL_TOGGLE_DIR_REQUEST","PL_TOGGLE_DIR","PL_CREATE_PLAYLIST_REQUEST","PL_CREATE_PLAYLIST","PL_LOAD_PLAYLIST_REQUEST","PL_OPEN_CURRENT_PLAY_LIST","PL_SET_PLAYLIST_CONTENT","PL_RESET_CURRENT_PLAYLIST_CONTETN","PL_SET_SELECTION","PL_RENAME_SELECTED_REQUEST","PL_RENAME_SELECTED","PL_MOVE_TO_REQUEST","PL_MOVE_TO","PL_DELETE_SELECTED_REQUEST","PL_DELETE_SELECTED","PL_PUSH_TRACK_REQUEST","PL_PUSH_TRACK","PL_COPY_TRACK_TO_LIST","PL_UPDATE_TRACK_POSITION_REQUST","PL_SWAP_TRACK_ON_CURRENT","PL_INIT_CALC_BPM","PL_SET_BPM_AND_OFFSET","PL_DELETE_TRACK_REQUEST","PL_DELETE_TRACK","PLAY_LIST_ACTIONS","rootDirRequest","type","loadDirRequest","path","open","pushDirContent","dirContent","isRoot","createDirRequest","name","createDir","id","renameMode","toggleDirRequest","toggleDir","createPlaylistRequest","createPlaylist","setCurrent","openPlaylistRequest","openCurrentPlaylist","setPlaylistContent","playlistContent","resetCurrentPlaylistContent","list","setSelection","renameSelectedRequest","renameSelected","moveToRequest","pathFrom","pathTo","moveTo","deleteSelectedRequest","deleteSelected","pushTrackToListRequest","track","playlist","pushTrackToList","copyTrackToList","updateTrackPositionRequest","tracksPositions","swapTrackOnList","from","to","startCalcBpm","setBpmAndOffset","bpm","offset","vtype","SET_BPM","deleteTrackRequest","index","deleteTrack"],"mappings":"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","sourcesContent":["// ---------- PlayList---------------------\r\n\r\nconst ACTIONS = {\r\n\r\n    PL_ROOT_REQUEST: \"Call to api for root dir content\",\r\n    PL_LOAD_DIR_REQUEST: \"call to api for dir conent\",\r\n    PL_PUSH_DIR_CONTENT: \"Push  director contetn loaded  from api\",\r\n    PL_CREATE_DIR_REQEST: \"Call to api and create dir\",\r\n    PL_CREATE_DIR: \"Create dir in current\",\r\n    PL_TOGGLE_DIR_REQUEST: \"If is not loade load and then open\",\r\n    PL_TOGGLE_DIR: \"Open if is closed an vice versa by path\",\r\n\r\n    PL_CREATE_PLAYLIST_REQUEST: \"Call to api to create playlist in current selected dir of name\",\r\n    PL_CREATE_PLAYLIST: \"Create play list in current selected dir of name\",\r\n    PL_LOAD_PLAYLIST_REQUEST: \"Call to api to get current playlist content\",\r\n    PL_OPEN_CURRENT_PLAY_LIST: \"Open/explore current play list\",\r\n    PL_SET_PLAYLIST_CONTENT: \"Settinng content of current playlist from api\",\r\n    PL_RESET_CURRENT_PLAYLIST_CONTETN: \"Resetting playlist content after changing position from unsuccess dragging\",\r\n\r\n    PL_SET_SELECTION: \"Set current selected dir and playlist if is selected playlist\",\r\n    PL_RENAME_SELECTED_REQUEST: \"Call to api to rename current selected\",\r\n    PL_RENAME_SELECTED: \"Rename current selected element\",\r\n    PL_MOVE_TO_REQUEST: \"Call to api and move element from pathFrom to pathTo\",\r\n    PL_MOVE_TO: \"Move element of pathFrom to pathTo (from drag and drop)\",\r\n    PL_DELETE_SELECTED_REQUEST: \"Call to api and delete current selected element\",\r\n    PL_DELETE_SELECTED: \"Remove current selected element\",\r\n\r\n    PL_PUSH_TRACK_REQUEST: \"Call to api and add track to current playlist\",\r\n    PL_PUSH_TRACK: \"Push track on end of list\",//update\r\n    PL_COPY_TRACK_TO_LIST: \"Add track to list (from drag and drop)\",\r\n    PL_UPDATE_TRACK_POSITION_REQUST: \"Update track position in database after swaping\",\r\n    PL_SWAP_TRACK_ON_CURRENT: \"Swap elements on current play list\",\r\n    PL_INIT_CALC_BPM: \"Start calculating bpm for track\", // update\r\n    PL_SET_BPM_AND_OFFSET: \"Update Bpm and Offset track on playlist\", // update\r\n    PL_DELETE_TRACK_REQUEST: \"Call to api to delete trac of given id from current plalist\",\r\n    PL_DELETE_TRACK: \"Remove track of given index from current playlist\",\r\n\r\n}\r\nexport { ACTIONS as PLAY_LIST_ACTIONS }\r\n\r\n//------------- managing dir actions\r\n\r\nexport function rootDirRequest() {\r\n    return { type: ACTIONS.PL_ROOT_REQUEST }\r\n}\r\n\r\nexport function loadDirRequest(path, open) {\r\n    return { type: ACTIONS.PL_LOAD_DIR_REQUEST, path, open }\r\n}\r\n\r\nexport function pushDirContent(dirContent, isRoot, path, open) {\r\n    return { type: ACTIONS.PL_PUSH_DIR_CONTENT, dirContent, isRoot, path, open }\r\n}\r\n\r\nexport function createDirRequest(name) {\r\n    return { type: ACTIONS.PL_CREATE_DIR_REQEST, name }\r\n}\r\n\r\nexport function createDir(name, id, renameMode) {\r\n    return { type: ACTIONS.PL_CREATE_DIR, name, id, renameMode }\r\n}\r\n\r\nexport function toggleDirRequest(path) {\r\n    return { type: ACTIONS.PL_TOGGLE_DIR_REQUEST, path }\r\n}\r\n\r\nexport function toggleDir(path) {\r\n    return { type: ACTIONS.PL_TOGGLE_DIR, path }\r\n}\r\n\r\n//------------- managing playlist actions\r\n\r\nexport function createPlaylistRequest(name) {\r\n    return { type: ACTIONS.PL_CREATE_PLAYLIST_REQUEST, name }\r\n}\r\n\r\nexport function createPlaylist(name, id, renameMode, setCurrent) {\r\n    return { type: ACTIONS.PL_CREATE_PLAYLIST, name, id, renameMode, setCurrent }\r\n}\r\n\r\nexport function openPlaylistRequest(path) {\r\n    return { type: ACTIONS.PL_LOAD_PLAYLIST_REQUEST, path }\r\n}\r\n\r\nexport function openCurrentPlaylist() {\r\n    return { type: ACTIONS.PL_OPEN_CURRENT_PLAY_LIST }\r\n}\r\n\r\nexport function setPlaylistContent(playlistContent, path) {\r\n    return { type: ACTIONS.PL_SET_PLAYLIST_CONTENT, playlistContent, path }\r\n}\r\n\r\nexport function resetCurrentPlaylistContent(list) {\r\n    return { type: ACTIONS.PL_RESET_CURRENT_PLAYLIST_CONTETN, list }\r\n}\r\n//-------------- elemenet selction and change element hierarych actions\r\n\r\nexport function setSelection(path) {\r\n    return { type: ACTIONS.PL_SET_SELECTION, path }\r\n}\r\n\r\nexport function renameSelectedRequest(name) {\r\n    return { type: ACTIONS.PL_RENAME_SELECTED_REQUEST, name }\r\n}\r\n\r\nexport function renameSelected(name) {\r\n    return { type: ACTIONS.PL_RENAME_SELECTED, name }\r\n}\r\n\r\nexport function moveToRequest(pathFrom, pathTo) {\r\n    return { type: ACTIONS.PL_MOVE_TO_REQUEST, pathFrom, pathTo }\r\n}\r\n\r\nexport function moveTo(pathFrom, pathTo) {\r\n    return { type: ACTIONS.PL_MOVE_TO, pathFrom, pathTo }\r\n}\r\n\r\nexport function deleteSelectedRequest() {\r\n    return { type: ACTIONS.PL_DELETE_SELECTED_REQUEST }\r\n}\r\n\r\nexport function deleteSelected() {\r\n    return { type: ACTIONS.PL_DELETE_SELECTED }\r\n}\r\n\r\n//-------------- Track actions\r\n\r\nexport function pushTrackToListRequest(track, playlist) {\r\n    return { type: ACTIONS.PL_PUSH_TRACK_REQUEST, track, playlist }\r\n}\r\n\r\nexport function pushTrackToList(track, playlist) {\r\n    return { type: ACTIONS.PL_PUSH_TRACK, track, playlist }\r\n}\r\n\r\nexport function copyTrackToList(track, path) {\r\n    return { type: ACTIONS.PL_COPY_TRACK_TO_LIST, track, path }\r\n}\r\n\r\nexport function updateTrackPositionRequest(tracksPositions) {\r\n    return { type: ACTIONS.PL_UPDATE_TRACK_POSITION_REQUST, tracksPositions }\r\n}\r\n\r\nexport function swapTrackOnList(from, to) {\r\n    return { type: ACTIONS.PL_SWAP_TRACK_ON_CURRENT, from, to }\r\n}\r\n\r\nexport function startCalcBpm(track, playlist) {\r\n    return { type: ACTIONS.PL_INIT_CALC_BPM, track, playlist }\r\n}\r\n\r\nexport function setBpmAndOffset(id, playlist, bpm, offset) {\r\n    return { vtype: ACTIONS.SET_BPM, id, playlist, bpm, offset, }\r\n}\r\n\r\nexport function deleteTrackRequest(index, id) {\r\n    return { type: ACTIONS.PL_DELETE_TRACK_REQUEST, index, id }\r\n}\r\n\r\nexport function deleteTrack(index) {\r\n    return { type: ACTIONS.PL_DELETE_TRACK, index }\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}