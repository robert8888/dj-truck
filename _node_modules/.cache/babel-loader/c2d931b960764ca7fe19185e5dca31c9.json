{"ast":null,"code":"import { pushTrackToList, ACTIONS } from \"../../actions\";\nimport { takeEvery, select, put, call } from \"redux-saga/effects\";\nimport { getApi } from \"./../../apis/apiProvider\";\nimport createTrackQuery from \"./../../qlQueries/createTrack\";\nimport { generateTemplateName as generateName, findClosesDir } from \"./../../reducers/console/playlist/utils\";\nimport { get } from \"lodash/object\";\nimport { handle as createNewPlaylist } from \"./createPlaylistRequestSaga\";\nexport default function* pushTrackToListSaga() {\n  yield takeEvery(ACTIONS.PL_PUSH_TRACK_REQUEST, handle);\n}\n\nconst getToken = state => state.user.token;\n\nconst getCurrentId = state => state.playList.list._id;\n\nfunction* handle(action) {\n  var _result$data, _result$data$createTr, _result$data$createTr2;\n\n  const {\n    callQuery\n  } = getApi(\"UserAssets\");\n  const token = yield select(getToken); // console.log(\"action trakc\", action.track);\n  //current playlist id \n\n  let playlistId = yield select(getCurrentId);\n\n  if (!playlistId) {\n    //create new \n    console.log(\"creating new playlist\");\n    yield call(createNewPlaylist);\n    playlistId = yield select(getCurrentId);\n  }\n\n  const query = createTrackQuery({\n    playlist: playlistId,\n    ...action.track\n  });\n  const result = callQuery(query, token);\n\n  if (result === null || result === void 0 ? void 0 : (_result$data = result.data) === null || _result$data === void 0 ? void 0 : (_result$data$createTr = _result$data.createTrack) === null || _result$data$createTr === void 0 ? void 0 : (_result$data$createTr2 = _result$data$createTr.track) === null || _result$data$createTr2 === void 0 ? void 0 : _result$data$createTr2.id) {\n    yield put(pushTrackToList({ ...action.track,\n      id: result.data.createTrack.track.id\n    }, action.playList));\n  }\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/sagas/playlists/pushTrackToListRequestSaga.js"],"names":["pushTrackToList","ACTIONS","takeEvery","select","put","call","getApi","createTrackQuery","generateTemplateName","generateName","findClosesDir","get","handle","createNewPlaylist","pushTrackToListSaga","PL_PUSH_TRACK_REQUEST","getToken","state","user","token","getCurrentId","playList","list","_id","action","callQuery","playlistId","console","log","query","playlist","track","result","data","createTrack","id"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,OAA1B,QAAyC,eAAzC;AACA,SAASC,SAAT,EAAoBC,MAApB,EAA4BC,GAA5B,EAAiCC,IAAjC,QAA6C,oBAA7C;AACA,SAASC,MAAT,QAAuB,0BAAvB;AACA,OAAOC,gBAAP,MAA6B,+BAA7B;AACA,SAASC,oBAAoB,IAAIC,YAAjC,EAA+CC,aAA/C,QAAoE,yCAApE;AACA,SAASC,GAAT,QAAoB,eAApB;AACA,SAAQC,MAAM,IAAIC,iBAAlB,QAA0C,6BAA1C;AAGA,eAAe,UAAUC,mBAAV,GAAgC;AAC3C,QAAMZ,SAAS,CAACD,OAAO,CAACc,qBAAT,EAAgCH,MAAhC,CAAf;AACH;;AAED,MAAMI,QAAQ,GAAGC,KAAK,IAAIA,KAAK,CAACC,IAAN,CAAWC,KAArC;;AAGA,MAAMC,YAAY,GAAGH,KAAK,IAAIA,KAAK,CAACI,QAAN,CAAeC,IAAf,CAAoBC,GAAlD;;AAEA,UAAUX,MAAV,CAAiBY,MAAjB,EAAyB;AAAA;;AACrB,QAAM;AAAEC,IAAAA;AAAF,MAAgBnB,MAAM,CAAC,YAAD,CAA5B;AACA,QAAMa,KAAK,GAAG,MAAMhB,MAAM,CAACa,QAAD,CAA1B,CAFqB,CAItB;AACC;;AACA,MAAIU,UAAU,GAAG,MAAMvB,MAAM,CAACiB,YAAD,CAA7B;;AACA,MAAG,CAACM,UAAJ,EAAe;AACX;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACA,UAAMvB,IAAI,CAACQ,iBAAD,CAAV;AACAa,IAAAA,UAAU,GAAG,MAAMvB,MAAM,CAACiB,YAAD,CAAzB;AACH;;AAED,QAAMS,KAAK,GAAGtB,gBAAgB,CAAC;AAC3BuB,IAAAA,QAAQ,EAAGJ,UADgB;AAE3B,OAAGF,MAAM,CAACO;AAFiB,GAAD,CAA9B;AAKA,QAAMC,MAAM,GAAGP,SAAS,CAACI,KAAD,EAAQV,KAAR,CAAxB;;AACA,MAAGa,MAAH,aAAGA,MAAH,uCAAGA,MAAM,CAAEC,IAAX,0EAAG,aAAcC,WAAjB,oFAAG,sBAA2BH,KAA9B,2DAAG,uBAAkCI,EAArC,EAAwC;AACpC,UAAM/B,GAAG,CAACJ,eAAe,CAAC,EACtB,GAAGwB,MAAM,CAACO,KADY;AAEtBI,MAAAA,EAAE,EAACH,MAAM,CAACC,IAAP,CAAYC,WAAZ,CAAwBH,KAAxB,CAA8BI;AAFX,KAAD,EAGtBX,MAAM,CAACH,QAHe,CAAhB,CAAT;AAIH;AAGJ","sourcesContent":["import { pushTrackToList, ACTIONS } from \"../../actions\";\r\nimport { takeEvery, select, put, call } from \"redux-saga/effects\"\r\nimport { getApi } from \"./../../apis/apiProvider\";\r\nimport createTrackQuery from \"./../../qlQueries/createTrack\";\r\nimport { generateTemplateName as generateName, findClosesDir } from \"./../../reducers/console/playlist/utils\";\r\nimport { get } from \"lodash/object\";\r\nimport {handle as createNewPlaylist} from \"./createPlaylistRequestSaga\";\r\n\r\n\r\nexport default function* pushTrackToListSaga() {\r\n    yield takeEvery(ACTIONS.PL_PUSH_TRACK_REQUEST, handle)\r\n}\r\n\r\nconst getToken = state => state.user.token;\r\n\r\n\r\nconst getCurrentId = state => state.playList.list._id;\r\n\r\nfunction* handle(action) {\r\n    const { callQuery } = getApi(\"UserAssets\");\r\n    const token = yield select(getToken);\r\n\r\n   // console.log(\"action trakc\", action.track);\r\n    //current playlist id \r\n    let playlistId = yield select(getCurrentId);\r\n    if(!playlistId){\r\n        //create new \r\n        console.log(\"creating new playlist\")\r\n        yield call(createNewPlaylist);\r\n        playlistId = yield select(getCurrentId);\r\n    }\r\n\r\n    const query = createTrackQuery({\r\n        playlist : playlistId,\r\n        ...action.track,\r\n    })\r\n\r\n    const result = callQuery(query, token);\r\n    if(result?.data?.createTrack?.track?.id){\r\n        yield put(pushTrackToList({\r\n            ...action.track,\r\n            id:result.data.createTrack.track.id\r\n        }, action.playList));\r\n    }\r\n\r\n\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}