{"ast":null,"code":"import _regeneratorRuntime from\"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\node_modules\\\\@babel\\\\runtime/regenerator\";var _marked=/*#__PURE__*/_regeneratorRuntime.mark(requestUserRecord),_marked2=/*#__PURE__*/_regeneratorRuntime.mark(handel);import{put,select,takeEvery}from\"redux-saga/effects\";import{ACTIONS,pushLog,setRecData}from\"../../actions\";import{getApi}from\"./../../apis/apiProvider\";import{Log}from\"./../../utils/logger/logger\";import errorParser from\"./../../utils/serverErrorParser/errorParser\";export default function requestUserRecord(){return _regeneratorRuntime.wrap(function requestUserRecord$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return takeEvery(ACTIONS.RECS_REQ_DATA,handel);case 2:case\"end\":return _context.stop();}}},_marked);}var getToken=function getToken(state){return state.user.token;};function handel(action){var token,_response$data,_getApi,callQuery,queries,query,response,recordData;return _regeneratorRuntime.wrap(function handel$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return select(getToken);case 2:token=_context2.sent;_context2.prev=3;_getApi=getApi(\"UserAssets\"),callQuery=_getApi.callQuery,queries=_getApi.queries;query=queries.recordQl(action.recId);_context2.next=8;return callQuery(query,token);case 8:response=_context2.sent;recordData=response===null||response===void 0?void 0:(_response$data=response.data)===null||_response$data===void 0?void 0:_response$data.record;if(!response.errors){_context2.next=12;break;}throw new Error(\"Server response contains errors \"+errorParser(response.errors));case 12:if(recordData){_context2.next=14;break;}throw new Error(\"Can't load record data from database, server response don't contain recorcd data\");case 14:_context2.next=16;return put(setRecData(recordData));case 16:_context2.next=18;return put(pushLog(new Log(\"Record successfully downloaded from database record id : \".concat(action.recId))));case 18:_context2.next=24;break;case 20:_context2.prev=20;_context2.t0=_context2[\"catch\"](3);_context2.next=24;return pushLog(Log.Error(['saga','record','request record'],\"Can't load record from database\",_context2.t0));case 24:case\"end\":return _context2.stop();}}},_marked2,null,[[3,20]]);}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/sagas/records/reqRecord.js"],"names":["requestUserRecord","handel","put","select","takeEvery","ACTIONS","pushLog","setRecData","getApi","Log","errorParser","RECS_REQ_DATA","getToken","state","user","token","action","callQuery","queries","query","recordQl","recId","response","recordData","data","record","errors","Error"],"mappings":"2JAMyBA,iB,iDAOfC,M,EAbV,OAASC,GAAT,CAAcC,MAAd,CAAsBC,SAAtB,KAAuC,oBAAvC,CACA,OAASC,OAAT,CAAkBC,OAAlB,CAA2BC,UAA3B,KAA6C,eAA7C,CACA,OAASC,MAAT,KAAuB,0BAAvB,CACA,OAASC,GAAT,KAAoB,6BAApB,CACA,MAAOC,CAAAA,WAAP,KAAwB,6CAAxB,CAEA,cAAe,SAAUV,CAAAA,iBAAV,6IAEX,MAAMI,CAAAA,SAAS,CAACC,OAAO,CAACM,aAAT,CAAwBV,MAAxB,CAAf,CAFW,sDAKf,GAAMW,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAAAC,KAAK,QAAIA,CAAAA,KAAK,CAACC,IAAN,CAAWC,KAAf,EAAtB,CAEA,QAAUd,CAAAA,MAAV,CAAiBe,MAAjB,kNACkB,MAAMb,CAAAA,MAAM,CAACS,QAAD,CAAZ,CADlB,OACUG,KADV,yCAIuCP,MAAM,CAAC,YAAD,CAJ7C,CAIgBS,SAJhB,SAIgBA,SAJhB,CAI2BC,OAJ3B,SAI2BA,OAJ3B,CAMcC,KANd,CAMsBD,OAAO,CAACE,QAAR,CAAiBJ,MAAM,CAACK,KAAxB,CANtB,kBAOyB,MAAMJ,CAAAA,SAAS,CAACE,KAAD,CAAQJ,KAAR,CAAf,CAPzB,OAOcO,QAPd,gBAQcC,UARd,CAQ2BD,QAR3B,SAQ2BA,QAR3B,iCAQ2BA,QAAQ,CAAEE,IARrC,yCAQ2B,eAAgBC,MAR3C,KAUYH,QAAQ,CAACI,MAVrB,gCAWkB,IAAIC,CAAAA,KAAJ,CAAU,mCAAqCjB,WAAW,CAACY,QAAQ,CAACI,MAAV,CAA1D,CAXlB,YAaaH,UAbb,gCAckB,IAAII,CAAAA,KAAJ,CAAU,kFAAV,CAdlB,2BAiBQ,MAAMzB,CAAAA,GAAG,CAACK,UAAU,CAACgB,UAAD,CAAX,CAAT,CAjBR,0BAmBQ,MAAMrB,CAAAA,GAAG,CAACI,OAAO,CAAC,GAAIG,CAAAA,GAAJ,oEAAoEO,MAAM,CAACK,KAA3E,EAAD,CAAR,CAAT,CAnBR,+GAqBQ,MAAMf,CAAAA,OAAO,CAACG,GAAG,CAACkB,KAAJ,CACV,CAAC,MAAD,CAAS,QAAT,CAAmB,gBAAnB,CADU,CAEV,iCAFU,cAAD,CAAb,CArBR","sourcesContent":["import { put, select, takeEvery } from \"redux-saga/effects\";\r\nimport { ACTIONS, pushLog, setRecData } from \"../../actions\";\r\nimport { getApi } from \"./../../apis/apiProvider\";\r\nimport { Log } from \"./../../utils/logger/logger\";\r\nimport errorParser from \"./../../utils/serverErrorParser/errorParser\";\r\n\r\nexport default function* requestUserRecord() {\r\n\r\n    yield takeEvery(ACTIONS.RECS_REQ_DATA, handel)\r\n}\r\n\r\nconst getToken = state => state.user.token\r\n\r\nfunction* handel(action) {\r\n    const token = yield select(getToken);\r\n\r\n    try {\r\n        const { callQuery, queries } = getApi(\"UserAssets\");\r\n\r\n        const query = queries.recordQl(action.recId);\r\n        const response = yield callQuery(query, token);\r\n        const recordData = response?.data?.record;\r\n        \r\n        if (response.errors) {\r\n            throw new Error(\"Server response contains errors \" + errorParser(response.errors));\r\n        }\r\n        if (!recordData){\r\n            throw new Error(\"Can't load record data from database, server response don't contain recorcd data\")\r\n        }\r\n\r\n        yield put(setRecData(recordData))\r\n\r\n        yield put(pushLog(new Log(`Record successfully downloaded from database record id : ${action.recId}`)))\r\n    } catch (error) {\r\n        yield pushLog(Log.Error(\r\n            ['saga', 'record', 'request record'],\r\n            \"Can't load record from database\",\r\n            error\r\n        ))\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}