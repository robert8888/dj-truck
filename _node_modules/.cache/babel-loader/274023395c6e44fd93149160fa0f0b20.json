{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJEKTY\\\\APKI\\\\DjTruck\\\\djtruck\\\\src\\\\pages\\\\app\\\\components\\\\Console\\\\Effector\\\\Effector.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport \"./effector-channel.scss\";\nimport DryWetKnob from \"./DryWetKnob/DryWetKnob\";\nimport EffectorButton from \"./EffectorButton/EffectorButton\";\nimport EffectorKnob from \"./EffectorKnob/EffectorKnob\";\nimport { Dropdown, DropdownButton } from \"react-bootstrap\";\nimport { setEffectParametr } from \"./../../../../../actions\";\n\nconst Effector = props => {\n  const [currentEffect, setCurrentEffect] = useState(null);\n  const [effectorParams, setEffectorParams] = useState([]);\n\n  const paramChangeHandle = (param, value) => {\n    //console.log(currentEffect, param, value)\n    props.setParameter(currentEffect, param, value);\n  };\n\n  useEffect(() => {\n    let currentEffectParams = props.availableEffects[currentEffect];\n\n    if (!currentEffectParams) {\n      setEffectorParams([]);\n      return;\n    } //console.log('params', currentEffectParams)\n\n\n    setEffectorParams(Object.entries(currentEffectParams).map(([name, param]) => {\n      //   console.log(name, param)\n      const effectState = props.channelState.effects[currentEffect];\n      let value = param.defaultValue;\n\n      if (effectState) {\n        value = effectState[name] || value;\n      } //console.log(param)\n\n\n      if (param.type === \"float\") {\n        return React.createElement(EffectorKnob, {\n          key: name + param.description,\n          scale: param.max - param.min,\n          initValue: value,\n          alt: param.description,\n          showValue: true,\n          onChange: paramChangeHandle.bind(null, name),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 38\n          },\n          __self: this\n        });\n      } else if (param.type === \"bool\") {\n        console.log(name, value);\n        return React.createElement(EffectorButton, {\n          key: name + param.description,\n          className: value ? \"btn--pressed\" : \"\",\n          onClick: event => {\n            if (effectState) {\n              value = effectState[name] || value;\n            }\n\n            console.log(value);\n            const nextValue = value ? 0 : 1;\n\n            if (nextValue) {\n              event.target.classList.add(\"btn--pressed\");\n            } else {\n              event.target.classList.remove(\"btn--pressed\");\n            }\n\n            paramChangeHandle(name, nextValue);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47\n          },\n          __self: this\n        }, param.description);\n      }\n    }));\n  }, [currentEffect, props.effects]);\n  const availableEffects = Object.keys(props.availableEffects).map((effect, index) => {\n    return React.createElement(Dropdown.Item, {\n      key: effect + \"-\" + index,\n      onClick: setCurrentEffect.bind(null, effect),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, effect);\n  });\n  return React.createElement(\"div\", {\n    className: \"effector-channel\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"dra-wet-knob\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, React.createElement(DryWetKnob, {\n    alt: \"D/W\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"effect-selector\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, React.createElement(DropdownButton, {\n    title: currentEffect || \"-----\",\n    className: \"btn-effect-select\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, React.createElement(Dropdown.Item, {\n    key: \"none\",\n    onClick: setCurrentEffect.bind(null, null),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, \" ----- \"), availableEffects)), React.createElement(\"div\", {\n    className: \"effector-param\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, effectorParams));\n};\n\nconst mapStateToProps = (state, ownProps) => ({\n  availableEffects: state.effector.effects,\n  channelState: state.effector.channels[ownProps.channel]\n});\n\nconst mapDispachToProps = (dispatch, ownProps) => ({\n  setParameter: (...args) => dispatch(setEffectParametr(ownProps.channel, ...args))\n});\n\nexport default connect(mapStateToProps, mapDispachToProps)(Effector);","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/pages/app/components/Console/Effector/Effector.js"],"names":["React","useState","useEffect","connect","DryWetKnob","EffectorButton","EffectorKnob","Dropdown","DropdownButton","setEffectParametr","Effector","props","currentEffect","setCurrentEffect","effectorParams","setEffectorParams","paramChangeHandle","param","value","setParameter","currentEffectParams","availableEffects","Object","entries","map","name","effectState","channelState","effects","defaultValue","type","description","max","min","bind","console","log","event","nextValue","target","classList","add","remove","keys","effect","index","mapStateToProps","state","ownProps","effector","channels","channel","mapDispachToProps","dispatch","args"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport \"./effector-channel.scss\";\r\nimport DryWetKnob from \"./DryWetKnob/DryWetKnob\";\r\nimport EffectorButton from \"./EffectorButton/EffectorButton\";\r\nimport EffectorKnob from \"./EffectorKnob/EffectorKnob\";\r\nimport { Dropdown, DropdownButton } from \"react-bootstrap\";\r\nimport { setEffectParametr } from \"./../../../../../actions\";\r\nconst Effector = props => {\r\n\r\n    const [currentEffect, setCurrentEffect] = useState(null);\r\n    const [effectorParams, setEffectorParams] = useState([]);\r\n\r\n\r\n    const paramChangeHandle = (param, value) => {\r\n        //console.log(currentEffect, param, value)\r\n        props.setParameter(currentEffect, param, value);\r\n    }\r\n\r\n    useEffect(() => {\r\n        let currentEffectParams = props.availableEffects[currentEffect];\r\n        if (!currentEffectParams) {\r\n            setEffectorParams([]);\r\n            return;\r\n        }\r\n        //console.log('params', currentEffectParams)\r\n\r\n        setEffectorParams(Object.entries(currentEffectParams).map(([name, param]) => {\r\n            //   console.log(name, param)\r\n            const effectState = props.channelState.effects[currentEffect];\r\n            let value = param.defaultValue;\r\n            if (effectState) {\r\n                value = effectState[name] || value;\r\n            }\r\n            //console.log(param)\r\n\r\n            if (param.type === \"float\") {\r\n                return (<EffectorKnob key={name + param.description}\r\n                    scale={param.max - param.min}\r\n                    initValue={value}\r\n                    alt={param.description}\r\n                    showValue\r\n                    onChange={paramChangeHandle.bind(null, name)}\r\n                />)\r\n            } else if (param.type === \"bool\") {\r\n                console.log(name, value)\r\n                return (<EffectorButton\r\n                    key={name + param.description}\r\n                    className={((value) ? \"btn--pressed\" : \"\")}\r\n                    onClick={(event) => {\r\n                        if (effectState) {\r\n                            value = effectState[name] || value;\r\n                        }\r\n                        console.log(value)\r\n                        const nextValue = value ? 0 : 1;\r\n                        if(nextValue){\r\n                            event.target.classList.add(\"btn--pressed\")\r\n                        } else {\r\n                            event.target.classList.remove(\"btn--pressed\")  \r\n                        }\r\n                        paramChangeHandle(name, nextValue)\r\n                    }}\r\n                >\r\n                    {param.description}\r\n                </EffectorButton>);\r\n            }\r\n        }))\r\n    }, [currentEffect, props.effects])\r\n\r\n\r\n    const availableEffects = Object.keys(props.availableEffects).map((effect, index) => {\r\n        return (<Dropdown.Item key={effect + \"-\" + index} onClick={setCurrentEffect.bind(null, effect)}>{effect}</Dropdown.Item>)\r\n    })\r\n\r\n\r\n    return (\r\n        <div className=\"effector-channel\">\r\n            <div className=\"dra-wet-knob\">\r\n                <DryWetKnob alt=\"D/W\" />\r\n            </div>\r\n            <div className=\"effect-selector\">\r\n                <DropdownButton title={currentEffect || \"-----\"} className=\"btn-effect-select\">\r\n                    <Dropdown.Item key={\"none\"} onClick={setCurrentEffect.bind(null, null)}> ----- </Dropdown.Item>\r\n                    {availableEffects}\r\n                </DropdownButton>\r\n            </div>\r\n            <div className=\"effector-param\">\r\n                {effectorParams}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => ({\r\n    availableEffects: state.effector.effects,\r\n    channelState: state.effector.channels[ownProps.channel]\r\n})\r\n\r\nconst mapDispachToProps = (dispatch, ownProps) => ({\r\n    setParameter: (...args) => dispatch(setEffectParametr(ownProps.channel, ...args))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispachToProps)(Effector);\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}