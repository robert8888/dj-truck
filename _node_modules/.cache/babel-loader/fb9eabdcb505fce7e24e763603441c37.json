{"ast":null,"code":"import store from \"./../../../../store\";\nimport WaveSurfer from \"wavesurfer\";\nimport { hexToRgb } from \"./../../../../utils/colors/converter\";\nimport { getBeatLength } from \"./../../../../utils/bpm/converter\";\nexport default class Looper {\n  makeLoop(channel, loopLength) {\n    const state = store.getState();\n    const channelName = channel.channelName;\n    const beatLength = getBeatLength(state.console.channel[channelName].track.bpm);\n    const beatOffset = state.console.channel[channelName].playBackState.offset;\n    const currentPosition = channel.master.getCurrentTime();\n    const audioBufferSource = channel.master.backend.source;\n    let start = currentPosition + (beatLength - (currentPosition - beatOffset) % beatLength); //don't quantize to whole beat\n\n    if (loopLength < 1) {\n      start = currentPosition + (beatLength * loopLength - (currentPosition - beatOffset) % (beatLength * loopLength));\n    }\n\n    const end = start + beatLength * loopLength;\n    audioBufferSource.loopStart = start;\n    audioBufferSource.loopEnd = end;\n    audioBufferSource.loop = true;\n\n    channel.looperWatch = time => {\n      if (time > end) {\n        channel.master.backend.startPosition = start;\n        channel.master.backend.lastPlay = channel.master.backend.ac.currentTime;\n        channel.master.drawer.progress(channel.master.backend.getPlayedPercents());\n        console.log(\"looped\");\n      }\n    };\n\n    channel.master.on(\"audioprocess\", channel.looperWatch);\n    this.drawLoop(channel, start, end); // console.log(\"start loop\", channel, loopLength)\n  }\n\n  endLoop(channel) {\n    console.log(\"stop loop\", channel);\n    channel.master.un(\"audioprocess\", channel.looperWatch);\n    channel.master.backend.source.loop = false;\n    this.clearDraw(channel);\n  }\n\n  drawLoop(channel, start, end) {\n    const wrapper = channel.master.drawer.wrapper;\n    const styleApply = WaveSurfer.Drawer.style;\n    const minPxPerSec = channel.master.params.minPxPerSec;\n    const color = hexToRgb(channel.master.params.waveColor);\n    const regionStyle = {\n      position: \"absolute\",\n      top: \"0px\",\n      height: \"100%\",\n      background: \"rgba(\" + color.r + \",\" + color.g + \",\" + color.b + \", 0.3)\"\n    };\n    const region = document.createElement(\"div\");\n    regionStyle.left = start * minPxPerSec + \"px\";\n    regionStyle.width = (end - start) * minPxPerSec + \"px\";\n    console.log(regionStyle);\n    styleApply(region, regionStyle);\n    wrapper.appendChild(region);\n    channel.loopRegion = region;\n  }\n\n  clearDraw(channel) {\n    channel.loopRegion.remove();\n  }\n\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/core/console/channels/looper/looper.js"],"names":["store","WaveSurfer","hexToRgb","getBeatLength","Looper","makeLoop","channel","loopLength","state","getState","channelName","beatLength","console","track","bpm","beatOffset","playBackState","offset","currentPosition","master","getCurrentTime","audioBufferSource","backend","source","start","end","loopStart","loopEnd","loop","looperWatch","time","startPosition","lastPlay","ac","currentTime","drawer","progress","getPlayedPercents","log","on","drawLoop","endLoop","un","clearDraw","wrapper","styleApply","Drawer","style","minPxPerSec","params","color","waveColor","regionStyle","position","top","height","background","r","g","b","region","document","createElement","left","width","appendChild","loopRegion","remove"],"mappings":"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","sourcesContent":["import store from \"./../../../../store\";\r\nimport WaveSurfer from \"wavesurfer\";\r\nimport {hexToRgb} from \"./../../../../utils/colors/converter\";\r\nimport {getBeatLength} from \"./../../../../utils/bpm/converter\";\r\n\r\nexport default class Looper{\r\n\r\n    makeLoop(channel, loopLength){\r\n        const state = store.getState();\r\n        const channelName = channel.channelName;\r\n\r\n        const beatLength = getBeatLength(state.console.channel[channelName].track.bpm);\r\n        const beatOffset = state.console.channel[channelName].playBackState.offset;\r\n        const currentPosition = channel.master.getCurrentTime();\r\n        const audioBufferSource = channel.master.backend.source;\r\n\r\n        let start = currentPosition + (beatLength - (currentPosition - beatOffset) % beatLength);\r\n        //don't quantize to whole beat\r\n        if(loopLength < 1){ \r\n            start = currentPosition + ((beatLength * loopLength) - (currentPosition - beatOffset) % (beatLength * loopLength));\r\n        }\r\n        const end = start + beatLength * loopLength;\r\n\r\n        audioBufferSource.loopStart = start;\r\n        audioBufferSource.loopEnd = end;\r\n        audioBufferSource.loop = true;\r\n\r\n        channel.looperWatch = (time)=>{\r\n            if(time > end){\r\n                channel.master.backend.startPosition = start;\r\n                channel.master.backend.lastPlay = channel.master.backend.ac.currentTime;\r\n                channel.master.drawer.progress(channel.master.backend.getPlayedPercents())\r\n                console.log(\"looped\")\r\n            }\r\n        }\r\n\r\n        channel.master.on(\"audioprocess\", channel.looperWatch);\r\n        this.drawLoop(channel, start, end);\r\n       // console.log(\"start loop\", channel, loopLength)\r\n    }\r\n\r\n    endLoop(channel){\r\n        console.log(\"stop loop\", channel);\r\n        channel.master.un(\"audioprocess\", channel.looperWatch);\r\n        channel.master.backend.source.loop = false;\r\n        this.clearDraw(channel);\r\n    }\r\n\r\n    drawLoop(channel, start, end){\r\n        const wrapper = channel.master.drawer.wrapper;\r\n        const styleApply = WaveSurfer.Drawer.style;\r\n        const minPxPerSec = channel.master.params.minPxPerSec;\r\n        const color = hexToRgb(channel.master.params.waveColor);\r\n\r\n    \r\n        const regionStyle = {\r\n          position: \"absolute\",\r\n          top: \"0px\",\r\n          height: \"100%\",\r\n          background: \"rgba(\" + color.r + \",\" + color.g + \",\" + color.b + \", 0.3)\"\r\n        };\r\n\r\n        const region = document.createElement(\"div\");\r\n        regionStyle.left =   start * minPxPerSec  + \"px\";\r\n        regionStyle.width = (end - start) * minPxPerSec  + \"px\";\r\n        console.log(regionStyle)\r\n\r\n        styleApply(region, regionStyle);\r\n        wrapper.appendChild(region);\r\n        channel.loopRegion = region;\r\n    }\r\n\r\n    clearDraw(channel){\r\n        channel.loopRegion.remove();\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}