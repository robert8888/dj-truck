{"ast":null,"code":"import STATUS from \"./../observer/STATUS\";\nexport default class Recorder {\n  constructor(mixer) {\n    this.mixer = mixer;\n    const streamDestination = this.mixer.audioNodes.channels['main'].recorderStremDestination;\n    this.mediaRecorder = new MediaRecorder(streamDestination.stream);\n  }\n\n  action(status, param) {\n    switch (status) {\n      case STATUS.RECORD_START:\n        {\n          this.startRecording(param);\n          break;\n        }\n\n      case STATUS.RECORD_END:\n        {\n          this.endRecording();\n          break;\n        }\n    }\n  }\n\n  startRecording(param) {\n    console.log(\"im start recording\", param);\n\n    this.mediaRecorder.ondataavailable = e => {\n      console.log(e.data);\n    };\n\n    this.mediaRecorder.start(1000);\n  }\n\n  endRecording() {\n    console.log(\"im finish recoriding\");\n    this.mediaRecorder.stop();\n  }\n\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/pages/console/core/console/mixer/recorder.js"],"names":["STATUS","Recorder","constructor","mixer","streamDestination","audioNodes","channels","recorderStremDestination","mediaRecorder","MediaRecorder","stream","action","status","param","RECORD_START","startRecording","RECORD_END","endRecording","console","log","ondataavailable","e","data","start","stop"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,sBAAnB;AAEA,eAAe,MAAMC,QAAN,CAAc;AACzBC,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,SAAKA,KAAL,GAAaA,KAAb;AAEA,UAAMC,iBAAiB,GAAI,KAAKD,KAAL,CAAWE,UAAX,CAAsBC,QAAtB,CAA+B,MAA/B,EAAuCC,wBAAlE;AACA,SAAKC,aAAL,GAAqB,IAAIC,aAAJ,CAAkBL,iBAAiB,CAACM,MAApC,CAArB;AACH;;AAIDC,EAAAA,MAAM,CAACC,MAAD,EAASC,KAAT,EAAe;AACjB,YAAOD,MAAP;AACI,WAAKZ,MAAM,CAACc,YAAZ;AAA2B;AACvB,eAAKC,cAAL,CAAoBF,KAApB;AACA;AACH;;AACD,WAAKb,MAAM,CAACgB,UAAZ;AAAyB;AACrB,eAAKC,YAAL;AACA;AACH;AARL;AAUH;;AAEDF,EAAAA,cAAc,CAACF,KAAD,EAAO;AACjBK,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCN,KAAlC;;AACA,SAAKL,aAAL,CAAmBY,eAAnB,GAAsCC,CAAD,IAAO;AACxCH,MAAAA,OAAO,CAACC,GAAR,CAAYE,CAAC,CAACC,IAAd;AACH,KAFD;;AAIA,SAAKd,aAAL,CAAmBe,KAAnB,CAAyB,IAAzB;AACH;;AAEDN,EAAAA,YAAY,GAAE;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACA,SAAKX,aAAL,CAAmBgB,IAAnB;AACH;;AAnCwB","sourcesContent":["import STATUS from \"./../observer/STATUS\";\r\n\r\nexport default class Recorder{\r\n    constructor(mixer){\r\n        this.mixer = mixer;\r\n\r\n        const streamDestination =  this.mixer.audioNodes.channels['main'].recorderStremDestination;\r\n        this.mediaRecorder = new MediaRecorder(streamDestination.stream);\r\n    }\r\n\r\n\r\n\r\n    action(status, param){\r\n        switch(status){\r\n            case STATUS.RECORD_START : {\r\n                this.startRecording(param);\r\n                break;\r\n            } \r\n            case STATUS.RECORD_END : {\r\n                this.endRecording()\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    startRecording(param){\r\n        console.log(\"im start recording\", param);\r\n        this.mediaRecorder.ondataavailable = (e) => {\r\n            console.log(e.data);\r\n        }\r\n\r\n        this.mediaRecorder.start(1000);\r\n    }\r\n\r\n    endRecording(){\r\n        console.log(\"im finish recoriding\")\r\n        this.mediaRecorder.stop();\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}