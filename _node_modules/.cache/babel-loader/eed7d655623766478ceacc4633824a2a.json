{"ast":null,"code":"import { put, select, takeEvery } from \"redux-saga/effects\";\nimport { ACTIONS, addRecordToFavorite, pushLog, removeRecordFromFavorite } from \"../../../actions\";\nimport { getApi } from \"./../../../apis/apiProvider\";\nimport Log from \"./../../../utils/logger/logger\";\nexport default function* requestAddToFavorite() {\n  console.log(\"handle request\");\n  const {\n    queries\n  } = getApi(\"UserAssets\");\n  const handelAdd = handel.bind(null, {\n    query: queries.addToFavoriteQl,\n    resultRoot: 'addToFavorite',\n    successAction: addRecordToFavorite,\n    failMessage: \"Can't add to favorite in database\",\n    successMessage: \"Record added to favorite collection\"\n  });\n  const handelRemove = handel.bind(null, {\n    query: queries.removeFromFavoriteQl,\n    resultRoot: 'removeFavorite',\n    successAction: removeRecordFromFavorite,\n    failMessage: \"Can't remove record from favorite in database\",\n    successMessage: \"Record removed from favorite collection\"\n  });\n  yield takeEvery(ACTIONS.RECS_REQ_ADD_FAVORITE, handelAdd);\n  yield takeEvery(ACTIONS.RECS_REQ_RM_FAVORITE, handelRemove);\n}\n\nconst getToken = state => state.user.token;\n\nfunction* handel({\n  query,\n  resultRoot,\n  successAction,\n  failMessage,\n  successMessage\n}, action) {\n  const token = yield select(getToken);\n\n  try {\n    const {\n      callQuery\n    } = getApi(\"UserAssets\");\n    const {\n      recordId\n    } = action;\n    const response = yield callQuery(query, token, {\n      recordId\n    });\n    let result = response === null || response === void 0 ? void 0 : response.data;\n\n    if (!response.errors && result && result[resultRoot]) {\n      yield put(successAction(recordId));\n    } else {\n      throw new Error(failMessage);\n    }\n\n    yield put(pushLog(new Log(`Record favorite action : ${successMessage}`)));\n  } catch (error) {\n    yield pushLog(Log.Error(['saga', 'record', 'request favorite'], error.message, \"Can't remove record from favorite collection\", error));\n  }\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/sagas/records/favorite/reqFavorite.js"],"names":["put","select","takeEvery","ACTIONS","addRecordToFavorite","pushLog","removeRecordFromFavorite","getApi","Log","requestAddToFavorite","console","log","queries","handelAdd","handel","bind","query","addToFavoriteQl","resultRoot","successAction","failMessage","successMessage","handelRemove","removeFromFavoriteQl","RECS_REQ_ADD_FAVORITE","RECS_REQ_RM_FAVORITE","getToken","state","user","token","action","callQuery","recordId","response","result","data","errors","Error","error","message"],"mappings":"AAAA,SAASA,GAAT,EAAcC,MAAd,EAAsBC,SAAtB,QAAuC,oBAAvC;AACA,SAASC,OAAT,EAAkBC,mBAAlB,EAAuCC,OAAvC,EAAgDC,wBAAhD,QAAgF,kBAAhF;AACA,SAASC,MAAT,QAAuB,6BAAvB;AACA,OAAOC,GAAP,MAAgB,gCAAhB;AAEA,eAAe,UAAUC,oBAAV,GAAiC;AAC5CC,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAcL,MAAM,CAAC,YAAD,CAA1B;AACA,QAAMM,SAAS,GAAGC,MAAM,CAACC,IAAP,CAAY,IAAZ,EAAkB;AAChCC,IAAAA,KAAK,EAAEJ,OAAO,CAACK,eADiB;AAEhCC,IAAAA,UAAU,EAAE,eAFoB;AAGhCC,IAAAA,aAAa,EAAEf,mBAHiB;AAIhCgB,IAAAA,WAAW,EAAE,mCAJmB;AAKhCC,IAAAA,cAAc,EAAE;AALgB,GAAlB,CAAlB;AAQA,QAAMC,YAAY,GAAGR,MAAM,CAACC,IAAP,CAAY,IAAZ,EAAkB;AACnCC,IAAAA,KAAK,EAAEJ,OAAO,CAACW,oBADoB;AAEnCL,IAAAA,UAAU,EAAE,gBAFuB;AAGnCC,IAAAA,aAAa,EAAEb,wBAHoB;AAInCc,IAAAA,WAAW,EAAE,+CAJsB;AAKnCC,IAAAA,cAAc,EAAE;AALmB,GAAlB,CAArB;AAQA,QAAMnB,SAAS,CAACC,OAAO,CAACqB,qBAAT,EAAgCX,SAAhC,CAAf;AACA,QAAMX,SAAS,CAACC,OAAO,CAACsB,oBAAT,EAA+BH,YAA/B,CAAf;AAGH;;AAED,MAAMI,QAAQ,GAAGC,KAAK,IAAIA,KAAK,CAACC,IAAN,CAAWC,KAArC;;AAEA,UAAUf,MAAV,CAAiB;AACbE,EAAAA,KADa;AACNE,EAAAA,UADM;AACMC,EAAAA,aADN;AACqBC,EAAAA,WADrB;AACkCC,EAAAA;AADlC,CAAjB,EAEGS,MAFH,EAEW;AACP,QAAMD,KAAK,GAAG,MAAM5B,MAAM,CAACyB,QAAD,CAA1B;;AAEA,MAAI;AACA,UAAM;AAAEK,MAAAA;AAAF,QAAgBxB,MAAM,CAAC,YAAD,CAA5B;AACA,UAAM;AAAEyB,MAAAA;AAAF,QAAeF,MAArB;AACA,UAAMG,QAAQ,GAAG,MAAMF,SAAS,CAACf,KAAD,EAAQa,KAAR,EAAe;AAAEG,MAAAA;AAAF,KAAf,CAAhC;AACA,QAAIE,MAAM,GAAGD,QAAH,aAAGA,QAAH,uBAAGA,QAAQ,CAAEE,IAAvB;;AACA,QAAI,CAACF,QAAQ,CAACG,MAAV,IAAoBF,MAApB,IAA8BA,MAAM,CAAChB,UAAD,CAAxC,EAAsD;AAClD,YAAMlB,GAAG,CAACmB,aAAa,CAACa,QAAD,CAAd,CAAT;AACH,KAFD,MAEO;AACH,YAAM,IAAIK,KAAJ,CAAUjB,WAAV,CAAN;AACH;;AAED,UAAMpB,GAAG,CAACK,OAAO,CAAC,IAAIG,GAAJ,CAAS,4BAA2Ba,cAAe,EAAnD,CAAD,CAAR,CAAT;AACH,GAZD,CAYE,OAAOiB,KAAP,EAAc;AACZ,UAAMjC,OAAO,CAACG,GAAG,CAAC6B,KAAJ,CACV,CAAC,MAAD,EAAS,QAAT,EAAmB,kBAAnB,CADU,EAEVC,KAAK,CAACC,OAFI,EAGV,8CAHU,EAIVD,KAJU,CAAD,CAAb;AAMH;AAEJ","sourcesContent":["import { put, select, takeEvery } from \"redux-saga/effects\";\r\nimport { ACTIONS, addRecordToFavorite, pushLog, removeRecordFromFavorite } from \"../../../actions\";\r\nimport { getApi } from \"./../../../apis/apiProvider\";\r\nimport Log from \"./../../../utils/logger/logger\";\r\n\r\nexport default function* requestAddToFavorite() {\r\n    console.log(\"handle request\")\r\n    const { queries } = getApi(\"UserAssets\");\r\n    const handelAdd = handel.bind(null, {\r\n        query: queries.addToFavoriteQl,\r\n        resultRoot: 'addToFavorite',\r\n        successAction: addRecordToFavorite,\r\n        failMessage: \"Can't add to favorite in database\",\r\n        successMessage: \"Record added to favorite collection\",\r\n    })\r\n\r\n    const handelRemove = handel.bind(null, {\r\n        query: queries.removeFromFavoriteQl,\r\n        resultRoot: 'removeFavorite',\r\n        successAction: removeRecordFromFavorite,\r\n        failMessage: \"Can't remove record from favorite in database\",\r\n        successMessage: \"Record removed from favorite collection\",\r\n    })\r\n\r\n    yield takeEvery(ACTIONS.RECS_REQ_ADD_FAVORITE, handelAdd)\r\n    yield takeEvery(ACTIONS.RECS_REQ_RM_FAVORITE, handelRemove);\r\n\r\n\r\n}\r\n\r\nconst getToken = state => state.user.token\r\n\r\nfunction* handel({\r\n    query, resultRoot, successAction, failMessage, successMessage\r\n}, action) {\r\n    const token = yield select(getToken);\r\n\r\n    try {\r\n        const { callQuery } = getApi(\"UserAssets\");\r\n        const { recordId } = action;\r\n        const response = yield callQuery(query, token, { recordId });\r\n        let result = response?.data;\r\n        if (!response.errors && result && result[resultRoot]) {\r\n            yield put(successAction(recordId));\r\n        } else {\r\n            throw new Error(failMessage)\r\n        }\r\n\r\n        yield put(pushLog(new Log(`Record favorite action : ${successMessage}`)))\r\n    } catch (error) {\r\n        yield pushLog(Log.Error(\r\n            ['saga', 'record', 'request favorite'],\r\n            error.message,\r\n            \"Can't remove record from favorite collection\",\r\n            error\r\n        ))\r\n    }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}