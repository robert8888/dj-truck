{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJEKTY\\\\APKI\\\\DjTruck\\\\djtruck\\\\src\\\\components\\\\Deck\\\\Player\\\\Player.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport WaveSurfer from \"wavesurfer\";\nimport Console from \"./../../../core/console/console\";\nimport config from \"./configuration\";\nimport { setChannelReady, setTimeLeft } from \"./../../../actions/actions\";\nimport \"./player.scss\";\n\nclass Player extends React.Component {\n  constructor() {\n    super();\n    this.masterContainer = React.createRef();\n    this.slaveContainer = React.createRef();\n    this.state = {\n      loadingProgress: 0\n    };\n  }\n\n  setLoading(progress) {\n    this.setState(state => {\n      let _state = { ...state\n      };\n      _state.loadingProgress = progress;\n      return _state;\n    });\n  }\n\n  componentDidMount() {\n    this.master = WaveSurfer.create(config.master(this.masterContainer.current, this.props.name));\n    this.slave = WaveSurfer.create(config.slave(this.slaveContainer.current, this.props.name));\n    const mixConsole = Console.Get();\n    mixConsole.setPlayer(this.props.name, this.master);\n    this.master.on('ready', () => {\n      this.currentDuration = this.master.getDuration();\n      this.slave.load(null, this.master.backend.getPeaks(430, 0, 430));\n      this.setLoading(100);\n      this.props.setReadyHandler(this.props.name, true);\n      startSync();\n    });\n    this.slave.on('seek', progress => {\n      let wasPlaying = this.master.isPlaying();\n      this.master.backend.seekTo(progress * this.currentDuration);\n      this.master.drawer.progress(progress);\n\n      if (wasPlaying) {\n        this.master.play();\n      }\n\n      this.slave.drawer.progress(progress);\n    });\n    this.master.on('loading', progress => {\n      this.setLoading(progress);\n    });\n\n    const startSync = () => {\n      this.syncHandle = setInterval(() => {\n        this.slave.drawer.progress(this.master.getCurrentTime() / this.currentDuration);\n      }, 100);\n    };\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.props.url !== nextProps.url) {\n      this.setLoading(0);\n      this.slave.load(null, []);\n      this.master.load(nextProps.url);\n      this.props.setReadyHandler(this.props.name, false);\n      return false;\n    }\n\n    return true;\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"player player-\" + this.props.name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, this.state.loadingProgress < 100 && this.state.loadingProgress > 0 && React.createElement(\"div\", {\n      className: \"player-loading\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, \"Loading \", this.state.loadingProgress, \" % \")), React.createElement(\"div\", {\n      className: \"master\",\n      ref: this.masterContainer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"slave\",\n      ref: this.slaveContainer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapDispachToProps = dispach => ({\n  setReadyHandler: (channel, status) => dispach(setChannelReady(status, channel)),\n  setTimeLeftHandler: (channel, timeLeft) => dispach(setTimeLeft(channel, timeLeft))\n});\n\nexport default connect(null, mapDispachToProps)(Player);","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/components/Deck/Player/Player.js"],"names":["React","connect","WaveSurfer","Console","config","setChannelReady","setTimeLeft","Player","Component","constructor","masterContainer","createRef","slaveContainer","state","loadingProgress","setLoading","progress","setState","_state","componentDidMount","master","create","current","props","name","slave","mixConsole","Get","setPlayer","on","currentDuration","getDuration","load","backend","getPeaks","setReadyHandler","startSync","wasPlaying","isPlaying","seekTo","drawer","play","syncHandle","setInterval","getCurrentTime","shouldComponentUpdate","nextProps","nextState","url","render","mapDispachToProps","dispach","channel","status","setTimeLeftHandler","timeLeft"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,OAAP,MAAoB,iCAApB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,SAAQC,eAAR,EAA0BC,WAA1B,QAA6C,4BAA7C;AACA,OAAO,eAAP;;AAEA,MAAMC,MAAN,SAAqBP,KAAK,CAACQ,SAA3B,CAAqC;AACjCC,EAAAA,WAAW,GAAE;AACT;AACA,SAAKC,eAAL,GAAuBV,KAAK,CAACW,SAAN,EAAvB;AACA,SAAKC,cAAL,GAAsBZ,KAAK,CAACW,SAAN,EAAtB;AAEA,SAAKE,KAAL,GAAa;AACTC,MAAAA,eAAe,EAAG;AADT,KAAb;AAGH;;AAEDC,EAAAA,UAAU,CAACC,QAAD,EAAU;AAChB,SAAKC,QAAL,CAAeJ,KAAK,IAAI;AACpB,UAAIK,MAAM,GAAG,EAAC,GAAGL;AAAJ,OAAb;AACAK,MAAAA,MAAM,CAACJ,eAAP,GAAyBE,QAAzB;AACA,aAAOE,MAAP;AACH,KAJD;AAKH;;AAEDC,EAAAA,iBAAiB,GAAE;AACf,SAAKC,MAAL,GAAclB,UAAU,CAACmB,MAAX,CAAkBjB,MAAM,CAACgB,MAAP,CAAc,KAAKV,eAAL,CAAqBY,OAAnC,EAA4C,KAAKC,KAAL,CAAWC,IAAvD,CAAlB,CAAd;AACA,SAAKC,KAAL,GAAavB,UAAU,CAACmB,MAAX,CAAkBjB,MAAM,CAACqB,KAAP,CAAa,KAAKb,cAAL,CAAoBU,OAAjC,EAA0C,KAAKC,KAAL,CAAWC,IAArD,CAAlB,CAAb;AAEA,UAAME,UAAU,GAAGvB,OAAO,CAACwB,GAAR,EAAnB;AACAD,IAAAA,UAAU,CAACE,SAAX,CAAqB,KAAKL,KAAL,CAAWC,IAAhC,EAAsC,KAAKJ,MAA3C;AAEA,SAAKA,MAAL,CAAYS,EAAZ,CAAe,OAAf,EAAwB,MAAI;AACxB,WAAKC,eAAL,GAAuB,KAAKV,MAAL,CAAYW,WAAZ,EAAvB;AACA,WAAKN,KAAL,CAAWO,IAAX,CAAgB,IAAhB,EAAsB,KAAKZ,MAAL,CAAYa,OAAZ,CAAoBC,QAApB,CAA6B,GAA7B,EAAkC,CAAlC,EAAqC,GAArC,CAAtB;AACA,WAAKnB,UAAL,CAAgB,GAAhB;AACA,WAAKQ,KAAL,CAAWY,eAAX,CAA2B,KAAKZ,KAAL,CAAWC,IAAtC,EAA4C,IAA5C;AACAY,MAAAA,SAAS;AACZ,KAND;AAQA,SAAKX,KAAL,CAAWI,EAAX,CAAc,MAAd,EAAuBb,QAAD,IAAY;AAC9B,UAAIqB,UAAU,GAAG,KAAKjB,MAAL,CAAYkB,SAAZ,EAAjB;AACA,WAAKlB,MAAL,CAAYa,OAAZ,CAAoBM,MAApB,CAA2BvB,QAAQ,GAAG,KAAKc,eAA3C;AACA,WAAKV,MAAL,CAAYoB,MAAZ,CAAmBxB,QAAnB,CAA4BA,QAA5B;;AACA,UAAGqB,UAAH,EAAc;AACV,aAAKjB,MAAL,CAAYqB,IAAZ;AACH;;AACD,WAAKhB,KAAL,CAAWe,MAAX,CAAkBxB,QAAlB,CAA2BA,QAA3B;AAEH,KATD;AAWA,SAAKI,MAAL,CAAYS,EAAZ,CAAe,SAAf,EAA2Bb,QAAD,IAAY;AAClC,WAAKD,UAAL,CAAgBC,QAAhB;AACH,KAFD;;AAIA,UAAMoB,SAAS,GAAG,MAAM;AACpB,WAAKM,UAAL,GAAkBC,WAAW,CAAC,MAAM;AAChC,aAAKlB,KAAL,CAAWe,MAAX,CAAkBxB,QAAlB,CAA2B,KAAKI,MAAL,CAAYwB,cAAZ,KAA+B,KAAKd,eAA/D;AACH,OAF4B,EAE1B,GAF0B,CAA7B;AAGH,KAJD;AAKH;;AAEDe,EAAAA,qBAAqB,CAACC,SAAD,EAAYC,SAAZ,EAAsB;AAEvC,QAAG,KAAKxB,KAAL,CAAWyB,GAAX,KAAmBF,SAAS,CAACE,GAAhC,EAAoC;AAChC,WAAKjC,UAAL,CAAgB,CAAhB;AACA,WAAKU,KAAL,CAAWO,IAAX,CAAgB,IAAhB,EAAsB,EAAtB;AACA,WAAKZ,MAAL,CAAYY,IAAZ,CAAiBc,SAAS,CAACE,GAA3B;AACA,WAAKzB,KAAL,CAAWY,eAAX,CAA2B,KAAKZ,KAAL,CAAWC,IAAtC,EAA4C,KAA5C;AACA,aAAO,KAAP;AACH;;AACD,WAAO,IAAP;AACH;;AAEDyB,EAAAA,MAAM,GAAE;AACJ,WACI;AAAK,MAAA,SAAS,EAAE,mBAAiB,KAAK1B,KAAL,CAAWC,IAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEK,KAAKX,KAAL,CAAWC,eAAX,GAA6B,GAA7B,IAAoC,KAAKD,KAAL,CAAWC,eAAX,GAA6B,CAAlE,IACI;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAgB,KAAKD,KAAL,CAAWC,eAA3B,QAAhC,CAHR,EAKI;AAAK,MAAA,SAAS,EAAC,QAAf;AAAwB,MAAA,GAAG,EAAG,KAAKJ,eAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALJ,EAMI;AAAK,MAAA,SAAS,EAAC,OAAf;AAAuB,MAAA,GAAG,EAAG,KAAKE,cAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANJ,CADJ;AAUH;;AA/EgC;;AAkFrC,MAAMsC,iBAAiB,GAAGC,OAAO,KAAI;AACjChB,EAAAA,eAAe,EAAG,CAACiB,OAAD,EAAUC,MAAV,KAAqBF,OAAO,CAAC9C,eAAe,CAACgD,MAAD,EAASD,OAAT,CAAhB,CADb;AAEjCE,EAAAA,kBAAkB,EAAG,CAACF,OAAD,EAAUG,QAAV,KAAuBJ,OAAO,CAAC7C,WAAW,CAAC8C,OAAD,EAAUG,QAAV,CAAZ;AAFlB,CAAJ,CAAjC;;AAMA,eAAetD,OAAO,CAAC,IAAD,EAAOiD,iBAAP,CAAP,CAAiC3C,MAAjC,CAAf","sourcesContent":["import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport WaveSurfer from \"wavesurfer\";\r\nimport Console from \"./../../../core/console/console\";\r\nimport config from \"./configuration\";\r\nimport {setChannelReady , setTimeLeft } from \"./../../../actions/actions\";\r\nimport \"./player.scss\"\r\n\r\nclass Player extends React.Component {\r\n    constructor(){\r\n        super();\r\n        this.masterContainer = React.createRef();\r\n        this.slaveContainer = React.createRef();\r\n\r\n        this.state = {\r\n            loadingProgress : 0,\r\n        }\r\n    }\r\n\r\n    setLoading(progress){\r\n        this.setState( state => {\r\n            let _state = {...state};\r\n            _state.loadingProgress = progress;\r\n            return _state\r\n        })\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.master = WaveSurfer.create(config.master(this.masterContainer.current, this.props.name));\r\n        this.slave = WaveSurfer.create(config.slave(this.slaveContainer.current, this.props.name));\r\n\r\n        const mixConsole = Console.Get();\r\n        mixConsole.setPlayer(this.props.name, this.master);\r\n\r\n        this.master.on('ready', ()=>{\r\n            this.currentDuration = this.master.getDuration();\r\n            this.slave.load(null, this.master.backend.getPeaks(430, 0, 430));\r\n            this.setLoading(100);\r\n            this.props.setReadyHandler(this.props.name, true);\r\n            startSync();\r\n        })\r\n\r\n        this.slave.on('seek', (progress)=>{\r\n            let wasPlaying = this.master.isPlaying();\r\n            this.master.backend.seekTo(progress * this.currentDuration);\r\n            this.master.drawer.progress(progress);\r\n            if(wasPlaying){\r\n                this.master.play();\r\n            }\r\n            this.slave.drawer.progress(progress);\r\n\r\n        })\r\n\r\n        this.master.on('loading', (progress)=>{\r\n            this.setLoading(progress);\r\n        })\r\n\r\n        const startSync = () => {\r\n            this.syncHandle = setInterval(() => {\r\n                this.slave.drawer.progress(this.master.getCurrentTime() / this.currentDuration);\r\n            }, 100)\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState){\r\n    \r\n        if(this.props.url !== nextProps.url){\r\n            this.setLoading(0);\r\n            this.slave.load(null, []);\r\n            this.master.load(nextProps.url);\r\n            this.props.setReadyHandler(this.props.name, false);\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className={\"player player-\"+this.props.name}>\r\n                {\r\n                (this.state.loadingProgress < 100 && this.state.loadingProgress > 0) &&\r\n                    <div className=\"player-loading\"><span>Loading { this.state.loadingProgress } % </span></div>\r\n                }\r\n                <div className=\"master\" ref={ this.masterContainer } />\r\n                <div className=\"slave\" ref={ this.slaveContainer } /> \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispachToProps = dispach =>({\r\n    setReadyHandler : (channel, status) => dispach(setChannelReady(status, channel)),\r\n    setTimeLeftHandler : (channel, timeLeft) => dispach(setTimeLeft(channel, timeLeft))\r\n})\r\n\r\n\r\nexport default connect(null, mapDispachToProps)(Player);"]},"metadata":{},"sourceType":"module"}