{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\src\\\\pages\\\\console\\\\components\\\\PlayListExplorer\\\\Explorer\\\\ExplorerTree\\\\ExplorerTree.js\";\nimport React, { useCallback, useState, Fragment, useEffect } from \"react\";\nimport UUID from \"uuidjs\";\nimport { connect } from \"react-redux\";\nimport ExplorerContextMenu from \"./../../../../../common/components/ContextMenu/ContextMenu\";\nimport { ContextMenuTrigger } from \"react-contextmenu\";\nimport { toggleDirRequest, setSelection, openPlaylistRequest, renameSelectedRequest, deleteSelectedRequest, createDirRequest, createPlaylistRequest } from \"./../../../../../../actions\";\nimport { isEmpty, sortObj } from \"./../../../../../../utils/objects/helpers\";\nimport { useDoubleClick } from \"./useDoubleClick\";\nimport RenameInput from \"./RenameInput/RenameInput\";\nimport DirElement from \"./DirElement/DirElement\";\nimport FileElement from \"./FileElement/FileElement\";\nimport \"./explorer-tree.scss\";\n\nconst ExplorerTree = props => {\n  const [renameMode, setRenameMode] = useState(false);\n  const renameModeFromProps = props.renameMode;\n  useEffect(() => {\n    setRenameMode(renameModeFromProps);\n  }, [renameModeFromProps, setRenameMode]);\n\n  const renameInput = name => {\n    return React.createElement(RenameInput, {\n      name: name,\n      onChange: value => {\n        props.renameSelected(value);\n        setRenameMode(false);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    });\n  };\n\n  const [dirClickHandler] = useDoubleClick({\n    clickHandler: path => {\n      if (!renameMode) {\n        props.setSelection(path);\n      }\n    },\n    doubleClickHandler: path => props.toggleDir(path)\n  });\n\n  const getDirElement = ({ ...params\n  }) => {\n    const fullPath = [...params.path, params.name];\n    return React.createElement(DirElement, Object.assign({\n      key: UUID.genV1()\n    }, params, {\n      renameMode: renameMode,\n      renameInput: renameInput,\n      onClick: dirClickHandler.bind(null, fullPath),\n      buttonClick: props.toggleDir.bind(null, fullPath),\n      onContextMenu: props.setSelection.bind(null, fullPath),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }));\n  };\n\n  const [fileClickHandler] = useDoubleClick({\n    clickHandler: path => {\n      if (!renameMode) {\n        props.setSelection(path);\n      }\n    },\n    doubleClickHandler: props.openSelected\n  });\n\n  const getFileElement = (name, path) => {\n    const fullPath = [...path, name];\n    return React.createElement(FileElement, {\n      key: UUID.genV1(),\n      name: name,\n      path: path,\n      renameMode: renameMode,\n      renameInput: renameInput,\n      onClick: fileClickHandler.bind(null, fullPath),\n      buttonClick: props.toggleDir.bind(null, fullPath),\n      onContextMenu: props.setSelection.bind(null, fullPath),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    });\n  };\n\n  const renderDirElements = useCallback((name, content, path) => {\n    content = sortObj(content);\n\n    if (content._type === \"playlist\") {\n      //} instanceof Array) {\n      return getFileElement(name, path);\n    } else {\n      if (content._open === true) {\n        return React.createElement(Fragment, {\n          key: UUID.genV1(),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96\n          },\n          __self: this\n        }, getDirElement({\n          name,\n          path,\n          open: true\n        }), renderDir(content, [...path, name]));\n      } else {\n        if (isEmpty(content)) {\n          return getDirElement({\n            name,\n            path,\n            open: false,\n            empty: true\n          });\n        }\n\n        return getDirElement({\n          name,\n          path,\n          open: false\n        });\n      }\n    }\n  });\n  const renderDir = useCallback((dir, path) => {\n    return React.createElement(\"ul\", {\n      className: \"list-dir dir-content\",\n      key: UUID.generate(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, Object.entries(dir).map(([name, content]) => {\n      if (name.startsWith(\"_\")) {\n        return null;\n      }\n\n      return renderDirElements(name, content, path);\n    }));\n  });\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, React.createElement(ContextMenuTrigger, {\n    id: \"explorer_context_menu\",\n    holdToDisplay: -1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"explorer-tree\",\n    onClick: props.setSelection.bind(null, [\"root\"]),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, renderDir(props.root, ['root']))), React.createElement(ExplorerContextMenu, {\n    id: \"explorer_context_menu\",\n    items: {\n      \"Add Playlist\": () => {\n        props.createPlaylist(); //setRenameMode(true)\n      },\n      \"Add folder\": () => {\n        props.createDir(); // setRenameMode(true);\n      },\n      \"Rename\": setRenameMode.bind(null, true),\n      \"Delete\": props.deleteSelected.bind(null)\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }));\n};\n\nconst mapStateToProps = state => ({\n  root: state.playList.root,\n  currentSelection: state.playList.currentSelection,\n  renameMode: state.playList.renameMode\n});\n\nconst mapDispatchToProps = dispatch => ({\n  toggleDir: path => dispatch(toggleDirRequest(path)),\n  //\n  setSelection: path => dispatch(setSelection(path)),\n  openSelected: path => dispatch(openPlaylistRequest(path)),\n  //to request\n  renameSelected: newName => dispatch(renameSelectedRequest(newName)),\n  //\n  deleteSelected: () => dispatch(deleteSelectedRequest()),\n  //\n  createDir: () => dispatch(createDirRequest(null)),\n  //\n  createPlaylist: () => dispatch(createPlaylistRequest(null)) //\n\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ExplorerTree);","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/pages/console/components/PlayListExplorer/Explorer/ExplorerTree/ExplorerTree.js"],"names":["React","useCallback","useState","Fragment","useEffect","UUID","connect","ExplorerContextMenu","ContextMenuTrigger","toggleDirRequest","setSelection","openPlaylistRequest","renameSelectedRequest","deleteSelectedRequest","createDirRequest","createPlaylistRequest","isEmpty","sortObj","useDoubleClick","RenameInput","DirElement","FileElement","ExplorerTree","props","renameMode","setRenameMode","renameModeFromProps","renameInput","name","value","renameSelected","dirClickHandler","clickHandler","path","doubleClickHandler","toggleDir","getDirElement","params","fullPath","genV1","bind","fileClickHandler","openSelected","getFileElement","renderDirElements","content","_type","_open","open","renderDir","empty","dir","generate","Object","entries","map","startsWith","root","createPlaylist","createDir","deleteSelected","mapStateToProps","state","playList","currentSelection","mapDispatchToProps","dispatch","newName"],"mappings":"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","sourcesContent":["import React, { useCallback, useState, Fragment, useEffect } from \"react\";\r\nimport UUID from \"uuidjs\";\r\nimport { connect } from \"react-redux\";\r\nimport ExplorerContextMenu from \"./../../../../../common/components/ContextMenu/ContextMenu\";\r\nimport { ContextMenuTrigger } from \"react-contextmenu\";\r\nimport {\r\n    toggleDirRequest,\r\n    setSelection,\r\n    openPlaylistRequest,\r\n    renameSelectedRequest,\r\n    deleteSelectedRequest,\r\n    createDirRequest,\r\n    createPlaylistRequest\r\n} from \"./../../../../../../actions\"\r\nimport { isEmpty, sortObj } from \"./../../../../../../utils/objects/helpers\";\r\nimport { useDoubleClick } from \"./useDoubleClick\";\r\nimport RenameInput from \"./RenameInput/RenameInput\";\r\nimport DirElement from \"./DirElement/DirElement\";\r\nimport FileElement from \"./FileElement/FileElement\";\r\nimport \"./explorer-tree.scss\";\r\n\r\nconst ExplorerTree = props => {\r\n\r\n    const [renameMode, setRenameMode] = useState(false);\r\n\r\n    const renameModeFromProps = props.renameMode;\r\n    useEffect(()=>{\r\n        setRenameMode(renameModeFromProps)\r\n    }, [renameModeFromProps, setRenameMode])\r\n\r\n    const renameInput = name => {\r\n        return (\r\n            <RenameInput name={name} onChange={value => {\r\n                props.renameSelected(value);\r\n                setRenameMode(false)\r\n            }} />\r\n        )\r\n    }\r\n\r\n    const [dirClickHandler] = useDoubleClick({\r\n        clickHandler: (path) => {\r\n            if (!renameMode) {\r\n                props.setSelection(path)\r\n            }\r\n        },\r\n        doubleClickHandler: path => props.toggleDir(path),\r\n    })\r\n\r\n    const getDirElement = ({ ...params }) => {\r\n        const fullPath = [...params.path, params.name]\r\n        return (\r\n            <DirElement\r\n                key={UUID.genV1()}\r\n                {...params}\r\n                renameMode={renameMode}\r\n                renameInput={renameInput}\r\n                onClick={dirClickHandler.bind(null, fullPath)}\r\n                buttonClick={props.toggleDir.bind(null, fullPath)}\r\n                onContextMenu={props.setSelection.bind(null, fullPath)}\r\n            />\r\n        )\r\n    }\r\n\r\n    const [fileClickHandler] = useDoubleClick({\r\n        clickHandler: (path) => {\r\n            if (!renameMode) {\r\n                props.setSelection(path)\r\n            }\r\n        },\r\n        doubleClickHandler: props.openSelected\r\n    })\r\n\r\n    const getFileElement = (name, path) => {\r\n        const fullPath = [...path, name]\r\n        return (\r\n            <FileElement\r\n                key={UUID.genV1()}\r\n                name={name}\r\n                path={path}\r\n                renameMode={renameMode}\r\n                renameInput={renameInput}\r\n                onClick={fileClickHandler.bind(null, fullPath)}\r\n                buttonClick={props.toggleDir.bind(null, fullPath)}\r\n                onContextMenu={props.setSelection.bind(null, fullPath)}\r\n            />\r\n        )\r\n    }\r\n\r\n    const renderDirElements = useCallback((name, content, path) => {\r\n        content = sortObj(content);\r\n        if (content._type === \"playlist\"){//} instanceof Array) {\r\n            return getFileElement(name, path)\r\n        } else {\r\n            if (content._open === true) {\r\n                return (\r\n                    <Fragment key={UUID.genV1()}>\r\n                        {getDirElement({ name, path, open: true })}\r\n                        {renderDir(content, [...path, name])}\r\n                    </Fragment>\r\n                )\r\n            } else {\r\n                if (isEmpty(content)) {\r\n                    return getDirElement({ name, path, open: false, empty: true })\r\n                }\r\n                return getDirElement({ name, path, open: false })\r\n            }\r\n        }\r\n    })\r\n\r\n    const renderDir = useCallback((dir, path) => {\r\n        return (\r\n            <ul className=\"list-dir dir-content\" key={UUID.generate()}>\r\n                {\r\n                    Object.entries(dir).map(([name, content]) => {\r\n                        if (name.startsWith(\"_\")) {\r\n                            return null;\r\n                        }\r\n                        return renderDirElements(name, content, path);\r\n                    })\r\n                }\r\n            </ul>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <Fragment>\r\n            <ContextMenuTrigger id=\"explorer_context_menu\" holdToDisplay={-1}>\r\n                <div className=\"explorer-tree\" onClick={props.setSelection.bind(null, [\"root\"])}>\r\n                    {renderDir(props.root, ['root'])}\r\n                </div>\r\n            </ContextMenuTrigger>\r\n\r\n            <ExplorerContextMenu\r\n                id=\"explorer_context_menu\"\r\n                items={{\r\n                    \"Add Playlist\": () => {\r\n                        props.createPlaylist();\r\n                        //setRenameMode(true)\r\n                    },\r\n                    \"Add folder\": () => {\r\n                        props.createDir();\r\n                       // setRenameMode(true);\r\n                    },\r\n                    \"Rename\": setRenameMode.bind(null, true),\r\n                    \"Delete\": props.deleteSelected.bind(null),\r\n                }} />\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    root: state.playList.root,\r\n    currentSelection: state.playList.currentSelection,\r\n    renameMode: state.playList.renameMode,\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    toggleDir: path => dispatch(toggleDirRequest(path)),//\r\n    setSelection: path => dispatch(setSelection(path)),\r\n    openSelected: path => dispatch(openPlaylistRequest(path)),//to request\r\n    renameSelected: newName => dispatch(renameSelectedRequest(newName)),//\r\n    deleteSelected: () => dispatch(deleteSelectedRequest()),//\r\n    createDir: () => dispatch(createDirRequest(null)),//\r\n    createPlaylist: () => dispatch(createPlaylistRequest(null)),//\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ExplorerTree);"]},"metadata":{},"sourceType":"module"}