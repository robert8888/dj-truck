{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJEKTY\\\\APKI\\\\DjTruck\\\\djtruck\\\\src\\\\pages\\\\app\\\\components\\\\PlayListExplorer\\\\Explorer\\\\ExplorerTree\\\\ExplorerTree.js\";\nimport React, { useCallback, useState, Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport \"./explorer-tree.scss\";\nimport { toggleDir as toggleDirAction, setSelection } from \"./../../../../../../actions\";\nimport { isEmpty, sortObj } from \"./../../../../../../utils/objects/helpers\";\nimport UUID from \"uuidjs\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport ClassName from \"classnames\";\nimport { faFolder, faFile, faAngleRight, faAngleDown } from \"@fortawesome/free-solid-svg-icons\";\nimport { useDoubleClick } from \"./useDoubleClick\";\nimport ExplorerContextMenu from \"./ContextMenu/ExplorerContextMenu\";\nimport { ContextMenuTrigger } from \"react-contextmenu\";\n\nconst ExplorerTree = props => {\n  const toggleDir = useCallback(path => {\n    props.toggleDir(path);\n  }, [props.toggleDir]);\n  const setSelection = useCallback(path => {\n    props.setSelection(path);\n  }, [props.setSelection]);\n  const [liClickHandler] = useDoubleClick({\n    clickHandler: setSelection,\n    doubleClickHandler: toggleDir\n  });\n  const getDirElement = useCallback((name, path, open, empty) => {\n    const liClassList = ClassName(\"list-item item-dir\", {\n      \"item-dir--empty\": empty\n    }, {\n      \"item--selected\": [...path, name].join(\"\") === props.currentSelection.join(\"\")\n    });\n    return React.createElement(\"li\", {\n      onClick: liClickHandler.bind(null, [...path, name]),\n      className: liClassList,\n      \"data-path\": path.join(\"/\"),\n      key: UUID.genV1(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, !empty && React.createElement(\"button\", {\n      className: \"btn-dir \" + (open ? \"btn-dir--expand\" : \"btn-dir--colapse\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, React.createElement(FontAwesomeIcon, {\n      className: \"icon\",\n      icon: open ? faAngleDown : faAngleRight,\n      onClick: toggleDir.bind(null, [...path, name]),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    })), React.createElement(FontAwesomeIcon, {\n      className: \"icon icon-dir\",\n      icon: faFolder,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }), name);\n  });\n  const getFileElement = useCallback((name, path) => {\n    const liClassList = ClassName(\"list-item item-file\", {\n      \"item--selected\": [...path, name].join(\"\") === props.currentSelection.join(\"\")\n    });\n    return React.createElement(\"li\", {\n      className: liClassList,\n      onClick: setSelection.bind(null, [...path, name]),\n      \"data-path\": path.join(\"/\"),\n      key: UUID.genV1(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(FontAwesomeIcon, {\n      className: \"icon icon-file\",\n      icon: faFile,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }), name);\n  });\n  const renderDirElements = useCallback((name, content, path) => {\n    content = sortObj(content);\n\n    if (content instanceof Array) {\n      return getFileElement(name, path);\n    } else {\n      if (content._open === true) {\n        return React.createElement(Fragment, {\n          key: UUID.genV1(),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78\n          },\n          __self: this\n        }, getDirElement(name, path, true), renderDir(content, [...path, name]));\n      } else {\n        if (isEmpty(content)) {\n          return getDirElement(name, path, false, true);\n        }\n\n        return getDirElement(name, path, false);\n      }\n    }\n  });\n  const renderDir = useCallback((dir, path) => {\n    return React.createElement(\"ul\", {\n      className: \"list-dir dir-content\",\n      key: UUID.generate(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, Object.entries(dir).map(([name, content]) => {\n      if (name === \"_open\") {\n        return null;\n      }\n\n      return renderDirElements(name, content, path);\n    }));\n  });\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"explorer-tree\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, renderDir(props.root, ['root'])), React.createElement(ExplorerContextMenu, {\n    id: \"explorer_context_menu\",\n    item: {},\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }));\n};\n\nconst mapStateToProps = state => ({\n  root: state.playList.root,\n  currentSelection: state.playList.currentSelection\n});\n\nconst mapDispatchToProps = dispatch => ({\n  toggleDir: path => dispatch(toggleDirAction(path)),\n  setSelection: path => dispatch(setSelection(path))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ExplorerTree);","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/pages/app/components/PlayListExplorer/Explorer/ExplorerTree/ExplorerTree.js"],"names":["React","useCallback","useState","Fragment","connect","toggleDir","toggleDirAction","setSelection","isEmpty","sortObj","UUID","FontAwesomeIcon","ClassName","faFolder","faFile","faAngleRight","faAngleDown","useDoubleClick","ExplorerContextMenu","ContextMenuTrigger","ExplorerTree","props","path","liClickHandler","clickHandler","doubleClickHandler","getDirElement","name","open","empty","liClassList","join","currentSelection","bind","genV1","getFileElement","renderDirElements","content","Array","_open","renderDir","dir","generate","Object","entries","map","root","mapStateToProps","state","playList","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,QAA7B,EAAuCC,QAAvC,QAAuD,OAAvD;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAO,sBAAP;AACA,SAASC,SAAS,IAAIC,eAAtB,EAAuCC,YAAvC,QAA0D,6BAA1D;AACA,SAASC,OAAT,EAAkBC,OAAlB,QAAiC,2CAAjC;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,QAAT,EAAoBC,MAApB,EAA4BC,YAA5B,EAA0CC,WAA1C,QAA6D,mCAA7D;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,OAAOC,mBAAP,MAAgC,mCAAhC;AACA,SAAQC,kBAAR,QAAiC,mBAAjC;;AACA,MAAMC,YAAY,GAAGC,KAAK,IAAI;AAE1B,QAAMhB,SAAS,GAAGJ,WAAW,CAAEqB,IAAD,IAAU;AACpCD,IAAAA,KAAK,CAAChB,SAAN,CAAgBiB,IAAhB;AACH,GAF4B,EAE1B,CAACD,KAAK,CAAChB,SAAP,CAF0B,CAA7B;AAIA,QAAME,YAAY,GAAGN,WAAW,CAAEqB,IAAD,IAAQ;AACrCD,IAAAA,KAAK,CAACd,YAAN,CAAmBe,IAAnB;AACH,GAF+B,EAE7B,CAACD,KAAK,CAACd,YAAP,CAF6B,CAAhC;AAIA,QAAM,CAACgB,cAAD,IAAmBN,cAAc,CAAC;AACpCO,IAAAA,YAAY,EAAEjB,YADsB;AAEpCkB,IAAAA,kBAAkB,EAAEpB;AAFgB,GAAD,CAAvC;AAKA,QAAMqB,aAAa,GAAGzB,WAAW,CAAC,CAAC0B,IAAD,EAAOL,IAAP,EAAaM,IAAb,EAAmBC,KAAnB,KAA6B;AAC3D,UAAMC,WAAW,GAAGlB,SAAS,CACzB,oBADyB,EAEzB;AAAC,yBAAoBiB;AAArB,KAFyB,EAGzB;AAAC,wBAAkB,CAAC,GAAGP,IAAJ,EAAUK,IAAV,EAAgBI,IAAhB,CAAqB,EAArB,MAA6BV,KAAK,CAACW,gBAAN,CAAuBD,IAAvB,CAA4B,EAA5B;AAAhD,KAHyB,CAA7B;AAKA,WACI;AACI,MAAA,OAAO,EAAER,cAAc,CAACU,IAAf,CAAoB,IAApB,EAA0B,CAAC,GAAGX,IAAJ,EAAUK,IAAV,CAA1B,CADb;AAEI,MAAA,SAAS,EAAEG,WAFf;AAGI,mBAAWR,IAAI,CAACS,IAAL,CAAU,GAAV,CAHf;AAII,MAAA,GAAG,EAAErB,IAAI,CAACwB,KAAL,EAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKK,CAACL,KAAD,IACG;AACI,MAAA,SAAS,EAAE,cAAeD,IAAD,GAAS,iBAAT,GAA6B,kBAA3C,CADf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEI,oBAAC,eAAD;AACI,MAAA,SAAS,EAAC,MADd;AAEI,MAAA,IAAI,EAAGA,IAAD,GAASZ,WAAT,GAAuBD,YAFjC;AAGI,MAAA,OAAO,EAAEV,SAAS,CAAC4B,IAAV,CAAe,IAAf,EAAqB,CAAC,GAAGX,IAAJ,EAAUK,IAAV,CAArB,CAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CANR,EAaQ,oBAAC,eAAD;AAAiB,MAAA,SAAS,EAAC,eAA3B;AAA2C,MAAA,IAAI,EAAEd,QAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAbR,EAcSc,IAdT,CADJ;AAkBH,GAxBgC,CAAjC;AA0BA,QAAMQ,cAAc,GAAGlC,WAAW,CAAC,CAAC0B,IAAD,EAAOL,IAAP,KAAgB;AAC/C,UAAMQ,WAAW,GAAGlB,SAAS,CACzB,qBADyB,EAEzB;AAAC,wBAAkB,CAAC,GAAGU,IAAJ,EAAUK,IAAV,EAAgBI,IAAhB,CAAqB,EAArB,MAA6BV,KAAK,CAACW,gBAAN,CAAuBD,IAAvB,CAA4B,EAA5B;AAAhD,KAFyB,CAA7B;AAIA,WACI;AACI,MAAA,SAAS,EAAED,WADf;AAEI,MAAA,OAAO,EAAEvB,YAAY,CAAC0B,IAAb,CAAkB,IAAlB,EAAwB,CAAC,GAAGX,IAAJ,EAAUK,IAAV,CAAxB,CAFb;AAGI,mBAAWL,IAAI,CAACS,IAAL,CAAU,GAAV,CAHf;AAII,MAAA,GAAG,EAAErB,IAAI,CAACwB,KAAL,EAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKI,oBAAC,eAAD;AAAiB,MAAA,SAAS,EAAC,gBAA3B;AAA4C,MAAA,IAAI,EAAEpB,MAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALJ,EAMKa,IANL,CADJ;AAUH,GAfiC,CAAlC;AAiBA,QAAMS,iBAAiB,GAAGnC,WAAW,CAAC,CAAC0B,IAAD,EAAOU,OAAP,EAAgBf,IAAhB,KAAyB;AAC3De,IAAAA,OAAO,GAAG5B,OAAO,CAAC4B,OAAD,CAAjB;;AACA,QAAIA,OAAO,YAAYC,KAAvB,EAA8B;AAC1B,aAAOH,cAAc,CAACR,IAAD,EAAOL,IAAP,CAArB;AACH,KAFD,MAEO;AACH,UAAIe,OAAO,CAACE,KAAR,KAAkB,IAAtB,EAA4B;AACxB,eACI,oBAAC,QAAD;AAAU,UAAA,GAAG,EAAE7B,IAAI,CAACwB,KAAL,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACKR,aAAa,CAACC,IAAD,EAAOL,IAAP,EAAa,IAAb,CADlB,EAEKkB,SAAS,CAACH,OAAD,EAAU,CAAC,GAAGf,IAAJ,EAAUK,IAAV,CAAV,CAFd,CADJ;AAMH,OAPD,MAOO;AACH,YAAInB,OAAO,CAAC6B,OAAD,CAAX,EAAsB;AAClB,iBAAOX,aAAa,CAACC,IAAD,EAAOL,IAAP,EAAa,KAAb,EAAoB,IAApB,CAApB;AACH;;AACD,eAAOI,aAAa,CAACC,IAAD,EAAOL,IAAP,EAAa,KAAb,CAApB;AACH;AACJ;AACJ,GAnBoC,CAArC;AAsBA,QAAMkB,SAAS,GAAGvC,WAAW,CAAC,CAACwC,GAAD,EAAMnB,IAAN,KAAe;AACzC,WACI;AAAI,MAAA,SAAS,EAAC,sBAAd;AAAqC,MAAA,GAAG,EAAEZ,IAAI,CAACgC,QAAL,EAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEQC,MAAM,CAACC,OAAP,CAAeH,GAAf,EAAoBI,GAApB,CAAwB,CAAC,CAAClB,IAAD,EAAOU,OAAP,CAAD,KAAqB;AACzC,UAAIV,IAAI,KAAK,OAAb,EAAsB;AAClB,eAAO,IAAP;AACH;;AACD,aAAOS,iBAAiB,CAACT,IAAD,EAAOU,OAAP,EAAgBf,IAAhB,CAAxB;AACH,KALD,CAFR,CADJ;AAYH,GAb4B,CAA7B;AAeA,SACI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEA;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKkB,SAAS,CAACnB,KAAK,CAACyB,IAAP,EAAa,CAAC,MAAD,CAAb,CADd,CAFA,EAKA,oBAAC,mBAAD;AACI,IAAA,EAAE,EAAC,uBADP;AAEI,IAAA,IAAI,EAAE,EAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALA,CADJ;AAWH,CA1GD;;AA4GA,MAAMC,eAAe,GAAGC,KAAK,KAAK;AAC9BF,EAAAA,IAAI,EAAEE,KAAK,CAACC,QAAN,CAAeH,IADS;AAE9Bd,EAAAA,gBAAgB,EAAGgB,KAAK,CAACC,QAAN,CAAejB;AAFJ,CAAL,CAA7B;;AAKA,MAAMkB,kBAAkB,GAAGC,QAAQ,KAAK;AACpC9C,EAAAA,SAAS,EAAEiB,IAAI,IAAI6B,QAAQ,CAAC7C,eAAe,CAACgB,IAAD,CAAhB,CADS;AAEpCf,EAAAA,YAAY,EAAGe,IAAI,IAAI6B,QAAQ,CAAC5C,YAAY,CAACe,IAAD,CAAb;AAFK,CAAL,CAAnC;;AAKA,eAAelB,OAAO,CAAC2C,eAAD,EAAkBG,kBAAlB,CAAP,CAA6C9B,YAA7C,CAAf","sourcesContent":["import React, { useCallback, useState, Fragment } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport \"./explorer-tree.scss\";\r\nimport { toggleDir as toggleDirAction, setSelection} from \"./../../../../../../actions\"\r\nimport { isEmpty, sortObj } from \"./../../../../../../utils/objects/helpers\";\r\nimport UUID from \"uuidjs\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport ClassName from \"classnames\";\r\nimport { faFolder,  faFile, faAngleRight, faAngleDown } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { useDoubleClick } from \"./useDoubleClick\";\r\nimport ExplorerContextMenu from \"./ContextMenu/ExplorerContextMenu\";\r\nimport {ContextMenuTrigger} from \"react-contextmenu\";\r\nconst ExplorerTree = props => {\r\n\r\n    const toggleDir = useCallback((path) => {\r\n        props.toggleDir(path);\r\n    }, [props.toggleDir])\r\n\r\n    const setSelection = useCallback((path)=>{\r\n        props.setSelection(path);\r\n    }, [props.setSelection])\r\n\r\n    const [liClickHandler] = useDoubleClick({\r\n        clickHandler: setSelection,\r\n        doubleClickHandler: toggleDir\r\n    })\r\n\r\n    const getDirElement = useCallback((name, path, open, empty) => {\r\n        const liClassList = ClassName(\r\n            \"list-item item-dir\",\r\n            {\"item-dir--empty\" : empty},\r\n            {\"item--selected\": [...path, name].join(\"\") === props.currentSelection.join(\"\")}\r\n        )\r\n        return (\r\n            <li\r\n                onClick={liClickHandler.bind(null, [...path, name])}\r\n                className={liClassList}\r\n                data-path={path.join(\"/\")}\r\n                key={UUID.genV1()}>\r\n                {!empty &&\r\n                    <button\r\n                        className={\"btn-dir \" + ((open) ? \"btn-dir--expand\" : \"btn-dir--colapse\")}>\r\n                        <FontAwesomeIcon \r\n                            className=\"icon\" \r\n                            icon={(open) ? faAngleDown : faAngleRight } \r\n                            onClick={toggleDir.bind(null, [...path, name])}/>\r\n                    </button>}\r\n                    <FontAwesomeIcon className=\"icon icon-dir\" icon={faFolder} />\r\n                    {name}\r\n            </li>\r\n        )\r\n    })\r\n\r\n    const getFileElement = useCallback((name, path) => {\r\n        const liClassList = ClassName(\r\n            \"list-item item-file\",\r\n            {\"item--selected\": [...path, name].join(\"\") === props.currentSelection.join(\"\")}\r\n        )\r\n        return (\r\n            <li\r\n                className={liClassList}\r\n                onClick={setSelection.bind(null, [...path, name])}\r\n                data-path={path.join(\"/\")}\r\n                key={UUID.genV1()}>\r\n                <FontAwesomeIcon className=\"icon icon-file\" icon={faFile} />\r\n                {name}\r\n            </li>\r\n        );\r\n    })\r\n\r\n    const renderDirElements = useCallback((name, content, path) => {\r\n        content = sortObj(content);\r\n        if (content instanceof Array) {\r\n            return getFileElement(name, path)\r\n        } else {\r\n            if (content._open === true) {\r\n                return (\r\n                    <Fragment key={UUID.genV1()}>\r\n                        {getDirElement(name, path, true)}\r\n                        {renderDir(content, [...path, name])}\r\n                    </Fragment>\r\n                )\r\n            } else {\r\n                if (isEmpty(content)) {\r\n                    return getDirElement(name, path, false, true)\r\n                }\r\n                return getDirElement(name, path, false)\r\n            }\r\n        }\r\n    })\r\n\r\n\r\n    const renderDir = useCallback((dir, path) => {\r\n        return (\r\n            <ul className=\"list-dir dir-content\" key={UUID.generate()}>\r\n                {\r\n                    Object.entries(dir).map(([name, content]) => {\r\n                        if (name === \"_open\") {\r\n                            return null;\r\n                        }\r\n                        return renderDirElements(name, content, path);\r\n                    })\r\n                }\r\n            </ul>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <Fragment>\r\n            \r\n        <div className=\"explorer-tree\">\r\n            {renderDir(props.root, ['root'])}\r\n        </div>\r\n        <ExplorerContextMenu \r\n            id=\"explorer_context_menu\"\r\n            item={{}}/>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    root: state.playList.root,\r\n    currentSelection : state.playList.currentSelection\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    toggleDir: path => dispatch(toggleDirAction(path)),\r\n    setSelection : path => dispatch(setSelection(path))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ExplorerTree);"]},"metadata":{},"sourceType":"module"}