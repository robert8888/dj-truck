{"ast":null,"code":"let tokenizer = require(\"./tokens\");\n\ntokenizeHtmlClassBlock.notInLink = true;\n\nfunction tokenizeHtmlClassBlock(eat, value, silent) {\n  console.log(\"Block value\", value);\n  var match = /^(.*){\\.(\\w+)}([^(\\\\*_{}\\[\\]()#+-.!|]+)/.exec(value);\n\n  if (match) {\n    console.log(match);\n\n    if (silent) {\n      return true;\n    }\n\n    let node = {\n      type: \"text\",\n      value: \"\"\n    };\n    node = tokenizer.map(test => test(match[1], match[2])).find(value => value);\n    console.log(node);\n    node.className = match[2]; //node = {type: \"text\", value:\" \"};\n\n    return eat(match[0])(node);\n  }\n}\n\nmodule.exports.tokenizeHtmlClassBlock = tokenizeHtmlClassBlock;","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/pages/introduction/MarkDonwExtesnion/tokenizeHtmlClassBlock.js"],"names":["tokenizer","require","tokenizeHtmlClassBlock","notInLink","eat","value","silent","console","log","match","exec","node","type","map","test","find","className","module","exports"],"mappings":"AAAA,IAAIA,SAAS,GAAGC,OAAO,CAAC,UAAD,CAAvB;;AAEAC,sBAAsB,CAACC,SAAvB,GAAmC,IAAnC;;AAGA,SAASD,sBAAT,CAAgCE,GAAhC,EAAqCC,KAArC,EAA4CC,MAA5C,EAAoD;AAChDC,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BH,KAA3B;AACA,MAAII,KAAK,GAAG,0CAA0CC,IAA1C,CAA+CL,KAA/C,CAAZ;;AAEA,MAAII,KAAJ,EAAW;AACPF,IAAAA,OAAO,CAACC,GAAR,CAAYC,KAAZ;;AACA,QAAIH,MAAJ,EAAY;AACR,aAAO,IAAP;AACH;;AAGD,QAAIK,IAAI,GAAG;AAACC,MAAAA,IAAI,EAAE,MAAP;AAAeP,MAAAA,KAAK,EAAC;AAArB,KAAX;AACAM,IAAAA,IAAI,GAAGX,SAAS,CAACa,GAAV,CAAeC,IAAI,IAAIA,IAAI,CAACL,KAAK,CAAC,CAAD,CAAN,EAAWA,KAAK,CAAC,CAAD,CAAhB,CAA3B,EAAiDM,IAAjD,CAAuDV,KAAK,IAAIA,KAAhE,CAAP;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAYG,IAAZ;AACAA,IAAAA,IAAI,CAACK,SAAL,GAAiBP,KAAK,CAAC,CAAD,CAAtB,CAVO,CAaP;;AACA,WAAOL,GAAG,CAACK,KAAK,CAAC,CAAD,CAAN,CAAH,CAAcE,IAAd,CAAP;AAEH;AACJ;;AAEDM,MAAM,CAACC,OAAP,CAAehB,sBAAf,GAAwCA,sBAAxC","sourcesContent":["let tokenizer = require(\"./tokens\");\r\n\r\ntokenizeHtmlClassBlock.notInLink = true\r\n\r\n\r\nfunction tokenizeHtmlClassBlock(eat, value, silent) {\r\n    console.log(\"Block value\", value)\r\n    var match = /^(.*){\\.(\\w+)}([^(\\\\*_{}\\[\\]()#+-.!|]+)/.exec(value)\r\n\r\n    if (match) {\r\n        console.log(match)\r\n        if (silent) {\r\n            return true\r\n        }\r\n\r\n\r\n        let node = {type: \"text\", value:\"\"};\r\n        node = tokenizer.map( test => test(match[1], match[2])).find( value => value);\r\n        console.log(node);\r\n        node.className = match[2];\r\n\r\n\r\n        //node = {type: \"text\", value:\" \"};\r\n        return eat(match[0])(node)\r\n\r\n    }\r\n}\r\n\r\nmodule.exports.tokenizeHtmlClassBlock = tokenizeHtmlClassBlock\r\n\r\n"]},"metadata":{},"sourceType":"module"}