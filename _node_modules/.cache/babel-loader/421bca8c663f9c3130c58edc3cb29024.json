{"ast":null,"code":"import Effect from \"./../effect\";\nimport { toRange } from \"./../../../../../../../utils/math/argRanges\";\nexport default class Delay extends Effect {\n  static defaultParams() {\n    return {\n      params: {\n        feedback: {\n          min: 0,\n          max: 100,\n          defaultValue: 50,\n          type: \"float\",\n          description: \"fb\"\n        },\n        time: {\n          min: 0,\n          max: 180,\n          defaultValue: 5,\n          type: \"float\",\n          description: \"time\"\n        }\n      }\n    };\n  }\n\n  constructor(context, params) {\n    super();\n    this._default = Delay.defaultParams().params;\n    this.context = context;\n\n    this._buildNodes();\n\n    this._initParams(params);\n  }\n\n  _buildNodes() {\n    this.inputNode = context.createGain();\n    this.outputNode = context.createGain();\n    this.feedbackGainNode = context.createGain();\n    this.delayNode = context.createDelay(); //config\n\n    this.feedbackGainNode.gain.value = this.feedback / 100;\n    this.delayNode.delayTime.value = this.time; // line in to wet mix\n\n    this.inputNode.connect(this.delayNode); // feedback loop\n\n    this.delayNode.connect(this.feedbackGainNode);\n    this.feedbackGainNode.connect(this.delayNode); // wet out\n\n    this.delayNode.connect(this.outputNode);\n    this.outputNode.gain.value = 0.4;\n  }\n\n  connect(input, dest) {\n    input.connect(this.inputNode);\n    this.outputNode.connect(dest);\n    console.log(this);\n  }\n\n  disconnect() {\n    this.outputNode.disconnect();\n  }\n\n  get time() {\n    return this._time;\n  }\n\n  set time(value) {\n    value = toRange(value, this.dParams.time.min, this.dParams.time.max);\n    this._time = value;\n    this.delayNode.delayTime.setTargetAtTime(value, this.context.currentTime, 0.01);\n  }\n\n  get feedback() {\n    return this._feedback;\n  }\n\n  set feedback(value) {\n    value = toRange(value, this.dParams.feedback.min, this.dParams.feedback.max);\n    this._feedback = value;\n    this.feedbackGainNode.gain.setTargetAtTime(value / 100, this.context.currentTime, 0.01);\n  }\n\n  get name() {\n    return \"delay\";\n  }\n\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/pages/app/core/console/effector/effects/delay/delay.js"],"names":["Effect","toRange","Delay","defaultParams","params","feedback","min","max","defaultValue","type","description","time","constructor","context","_default","_buildNodes","_initParams","inputNode","createGain","outputNode","feedbackGainNode","delayNode","createDelay","gain","value","delayTime","connect","input","dest","console","log","disconnect","_time","dParams","setTargetAtTime","currentTime","_feedback","name"],"mappings":"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","sourcesContent":["import Effect from \"./../effect\";\r\nimport {toRange} from \"./../../../../../../../utils/math/argRanges\";\r\n\r\nexport default class Delay extends Effect {\r\n    static defaultParams(){\r\n        return {\r\n            params : {\r\n                feedback: {\r\n                    min: 0,\r\n                    max: 100,\r\n                    defaultValue: 50,\r\n                    type: \"float\",\r\n                    description : \"fb\"\r\n                },\r\n                time: {\r\n                    min: 0,\r\n                    max: 180,\r\n                    defaultValue: 5,\r\n                    type: \"float\",\r\n                    description: \"time\"\r\n                },\r\n            }\r\n        }\r\n    }\r\n\r\n    constructor(context, params){\r\n        super();\r\n        this._default = Delay.defaultParams().params;\r\n        this.context = context;\r\n\r\n        this._buildNodes();\r\n        this._initParams(params)\r\n\r\n    }\r\n\r\n    _buildNodes(){\r\n        this.inputNode = context.createGain();\r\n        this.outputNode = context.createGain();\r\n        this.feedbackGainNode = context.createGain();\r\n        this.delayNode = context.createDelay();\r\n        \r\n        //config\r\n        this.feedbackGainNode.gain.value = this.feedback/100 ;\r\n        this.delayNode.delayTime.value = this.time;\r\n\r\n        // line in to wet mix\r\n        this.inputNode.connect(this.delayNode);\r\n\r\n        // feedback loop\r\n        this.delayNode.connect(this.feedbackGainNode);\r\n        this.feedbackGainNode.connect(this.delayNode);\r\n\r\n        // wet out\r\n        this.delayNode.connect(this.outputNode);\r\n        this.outputNode.gain.value = 0.4;\r\n    }\r\n\r\n    connect(input, dest){\r\n        input.connect(this.inputNode);\r\n        this.outputNode.connect(dest);\r\n\r\n        console.log(this)\r\n    }\r\n\r\n    disconnect(){\r\n        this.outputNode.disconnect();\r\n    }\r\n\r\n    get time(){\r\n        return this._time;\r\n    }\r\n\r\n    set time(value){\r\n        value = toRange(value, this.dParams.time.min, this.dParams.time.max)\r\n        this._time = value;\r\n        this.delayNode.delayTime.setTargetAtTime(value, this.context.currentTime, 0.01);\r\n    }\r\n\r\n    get feedback(){\r\n        return this._feedback;\r\n    }\r\n\r\n    set feedback(value){\r\n        value = toRange(value, this.dParams.feedback.min, this.dParams.feedback.max)\r\n        this._feedback = value;\r\n\r\n        this.feedbackGainNode.gain.setTargetAtTime(value / 100, this.context.currentTime, 0.01);\r\n\r\n    }\r\n\r\n    get name(){\r\n        return \"delay\"\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}