{"ast":null,"code":"import { createPlaylist, ACTIONS } from \"../../actions\";\nimport { takeEvery, select, put, call } from \"redux-saga/effects\";\nimport { getApi } from \"./../../apis/apiProvider\";\nimport { showLoading, hideLoading } from 'react-redux-loading-bar';\nimport { generateTemplateName as generateName, findClosesDir } from \"./../../reducers/console/playlist/utils\";\nimport { get } from \"lodash/object\";\nimport { handel as loadDirSagaHanedl } from \"./loadDirRequestSaga\";\nimport UUID from \"uuidjs\";\nexport default function* createDirRequestSaga() {\n  yield takeEvery(ACTIONS.PL_CREATE_PLAYLIST_REQUEST, handle);\n}\n\nconst getToken = state => state.user.token;\n\nconst getCurrentSelection = state => state.playList.currentSelection;\n\nconst getParentPath = (state, currentSelection) => findClosesDir(state, currentSelection);\n\nconst generatePlaylistName = (state, parrentPath, base) => generateName(state.playList, parrentPath, base);\n\nconst getParrentDir = (state, path) => get(state.playList, path);\n\nexport function* handle(action) {\n  const {\n    callQuery,\n    queries\n  } = getApi(\"UserAssets\");\n  const token = yield select(getToken);\n  let renameMode = false;\n\n  if (!token) {\n    if (!action.name) {\n      renameMode = true;\n    }\n\n    return yield put(action.name, UUID.getV1().toString(), renameMode, true);\n  }\n\n  try {\n    var _result$data;\n\n    yield put(showLoading());\n    const currentSelection = yield select(getCurrentSelection);\n    const parrentPath = yield select(getParentPath, currentSelection);\n    let playlistName;\n\n    if (!action.name) {\n      playlistName = yield select(generatePlaylistName, parrentPath, \"New playlist\");\n      renameMode = true;\n    } else {\n      playlistName = yield select(generatePlaylistName, parrentPath, action.name);\n    }\n\n    const parrentDir = yield select(getParrentDir, parrentPath);\n\n    if (!parrentDir._loaded) {\n      yield call(loadDirSagaHanedl, {\n        path: parrentPath\n      });\n    }\n\n    let result = yield callQuery(queries.createPlaylistQl(parrentDir._id, playlistName), token);\n\n    if (!result || !((_result$data = result.data) === null || _result$data === void 0 ? void 0 : _result$data.createPlaylist)) {\n      return;\n    }\n\n    const id = result.data.createPlaylist.id;\n    renameMode = action.renameMode !== undefined ? action.renameMode : renameMode;\n    yield put(createPlaylist(playlistName, id, renameMode, action.setCurrent));\n    return id;\n  } catch (err) {\n    console.log(\"can't crate playlist in database\");\n    console.log(err.message);\n  } finally {\n    yield put(hideLoading());\n  }\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/sagas/playlists/createPlaylistRequestSaga.js"],"names":["createPlaylist","ACTIONS","takeEvery","select","put","call","getApi","showLoading","hideLoading","generateTemplateName","generateName","findClosesDir","get","handel","loadDirSagaHanedl","UUID","createDirRequestSaga","PL_CREATE_PLAYLIST_REQUEST","handle","getToken","state","user","token","getCurrentSelection","playList","currentSelection","getParentPath","generatePlaylistName","parrentPath","base","getParrentDir","path","action","callQuery","queries","renameMode","name","getV1","toString","playlistName","parrentDir","_loaded","result","createPlaylistQl","_id","data","id","undefined","setCurrent","err","console","log","message"],"mappings":"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","sourcesContent":["import { createPlaylist, ACTIONS } from \"../../actions\";\r\nimport { takeEvery, select, put, call } from \"redux-saga/effects\"\r\nimport { getApi } from \"./../../apis/apiProvider\";\r\nimport { showLoading, hideLoading } from 'react-redux-loading-bar'\r\nimport { generateTemplateName as generateName, findClosesDir } from \"./../../reducers/console/playlist/utils\";\r\nimport { get } from \"lodash/object\";\r\nimport { handel as loadDirSagaHanedl } from \"./loadDirRequestSaga\";\r\nimport UUID from \"uuidjs\"\r\nexport default function* createDirRequestSaga() {\r\n    yield takeEvery(ACTIONS.PL_CREATE_PLAYLIST_REQUEST, handle)\r\n}\r\n\r\nconst getToken = state => state.user.token;\r\n\r\nconst getCurrentSelection = state => state.playList.currentSelection;\r\n\r\nconst getParentPath = (state, currentSelection) =>\r\n    findClosesDir(state, currentSelection)\r\n\r\nconst generatePlaylistName = (state, parrentPath, base) =>\r\n    generateName(state.playList, parrentPath, base);\r\n\r\nconst getParrentDir = (state, path) => get(state.playList, path);\r\n\r\n\r\nexport function* handle(action) {\r\n    const { callQuery, queries } = getApi(\"UserAssets\");\r\n    const token = yield select(getToken);\r\n    let renameMode = false;\r\n    if (!token) {\r\n        if (!action.name) {\r\n            renameMode = true;\r\n        }\r\n        return yield put(action.name, UUID.getV1().toString(), renameMode, true);\r\n    }\r\n    try {\r\n        yield put(showLoading());\r\n        const currentSelection = yield select(getCurrentSelection);\r\n        const parrentPath = yield select(getParentPath, currentSelection);\r\n\r\n        let playlistName;\r\n        if (!action.name) {\r\n            playlistName = yield select(generatePlaylistName, parrentPath, \"New playlist\");\r\n            renameMode = true;\r\n        } else {\r\n            playlistName = yield select(generatePlaylistName, parrentPath, action.name);\r\n        }\r\n\r\n        const parrentDir = yield select(getParrentDir, parrentPath);\r\n        if (!parrentDir._loaded) {\r\n            yield call(loadDirSagaHanedl, { path: parrentPath })\r\n        }\r\n\r\n        let result = yield callQuery(queries.createPlaylistQl(parrentDir._id, playlistName), token);\r\n        if (!result || !result.data?.createPlaylist) {\r\n            return;\r\n        }\r\n        const id = result.data.createPlaylist.id;\r\n\r\n        renameMode = (action.renameMode !== undefined) ? action.renameMode : renameMode;\r\n\r\n        yield put(createPlaylist(playlistName, id, renameMode, action.setCurrent));\r\n\r\n        return id;\r\n    } catch (err) {\r\n        console.log(\"can't crate playlist in database\");\r\n        console.log(err.message)\r\n    } finally {\r\n        yield put(hideLoading())\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}