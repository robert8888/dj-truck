{"ast":null,"code":"import _regeneratorRuntime from\"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\node_modules\\\\@babel\\\\runtime/regenerator\";var _marked=/*#__PURE__*/_regeneratorRuntime.mark(createDirRequestSaga),_marked2=/*#__PURE__*/_regeneratorRuntime.mark(callApi);import{get}from\"lodash/object\";import{hideLoading,showLoading}from'react-redux-loading-bar';import{call,put,select,takeEvery}from\"redux-saga/effects\";import UUID from\"uuidjs\";import{ACTIONS,createDir,pushLog}from\"../../actions\";import{getApi}from\"./../../apis/apiProvider\";import{findClosesDir,generateTemplateName as generateName}from\"./../../reducers/console/playlist/utils\";import{Log}from\"./../../utils/logger/logger\";import errorParser from\"./../../utils/serverErrorParser/errorParser\";import{handle as readDirSagaHandle}from\"./reqReadDirSaga\";export default function createDirRequestSaga(){return _regeneratorRuntime.wrap(function createDirRequestSaga$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return takeEvery(ACTIONS.PL_CREATE_DIR_REQEST,callApi);case 2:case\"end\":return _context.stop();}}},_marked);}var getToken=function getToken(state){return state.user.token;};var getCurrentSelection=function getCurrentSelection(state){return state.playList.currentSelection;};var getParentPath=function getParentPath(state,currentSelection){return findClosesDir(state,currentSelection);};var generateDirName=function generateDirName(state,parrentPath,base){return generateName(state.playList,parrentPath,base);};var getParrentId=function getParrentId(state,path){return get(state.playList,path);};function callApi(action){var path,token,renameMode,_response$data,_getApi,callQuery,queries,currentSelection,parrentPath,dirName,parrent,response,id;return _regeneratorRuntime.wrap(function callApi$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:path=['saga','playlist','request created dir'];_context2.next=3;return select(getToken);case 3:token=_context2.sent;renameMode=false;if(token){_context2.next=10;break;}if(!action.name){renameMode=true;}_context2.next=9;return put(createDir(action.name),UUID.genV1().toString(),renameMode);case 9:return _context2.abrupt(\"return\",_context2.sent);case 10:_context2.prev=10;_context2.next=13;return put(showLoading());case 13:_getApi=getApi(\"UserAssets\"),callQuery=_getApi.callQuery,queries=_getApi.queries;_context2.next=16;return select(getCurrentSelection);case 16:currentSelection=_context2.sent;_context2.next=19;return select(getParentPath,currentSelection);case 19:parrentPath=_context2.sent;if(action.name){_context2.next=27;break;}_context2.next=23;return select(generateDirName,parrentPath,\"New folder\");case 23:dirName=_context2.sent;renameMode=true;_context2.next=30;break;case 27:_context2.next=29;return select(generateDirName,parrentPath,action.name);case 29:dirName=_context2.sent;case 30:_context2.next=32;return select(getParrentId,parrentPath);case 32:parrent=_context2.sent;if(parrent._loaded){_context2.next=36;break;}_context2.next=36;return call(readDirSagaHandle,{path:parrentPath});case 36:_context2.next=38;return callQuery(queries.createDirQl(parrent._id,dirName),token);case 38:response=_context2.sent;if(!response.errors){_context2.next=41;break;}throw new Error('Server response contains errors '+errorParser(response.errors));case 41:if((_response$data=response.data)===null||_response$data===void 0?void 0:_response$data.createDir){_context2.next=43;break;}throw new Error(\"response don't contain data object\");case 43:id=response.data.createDir.id;_context2.next=46;return put(createDir(dirName,id,renameMode));case 46:_context2.next=48;return put(pushLog(new Log(\"Creating dir in database successful id: \".concat(id),path)));case 48:_context2.next=54;break;case 50:_context2.prev=50;_context2.t0=_context2[\"catch\"](10);_context2.next=54;return put(pushLog(Log.Error(path,\"Can't create dir in database\"+_context2.t0.message,\"Sorry. During process creating dir occurred a problem\",_context2.t0)));case 54:_context2.prev=54;_context2.next=57;return put(hideLoading());case 57:return _context2.finish(54);case 58:case\"end\":return _context2.stop();}}},_marked2,null,[[10,50,54,58]]);}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/sagas/playlists/reqCreateDirSaga.js"],"names":["createDirRequestSaga","callApi","get","hideLoading","showLoading","call","put","select","takeEvery","UUID","ACTIONS","createDir","pushLog","getApi","findClosesDir","generateTemplateName","generateName","Log","errorParser","handle","readDirSagaHandle","PL_CREATE_DIR_REQEST","getToken","state","user","token","getCurrentSelection","playList","currentSelection","getParentPath","generateDirName","parrentPath","base","getParrentId","path","action","renameMode","name","genV1","toString","callQuery","queries","dirName","parrent","_loaded","createDirQl","_id","response","errors","Error","data","id","message"],"mappings":"2JAWyBA,oB,iDAgBfC,O,EA3BV,OAASC,GAAT,KAAoB,eAApB,CACA,OAASC,WAAT,CAAsBC,WAAtB,KAAyC,yBAAzC,CACA,OAASC,IAAT,CAAeC,GAAf,CAAoBC,MAApB,CAA4BC,SAA5B,KAA6C,oBAA7C,CACA,MAAOC,CAAAA,IAAP,KAAiB,QAAjB,CACA,OAASC,OAAT,CAAkBC,SAAlB,CAA6BC,OAA7B,KAA4C,eAA5C,CACA,OAASC,MAAT,KAAuB,0BAAvB,CACA,OAASC,aAAT,CAAwBC,oBAAoB,GAAIC,CAAAA,YAAhD,KAAoE,yCAApE,CACA,OAASC,GAAT,KAAoB,6BAApB,CACA,MAAOC,CAAAA,WAAP,KAAwB,6CAAxB,CACA,OAASC,MAAM,GAAIC,CAAAA,iBAAnB,KAA4C,kBAA5C,CAEA,cAAe,SAAUpB,CAAAA,oBAAV,gJACX,MAAMQ,CAAAA,SAAS,CAACE,OAAO,CAACW,oBAAT,CAA+BpB,OAA/B,CAAf,CADW,sDAIf,GAAMqB,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAAAC,KAAK,QAAIA,CAAAA,KAAK,CAACC,IAAN,CAAWC,KAAf,EAAtB,CAEA,GAAMC,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,CAAAH,KAAK,QAAIA,CAAAA,KAAK,CAACI,QAAN,CAAeC,gBAAnB,EAAjC,CAEA,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAACN,KAAD,CAAQK,gBAAR,QAClBd,CAAAA,aAAa,CAACS,KAAD,CAAQK,gBAAR,CADK,EAAtB,CAGA,GAAME,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACP,KAAD,CAAQQ,WAAR,CAAqBC,IAArB,QACpBhB,CAAAA,YAAY,CAACO,KAAK,CAACI,QAAP,CAAiBI,WAAjB,CAA8BC,IAA9B,CADQ,EAAxB,CAGA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACV,KAAD,CAAQW,IAAR,QAAiBhC,CAAAA,GAAG,CAACqB,KAAK,CAACI,QAAP,CAAiBO,IAAjB,CAApB,EAArB,CAEA,QAAUjC,CAAAA,OAAV,CAAkBkC,MAAlB,iPACUD,IADV,CACiB,CAAC,MAAD,CAAS,UAAT,CAAqB,qBAArB,CADjB,kBAGkB,MAAM3B,CAAAA,MAAM,CAACe,QAAD,CAAZ,CAHlB,OAGUG,KAHV,gBAIQW,UAJR,CAIqB,KAJrB,IAKSX,KALT,2BAMQ,GAAI,CAACU,MAAM,CAACE,IAAZ,CAAkB,CACdD,UAAU,CAAG,IAAb,CACH,CART,iBASe,MAAM9B,CAAAA,GAAG,CAACK,SAAS,CAACwB,MAAM,CAACE,IAAR,CAAV,CAAyB5B,IAAI,CAAC6B,KAAL,GAAaC,QAAb,EAAzB,CAAkDH,UAAlD,CAAT,CATf,oGAYQ,MAAM9B,CAAAA,GAAG,CAACF,WAAW,EAAZ,CAAT,CAZR,gBAauCS,MAAM,CAAC,YAAD,CAb7C,CAagB2B,SAbhB,SAagBA,SAbhB,CAa2BC,OAb3B,SAa2BA,OAb3B,mBAciC,MAAMlC,CAAAA,MAAM,CAACmB,mBAAD,CAAZ,CAdjC,QAccE,gBAdd,kCAe4B,MAAMrB,CAAAA,MAAM,CAACsB,aAAD,CAAgBD,gBAAhB,CAAZ,CAf5B,QAecG,WAfd,mBAkBaI,MAAM,CAACE,IAlBpB,6CAmBsB,MAAM9B,CAAAA,MAAM,CAACuB,eAAD,CAAkBC,WAAlB,CAA+B,YAA/B,CAAZ,CAnBtB,QAmBYW,OAnBZ,gBAoBYN,UAAU,CAAG,IAAb,CApBZ,kDAsBsB,MAAM7B,CAAAA,MAAM,CAACuB,eAAD,CAAkBC,WAAlB,CAA+BI,MAAM,CAACE,IAAtC,CAAZ,CAtBtB,QAsBYK,OAtBZ,0CAyBwB,MAAMnC,CAAAA,MAAM,CAAC0B,YAAD,CAAeF,WAAf,CAAZ,CAzBxB,QAyBcY,OAzBd,mBA0BaA,OAAO,CAACC,OA1BrB,6CA2BY,MAAMvC,CAAAA,IAAI,CAACe,iBAAD,CAAoB,CAAEc,IAAI,CAAEH,WAAR,CAApB,CAAV,CA3BZ,0BA8BuB,MAAMS,CAAAA,SAAS,CAACC,OAAO,CAACI,WAAR,CAAoBF,OAAO,CAACG,GAA5B,CAAiCJ,OAAjC,CAAD,CAA4CjB,KAA5C,CAAf,CA9BvB,QA8BYsB,QA9BZ,oBAgCWA,QAAQ,CAACC,MAhCpB,gCAiCkB,IAAIC,CAAAA,KAAJ,CAAU,mCAAoC/B,WAAW,CAAC6B,QAAQ,CAACC,MAAV,CAAzD,CAjClB,4BAoCaD,QAAQ,CAACG,IApCtB,yCAoCa,eAAevC,SApC5B,gCAqCkB,IAAIsC,CAAAA,KAAJ,CAAU,oCAAV,CArClB,SAwCcE,EAxCd,CAwCmBJ,QAAQ,CAACG,IAAT,CAAcvC,SAAd,CAAwBwC,EAxC3C,mBA0CQ,MAAM7C,CAAAA,GAAG,CAACK,SAAS,CAAC+B,OAAD,CAAUS,EAAV,CAAcf,UAAd,CAAV,CAAT,CA1CR,0BA4CQ,MAAM9B,CAAAA,GAAG,CAACM,OAAO,CAAC,GAAIK,CAAAA,GAAJ,mDAAmDkC,EAAnD,EAAyDjB,IAAzD,CAAD,CAAR,CAAT,CA5CR,gHA8CQ,MAAM5B,CAAAA,GAAG,CAACM,OAAO,CAACK,GAAG,CAACgC,KAAJ,CACdf,IADc,CAEd,+BAAiC,aAAMkB,OAFzB,CAGd,uDAHc,cAAD,CAAR,CAAT,CA9CR,4CAqDQ,MAAM9C,CAAAA,GAAG,CAACH,WAAW,EAAZ,CAAT,CArDR","sourcesContent":["import { get } from \"lodash/object\";\r\nimport { hideLoading, showLoading } from 'react-redux-loading-bar';\r\nimport { call, put, select, takeEvery } from \"redux-saga/effects\";\r\nimport UUID from \"uuidjs\";\r\nimport { ACTIONS, createDir, pushLog } from \"../../actions\";\r\nimport { getApi } from \"./../../apis/apiProvider\";\r\nimport { findClosesDir, generateTemplateName as generateName } from \"./../../reducers/console/playlist/utils\";\r\nimport { Log } from \"./../../utils/logger/logger\";\r\nimport errorParser from \"./../../utils/serverErrorParser/errorParser\";\r\nimport { handle as readDirSagaHandle } from \"./reqReadDirSaga\";\r\n\r\nexport default function* createDirRequestSaga() {\r\n    yield takeEvery(ACTIONS.PL_CREATE_DIR_REQEST, callApi)\r\n}\r\n\r\nconst getToken = state => state.user.token;\r\n\r\nconst getCurrentSelection = state => state.playList.currentSelection;\r\n\r\nconst getParentPath = (state, currentSelection) =>\r\n    findClosesDir(state, currentSelection)\r\n\r\nconst generateDirName = (state, parrentPath, base) =>\r\n    generateName(state.playList, parrentPath, base);\r\n\r\nconst getParrentId = (state, path) => get(state.playList, path);\r\n\r\nfunction* callApi(action) {\r\n    const path = ['saga', 'playlist', 'request created dir'];\r\n\r\n    const token = yield select(getToken);\r\n    let renameMode = false;\r\n    if (!token) {\r\n        if (!action.name) {\r\n            renameMode = true;\r\n        }\r\n        return yield put(createDir(action.name), UUID.genV1().toString(), renameMode);\r\n    }\r\n    try {\r\n        yield put(showLoading());\r\n        const { callQuery, queries } = getApi(\"UserAssets\");\r\n        const currentSelection = yield select(getCurrentSelection);\r\n        const parrentPath = yield select(getParentPath, currentSelection);\r\n\r\n        let dirName;\r\n        if (!action.name) {\r\n            dirName = yield select(generateDirName, parrentPath, \"New folder\");\r\n            renameMode = true;\r\n        } else {\r\n            dirName = yield select(generateDirName, parrentPath, action.name);\r\n        }\r\n\r\n        const parrent = yield select(getParrentId, parrentPath);\r\n        if (!parrent._loaded) {\r\n            yield call(readDirSagaHandle, { path: parrentPath })\r\n        }\r\n\r\n        let response = yield callQuery(queries.createDirQl(parrent._id, dirName), token);\r\n\r\n        if(response.errors){\r\n            throw new Error('Server response contains errors '+ errorParser(response.errors))\r\n        }\r\n\r\n        if (!response.data?.createDir) {\r\n            throw new Error(\"response don't contain data object\")\r\n        }\r\n\r\n        const id = response.data.createDir.id;\r\n\r\n        yield put(createDir(dirName, id, renameMode));\r\n        \r\n        yield put(pushLog(new Log(`Creating dir in database successful id: ${id}`, path)))\r\n    } catch (error) {\r\n        yield put(pushLog(Log.Error(\r\n            path,\r\n            \"Can't create dir in database\" + error.message,\r\n            \"Sorry. During process creating dir occurred a problem\",\r\n            error\r\n        )))\r\n    } finally {\r\n        yield put(hideLoading())\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}