{"ast":null,"code":"let tokenizer = require(\"./tokens\");\n\ntokenizeCssClassBlock.notInLink = true;\n\nfunction tokenizeCssClassBlock(eat, value, silent) {\n  console.log(\"Block value\", value);\n  return false;\n  var match = /^[(\\\\*_{}\\[\\]()#+-.!|]+{\\.(\\w+)}/.exec(value);\n\n  if (match) {\n    console.log(\"returning false\", match);\n    return false;\n  }\n\n  if (match) {\n    console.log(match);\n\n    if (silent) {\n      return true;\n    }\n\n    let node = {\n      type: \"text\",\n      value: \"\"\n    };\n    node = tokenizer.map(test => test(match[1])).find(value => value);\n    console.log(node);\n    node.className = match[2];\n    let Parser = this.Parser;\n    console.log(\"parser\", this);\n    let smt = Parser.blockTokenizers.paragraph.call(this, eat, match[2], true);\n    console.log(\"smt\", smt); //node = {type: \"text\", value:\" \"};\n\n    return eat(match[0])(node);\n  }\n}\n\nmodule.exports.tokenizeCssClassBlock = tokenizeCssClassBlock;","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/pages/introduction/MarkDonwExtesnion/tokenizeCssClassBlock.js"],"names":["tokenizer","require","tokenizeCssClassBlock","notInLink","eat","value","silent","console","log","match","exec","node","type","map","test","find","className","Parser","smt","blockTokenizers","paragraph","call","module","exports"],"mappings":"AAAA,IAAIA,SAAS,GAAGC,OAAO,CAAC,UAAD,CAAvB;;AAEAC,qBAAqB,CAACC,SAAtB,GAAkC,IAAlC;;AAGA,SAASD,qBAAT,CAA+BE,GAA/B,EAAoCC,KAApC,EAA2CC,MAA3C,EAAmD;AAC/CC,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BH,KAA3B;AACA,SAAO,KAAP;AACA,MAAII,KAAK,GAAG,mCAAmCC,IAAnC,CAAwCL,KAAxC,CAAZ;;AACA,MAAGI,KAAH,EAAU;AACNF,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BC,KAA/B;AACA,WAAO,KAAP;AACH;;AAED,MAAIA,KAAJ,EAAW;AACPF,IAAAA,OAAO,CAACC,GAAR,CAAYC,KAAZ;;AACA,QAAIH,MAAJ,EAAY;AACR,aAAO,IAAP;AACH;;AAGD,QAAIK,IAAI,GAAG;AAACC,MAAAA,IAAI,EAAE,MAAP;AAAeP,MAAAA,KAAK,EAAC;AAArB,KAAX;AACAM,IAAAA,IAAI,GAAGX,SAAS,CAACa,GAAV,CAAeC,IAAI,IAAIA,IAAI,CAACL,KAAK,CAAC,CAAD,CAAN,CAA3B,EAAuCM,IAAvC,CAA6CV,KAAK,IAAIA,KAAtD,CAAP;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAYG,IAAZ;AACAA,IAAAA,IAAI,CAACK,SAAL,GAAiBP,KAAK,CAAC,CAAD,CAAtB;AAEA,QAAIQ,MAAM,GAAG,KAAKA,MAAlB;AACAV,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsB,IAAtB;AACA,QAAIU,GAAG,GAAGD,MAAM,CAACE,eAAP,CAAuBC,SAAvB,CAAiCC,IAAjC,CAAsC,IAAtC,EAA4CjB,GAA5C,EAAiDK,KAAK,CAAC,CAAD,CAAtD,EAA2D,IAA3D,CAAV;AACAF,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBU,GAAnB,EAfO,CAgBP;;AACA,WAAOd,GAAG,CAACK,KAAK,CAAC,CAAD,CAAN,CAAH,CAAcE,IAAd,CAAP;AAEH;AACJ;;AAEDW,MAAM,CAACC,OAAP,CAAerB,qBAAf,GAAuCA,qBAAvC","sourcesContent":["let tokenizer = require(\"./tokens\");\r\n\r\ntokenizeCssClassBlock.notInLink = true\r\n\r\n\r\nfunction tokenizeCssClassBlock(eat, value, silent) {\r\n    console.log(\"Block value\", value)\r\n    return false;\r\n    var match = /^[(\\\\*_{}\\[\\]()#+-.!|]+{\\.(\\w+)}/.exec(value)\r\n    if(match) {\r\n        console.log(\"returning false\", match)\r\n        return false;\r\n    }\r\n\r\n    if (match) {\r\n        console.log(match)\r\n        if (silent) {\r\n            return true\r\n        }\r\n\r\n\r\n        let node = {type: \"text\", value:\"\"};\r\n        node = tokenizer.map( test => test(match[1])).find( value => value);\r\n        console.log(node);\r\n        node.className = match[2];\r\n\r\n        let Parser = this.Parser;\r\n        console.log(\"parser\", this);\r\n        let smt = Parser.blockTokenizers.paragraph.call(this, eat, match[2], true )\r\n        console.log(\"smt\", smt)\r\n        //node = {type: \"text\", value:\" \"};\r\n        return eat(match[0])(node)\r\n\r\n    }\r\n}\r\n\r\nmodule.exports.tokenizeCssClassBlock = tokenizeCssClassBlock\r\n\r\n"]},"metadata":{},"sourceType":"module"}