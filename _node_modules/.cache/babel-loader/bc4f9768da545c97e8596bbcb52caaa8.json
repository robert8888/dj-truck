{"ast":null,"code":"export const LOG_TYPES = {\n  LOG: \"Generic log, for login user action\",\n  DEBUG: \"log for debugging purposes\",\n  WARNING: \"log for inform about violation data\",\n  ERROR: \"log contains error information\"\n};\nexport class Log {\n  constructor(priv, path) {\n    return Log.Create(LOG_TYPES.LOG, path, priv);\n  }\n\n  static Create(type, path, priv, pub, error) {\n    if (!type) {\n      type = LOG_TYPES.LOG;\n    }\n\n    return {\n      type,\n      path,\n      message: {\n        private: priv,\n        public: pub\n      },\n      error\n    };\n  }\n\n  static Error(...args) {\n    //case 1 - private message\n    //case 2 - path , private message \n    //      or private message, error object\n    //case 3 - path, private message , error object \n    //      or path, private message , public message\n    //case 4 - path,  private message, public message, error object\n    let path, priv, pub, error;\n    console.log(args);\n\n    switch (args.length) {\n      case 1:\n        {\n          if (args[0] instanceof String) {\n            [priv] = args;\n            break;\n          } else if (typeof args[0] === \"object\") {\n            ({\n              path,\n              private: priv,\n              public: pub,\n              error\n            } = args[0]);\n          }\n\n          break;\n        }\n\n      case 2:\n        {\n          if (args[0] instanceof Array) {\n            [path, priv] = args;\n          } else if (args[1] instanceof Error) {\n            [priv, error] = args;\n          }\n\n          break;\n        }\n\n      case 3:\n        {\n          let third;\n          [path, priv, third] = args;\n          third instanceof Error ? error = third : pub = third;\n          break;\n        }\n\n      case 4:\n        {\n          [path, priv, pub, error] = args;\n          break;\n        }\n\n      default:\n        return null;\n    }\n\n    return Log.Create(LOG_TYPES.ERROR, path, priv, pub, error);\n  }\n\n  static Debug(path, priv) {\n    if (process.env.NODE_ENV.startsWith('dev')) {\n      console.group();\n      console.log(path)(priv instanceof Array) ? console.table(priv) : console.log(priv);\n      console.trace();\n      console.groupEnd();\n    }\n\n    return Log.Create(LOG_TYPES.DEBUG, path, priv);\n  }\n\n  static Warning(pub) {\n    return Log.Create(LOG_TYPES.WARNING, null, pub, pub);\n  }\n\n}\nexport class Logger {\n  constructor(store, actions) {\n    this.store = store;\n    this.actions = actions;\n\n    if (!Logger.instance) {\n      Logger.instance = this;\n    }\n\n    return Logger.instance;\n  }\n\n  static push(log) {\n    const logger = Logger.instance;\n\n    if (!logger.store || !logger.actions || !logger.actions.push) {\n      throw new Error(\"Logger not configured\");\n    }\n\n    logger.store.dispatch(logger.actions.push(log));\n  }\n\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/utils/logger/logger.js"],"names":["LOG_TYPES","LOG","DEBUG","WARNING","ERROR","Log","constructor","priv","path","Create","type","pub","error","message","private","public","Error","args","console","log","length","String","Array","third","Debug","process","env","NODE_ENV","startsWith","group","table","trace","groupEnd","Warning","Logger","store","actions","instance","push","logger","dispatch"],"mappings":"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","sourcesContent":["export const LOG_TYPES = {\r\n    LOG: \"Generic log, for login user action\",\r\n    DEBUG: \"log for debugging purposes\",\r\n    WARNING: \"log for inform about violation data\",\r\n    ERROR: \"log contains error information\"\r\n}\r\n\r\n\r\nexport class Log{\r\n    constructor(priv, path){\r\n        return Log.Create(LOG_TYPES.LOG, path, priv)\r\n    }\r\n\r\n    static Create(type, path, priv, pub, error){\r\n        if(!type){\r\n            type = LOG_TYPES.LOG; \r\n        }\r\n        return {\r\n            type,\r\n            path,\r\n            message:{\r\n                private: priv,\r\n                public: pub,\r\n            },\r\n            error\r\n        }\r\n    }\r\n\r\n    static Error(...args){\r\n        //case 1 - private message\r\n        \r\n        //case 2 - path , private message \r\n        //      or private message, error object\r\n\r\n        //case 3 - path, private message , error object \r\n        //      or path, private message , public message\r\n\r\n        //case 4 - path,  private message, public message, error object\r\n\r\n        let path, priv, pub, error; \r\n        console.log(args);\r\n\r\n        switch(args.length){\r\n            case 1 : {\r\n                if(args[0] instanceof String){\r\n                    [priv] = args;\r\n                    break;\r\n                } else if(typeof args[0] === \"object\"){\r\n                    ({path, private:priv, public: pub, error} = args[0])\r\n                }\r\n                break;\r\n            }\r\n            case 2: {\r\n                if(args[0] instanceof Array){\r\n                    [path, priv] = args;\r\n                } else if(args[1] instanceof Error){\r\n                    [priv, error] = args;\r\n                }\r\n                break;\r\n            }\r\n            case 3: {\r\n                let third;\r\n                [path , priv, third] = args;\r\n\r\n                (third instanceof Error) ?\r\n                    error = third :\r\n                    pub = third;\r\n                \r\n                break;\r\n            }\r\n            case 4: {\r\n                [path, priv, pub, error] = args;\r\n                break;\r\n            }\r\n            default: return null;\r\n        }\r\n\r\n        return Log.Create(LOG_TYPES.ERROR, path, priv, pub, error)\r\n    }\r\n\r\n    static Debug(path, priv){\r\n        if(process.env.NODE_ENV.startsWith('dev')){\r\n            console.group()\r\n            console.log(path)\r\n            (priv instanceof Array) ? console.table(priv) : console.log(priv);\r\n            console.trace();\r\n            console.groupEnd();\r\n        }\r\n        return Log.Create(LOG_TYPES.DEBUG, path, priv)\r\n    }\r\n\r\n    static Warning(pub){\r\n        return Log.Create(LOG_TYPES.WARNING, null, pub, pub);\r\n    }\r\n}\r\n\r\nexport class Logger{\r\n\r\n    static instance;\r\n    constructor(store, actions){\r\n        this.store = store;\r\n        this.actions = actions;\r\n\r\n        if(!Logger.instance){\r\n            Logger.instance = this;\r\n        }\r\n        return Logger.instance;\r\n    }  \r\n\r\n    static push(log){\r\n        const logger = Logger.instance;\r\n        if(!logger.store || !logger.actions || !logger.actions.push){\r\n            throw new Error(\"Logger not configured\");\r\n        }\r\n        logger.store.dispatch(\r\n            logger.actions.push(log)\r\n        )\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}