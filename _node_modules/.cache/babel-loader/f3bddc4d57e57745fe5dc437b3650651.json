{"ast":null,"code":"const Equaliztion = {\n  setGainValue(channelName, knobValue, nodeName) {\n    let gain = 1 + knobValue / 100;\n    let audioCtx = this.channels.getChannel(channelName).backend.ac;\n    let channel = this.audioNodes.channels[channelName];\n    channel[nodeName].gain.setTargetAtTime(parseFloat(gain), audioCtx.currentTime, 0.01);\n  },\n\n  setFilterValue(channelName, knobValue, nodeName) {\n    let audioCtx = this.channels.getChannel(channelName).backend.ac;\n    let channel = this.audioNodes.channels[channelName];\n    channel[nodeName].gain.setValueAtTime(knobValue, audioCtx.currentTime);\n  },\n\n  setGain(channelName, knobValue) {\n    this.setGainValue(channelName, knobValue, 'mainGainNode');\n  },\n\n  setEqHigh(channelName, knobValue) {\n    this.setFilterValue(channelName, knobValue, 'eqHiFilterNode');\n  },\n\n  setEqMid(channelName, knobValue) {\n    this.setFilterValue(channelName, knobValue, 'eqMidFilterNode');\n  },\n\n  setEqLow(channelName, knobValue) {\n    this.setFilterValue(channelName, knobValue, 'eqLowFilterNode');\n  },\n\n  setFilterFreq(channelName, knobValue) {\n    // knobValue *= 800;\n    const channel = this.audioNodes.channels[channelName];\n\n    if (knobValue < 0) {\n      //low pass\n      const freq = 8000 - Math.log10(knobValue) * 8000;\n      channel.lowPassFilterNode.frequency.setValueAtTime(freq, this.mainAudioContext.currentTime);\n      channel.highPassFilterNode.frequency.setValueAtTime(0, this.mainAudioContext.currentTime);\n      setFilterRes.call(this, channel, channel._fitlerResonasValue);\n    } else if (knobValue > 0) {\n      // high pass filter\n      channel.lowPassFilterNode.frequency.setValueAtTime(24000, this.mainAudioContext.currentTime);\n      knobValue = Math.E ** knobValue; //\n\n      channel.highPassFilterNode.frequency.setValueAtTime(knobValue, this.mainAudioContext.currentTime);\n      setFilterRes.call(this, channel, channel._fitlerResonasValue);\n    } else {\n      //0 turn of all\n      channel.lowPassFilterNode.frequency.setValueAtTime(24000, this.mainAudioContext.currentTime);\n      channel.highPassFilterNode.frequency.setValueAtTime(0, this.mainAudioContext.currentTime);\n      setFilterRes.call(this, channel, 0);\n    }\n\n    function setFilterRes(channel, value = 0) {\n      channel.lowPassFilterNode.Q.setValueAtTime(value, this.mainAudioContext.currentTime);\n      channel.highPassFilterNode.Q.setValueAtTime(value, this.mainAudioContext.currentTime);\n    }\n  },\n\n  setFiterResonas(channelName, knobValue) {\n    const channel = this.audioNodes.channels[channelName];\n    channel._fitlerResonasValue = knobValue;\n  }\n\n};\nexport default Equaliztion;","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/pages/console/core/console/mixer/equalization.js"],"names":["Equaliztion","setGainValue","channelName","knobValue","nodeName","gain","audioCtx","channels","getChannel","backend","ac","channel","audioNodes","setTargetAtTime","parseFloat","currentTime","setFilterValue","setValueAtTime","setGain","setEqHigh","setEqMid","setEqLow","setFilterFreq","freq","Math","log10","lowPassFilterNode","frequency","mainAudioContext","highPassFilterNode","setFilterRes","call","_fitlerResonasValue","E","value","Q","setFiterResonas"],"mappings":"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","sourcesContent":["const Equaliztion = {\r\n\r\n    setGainValue(channelName, knobValue, nodeName) {\r\n        let gain = 1 + knobValue / 100;\r\n        let audioCtx = this.channels.getChannel(channelName).backend.ac;\r\n\r\n        let channel = this.audioNodes.channels[channelName];\r\n        channel[nodeName].gain.setTargetAtTime(parseFloat(gain), audioCtx.currentTime, 0.01);\r\n    },\r\n\r\n    setFilterValue(channelName, knobValue, nodeName) {\r\n        let audioCtx = this.channels.getChannel(channelName).backend.ac;\r\n\r\n        let channel = this.audioNodes.channels[channelName];\r\n        channel[nodeName].gain.setValueAtTime(knobValue, audioCtx.currentTime);\r\n    },\r\n\r\n    setGain(channelName, knobValue) {\r\n        this.setGainValue(channelName, knobValue, 'mainGainNode');\r\n    },\r\n\r\n    setEqHigh(channelName, knobValue) {\r\n        this.setFilterValue(channelName, knobValue, 'eqHiFilterNode');\r\n    },\r\n\r\n    setEqMid(channelName, knobValue) {\r\n        this.setFilterValue(channelName, knobValue, 'eqMidFilterNode');\r\n    },\r\n\r\n    setEqLow(channelName, knobValue) {\r\n        this.setFilterValue(channelName, knobValue, 'eqLowFilterNode');\r\n    },\r\n\r\n    setFilterFreq(channelName, knobValue) {\r\n       // knobValue *= 800;\r\n        const channel = this.audioNodes.channels[channelName];\r\n        if (knobValue < 0) {\r\n            //low pass\r\n            const freq = 8000 - Math.log10(knobValue) * 8000;\r\n            channel.lowPassFilterNode.frequency\r\n                .setValueAtTime(freq, this.mainAudioContext.currentTime);\r\n\r\n            channel.highPassFilterNode.frequency\r\n                .setValueAtTime(0, this.mainAudioContext.currentTime);\r\n            setFilterRes.call(this, channel, channel._fitlerResonasValue);\r\n        } else if (knobValue > 0) {\r\n            // high pass filter\r\n            channel.lowPassFilterNode.frequency\r\n                .setValueAtTime(24000, this.mainAudioContext.currentTime);\r\n\r\n            knobValue = Math.E ** knobValue;//\r\n            channel.highPassFilterNode.frequency\r\n                .setValueAtTime(knobValue, this.mainAudioContext.currentTime);\r\n\r\n            setFilterRes.call(this, channel, channel._fitlerResonasValue);\r\n        } else {\r\n            //0 turn of all\r\n            channel.lowPassFilterNode.frequency\r\n                .setValueAtTime(24000, this.mainAudioContext.currentTime);\r\n\r\n            channel.highPassFilterNode.frequency\r\n                .setValueAtTime(0, this.mainAudioContext.currentTime);\r\n                \r\n            setFilterRes.call(this, channel, 0);\r\n        }\r\n\r\n        function setFilterRes(channel, value = 0) {\r\n            channel.lowPassFilterNode.Q\r\n                .setValueAtTime(value, this.mainAudioContext.currentTime);\r\n\r\n            channel.highPassFilterNode.Q\r\n                .setValueAtTime(value, this.mainAudioContext.currentTime);\r\n        }\r\n    },\r\n\r\n    setFiterResonas(channelName, knobValue) {\r\n        const channel = this.audioNodes.channels[channelName];\r\n        channel._fitlerResonasValue = knobValue;\r\n    },\r\n}\r\n\r\nexport default Equaliztion;"]},"metadata":{},"sourceType":"module"}