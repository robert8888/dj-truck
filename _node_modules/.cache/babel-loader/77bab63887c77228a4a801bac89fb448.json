{"ast":null,"code":"//\n// const {tokenizeCssClass} = require(\"./tokenizeCssClass\");\n// const {tokenizeCssClassBlock} = require(\"./tokenizeCssClassBlock\")\nmodule.exports = parseCssClass;\n\nfunction parseCssClass() {\n  // console.log(\"this from pars class\", this)\n  let processor = this;\n  let Parser = this.Parser;\n  let inlineTokenizers = Parser.prototype.inlineTokenizers;\n  let blockTokenizers = Parser.prototype.blockTokenizers;\n  let inlineMethods = Parser.prototype.inlineMethods;\n  let blockMethods = Parser.prototype.blockMethods; // console.log('inline methods', inlineMethods);\n  // console.log('block methods', blockMethods)\n  // Add an inline tokenizer (defined in the following example).\n\n  function locateMention(value, fromIndex) {\n    return value.indexOf('{.', fromIndex);\n  }\n\n  tokenizeCssClass.notInLink = true;\n  tokenizeCssClass.locator = locateMention;\n\n  function tokenizeCssClass(eat, value, silent) {\n    //   console.log(\"in value\", value)\n    //var match = /^.+?{\\.(\\w+)}/.exec(value)\n    let match = /^(\\W*){\\.(\\w+)}\\W*/.exec(value); //        console.log(match);\n\n    if (match) {\n      if (silent) {\n        return true;\n      }\n\n      console.log(\"match in inline\", match);\n      let rest = match[0].replace(\"{.\" + match[2] + \"}\", \"\");\n      let sub = processor.parse(rest);\n      let node = sub.children[0];\n      node.className = match[2];\n      console.log(\"returnig from inline\", node);\n      return eat(match[0])(node);\n    }\n  }\n\n  function tokenizeCssClassBlock(eat, value, silent) {\n    //  console.log(\"Block value\", value)\n    var match = /(^[(\\\\*_{}\\[\\]()#+-.!|]+){\\.(\\w+)}([^(\\\\*_{}\\[\\]()#+-.!|]+)/.exec(value);\n\n    if (match) {\n      if (silent) {\n        return true;\n      }\n\n      console.log(\"match in block\", match); //   let rest = match[0].replace(\"{.\" + match[2] + \"}\", \"\")\n\n      let sub = processor.parse(match[1] + match[3]);\n      let node = sub.children[0];\n      node.className = match[2];\n      delete node.position;\n      console.log(\"returnig from block\", node);\n      return eat(match[0])(node);\n    }\n  }\n\n  inlineTokenizers.cssClass = tokenizeCssClass;\n  blockTokenizers.cssClassBlock = tokenizeCssClassBlock; // Run it just before `text`.\n\n  inlineMethods.splice(inlineMethods.indexOf('thematicBreak'), 0, 'cssClass');\n  blockMethods.splice(blockMethods.indexOf('paragraph'), 0, 'cssClassBlock');\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/pages/introduction/MarkDonwExtesnion/parseCssClass.js"],"names":["module","exports","parseCssClass","processor","Parser","inlineTokenizers","prototype","blockTokenizers","inlineMethods","blockMethods","locateMention","value","fromIndex","indexOf","tokenizeCssClass","notInLink","locator","eat","silent","match","exec","console","log","rest","replace","sub","parse","node","children","className","tokenizeCssClassBlock","position","cssClass","cssClassBlock","splice"],"mappings":"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","sourcesContent":["//\r\n// const {tokenizeCssClass} = require(\"./tokenizeCssClass\");\r\n// const {tokenizeCssClassBlock} = require(\"./tokenizeCssClassBlock\")\r\nmodule.exports = parseCssClass;\r\n\r\nfunction parseCssClass() {\r\n   // console.log(\"this from pars class\", this)\r\n    let processor = this;\r\n    let Parser = this.Parser\r\n    let inlineTokenizers = Parser.prototype.inlineTokenizers\r\n    let blockTokenizers = Parser.prototype.blockTokenizers;\r\n    let inlineMethods = Parser.prototype.inlineMethods\r\n    let blockMethods = Parser.prototype.blockMethods;\r\n\r\n   // console.log('inline methods', inlineMethods);\r\n   // console.log('block methods', blockMethods)\r\n    // Add an inline tokenizer (defined in the following example).\r\n\r\n\r\n    function locateMention(value, fromIndex) {\r\n        return value.indexOf('{.', fromIndex)\r\n    }\r\n\r\n    tokenizeCssClass.notInLink = true\r\n    tokenizeCssClass.locator = locateMention\r\n\r\n    function tokenizeCssClass(eat, value, silent) {\r\n     //   console.log(\"in value\", value)\r\n        //var match = /^.+?{\\.(\\w+)}/.exec(value)\r\n        let match = /^(\\W*){\\.(\\w+)}\\W*/.exec(value)\r\n//        console.log(match);\r\n        if (match) {\r\n            if (silent) {\r\n                return true\r\n            }\r\n            console.log(\"match in inline\", match)\r\n            let rest = match[0].replace(\"{.\" + match[2] + \"}\", \"\")\r\n            let sub = processor.parse(rest);\r\n            let node = sub.children[0];\r\n            node.className = match[2];\r\n            console.log(\"returnig from inline\", node)\r\n            return eat(match[0])(node)\r\n        }\r\n    }\r\n\r\n\r\n    function tokenizeCssClassBlock(eat, value, silent) {\r\n      //  console.log(\"Block value\", value)\r\n        var match = /(^[(\\\\*_{}\\[\\]()#+-.!|]+){\\.(\\w+)}([^(\\\\*_{}\\[\\]()#+-.!|]+)/.exec(value)\r\n\r\n\r\n        if (match) {\r\n\r\n            if (silent) {\r\n                return true\r\n            }\r\n            console.log(\"match in block\", match)\r\n         //   let rest = match[0].replace(\"{.\" + match[2] + \"}\", \"\")\r\n            let sub = processor.parse(match[1] + match[3]);\r\n            let node = sub.children[0];\r\n            node.className = match[2];\r\n\r\n            delete node.position;\r\n            console.log(\"returnig from block\", node);\r\n            return eat(match[0])(node)\r\n        }\r\n    }\r\n\r\n    inlineTokenizers.cssClass = tokenizeCssClass;\r\n    blockTokenizers.cssClassBlock = tokenizeCssClassBlock;\r\n\r\n    // Run it just before `text`.\r\n    inlineMethods.splice(inlineMethods.indexOf('thematicBreak'), 0, 'cssClass')\r\n    blockMethods.splice(blockMethods.indexOf('paragraph'), 0, 'cssClassBlock')\r\n}"]},"metadata":{},"sourceType":"module"}