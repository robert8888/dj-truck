{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJEKTY\\\\APKI\\\\DjTruck\\\\djtruck\\\\src\\\\pages\\\\app\\\\components\\\\Console\\\\Effector\\\\Effector.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport \"./effector-channel.scss\";\nimport DryWetKnob from \"./DryWetKnob/DryWetKnob\";\nimport EffectorButton from \"./EffectorButton/EffectorButton\";\nimport EffectorKnob from \"./EffectorKnob/EffectorKnob\";\nimport { Dropdown, DropdownButton } from \"react-bootstrap\";\n\nconst Effector = props => {\n  const [currentEffect, setCurrentEffect] = useState('none');\n  const [effectorParams, setEffectorParams] = useState([]);\n  useEffect(() => {\n    let currentEffectParams = props.effects[currentEffect];\n\n    if (!currentEffectParams) {\n      return;\n    }\n\n    console.log('params', currentEffectParams);\n    setEffectorParams(Object.entries(currentEffectParams).map(([name, params]) => {\n      console.log(name, params);\n\n      if (params.type === \"float\") {\n        return React.createElement(EffectorKnob, {\n          key: name + params.description,\n          alt: params.description,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 22\n          },\n          __self: this\n        });\n      } else if (params.type === \"bool\") {\n        return React.createElement(EffectorButton, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 26\n          },\n          __self: this\n        }, params.description);\n      }\n    }));\n  }, [currentEffect, props.effects]);\n  const availableEffects = Object.keys(props.effects).map((effect, index) => {\n    return React.createElement(Dropdown.Item, {\n      key: effect + \"-\" + index,\n      onClick: setCurrentEffect.bind(null, effect),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, effect);\n  });\n  console.log(effectorParams);\n  return React.createElement(\"div\", {\n    className: \"effector-channel\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"dra-wet-knob\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, React.createElement(DryWetKnob, {\n    alt: \"D/W\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"effect-selector\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, React.createElement(DropdownButton, {\n    title: currentEffect,\n    className: \"btn-effect-select\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, availableEffects)), React.createElement(\"div\", {\n    className: \"effector-param\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, effectorParams));\n};\n\nconst mapStateToProps = (state, ownProps) => ({\n  effects: state.effector.effects\n});\n\nexport default connect(mapStateToProps)(Effector);","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/pages/app/components/Console/Effector/Effector.js"],"names":["React","useState","useEffect","connect","DryWetKnob","EffectorButton","EffectorKnob","Dropdown","DropdownButton","Effector","props","currentEffect","setCurrentEffect","effectorParams","setEffectorParams","currentEffectParams","effects","console","log","Object","entries","map","name","params","type","description","availableEffects","keys","effect","index","bind","mapStateToProps","state","ownProps","effector"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport \"./effector-channel.scss\";\r\nimport DryWetKnob from \"./DryWetKnob/DryWetKnob\";\r\nimport EffectorButton from \"./EffectorButton/EffectorButton\";\r\nimport EffectorKnob from \"./EffectorKnob/EffectorKnob\";\r\nimport { Dropdown, DropdownButton } from \"react-bootstrap\";\r\nconst Effector = props => {\r\n\r\n    const [currentEffect, setCurrentEffect] = useState('none');\r\n    const [effectorParams, setEffectorParams] = useState([]);\r\n\r\n    useEffect(() => {\r\n        let currentEffectParams = props.effects[currentEffect];\r\n        if(!currentEffectParams){\r\n            return;\r\n        }\r\n        console.log('params', currentEffectParams)\r\n        setEffectorParams(Object.entries(currentEffectParams).map(([name, params]) => {\r\n            console.log(name, params)\r\n            if (params.type === \"float\") {\r\n                return (<EffectorKnob key={name + params.description}\r\n                          alt={params.description}\r\n                       />)\r\n            } else if (params.type === \"bool\"){\r\n                return (<EffectorButton>{params.description}</EffectorButton>);\r\n            }\r\n        }))\r\n    }, [currentEffect, props.effects])\r\n\r\n\r\n    const availableEffects = Object.keys(props.effects).map((effect, index) => {\r\n        return (<Dropdown.Item key={effect + \"-\" + index} onClick={setCurrentEffect.bind(null, effect)}>{effect}</Dropdown.Item>)\r\n    })\r\n\r\n    console.log(effectorParams)\r\n\r\n    return (\r\n        <div className=\"effector-channel\">\r\n            <div className=\"dra-wet-knob\">\r\n                <DryWetKnob alt=\"D/W\" />\r\n            </div>\r\n            <div className=\"effect-selector\">\r\n                <DropdownButton title={currentEffect} className=\"btn-effect-select\">\r\n                    {availableEffects}\r\n                </DropdownButton>\r\n            </div>\r\n            <div className=\"effector-param\">\r\n                {effectorParams}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => ({\r\n    effects: state.effector.effects,\r\n})\r\n\r\nexport default connect(mapStateToProps)(Effector);\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}