{"ast":null,"code":"import { ACTIONS, openCurrentPlaylist, setCurretPlaylistContent } from \"../../actions\";\nimport { takeEvery, select, put } from \"redux-saga/effects\";\nimport { getApi } from \"./../../apis/apiProvider\";\nimport loadPlaylist from \"./../../qlQueries/loadPlaylist\";\nimport { get } from \"lodash/object\";\nexport default function* loadPlaylistRequest() {\n  yield takeEvery(ACTIONS.PL_LOAD_CURRENT_PLAYLIST_REQUEST, handel);\n}\n\nconst getToken = state => state.user.token;\n\nconst getCurrentPlaylistId = state => {\n  const path = state.playList.currentSelection;\n  return get(state.playList, path);\n};\n\nconst getCurrent = (state, path) => get(state.playList, path);\n\nexport function* handel(action) {\n  const {\n    callQuery\n  } = getApi(\"UserAssets\");\n  const token = yield select(getToken);\n  const playlist = yield select(getCurrentPlaylistId);\n\n  if (playList._loaded) {\n    return yield put(openCurrentPlaylist);\n  } else {\n    var _result$data, _result$data$playlist, _result$data$playlist2;\n\n    const result = yield call(() => {\n      callQuery(loadPlaylist(playlist._id), token);\n    });\n\n    if ((_result$data = result.data) === null || _result$data === void 0 ? void 0 : (_result$data$playlist = _result$data.playlist) === null || _result$data$playlist === void 0 ? void 0 : (_result$data$playlist2 = _result$data$playlist.tracks) === null || _result$data$playlist2 === void 0 ? void 0 : _result$data$playlist2.length) {\n      yield put(setCurretPlaylistContent, result.data.playlist);\n    }\n\n    yield put(openCurrentPlaylist);\n  }\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/sagas/playlists/loadPlaylistRequestSaga.js"],"names":["ACTIONS","openCurrentPlaylist","setCurretPlaylistContent","takeEvery","select","put","getApi","loadPlaylist","get","loadPlaylistRequest","PL_LOAD_CURRENT_PLAYLIST_REQUEST","handel","getToken","state","user","token","getCurrentPlaylistId","path","playList","currentSelection","getCurrent","action","callQuery","playlist","_loaded","result","call","_id","data","tracks","length"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,mBAAlB,EAAwCC,wBAAxC,QAAwE,eAAxE;AACA,SAASC,SAAT,EAAoBC,MAApB,EAA4BC,GAA5B,QAAuC,oBAAvC;AACA,SAASC,MAAT,QAAuB,0BAAvB;AACA,OAAOC,YAAP,MAAyB,gCAAzB;AACA,SAASC,GAAT,QAAoB,eAApB;AAEA,eAAe,UAAUC,mBAAV,GAAgC;AAC3C,QAAMN,SAAS,CAACH,OAAO,CAACU,gCAAT,EAA2CC,MAA3C,CAAf;AACH;;AAED,MAAMC,QAAQ,GAAGC,KAAK,IAAIA,KAAK,CAACC,IAAN,CAAWC,KAArC;;AAEA,MAAMC,oBAAoB,GAAGH,KAAK,IAAI;AAClC,QAAMI,IAAI,GAAGJ,KAAK,CAACK,QAAN,CAAeC,gBAA5B;AACA,SAAOX,GAAG,CAACK,KAAK,CAACK,QAAP,EAAiBD,IAAjB,CAAV;AACH,CAHD;;AAKA,MAAMG,UAAU,GAAG,CAACP,KAAD,EAAQI,IAAR,KAAiBT,GAAG,CAACK,KAAK,CAACK,QAAP,EAAiBD,IAAjB,CAAvC;;AAEA,OAAO,UAAUN,MAAV,CAAiBU,MAAjB,EAAyB;AAC5B,QAAM;AAAEC,IAAAA;AAAF,MAAgBhB,MAAM,CAAC,YAAD,CAA5B;AACA,QAAMS,KAAK,GAAG,MAAMX,MAAM,CAACQ,QAAD,CAA1B;AACA,QAAMW,QAAQ,GAAG,MAAMnB,MAAM,CAACY,oBAAD,CAA7B;;AACA,MAAGE,QAAQ,CAACM,OAAZ,EAAoB;AAChB,WAAO,MAAMnB,GAAG,CAACJ,mBAAD,CAAhB;AACH,GAFD,MAEO;AAAA;;AACH,UAAMwB,MAAM,GAAG,MAAMC,IAAI,CAAC,MAAI;AAC1BJ,MAAAA,SAAS,CAACf,YAAY,CAACgB,QAAQ,CAACI,GAAV,CAAb,EAA6BZ,KAA7B,CAAT;AACH,KAFwB,CAAzB;;AAGA,wBAAGU,MAAM,CAACG,IAAV,0EAAG,aAAaL,QAAhB,oFAAG,sBAAuBM,MAA1B,2DAAG,uBAA+BC,MAAlC,EAAyC;AACrC,YAAMzB,GAAG,CAACH,wBAAD,EAA2BuB,MAAM,CAACG,IAAP,CAAYL,QAAvC,CAAT;AACH;;AACD,UAAMlB,GAAG,CAACJ,mBAAD,CAAT;AACH;AACJ","sourcesContent":["import { ACTIONS, openCurrentPlaylist , setCurretPlaylistContent } from \"../../actions\";\r\nimport { takeEvery, select, put } from \"redux-saga/effects\"\r\nimport { getApi } from \"./../../apis/apiProvider\";\r\nimport loadPlaylist from \"./../../qlQueries/loadPlaylist\";\r\nimport { get } from \"lodash/object\";\r\n\r\nexport default function* loadPlaylistRequest() {\r\n    yield takeEvery(ACTIONS.PL_LOAD_CURRENT_PLAYLIST_REQUEST, handel)\r\n}\r\n\r\nconst getToken = state => state.user.token;\r\n\r\nconst getCurrentPlaylistId = state => {\r\n    const path = state.playList.currentSelection;\r\n    return get(state.playList, path);\r\n}\r\n\r\nconst getCurrent = (state, path) => get(state.playList, path);\r\n\r\nexport function* handel(action) {\r\n    const { callQuery } = getApi(\"UserAssets\");\r\n    const token = yield select(getToken);\r\n    const playlist = yield select(getCurrentPlaylistId);\r\n    if(playList._loaded){\r\n        return yield put(openCurrentPlaylist)\r\n    } else {\r\n        const result = yield call(()=>{\r\n            callQuery(loadPlaylist(playlist._id), token)\r\n        })\r\n        if(result.data?.playlist?.tracks?.length){\r\n            yield put(setCurretPlaylistContent, result.data.playlist);\r\n        }\r\n        yield put(openCurrentPlaylist);\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}