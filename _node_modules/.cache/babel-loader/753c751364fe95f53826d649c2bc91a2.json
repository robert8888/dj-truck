{"ast":null,"code":"import { pushTrackToList, ACTIONS, startCalcBpm } from \"../../actions\";\nimport { takeEvery, select, put, call } from \"redux-saga/effects\";\nimport { getApi } from \"./../../apis/apiProvider\";\nimport createTrackQuery from \"./../../qlQueries/createTrack\";\nimport { generateTemplateName as generateName, findClosesDir } from \"./../../reducers/console/playlist/utils\";\nimport { get } from \"lodash/object\";\nimport { handle as createNewPlaylist } from \"./createPlaylistRequestSaga\";\nimport UUID from \"uuidjs\";\nimport foramter, { formater } from \"./../../utils/time/timeFromater\";\nexport default function* pushTrackToListSaga() {\n  yield takeEvery(ACTIONS.PL_PUSH_TRACK_REQUEST, handle);\n}\n\nconst getToken = state => state.user.token;\n\nconst getCurrent = state => state.playList.list;\n\nconst getPlaylistPath = state => state.playList.currentPlaylist;\n\nfunction* handle(action) {\n  const {\n    callQuery\n  } = getApi(\"UserAssets\");\n  const token = yield select(getToken);\n\n  if (!token) {\n    action.track.id = UUID.genV1().toString();\n    yield put(pushTrackToList(action.track, action.playlist));\n    yield put(startCalcBpm(action.track, action.playlist));\n    return;\n  }\n\n  const currentPlaylist = yield select(getCurrent);\n  let playlistId = currentPlaylist._id;\n  let playlistLength = currentPlaylist.length;\n\n  if (!playlistId) {\n    //create new \n    playlistId = yield call(createNewPlaylist, {\n      setCurrent: true,\n      renameMode: false\n    });\n    playlistLength = 0;\n  }\n\n  const result = yield callQuery(createTrackQuery, token, {\n    playlist: playlistId,\n    title: action.track.title,\n    source: action.track.source,\n    sourceId: action.track.sourceId,\n    quality: action.track.quality,\n    duration: typeof action.track.duration === \"string\" ? formater.ytToSeconds(action.track.duration) : action.track.duration,\n    thumbnails: action.track.thumbnails,\n    position: playlistLength\n  });\n  console.log(\"result of query\", result);\n\n  if (!result.errors) {\n    const trackId = result.data.createTrack.id;\n    yield put(pushTrackToList({ ...action.track,\n      id: trackId\n    }, action.playList));\n    const currentPlaylistPath = yield select(getPlaylistPath);\n    action.track.id = trackId;\n    yield put(startCalcBpm(action.track, currentPlaylistPath));\n  }\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/sagas/playlists/pushTrackToListRequestSaga.js"],"names":["pushTrackToList","ACTIONS","startCalcBpm","takeEvery","select","put","call","getApi","createTrackQuery","generateTemplateName","generateName","findClosesDir","get","handle","createNewPlaylist","UUID","foramter","formater","pushTrackToListSaga","PL_PUSH_TRACK_REQUEST","getToken","state","user","token","getCurrent","playList","list","getPlaylistPath","currentPlaylist","action","callQuery","track","id","genV1","toString","playlist","playlistId","_id","playlistLength","length","setCurrent","renameMode","result","title","source","sourceId","quality","duration","ytToSeconds","thumbnails","position","console","log","errors","trackId","data","createTrack","currentPlaylistPath"],"mappings":"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","sourcesContent":["import { pushTrackToList, ACTIONS, startCalcBpm } from \"../../actions\";\r\nimport { takeEvery, select, put, call } from \"redux-saga/effects\"\r\nimport { getApi } from \"./../../apis/apiProvider\";\r\nimport createTrackQuery from \"./../../qlQueries/createTrack\";\r\nimport { generateTemplateName as generateName, findClosesDir } from \"./../../reducers/console/playlist/utils\";\r\nimport { get } from \"lodash/object\";\r\nimport { handle as createNewPlaylist } from \"./createPlaylistRequestSaga\";\r\nimport UUID from \"uuidjs\";\r\nimport foramter, { formater } from \"./../../utils/time/timeFromater\";\r\n\r\nexport default function* pushTrackToListSaga() {\r\n    yield takeEvery(ACTIONS.PL_PUSH_TRACK_REQUEST, handle)\r\n}\r\n\r\nconst getToken = state => state.user.token;\r\n\r\nconst getCurrent = state => state.playList.list;\r\n\r\nconst getPlaylistPath = state => state.playList.currentPlaylist;\r\n\r\nfunction* handle(action) {\r\n    const { callQuery } = getApi(\"UserAssets\");\r\n    const token = yield select(getToken);\r\n    if(!token){\r\n        action.track.id = UUID.genV1().toString();\r\n        yield put(pushTrackToList(action.track, action.playlist));\r\n        yield put(startCalcBpm(action.track, action.playlist));\r\n        return;\r\n    }\r\n\r\n    const currentPlaylist = yield select(getCurrent);\r\n    let playlistId = currentPlaylist._id;\r\n    let playlistLength = currentPlaylist.length;\r\n\r\n    if (!playlistId) {\r\n        //create new \r\n        playlistId = yield call(createNewPlaylist, { setCurrent: true , renameMode:false});\r\n        playlistLength = 0;\r\n    }\r\n\r\n\r\n    const result = yield callQuery(createTrackQuery, token, {\r\n        playlist: playlistId,\r\n        title: action.track.title,\r\n        source: action.track.source,\r\n        sourceId: action.track.sourceId,\r\n        quality: action.track.quality,\r\n        duration: (typeof action.track.duration === \"string\") ?\r\n            formater.ytToSeconds(action.track.duration) :\r\n            action.track.duration,\r\n        thumbnails: action.track.thumbnails,\r\n        position: playlistLength,\r\n    });\r\n    console.log(\"result of query\", result);\r\n    if (!result.errors) {\r\n        const trackId = result.data.createTrack.id;\r\n        yield put(pushTrackToList({\r\n            ...action.track,\r\n            id: trackId\r\n        }, action.playList));\r\n\r\n        const currentPlaylistPath = yield select(getPlaylistPath);\r\n        action.track.id = trackId;\r\n        yield put(startCalcBpm(action.track, currentPlaylistPath));\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}