{"ast":null,"code":"import { put, select, takeEvery } from \"redux-saga/effects\";\nimport { ACTIONS, pushLog, updateRec, updateRecFail } from \"../../actions\";\nimport { getApi } from \"./../../apis/apiProvider\";\nimport Log from \"./../../utils/logger/logger\";\nexport default function* requestRecordUpdate() {\n  yield takeEvery(ACTIONS.RECS_REQ_UPDATE, handel);\n}\n\nconst getToken = state => state.user.token; //recordId,  recordChanges\n\n\nfunction* handel(action) {\n  const token = yield select(getToken);\n\n  if (token) {\n    try {\n      const {\n        callQuery,\n        queries\n      } = getApi(\"UserAssets\");\n      const {\n        recordId: id,\n        recordChanges: data\n      } = action;\n      const variables = data;\n      variables.id = id;\n      const query = queries.updateRecordMetaQl;\n      const response = yield callQuery(query, token, variables);\n      const success = response === null || response === void 0 ? void 0 : response.data;\n\n      if (!response.errors && success) {\n        yield put(updateRec(id, data));\n      } else {\n        throw new Error(\"Can't update record in database\");\n      }\n\n      yield put(pushLog(new Log(`records variables: ${JSON.stringify(variables)}`)));\n    } catch (error) {\n      yield put(updateRecFail(action.recordChanges.title, error.message));\n      yield pushLog(Log.Error(['saga', 'records', 'reques update record'], \"Can't update records in database\", error));\n    }\n  }\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/sagas/records/reqUpdateRecord.js"],"names":["put","select","takeEvery","ACTIONS","pushLog","updateRec","updateRecFail","getApi","Log","requestRecordUpdate","RECS_REQ_UPDATE","handel","getToken","state","user","token","action","callQuery","queries","recordId","id","recordChanges","data","variables","query","updateRecordMetaQl","response","success","errors","Error","JSON","stringify","error","title","message"],"mappings":"AACA,SAASA,GAAT,EAAcC,MAAd,EAAsBC,SAAtB,QAAuC,oBAAvC;AACA,SAASC,OAAT,EAAkBC,OAAlB,EAA2BC,SAA3B,EAAsCC,aAAtC,QAA2D,eAA3D;AACA,SAASC,MAAT,QAAuB,0BAAvB;AACA,OAAOC,GAAP,MAAgB,6BAAhB;AAEA,eAAe,UAAUC,mBAAV,GAAgC;AAE3C,QAAMP,SAAS,CAACC,OAAO,CAACO,eAAT,EAA0BC,MAA1B,CAAf;AACH;;AAED,MAAMC,QAAQ,GAAGC,KAAK,IAAIA,KAAK,CAACC,IAAN,CAAWC,KAArC,C,CACA;;;AACA,UAAUJ,MAAV,CAAiBK,MAAjB,EAAyB;AACrB,QAAMD,KAAK,GAAG,MAAMd,MAAM,CAACW,QAAD,CAA1B;;AAEA,MAAIG,KAAJ,EAAW;AACP,QAAI;AACA,YAAM;AAAEE,QAAAA,SAAF;AAAaC,QAAAA;AAAb,UAAyBX,MAAM,CAAC,YAAD,CAArC;AACA,YAAM;AAACY,QAAAA,QAAQ,EAAEC,EAAX;AAAeC,QAAAA,aAAa,EAACC;AAA7B,UAAqCN,MAA3C;AACA,YAAMO,SAAS,GAAGD,IAAlB;AACAC,MAAAA,SAAS,CAACH,EAAV,GAAeA,EAAf;AAEA,YAAMI,KAAK,GAAGN,OAAO,CAACO,kBAAtB;AACA,YAAMC,QAAQ,GAAG,MAAMT,SAAS,CAACO,KAAD,EAAQT,KAAR,EAAeQ,SAAf,CAAhC;AAEA,YAAMI,OAAO,GAAGD,QAAH,aAAGA,QAAH,uBAAGA,QAAQ,CAAEJ,IAA1B;;AACA,UAAI,CAACI,QAAQ,CAACE,MAAV,IAAoBD,OAAxB,EAAiC;AAC7B,cAAM3B,GAAG,CAACK,SAAS,CAACe,EAAD,EAAKE,IAAL,CAAV,CAAT;AACH,OAFD,MAEO;AACH,cAAM,IAAIO,KAAJ,CAAU,iCAAV,CAAN;AACH;;AAED,YAAM7B,GAAG,CAACI,OAAO,CAAC,IAAII,GAAJ,CAAS,sBAAqBsB,IAAI,CAACC,SAAL,CAAeR,SAAf,CAA0B,EAAxD,CAAD,CAAR,CAAT;AACH,KAjBD,CAiBE,OAAOS,KAAP,EAAc;AACZ,YAAMhC,GAAG,CAACM,aAAa,CAACU,MAAM,CAACK,aAAP,CAAqBY,KAAtB,EAA6BD,KAAK,CAACE,OAAnC,CAAd,CAAT;AACA,YAAM9B,OAAO,CAACI,GAAG,CAACqB,KAAJ,CACV,CAAC,MAAD,EAAS,SAAT,EAAoB,sBAApB,CADU,EAEV,kCAFU,EAGVG,KAHU,CAAD,CAAb;AAKH;AAEJ;AAEJ","sourcesContent":["\r\nimport { put, select, takeEvery } from \"redux-saga/effects\";\r\nimport { ACTIONS, pushLog, updateRec, updateRecFail } from \"../../actions\";\r\nimport { getApi } from \"./../../apis/apiProvider\";\r\nimport Log from \"./../../utils/logger/logger\";\r\n\r\nexport default function* requestRecordUpdate() {\r\n\r\n    yield takeEvery(ACTIONS.RECS_REQ_UPDATE, handel)\r\n}\r\n\r\nconst getToken = state => state.user.token\r\n//recordId,  recordChanges\r\nfunction* handel(action) {\r\n    const token = yield select(getToken);\r\n\r\n    if (token) {\r\n        try {\r\n            const { callQuery, queries } = getApi(\"UserAssets\");\r\n            const {recordId: id, recordChanges:data} = action;\r\n            const variables = data;\r\n            variables.id = id;\r\n\r\n            const query = queries.updateRecordMetaQl;\r\n            const response = yield callQuery(query, token, variables);\r\n\r\n            const success = response?.data;\r\n            if (!response.errors && success) {\r\n                yield put(updateRec(id, data))\r\n            } else {\r\n                throw new Error(\"Can't update record in database\")\r\n            }\r\n\r\n            yield put(pushLog(new Log(`records variables: ${JSON.stringify(variables)}`)))\r\n        } catch (error) {\r\n            yield put(updateRecFail(action.recordChanges.title, error.message))\r\n            yield pushLog(Log.Error(\r\n                ['saga', 'records', 'reques update record'],\r\n                \"Can't update records in database\",\r\n                error\r\n            ))\r\n        }\r\n\r\n    }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}