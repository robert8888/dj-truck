{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\src\\\\pages\\\\common\\\\components\\\\PlayListExplorer\\\\Explorer\\\\ExplorerTree\\\\RenameInput\\\\RenameInput.js\";\nimport React, { useRef, useCallback } from \"react\";\n\nconst RenameIntput = props => {\n  const onChange = props.onChange;\n  const renameInputRef = useRef();\n  const callOnChange = useCallback(() => {\n    if (onChange && renameInputRef.current) {\n      onChange(renameInputRef.current.value);\n    }\n  }, [onChange, renameInputRef]);\n  return React.createElement(\"input\", {\n    //  type=\"text\"\n    className: \"rename-input\",\n    defaultValue: props.name,\n    ref: renameInputRef,\n    onBlur: callOnChange.bind(null),\n    onKeyPress: event => {\n      if (event.key === \"Enter\") callOnChange();\n    },\n    autoFocus: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  });\n};\n\nexport default RenameIntput;","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/pages/common/components/PlayListExplorer/Explorer/ExplorerTree/RenameInput/RenameInput.js"],"names":["React","useRef","useCallback","RenameIntput","props","onChange","renameInputRef","callOnChange","current","value","name","bind","event","key"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,WAAxB,QAA2C,OAA3C;;AAEA,MAAMC,YAAY,GAAGC,KAAK,IAAI;AAC1B,QAAMC,QAAQ,GAAGD,KAAK,CAACC,QAAvB;AACA,QAAMC,cAAc,GAAGL,MAAM,EAA7B;AAEA,QAAMM,YAAY,GAAGL,WAAW,CAAC,MAAI;AACjC,QAAGG,QAAQ,IAAIC,cAAc,CAACE,OAA9B,EAAsC;AAClCH,MAAAA,QAAQ,CAACC,cAAc,CAACE,OAAf,CAAuBC,KAAxB,CAAR;AACH;AACJ,GAJ+B,EAI7B,CAACJ,QAAD,EAAWC,cAAX,CAJ6B,CAAhC;AAMA,SACI;AACE;AACE,IAAA,SAAS,EAAC,cAFd;AAGI,IAAA,YAAY,EAAEF,KAAK,CAACM,IAHxB;AAII,IAAA,GAAG,EAAEJ,cAJT;AAKI,IAAA,MAAM,EAAEC,YAAY,CAACI,IAAb,CAAkB,IAAlB,CALZ;AAMI,IAAA,UAAU,EAAEC,KAAK,IAAI;AAAE,UAAIA,KAAK,CAACC,GAAN,KAAc,OAAlB,EAA2BN,YAAY;AAAI,KANtE;AAOI,IAAA,SAAS,MAPb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAWH,CArBD;;AAuBA,eAAeJ,YAAf","sourcesContent":["import React, { useRef, useCallback } from \"react\"\r\n\r\nconst RenameIntput = props => {\r\n    const onChange = props.onChange;\r\n    const renameInputRef = useRef();\r\n\r\n    const callOnChange = useCallback(()=>{\r\n        if(onChange && renameInputRef.current){\r\n            onChange(renameInputRef.current.value);\r\n        }\r\n    }, [onChange, renameInputRef])\r\n\r\n    return (\r\n        <input\r\n          //  type=\"text\"\r\n            className=\"rename-input\"\r\n            defaultValue={props.name}\r\n            ref={renameInputRef}\r\n            onBlur={callOnChange.bind(null)}\r\n            onKeyPress={event => { if (event.key === \"Enter\") callOnChange() }}\r\n            autoFocus\r\n        />\r\n    )\r\n}    \r\n\r\nexport default RenameIntput;"]},"metadata":{},"sourceType":"module"}