{"ast":null,"code":"import store from \"./../../store\";\nimport Observer from \"./observer/observer\";\nimport STATUS from \"./observer/STATUS\";\nimport { togglePlay, setTimeLeft } from \"./../../actions/actions\";\nlet mixConsole;\nexport default class Console {\n  constructor() {\n    store.subscribe(this.handleChange.bind(this));\n    this.dispatch = store.dispatch;\n    this.observer = new Observer(store);\n    this.channels = {\n      A: null,\n      B: null\n    };\n  }\n\n  static Init() {\n    mixConsole = new Console();\n  }\n\n  static Get() {\n    if (!mixConsole) {\n      mixConsole = new Console();\n      return mixConsole;\n    } else {\n      return mixConsole;\n    }\n  }\n\n  setPlayer(channel, player) {\n    this.channels[channel] = player;\n    this.attachActions(channel);\n  }\n\n  attachActions(channel) {\n    const player = this.channels[channel];\n    player.on('finish', () => {\n      this.dispatch(togglePlay(channel));\n    });\n    let lastUpdate = new Date().getTime();\n    player.on('audioprocess', () => {\n      const currentTime = new Date().getTime();\n\n      if (currentTime - lastUpdate >= 999) {\n        lastUpdate = currentTime;\n        this.dispatch(setTimeLeft(channel, parseInt(player.getDuration() - player.getCurrentTime())));\n      }\n    });\n    let lastCall = {\n      time: new Date().getTime(),\n      value: null\n    };\n    let watcher = null;\n    player.on('seek', progress => {\n      lastCall.time = new Date().getTime();\n      lastCall.value = progress;\n\n      if (!watcher) {\n        console.log(\"create watcher\");\n\n        watcher = () => {\n          let handler = setInterval(() => {\n            console.log('from set interval');\n\n            if (lastCall.time - new Date().getTime() >= 100) {\n              console.log(\"call dispach\");\n              this.dispatch(setTimeLeft(channel, parseInt(player.getDuration() - lastCall.value)));\n              clearInterval(handler);\n            }\n          }, 100);\n        };\n      }\n    });\n  }\n\n  handleChange() {\n    const storeChanges = this.observer.check();\n\n    for (let diff of storeChanges) {\n      this.callAction(diff);\n    }\n  }\n\n  callAction(diff) {\n    switch (diff.status) {\n      case STATUS.TOGGLE_PLAY:\n        {\n          this.togglePlay(diff.channel, diff.currentValue);\n          break;\n        }\n\n      case STATUS.TOGGLE_CUE:\n        {\n          this.toggleCue(diff.channel, diff.currentValue);\n          break;\n        }\n    }\n  }\n\n  togglePlay(channelName, currentValue) {\n    if (currentValue) //paused true\n      {\n        this.channels[channelName].pause();\n      } else {\n      this.channels[channelName].play();\n    }\n  }\n\n  toggleCue(channelName, currentValue) {\n    console.log('toogle cue', channelName, currentValue);\n  }\n\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/core/console/console.js"],"names":["store","Observer","STATUS","togglePlay","setTimeLeft","mixConsole","Console","constructor","subscribe","handleChange","bind","dispatch","observer","channels","A","B","Init","Get","setPlayer","channel","player","attachActions","on","lastUpdate","Date","getTime","currentTime","parseInt","getDuration","getCurrentTime","lastCall","time","value","watcher","progress","console","log","handler","setInterval","clearInterval","storeChanges","check","diff","callAction","status","TOGGLE_PLAY","currentValue","TOGGLE_CUE","toggleCue","channelName","pause","play"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,eAAlB;AACA,OAAOC,QAAP,MAAqB,qBAArB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAAQC,UAAR,EAAoBC,WAApB,QAAsC,yBAAtC;AAEA,IAAIC,UAAJ;AACA,eAAe,MAAMC,OAAN,CAAa;AACxBC,EAAAA,WAAW,GAAE;AACTP,IAAAA,KAAK,CAACQ,SAAN,CAAgB,KAAKC,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAAhB;AACA,SAAKC,QAAL,GAAgBX,KAAK,CAACW,QAAtB;AACA,SAAKC,QAAL,GAAgB,IAAIX,QAAJ,CAAaD,KAAb,CAAhB;AACA,SAAKa,QAAL,GAAgB;AACZC,MAAAA,CAAC,EAAE,IADS;AAEZC,MAAAA,CAAC,EAAE;AAFS,KAAhB;AAIH;;AAED,SAAOC,IAAP,GAAa;AACTX,IAAAA,UAAU,GAAG,IAAIC,OAAJ,EAAb;AACH;;AAED,SAAOW,GAAP,GAAY;AACR,QAAG,CAACZ,UAAJ,EAAe;AACXA,MAAAA,UAAU,GAAG,IAAIC,OAAJ,EAAb;AACA,aAAOD,UAAP;AACH,KAHD,MAGO;AACH,aAAOA,UAAP;AACH;AACJ;;AAEDa,EAAAA,SAAS,CAACC,OAAD,EAAUC,MAAV,EAAiB;AACtB,SAAKP,QAAL,CAAcM,OAAd,IAAyBC,MAAzB;AACA,SAAKC,aAAL,CAAmBF,OAAnB;AACH;;AAEDE,EAAAA,aAAa,CAACF,OAAD,EAAS;AAClB,UAAMC,MAAM,GAAG,KAAKP,QAAL,CAAcM,OAAd,CAAf;AACAC,IAAAA,MAAM,CAACE,EAAP,CAAU,QAAV,EAAoB,MAAI;AACpB,WAAKX,QAAL,CAAcR,UAAU,CAACgB,OAAD,CAAxB;AACH,KAFD;AAIA,QAAII,UAAU,GAAI,IAAIC,IAAJ,EAAD,CAAaC,OAAb,EAAjB;AACAL,IAAAA,MAAM,CAACE,EAAP,CAAU,cAAV,EAA0B,MAAI;AAC1B,YAAMI,WAAW,GAAI,IAAIF,IAAJ,EAAD,CAAaC,OAAb,EAApB;;AACA,UAAIC,WAAW,GAAGH,UAAf,IAA8B,GAAjC,EAAqC;AACjCA,QAAAA,UAAU,GAAGG,WAAb;AACA,aAAKf,QAAL,CAAcP,WAAW,CAACe,OAAD,EAAUQ,QAAQ,CAACP,MAAM,CAACQ,WAAP,KAAuBR,MAAM,CAACS,cAAP,EAAxB,CAAlB,CAAzB;AACH;AACJ,KAND;AAQA,QAAIC,QAAQ,GAAG;AACXC,MAAAA,IAAI,EAAG,IAAIP,IAAJ,EAAD,CAAaC,OAAb,EADK;AAEXO,MAAAA,KAAK,EAAG;AAFG,KAAf;AAIA,QAAIC,OAAO,GAAG,IAAd;AACAb,IAAAA,MAAM,CAACE,EAAP,CAAU,MAAV,EAAkBY,QAAQ,IAAI;AAC1BJ,MAAAA,QAAQ,CAACC,IAAT,GAAiB,IAAIP,IAAJ,EAAD,CAAaC,OAAb,EAAhB;AACAK,MAAAA,QAAQ,CAACE,KAAT,GAAiBE,QAAjB;;AACA,UAAG,CAACD,OAAJ,EAAY;AACRE,QAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;;AACAH,QAAAA,OAAO,GAAG,MAAK;AACX,cAAII,OAAO,GAAGC,WAAW,CAAC,MAAI;AAC1BH,YAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;;AACA,gBAAIN,QAAQ,CAACC,IAAT,GAAiB,IAAIP,IAAJ,EAAD,CAAaC,OAAb,EAAjB,IAA4C,GAA/C,EACA;AACIU,cAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACA,mBAAKzB,QAAL,CAAcP,WAAW,CAACe,OAAD,EAAUQ,QAAQ,CAACP,MAAM,CAACQ,WAAP,KAAuBE,QAAQ,CAACE,KAAjC,CAAlB,CAAzB;AACAO,cAAAA,aAAa,CAACF,OAAD,CAAb;AACH;AACJ,WARwB,EAQtB,GARsB,CAAzB;AASH,SAVD;AAWH;AACJ,KAjBD;AAkBH;;AAED5B,EAAAA,YAAY,GAAE;AACV,UAAM+B,YAAY,GAAG,KAAK5B,QAAL,CAAc6B,KAAd,EAArB;;AACA,SAAI,IAAIC,IAAR,IAAgBF,YAAhB,EAA6B;AACzB,WAAKG,UAAL,CAAgBD,IAAhB;AACH;AACJ;;AAEDC,EAAAA,UAAU,CAACD,IAAD,EAAM;AACZ,YAAOA,IAAI,CAACE,MAAZ;AACI,WAAK1C,MAAM,CAAC2C,WAAZ;AAA0B;AACtB,eAAK1C,UAAL,CAAgBuC,IAAI,CAACvB,OAArB,EAA8BuB,IAAI,CAACI,YAAnC;AACA;AACH;;AAED,WAAK5C,MAAM,CAAC6C,UAAZ;AAAyB;AACrB,eAAKC,SAAL,CAAeN,IAAI,CAACvB,OAApB,EAA6BuB,IAAI,CAACI,YAAlC;AACA;AACH;AATL;AAWH;;AAED3C,EAAAA,UAAU,CAAC8C,WAAD,EAAcH,YAAd,EAA2B;AACjC,QAAGA,YAAH,EAAgB;AAChB;AACI,aAAKjC,QAAL,CAAcoC,WAAd,EAA2BC,KAA3B;AACH,OAHD,MAGO;AACH,WAAKrC,QAAL,CAAcoC,WAAd,EAA2BE,IAA3B;AACH;AACJ;;AAEDH,EAAAA,SAAS,CAACC,WAAD,EAAcH,YAAd,EAA2B;AAEhCX,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0Ba,WAA1B,EAAuCH,YAAvC;AACH;;AAtGuB","sourcesContent":["import store from \"./../../store\";\r\nimport Observer from \"./observer/observer\";\r\nimport STATUS from \"./observer/STATUS\";\r\nimport {togglePlay, setTimeLeft} from \"./../../actions/actions\";\r\n\r\nlet mixConsole;\r\nexport default class Console{\r\n    constructor(){\r\n        store.subscribe(this.handleChange.bind(this));\r\n        this.dispatch = store.dispatch;\r\n        this.observer = new Observer(store);\r\n        this.channels = {\r\n            A: null, \r\n            B: null\r\n        }\r\n    }\r\n\r\n    static Init(){\r\n        mixConsole = new Console();\r\n    }\r\n\r\n    static Get(){\r\n        if(!mixConsole){\r\n            mixConsole = new Console();\r\n            return mixConsole;\r\n        } else {\r\n            return mixConsole;\r\n        }\r\n    }\r\n\r\n    setPlayer(channel, player){\r\n        this.channels[channel] = player;\r\n        this.attachActions(channel);\r\n    }\r\n\r\n    attachActions(channel){\r\n        const player = this.channels[channel];\r\n        player.on('finish', ()=>{\r\n            this.dispatch(togglePlay(channel))\r\n        })\r\n\r\n        let lastUpdate = (new Date()).getTime();\r\n        player.on('audioprocess', ()=>{\r\n            const currentTime = (new Date()).getTime();\r\n            if((currentTime - lastUpdate) >= 999){\r\n                lastUpdate = currentTime;\r\n                this.dispatch(setTimeLeft(channel, parseInt(player.getDuration() - player.getCurrentTime())))\r\n            }\r\n        })\r\n\r\n        let lastCall = {\r\n            time :(new Date()).getTime(),\r\n            value : null\r\n        };\r\n        let watcher = null;\r\n        player.on('seek', progress => {\r\n            lastCall.time = (new Date()).getTime();\r\n            lastCall.value = progress;\r\n            if(!watcher){\r\n                console.log(\"create watcher\")\r\n                watcher = ()=> {\r\n                    let handler = setInterval(()=>{\r\n                        console.log('from set interval')\r\n                        if((lastCall.time - (new Date()).getTime()) >= 100)\r\n                        {\r\n                            console.log(\"call dispach\")\r\n                            this.dispatch(setTimeLeft(channel, parseInt(player.getDuration() - lastCall.value)))\r\n                            clearInterval(handler);\r\n                        }\r\n                    }, 100)\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    handleChange(){\r\n        const storeChanges = this.observer.check();\r\n        for(let diff of storeChanges){\r\n            this.callAction(diff);\r\n        }\r\n    }\r\n\r\n    callAction(diff){\r\n        switch(diff.status){\r\n            case STATUS.TOGGLE_PLAY : {\r\n                this.togglePlay(diff.channel, diff.currentValue);\r\n                break;\r\n            }\r\n\r\n            case STATUS.TOGGLE_CUE : {\r\n                this.toggleCue(diff.channel, diff.currentValue)\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    togglePlay(channelName, currentValue){\r\n        if(currentValue)//paused true\r\n        {\r\n            this.channels[channelName].pause();\r\n        } else {\r\n            this.channels[channelName].play();\r\n        }\r\n    }\r\n\r\n    toggleCue(channelName, currentValue){\r\n        \r\n        console.log('toogle cue', channelName, currentValue);\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}