{"ast":null,"code":"const map = require('unist-util-map');\n\nconst vFile = require('vfile');\n\nmodule.exports = attacher;\n\nconst newFileFrom = (vfile, contents) => {\n  return vFile({ ...vfile,\n    contents: contents\n  });\n};\n\nfunction attacher() {\n  // console.log(\"the this\", this.Parser);\n  const pattern = /{\\.(\\w+)}/;\n  const processor = this;\n\n  function transformer(tree, file) {\n    let inlineMethods = processor.Parser.prototype.inlineMethods;\n    let blockMethods = processor.Parser.prototype.blockMethods; //   console.log(file);\n    //  console.log(inlineMethods)\n    //console.log(tree);\n\n    return map(tree, (node, index, parent) => {\n      //  console.log(node, index , parent);\n      if (node.type !== \"text\" || !node.children) return node;\n      parent = node;\n      let children = node.children.map(node => {\n        var _processor$parse;\n\n        if (node.type !== \"text\") return node;\n        console.log(\"node in\", node);\n        let match = pattern.exec(node.value);\n        if (!match) return node;\n        const value = node.value.replace(match[0], \"\");\n        const subNodes = (_processor$parse = processor.parse(newFileFrom(file, value))) === null || _processor$parse === void 0 ? void 0 : _processor$parse.children;\n        console.log(parent, subNodes);\n      }); //console.log(\"mathc\", match)\n      //  console.log(\"sub node\", subNode)\n\n      node.chilren = children;\n      return node;\n    });\n  }\n\n  return transformer;\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/pages/introduction/MarkDonwExtesnion/reamark-hclass.js"],"names":["map","require","vFile","module","exports","attacher","newFileFrom","vfile","contents","pattern","processor","transformer","tree","file","inlineMethods","Parser","prototype","blockMethods","node","index","parent","type","children","console","log","match","exec","value","replace","subNodes","parse","chilren"],"mappings":"AAAA,MAAMA,GAAG,GAAGC,OAAO,CAAC,gBAAD,CAAnB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAArB;;AAEAE,MAAM,CAACC,OAAP,GAAiBC,QAAjB;;AAEA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AACrC,SAAON,KAAK,CAAC,EAAC,GAAGK,KAAJ;AAAWC,IAAAA,QAAQ,EAAEA;AAArB,GAAD,CAAZ;AACH,CAFD;;AAIA,SAASH,QAAT,GAAoB;AACjB;AACC,QAAMI,OAAO,GAAG,WAAhB;AACA,QAAMC,SAAS,GAAG,IAAlB;;AACA,WAASC,WAAT,CAAqBC,IAArB,EAA2BC,IAA3B,EAAiC;AAC7B,QAAIC,aAAa,GAAEJ,SAAS,CAACK,MAAV,CAAiBC,SAAjB,CAA2BF,aAA9C;AACA,QAAIG,YAAY,GAAGP,SAAS,CAACK,MAAV,CAAiBC,SAAjB,CAA2BC,YAA9C,CAF6B,CAIhC;AACC;AACE;;AACA,WAAOjB,GAAG,CAACY,IAAD,EAAO,CAACM,IAAD,EAAQC,KAAR,EAAeC,MAAf,KAAyB;AACxC;AACE,UAAGF,IAAI,CAACG,IAAL,KAAc,MAAd,IAAwB,CAACH,IAAI,CAACI,QAAjC,EAA2C,OAAOJ,IAAP;AAC3CE,MAAAA,MAAM,GAAGF,IAAT;AACA,UAAII,QAAQ,GAAGJ,IAAI,CAACI,QAAL,CAActB,GAAd,CAAmBkB,IAAI,IAAI;AAAA;;AACtC,YAAGA,IAAI,CAACG,IAAL,KAAc,MAAjB,EAAyB,OAAOH,IAAP;AACzBK,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBN,IAAvB;AACA,YAAIO,KAAK,GAAGhB,OAAO,CAACiB,IAAR,CAAaR,IAAI,CAACS,KAAlB,CAAZ;AACA,YAAG,CAACF,KAAJ,EAAW,OAAOP,IAAP;AACX,cAAMS,KAAK,GAAGT,IAAI,CAACS,KAAL,CAAWC,OAAX,CAAmBH,KAAK,CAAC,CAAD,CAAxB,EAA6B,EAA7B,CAAd;AACA,cAAMI,QAAQ,uBAAGnB,SAAS,CAACoB,KAAV,CAAgBxB,WAAW,CAACO,IAAD,EAAOc,KAAP,CAA3B,CAAH,qDAAG,iBAA2CL,QAA5D;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAZ,EAAoBS,QAApB;AACH,OARc,CAAf,CAJsC,CAgBtC;AAGF;;AACEX,MAAAA,IAAI,CAACa,OAAL,GAAeT,QAAf;AACA,aAAOJ,IAAP;AACH,KAtBS,CAAV;AAuBH;;AAED,SAAOP,WAAP;AACH","sourcesContent":["const map = require('unist-util-map');\r\nconst vFile = require('vfile');\r\n\r\nmodule.exports = attacher\r\n\r\nconst newFileFrom = (vfile, contents) => {\r\n    return vFile({...vfile, contents: contents})\r\n}\r\n\r\nfunction attacher() {\r\n   // console.log(\"the this\", this.Parser);\r\n    const pattern = /{\\.(\\w+)}/;\r\n    const processor = this;\r\n    function transformer(tree, file) {\r\n        let inlineMethods =processor.Parser.prototype.inlineMethods;\r\n        let blockMethods = processor.Parser.prototype.blockMethods;\r\n\r\n     //   console.log(file);\r\n      //  console.log(inlineMethods)\r\n        //console.log(tree);\r\n        return map(tree, (node , index, parent)=> {\r\n          //  console.log(node, index , parent);\r\n            if(node.type !== \"text\" || !node.children) return node;\r\n            parent = node;\r\n            let children = node.children.map( node => {\r\n                if(node.type !== \"text\") return node;\r\n                console.log(\"node in\", node)\r\n                let match = pattern.exec(node.value);\r\n                if(!match) return node;\r\n                const value = node.value.replace(match[0], \"\");\r\n                const subNodes = processor.parse(newFileFrom(file, value))?.children;\r\n                console.log(parent, subNodes)\r\n            })\r\n\r\n\r\n\r\n            //console.log(\"mathc\", match)\r\n\r\n\r\n          //  console.log(\"sub node\", subNode)\r\n            node.chilren = children;\r\n            return node;\r\n        })\r\n    }\r\n\r\n    return transformer\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}