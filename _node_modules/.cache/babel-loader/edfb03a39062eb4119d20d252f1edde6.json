{"ast":null,"code":"import _wrapRegExp from \"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/wrapRegExp\";\nvar _jsxFileName = \"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\src\\\\Router\\\\PrivateRedirectWithUser.js\";\nimport React, { useCallback } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { useAuth0 } from \"./../auth0/react-auth0-spa\";\n\nconst RedirectWithUser = ({\n  from,\n  recTo,\n  user,\n  ...rest\n}) => {\n  const {\n    loading,\n    isAuthenticated,\n    loginWithRedirect\n  } = useAuth0();\n  const redirect = useCallback(async () => {\n    if (loading) {\n      return;\n    }\n\n    await loginWithRedirect({\n      appState: {\n        targetUrl: window.location.pathname\n      }\n    });\n  }, [loading, loginWithRedirect]);\n\n  const to = () => {\n    if (isAuthenticated) {\n      const findVars = _wrapRegExp(/\\[([\\0-Z\\\\\\^-\\uFFFF]*)\\]/, {\n        variable: 1\n      });\n\n      const vars = recTo.match(findVars).groups.variable;\n      let to = recTo;\n\n      for (let varName of vars) {\n        to = to.replace(\"[\" + varName + \"]\", user[varName]);\n      }\n\n      console.log(\"to is\", to);\n      return to;\n    } else {\n      redirect();\n    }\n  }; //return <Route path={path} render={render} {...rest} />;\n\n\n  return React.createElement(Redirect, Object.assign({\n    from: from,\n    to: to()\n  }, rest, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }));\n};\n\nconst mapStateToProps = state => ({\n  nickname: state.user\n});\n\nexport default connect(mapStateToProps)(RedirectWithUser);","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/Router/PrivateRedirectWithUser.js"],"names":["React","useCallback","connect","Route","Redirect","useAuth0","RedirectWithUser","from","recTo","user","rest","loading","isAuthenticated","loginWithRedirect","redirect","appState","targetUrl","window","location","pathname","to","findVars","vars","match","groups","variable","varName","replace","console","log","mapStateToProps","state","nickname"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,QAAmC,OAAnC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,kBAAhC;AACA,SAASC,QAAT,QAAyB,4BAAzB;;AAEA,MAAMC,gBAAgB,GAAG,CAAC;AAAGC,EAAAA,IAAH;AAASC,EAAAA,KAAT;AAAgBC,EAAAA,IAAhB;AAAsB,KAAGC;AAAzB,CAAD,KAAoC;AACzD,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,eAAX;AAA4BC,IAAAA;AAA5B,MAAkDR,QAAQ,EAAhE;AAGA,QAAMS,QAAQ,GAAGb,WAAW,CAAC,YAAY;AACrC,QAAIU,OAAJ,EAAa;AACT;AACH;;AAED,UAAME,iBAAiB,CAAC;AACpBE,MAAAA,QAAQ,EAAE;AAAEC,QAAAA,SAAS,EAAEC,MAAM,CAACC,QAAP,CAAgBC;AAA7B;AADU,KAAD,CAAvB;AAGH,GAR2B,EAQzB,CAACR,OAAD,EAAUE,iBAAV,CARyB,CAA5B;;AAUA,QAAMO,EAAE,GAAG,MAAM;AACb,QAAIR,eAAJ,EAAqB;AACjB,YAAMS,QAAQ,eAAG,0BAAH;AAAA;AAAA,QAAd;;AACA,YAAMC,IAAI,GAAGd,KAAK,CAACe,KAAN,CAAYF,QAAZ,EAAsBG,MAAtB,CAA6BC,QAA1C;AACA,UAAIL,EAAE,GAAGZ,KAAT;;AACA,WAAI,IAAIkB,OAAR,IAAmBJ,IAAnB,EAAwB;AACpBF,QAAAA,EAAE,GAAGA,EAAE,CAACO,OAAH,CAAW,MAAID,OAAJ,GAAY,GAAvB,EAA4BjB,IAAI,CAACiB,OAAD,CAAhC,CAAL;AACH;;AACDE,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAsBT,EAAtB;AACA,aAAOA,EAAP;AACH,KATD,MASO;AACHN,MAAAA,QAAQ;AACX;AACJ,GAbD,CAdyD,CA4BzD;;;AACA,SAAO,oBAAC,QAAD;AAAU,IAAA,IAAI,EAAEP,IAAhB;AAAsB,IAAA,EAAE,EAAEa,EAAE;AAA5B,KAAoCV,IAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACH,CA9BD;;AAgCA,MAAMoB,eAAe,GAAGC,KAAK,KAAI;AAC7BC,EAAAA,QAAQ,EAAGD,KAAK,CAACtB;AADY,CAAJ,CAA7B;;AAIA,eAAeP,OAAO,CAAC4B,eAAD,CAAP,CAAyBxB,gBAAzB,CAAf","sourcesContent":["import React, { useCallback } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport { useAuth0 } from \"./../auth0/react-auth0-spa\";\r\n\r\nconst RedirectWithUser = ({  from, recTo, user, ...rest}) => {\r\n    const { loading, isAuthenticated, loginWithRedirect } = useAuth0();\r\n\r\n\r\n    const redirect = useCallback(async () => {\r\n        if (loading) {\r\n            return;\r\n        }\r\n\r\n        await loginWithRedirect({\r\n            appState: { targetUrl: window.location.pathname }\r\n        });\r\n    }, [loading, loginWithRedirect])\r\n\r\n    const to = () => {\r\n        if (isAuthenticated) {\r\n            const findVars = /\\[(?<variable>[^\\[\\]]*)\\]/\r\n            const vars = recTo.match(findVars).groups.variable;\r\n            let to = recTo\r\n            for(let varName of vars){\r\n                to = to.replace(\"[\"+varName+\"]\", user[varName])\r\n            }\r\n            console.log(\"to is\" , to)\r\n            return to;\r\n        } else {\r\n            redirect();\r\n        }\r\n    }\r\n    //return <Route path={path} render={render} {...rest} />;\r\n    return <Redirect from={from} to={to()} {...rest} />;\r\n};\r\n\r\nconst mapStateToProps = state =>({\r\n    nickname : state.user\r\n})\r\n\r\nexport default connect(mapStateToProps)(RedirectWithUser);"]},"metadata":{},"sourceType":"module"}