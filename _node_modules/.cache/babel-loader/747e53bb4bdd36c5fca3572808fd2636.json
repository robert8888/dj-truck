{"ast":null,"code":"import store from \"./../../../../store\";\nimport config from \"./../../../../components/Deck/Player/configuration\";\nimport WaveSurfer from \"wavesurfer\";\nimport { getBeatLength } from \"./../../../../utils/bpm/converter\";\nimport { setChannelReady, setLoadingProgress, setTimeLeft } from \"./../../../../actions\";\nexport default class ChannelBuilder {\n  constructor() {\n    this.eventHandler = new ChannelEvnetHandler();\n    this.dispatch = store.dispatch;\n  }\n\n  create(channelName, masterContainer, slaveContainer) {\n    let channel = {\n      channelName,\n      masterContainer,\n      slaveContainer\n    };\n    channel.masterConfig = config.master(masterContainer, channelName);\n    channel.slaveConfig = config.slave(slaveContainer, channelName);\n    channel.master = WaveSurfer.create(channel.masterConfig);\n\n    channel.master.__proto__.loadWithEvent = function (...args) {\n      this.fireEvent(\"load\");\n      this.load(...args);\n    };\n\n    channel.slave = WaveSurfer.create(channel.slaveConfig);\n    this.attachEvents(channel);\n    this.ChannelEvnetHandler.CreateEventHandling(channel);\n    return channel;\n  }\n  /*  attachEvents(channel) {\r\n      channel.master.on(\"load\", () => {\r\n        console.log(\"fire load\")\r\n        this.clearState(channel);\r\n      });\r\n  \r\n      channel.master.on(\"loading\", progress => {\r\n        this.dispatch(setLoadingProgress(channel.channelName, progress));\r\n      });\r\n  \r\n      channel.master.on(\"ready\", () => {\r\n        channel.currentDuration = channel.master.getDuration();\r\n        let resolution = 430;\r\n        channel.slave.load(\r\n          null,\r\n          channel.master.backend.getPeaks(resolution, 0, resolution)\r\n        );\r\n        this.dispatch(setLoadingProgress(channel.channelName, 100));\r\n  \r\n        this.dispatch(setChannelReady(true, channel.channelName));\r\n        this.startSync(channel);\r\n      });\r\n  \r\n      channel.slave.on(\"seek\", progress => {\r\n        const wasPlaying = channel.master.isPlaying();\r\n  \r\n        channel.master.backend.seekTo(progress * channel.currentDuration);\r\n        channel.master.drawer.progress(progress);\r\n        channel.master.fireEvent(\"seek\", progress);\r\n  \r\n        channel.slave.drawer.progress(progress);\r\n  \r\n        const timeLeft =\r\n          parseInt(channel.master.getDuration() - channel.master.getDuration() * progress);\r\n        this.dispatch(setTimeLeft(channel.channelName, timeLeft));\r\n        if (wasPlaying) {\r\n          channel.master.play();\r\n        }\r\n      });\r\n    }\r\n  \r\n    clearState(channel) {\r\n      channel.slave.load(null, []);\r\n      if (channel.barsElements) {\r\n        channel.barsElements.forEach(htmlElement => htmlElement.remove());\r\n      }\r\n    }\r\n  \r\n    startSync = channel => {\r\n      channel.syncHandle = setInterval(() => {\r\n        channel.slave.drawer.progress(\r\n          channel.master.getCurrentTime() / channel.currentDuration\r\n        );\r\n      }, 100);\r\n    };*/\n\n\n  createBars(channel, {\n    bpm,\n    offset\n  }) {\n    let wrapper = channel.master.drawer.wrapper;\n    let styleApply = WaveSurfer.Drawer.style;\n    let minPxPerSec = config.master().minPxPerSec;\n    let bitLength = getBeatLength(bpm);\n    let barPostions = [];\n\n    for (let i = offset; i < channel.master.getDuration(); i += bitLength) {\n      barPostions.push(i);\n    }\n\n    let barStyle = position => ({\n      position: \"absolute\",\n      left: position + \"px\",\n      top: \"0px\",\n      width: \"1px\",\n      maxWidth: \"1px\",\n      height: \"100%\",\n      background: \"rgba(255,255,255, 0.5)\"\n    });\n\n    channel.barsElements = [];\n    barPostions.forEach(position => {\n      let bar = document.createElement(\"div\");\n      let style = barStyle(minPxPerSec * position);\n      styleApply(bar, style);\n      wrapper.appendChild(bar);\n      channel.barsElements.push(bar);\n    });\n  }\n\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/core/console/channels/channelBuilder/channelBuilder.js"],"names":["store","config","WaveSurfer","getBeatLength","setChannelReady","setLoadingProgress","setTimeLeft","ChannelBuilder","constructor","eventHandler","ChannelEvnetHandler","dispatch","create","channelName","masterContainer","slaveContainer","channel","masterConfig","master","slaveConfig","slave","__proto__","loadWithEvent","args","fireEvent","load","attachEvents","CreateEventHandling","createBars","bpm","offset","wrapper","drawer","styleApply","Drawer","style","minPxPerSec","bitLength","barPostions","i","getDuration","push","barStyle","position","left","top","width","maxWidth","height","background","barsElements","forEach","bar","document","createElement","appendChild"],"mappings":"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","sourcesContent":["import store from \"./../../../../store\";\r\nimport config from \"./../../../../components/Deck/Player/configuration\";\r\n\r\nimport WaveSurfer from \"wavesurfer\";\r\nimport { getBeatLength } from \"./../../../../utils/bpm/converter\";\r\nimport {\r\n  setChannelReady,\r\n  setLoadingProgress,\r\n  setTimeLeft\r\n} from \"./../../../../actions\";\r\n\r\n\r\nexport default class ChannelBuilder {\r\n  constructor() {\r\n    this.eventHandler = new ChannelEvnetHandler();\r\n    this.dispatch = store.dispatch;\r\n  }\r\n\r\n  create(channelName, masterContainer, slaveContainer) {\r\n    let channel = {channelName, masterContainer, slaveContainer};\r\n\r\n    channel.masterConfig = config.master(masterContainer, channelName);\r\n    channel.slaveConfig = config.slave(slaveContainer, channelName);\r\n\r\n    channel.master = WaveSurfer.create(channel.masterConfig);\r\n    channel.master.__proto__.loadWithEvent = function(...args) {\r\n      this.fireEvent(\"load\");\r\n      this.load(...args);\r\n    };\r\n    channel.slave = WaveSurfer.create(channel.slaveConfig);\r\n\r\n    this.attachEvents(channel);\r\n    this.ChannelEvnetHandler.CreateEventHandling(channel)\r\n\r\n    return channel;\r\n  }\r\n\r\n/*  attachEvents(channel) {\r\n    channel.master.on(\"load\", () => {\r\n      console.log(\"fire load\")\r\n      this.clearState(channel);\r\n    });\r\n\r\n    channel.master.on(\"loading\", progress => {\r\n      this.dispatch(setLoadingProgress(channel.channelName, progress));\r\n    });\r\n\r\n    channel.master.on(\"ready\", () => {\r\n      channel.currentDuration = channel.master.getDuration();\r\n      let resolution = 430;\r\n      channel.slave.load(\r\n        null,\r\n        channel.master.backend.getPeaks(resolution, 0, resolution)\r\n      );\r\n      this.dispatch(setLoadingProgress(channel.channelName, 100));\r\n\r\n      this.dispatch(setChannelReady(true, channel.channelName));\r\n      this.startSync(channel);\r\n    });\r\n\r\n    channel.slave.on(\"seek\", progress => {\r\n      const wasPlaying = channel.master.isPlaying();\r\n\r\n      channel.master.backend.seekTo(progress * channel.currentDuration);\r\n      channel.master.drawer.progress(progress);\r\n      channel.master.fireEvent(\"seek\", progress);\r\n\r\n      channel.slave.drawer.progress(progress);\r\n\r\n      const timeLeft =\r\n        parseInt(channel.master.getDuration() - channel.master.getDuration() * progress);\r\n      this.dispatch(setTimeLeft(channel.channelName, timeLeft));\r\n      if (wasPlaying) {\r\n        channel.master.play();\r\n      }\r\n    });\r\n  }\r\n\r\n  clearState(channel) {\r\n    channel.slave.load(null, []);\r\n    if (channel.barsElements) {\r\n      channel.barsElements.forEach(htmlElement => htmlElement.remove());\r\n    }\r\n  }\r\n\r\n  startSync = channel => {\r\n    channel.syncHandle = setInterval(() => {\r\n      channel.slave.drawer.progress(\r\n        channel.master.getCurrentTime() / channel.currentDuration\r\n      );\r\n    }, 100);\r\n  };*/\r\n\r\n\r\n  createBars(channel, {bpm, offset}){\r\n    let wrapper = channel.master.drawer.wrapper;\r\n    let styleApply = WaveSurfer.Drawer.style;\r\n    let minPxPerSec = config.master().minPxPerSec;\r\n    let bitLength = getBeatLength(bpm);\r\n\r\n    let barPostions = [];\r\n\r\n    for (let i = offset; i < channel.master.getDuration(); i += bitLength) {\r\n      barPostions.push(i);\r\n    }\r\n\r\n    let barStyle = position => ({\r\n      position: \"absolute\",\r\n      left: position + \"px\",\r\n      top: \"0px\",\r\n      width: \"1px\",\r\n      maxWidth: \"1px\",\r\n      height: \"100%\",\r\n      background: \"rgba(255,255,255, 0.5)\"\r\n    });\r\n\r\n    channel.barsElements = [];\r\n    barPostions.forEach(position => {\r\n      let bar = document.createElement(\"div\");\r\n      let style = barStyle(minPxPerSec * position);\r\n      styleApply(bar, style);\r\n      wrapper.appendChild(bar);\r\n      channel.barsElements.push(bar);\r\n    });\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}