{"ast":null,"code":"import store from \"./../../../store\";\nexport default class Mixer {\n  constructor(channels) {\n    this.config = store.getState().configuration.mixer;\n    this.channels = channels;\n    console.log('create  mixer');\n    this.initChannelContainer('audioNodes');\n    this.initChannelContainer('sampleBuffers');\n    this.createMainChannel();\n  }\n\n  connect(external) {\n    this.external = external;\n  }\n\n  initChannelContainer(containerName) {\n    this[containerName] = {\n      channels: {}\n    };\n\n    for (let channelName of [...this.channels.getChannelNames(), \"main\"]) {\n      this[containerName].channels = { ...this[containerName].channels,\n        [channelName]: null\n      };\n    }\n  }\n\n  createMainChannel() {\n    //main audio context with is share between wavesurfer objects\n    this.mainAudioContext = new AudioContext();\n    let ac = this.mainAudioContext;\n    let main = this.audioNodes.channels['main'];\n    main = {};\n    main.gainNode = ac.createGain();\n    main.analyserNode = ac.createAnalyser();\n    main.gainNode.connect(main.analyserNode);\n    main.analyserNode.connect(ac.destination);\n  }\n\n  getChannelInterface(channelName) {\n    return {\n      getPeakMeter: () => this.getPeakMeter(channelName)\n    };\n  }\n\n  setUpChannelsAudioNodes(channelName) {\n    //surfer - waveSurfer obj\n    let surfer = this.channels.getChannel(channelName);\n    let audioCtx = surfer.backend.ac; //chained from up to down \n\n    this.audioNodes.channels[channelName] = {\n      eqHiFilterNode: audioCtx.createBiquadFilter(),\n      eqMidFilterNode: audioCtx.createBiquadFilter(),\n      eqLowFilterNode: audioCtx.createBiquadFilter(),\n      //low pass to do\n      //hi pass to do\n      sendNode: audioCtx.createGain(),\n      sendAndReturn: {\n        1: {\n          send: audioCtx.createGain(),\n          return: null\n        },\n        2: {\n          send: audioCtx.createGain(),\n          return: null\n        }\n      },\n      //\n      bypassNode: audioCtx.createGain(),\n      mainGainNode: audioCtx.createGain(),\n      analyserNode: audioCtx.createAnalyser(),\n      faderVolumeNode: audioCtx.createGain()\n    }; //--Confign\n\n    const channelNodes = this.audioNodes.channels[channelName]; //\n\n    channelNodes.analyserNode.fftSize = 256; //--EQ\n\n    channelNodes.eqLowFilterNode.type = \"lowshelf\";\n    channelNodes.eqLowFilterNode.frequency.setValueAtTime(this.config.low.frequency, audioCtx.currentTime);\n    channelNodes.eqHiFilterNode.type = \"highshelf\";\n    channelNodes.eqHiFilterNode.frequency.setValueAtTime(this.config.hi.frequency, audioCtx.currentTime);\n    channelNodes.eqMidFilterNode.type = \"peaking\";\n    channelNodes.eqMidFilterNode.frequency.setValueAtTime(this.config.mid.frequency, audioCtx.currentTime);\n    channelNodes.eqMidFilterNode.Q.setValueAtTime(this.config.mid.Q, audioCtx.currentTime); //--Filters\n    //--Send and return\n\n    channelNodes.sendNode.connect(channelNodes.sendAndReturn[1].send);\n    channelNodes.sendNode.connect(channelNodes.sendAndReturn[2].send);\n    const sendNodes = [channelNodes.sendAndReturn[1].send, channelNodes.sendAndReturn[2].send];\n\n    if (this.external && this.external.connect) {\n      const [return1Node, return2Node] = this.external.connect(sendNodes);\n\n      if (return1Node instanceof AudioNode && return2Node instanceof AudioNode) {\n        return1Node.connect(channelNodes.mainGainNode);\n        return2Node.connect(channelNodes.mainGainNode);\n        channelNodes.sendAndReturn[1].return = return1Node;\n        channelNodes.sendAndReturn[2].return = return2Node;\n      }\n    } //Assign in chain \n\n\n    this.channels.getChannel(channelName).backend.setFilters([channelNodes.eqLowFilterNode, channelNodes.eqHiFilterNode, channelNodes.eqMidFilterNode, channelNodes.sendNode, channelNodes.bypassNode, channelNodes.mainGainNode, channelNodes.analyserNode, channelNodes.faderVolumeNode]); //-Conect to main output mixer channel\n\n    surfer.backend.gainNode.disconnect();\n    surfer.backend.gainNode.connect(this.mainAudioContext.destination);\n    this.setUpSampleBuffers(channelName);\n  }\n\n  setGainValue(channelName, knobValue, nodeName) {\n    let gain = 1 + knobValue / 100;\n    let audioCtx = this.channels.getChannel(channelName).backend.ac;\n    let channel = this.audioNodes.channels[channelName];\n    channel[nodeName].gain.setTargetAtTime(parseFloat(gain), audioCtx.currentTime, 0.01);\n  }\n\n  setFilterValue(channelName, knobValue, nodeName) {\n    let audioCtx = this.channels.getChannel(channelName).backend.ac;\n    let channel = this.audioNodes.channels[channelName];\n    channel[nodeName].gain.setValueAtTime(knobValue, audioCtx.currentTime);\n  }\n\n  setGain(channelName, knobValue) {\n    this.setGainValue(channelName, knobValue, 'mainGainNode');\n  }\n\n  setEqHigh(channelName, knobValue) {\n    this.setFilterValue(channelName, knobValue, 'eqHiFilterNode');\n  }\n\n  setEqMid(channelName, knobValue) {\n    this.setFilterValue(channelName, knobValue, 'eqMidFilterNode');\n  }\n\n  setEqLow(channelName, knobValue) {\n    this.setFilterValue(channelName, knobValue, 'eqLowFilterNode');\n  }\n\n  setFader(value) {\n    //in procent from -50%  to + 50% (not 0.01) but 1\n    let faderVolumeNodeA = this.audioNodes.channels[\"A\"].faderVolumeNode;\n    let faderVolumeNodeB = this.audioNodes.channels[\"B\"].faderVolumeNode;\n    let audioCtxA = this.channels.getChannel(\"A\").backend.ac;\n    let audioCtxB = this.channels.getChannel(\"B\").backend.ac;\n\n    if (!faderVolumeNodeA || !faderVolumeNodeB || !audioCtxA || !audioCtxB) {\n      throw new Error(`Fader value not set. Mising auiodContext or AudioNode ref\n                            .Checkout funtion setFader in mixer object`);\n    }\n\n    let percent = (value + 50) / 100;\n    let volA = Math.cos(percent * 0.5 * Math.PI);\n    let volB = Math.cos((1 - percent) * 0.5 * Math.PI);\n    faderVolumeNodeA.gain.setTargetAtTime(volA, audioCtxA.currentTime, 0.01);\n    faderVolumeNodeB.gain.setTargetAtTime(volB, audioCtxB.currentTime, 0.01);\n  }\n\n  setUpSampleBuffers(channelName) {\n    let fftSize = this.audioNodes.channels[channelName].analyserNode.fftSize;\n    this.sampleBuffers.channels[channelName] = new Float32Array(fftSize);\n  }\n\n  getPeakMeter(channelName) {\n    var _this$audioNodes, _this$audioNodes$chan;\n\n    let analyser = (_this$audioNodes = this.audioNodes) === null || _this$audioNodes === void 0 ? void 0 : (_this$audioNodes$chan = _this$audioNodes.channels[channelName]) === null || _this$audioNodes$chan === void 0 ? void 0 : _this$audioNodes$chan.analyserNode;\n\n    if (!analyser) {\n      return [];\n    }\n\n    let sampleBuffer = this.sampleBuffers.channels[channelName];\n\n    if (!sampleBuffer) {\n      return [];\n    }\n\n    return this.getAnalyserData(analyser, sampleBuffer);\n  }\n\n  getAnalyserData(analyser, sampleBuffer) {\n    analyser.getFloatTimeDomainData(sampleBuffer); //average \n\n    let sumOfSquares = 0;\n\n    for (let i = 0; i < sampleBuffer.length; i++) {\n      sumOfSquares += sampleBuffer[i] ** 2;\n    }\n\n    const avgPowerDecibels = 10 * Math.log10(sumOfSquares / sampleBuffer.length); //peak \n\n    let peakPower = 0;\n\n    for (let i = 0; i < sampleBuffer.length; i++) {\n      const power = sampleBuffer[i] ** 2;\n      peakPower = Math.max(power, peakPower);\n    }\n\n    const peakPowerDecibels = 10 * Math.log10(peakPower);\n    return {\n      avgdB: avgPowerDecibels,\n      peakdB: peakPowerDecibels\n    };\n  }\n\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/core/console/mixer/mixer.js"],"names":["store","Mixer","constructor","channels","config","getState","configuration","mixer","console","log","initChannelContainer","createMainChannel","connect","external","containerName","channelName","getChannelNames","mainAudioContext","AudioContext","ac","main","audioNodes","gainNode","createGain","analyserNode","createAnalyser","destination","getChannelInterface","getPeakMeter","setUpChannelsAudioNodes","surfer","getChannel","audioCtx","backend","eqHiFilterNode","createBiquadFilter","eqMidFilterNode","eqLowFilterNode","sendNode","sendAndReturn","send","return","bypassNode","mainGainNode","faderVolumeNode","channelNodes","fftSize","type","frequency","setValueAtTime","low","currentTime","hi","mid","Q","sendNodes","return1Node","return2Node","AudioNode","setFilters","disconnect","setUpSampleBuffers","setGainValue","knobValue","nodeName","gain","channel","setTargetAtTime","parseFloat","setFilterValue","setGain","setEqHigh","setEqMid","setEqLow","setFader","value","faderVolumeNodeA","faderVolumeNodeB","audioCtxA","audioCtxB","Error","percent","volA","Math","cos","PI","volB","sampleBuffers","Float32Array","analyser","sampleBuffer","getAnalyserData","getFloatTimeDomainData","sumOfSquares","i","length","avgPowerDecibels","log10","peakPower","power","max","peakPowerDecibels","avgdB","peakdB"],"mappings":"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","sourcesContent":["import store from \"./../../../store\";\r\n\r\n\r\nexport default class Mixer {\r\n    constructor(channels) {\r\n        this.config = store.getState().configuration.mixer;\r\n\r\n        this.channels = channels;\r\n\r\n        console.log('create  mixer')\r\n        this.initChannelContainer('audioNodes');\r\n        this.initChannelContainer('sampleBuffers');\r\n        this.createMainChannel();\r\n    }\r\n\r\n    connect(external) {\r\n        this.external = external;\r\n    }\r\n\r\n    initChannelContainer(containerName) {\r\n        this[containerName] = {\r\n            channels: {\r\n            }\r\n        }\r\n        for (let channelName of [...this.channels.getChannelNames(), \"main\"]) {\r\n            this[containerName].channels = {\r\n                ...this[containerName].channels,\r\n                [channelName]: null\r\n            }\r\n        }\r\n    }\r\n\r\n    createMainChannel() {\r\n        //main audio context with is share between wavesurfer objects\r\n        this.mainAudioContext = new AudioContext();\r\n\r\n        let ac = this.mainAudioContext;\r\n        let main = this.audioNodes.channels['main'];\r\n        main = {};\r\n\r\n        main.gainNode = ac.createGain();\r\n        main.analyserNode = ac.createAnalyser();\r\n        main.gainNode.connect(main.analyserNode);\r\n        main.analyserNode.connect(ac.destination);\r\n    }\r\n\r\n\r\n    getChannelInterface(channelName) {\r\n        return {\r\n            getPeakMeter: () => this.getPeakMeter(channelName),\r\n        }\r\n    }\r\n\r\n\r\n\r\n    setUpChannelsAudioNodes(channelName) {\r\n        //surfer - waveSurfer obj\r\n        let surfer = this.channels.getChannel(channelName)\r\n        let audioCtx = surfer.backend.ac;\r\n\r\n        //chained from up to down \r\n        this.audioNodes.channels[channelName] = {\r\n            eqHiFilterNode: audioCtx.createBiquadFilter(),\r\n            eqMidFilterNode: audioCtx.createBiquadFilter(),\r\n            eqLowFilterNode: audioCtx.createBiquadFilter(),\r\n            //low pass to do\r\n            //hi pass to do\r\n            sendNode: audioCtx.createGain(),\r\n            sendAndReturn : {\r\n                1 : {\r\n                    send : audioCtx.createGain(),\r\n                    return : null\r\n                },\r\n                2 : {\r\n                    send : audioCtx.createGain(),\r\n                    return : null\r\n                }\r\n            },\r\n\r\n            //\r\n            bypassNode: audioCtx.createGain(),\r\n            mainGainNode: audioCtx.createGain(),\r\n            analyserNode: audioCtx.createAnalyser(),\r\n            faderVolumeNode: audioCtx.createGain(),\r\n        }\r\n\r\n        //--Confign\r\n        const channelNodes = this.audioNodes.channels[channelName];\r\n        //\r\n        channelNodes.analyserNode.fftSize = 256;\r\n        //--EQ\r\n        channelNodes.eqLowFilterNode.type = \"lowshelf\";\r\n        channelNodes.eqLowFilterNode.frequency.setValueAtTime(this.config.low.frequency, audioCtx.currentTime);\r\n\r\n        channelNodes.eqHiFilterNode.type = \"highshelf\";\r\n        channelNodes.eqHiFilterNode.frequency.setValueAtTime(this.config.hi.frequency, audioCtx.currentTime);\r\n\r\n        channelNodes.eqMidFilterNode.type = \"peaking\";\r\n        channelNodes.eqMidFilterNode.frequency.setValueAtTime(this.config.mid.frequency, audioCtx.currentTime);\r\n        channelNodes.eqMidFilterNode.Q.setValueAtTime(this.config.mid.Q, audioCtx.currentTime);\r\n        //--Filters\r\n\r\n        //--Send and return\r\n        channelNodes.sendNode.connect(channelNodes.sendAndReturn[1].send);\r\n        channelNodes.sendNode.connect(channelNodes.sendAndReturn[2].send);\r\n        const sendNodes = [channelNodes.sendAndReturn[1].send, channelNodes.sendAndReturn[2].send];\r\n        if(this.external && this.external.connect){\r\n            const [return1Node, return2Node] = this.external.connect(sendNodes);\r\n            if(return1Node instanceof AudioNode && return2Node instanceof AudioNode){\r\n                return1Node.connect(channelNodes.mainGainNode);\r\n                return2Node.connect(channelNodes.mainGainNode);\r\n                channelNodes.sendAndReturn[1].return = return1Node;\r\n                channelNodes.sendAndReturn[2].return = return2Node;\r\n            }\r\n        }\r\n\r\n        \r\n        //Assign in chain \r\n        this.channels.getChannel(channelName).backend.setFilters([\r\n            channelNodes.eqLowFilterNode,\r\n            channelNodes.eqHiFilterNode,\r\n            channelNodes.eqMidFilterNode,\r\n            channelNodes.sendNode,\r\n            channelNodes.bypassNode,\r\n            channelNodes.mainGainNode,\r\n            channelNodes.analyserNode,\r\n            channelNodes.faderVolumeNode,\r\n        ])\r\n\r\n        //-Conect to main output mixer channel\r\n        surfer.backend.gainNode.disconnect();\r\n        surfer.backend.gainNode.connect(this.mainAudioContext.destination);\r\n\r\n        this.setUpSampleBuffers(channelName);\r\n    }\r\n\r\n\r\n\r\n    setGainValue(channelName, knobValue, nodeName) {\r\n        let gain = 1 + knobValue / 100;\r\n        let audioCtx = this.channels.getChannel(channelName).backend.ac;\r\n\r\n        let channel = this.audioNodes.channels[channelName];\r\n        channel[nodeName].gain.setTargetAtTime(parseFloat(gain), audioCtx.currentTime, 0.01);\r\n    }\r\n\r\n    setFilterValue(channelName, knobValue, nodeName) {\r\n        let audioCtx = this.channels.getChannel(channelName).backend.ac;\r\n\r\n        let channel = this.audioNodes.channels[channelName];\r\n        channel[nodeName].gain.setValueAtTime(knobValue, audioCtx.currentTime);\r\n    }\r\n\r\n\r\n    setGain(channelName, knobValue) {\r\n        this.setGainValue(channelName, knobValue, 'mainGainNode');\r\n    }\r\n\r\n    setEqHigh(channelName, knobValue) {\r\n        this.setFilterValue(channelName, knobValue, 'eqHiFilterNode');\r\n    }\r\n\r\n    setEqMid(channelName, knobValue) {\r\n        this.setFilterValue(channelName, knobValue, 'eqMidFilterNode');\r\n    }\r\n\r\n    setEqLow(channelName, knobValue) {\r\n        this.setFilterValue(channelName, knobValue, 'eqLowFilterNode');\r\n    }\r\n\r\n    \r\n\r\n    setFader(value) {//in procent from -50%  to + 50% (not 0.01) but 1\r\n        let faderVolumeNodeA = this.audioNodes.channels[\"A\"].faderVolumeNode;\r\n        let faderVolumeNodeB = this.audioNodes.channels[\"B\"].faderVolumeNode;\r\n        let audioCtxA = this.channels.getChannel(\"A\").backend.ac;\r\n        let audioCtxB = this.channels.getChannel(\"B\").backend.ac;\r\n\r\n        if (!faderVolumeNodeA || !faderVolumeNodeB || !audioCtxA || !audioCtxB) {\r\n            throw new Error(`Fader value not set. Mising auiodContext or AudioNode ref\r\n                            .Checkout funtion setFader in mixer object`);\r\n        }\r\n\r\n        let percent = (value + 50) / 100;\r\n        let volA = Math.cos(percent * 0.5 * Math.PI);\r\n        let volB = Math.cos((1 - percent) * 0.5 * Math.PI);\r\n\r\n        faderVolumeNodeA.gain.setTargetAtTime(volA, audioCtxA.currentTime, 0.01);\r\n        faderVolumeNodeB.gain.setTargetAtTime(volB, audioCtxB.currentTime, 0.01);\r\n    }\r\n\r\n\r\n    setUpSampleBuffers(channelName) {\r\n        let fftSize = this.audioNodes.channels[channelName].analyserNode.fftSize;\r\n        this.sampleBuffers.channels[channelName] = new Float32Array(fftSize);\r\n    }\r\n\r\n    getPeakMeter(channelName) {\r\n        let analyser = this.audioNodes?.channels[channelName]?.analyserNode\r\n        if (!analyser) {\r\n            return [];\r\n        }\r\n        let sampleBuffer = this.sampleBuffers.channels[channelName];\r\n        if (!sampleBuffer) {\r\n            return [];\r\n        }\r\n        return this.getAnalyserData(analyser, sampleBuffer)\r\n    }\r\n\r\n    getAnalyserData(analyser, sampleBuffer) {\r\n        analyser.getFloatTimeDomainData(sampleBuffer);\r\n\r\n        //average \r\n        let sumOfSquares = 0;\r\n        for (let i = 0; i < sampleBuffer.length; i++) {\r\n            sumOfSquares += sampleBuffer[i] ** 2;\r\n        }\r\n\r\n        const avgPowerDecibels = 10 * Math.log10(sumOfSquares / sampleBuffer.length);\r\n\r\n        //peak \r\n\r\n        let peakPower = 0;\r\n        for (let i = 0; i < sampleBuffer.length; i++) {\r\n            const power = sampleBuffer[i] ** 2;\r\n            peakPower = Math.max(power, peakPower);\r\n        }\r\n        const peakPowerDecibels = 10 * Math.log10(peakPower);\r\n\r\n        return {\r\n            avgdB: avgPowerDecibels,\r\n            peakdB: peakPowerDecibels,\r\n        }\r\n    }\r\n\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}