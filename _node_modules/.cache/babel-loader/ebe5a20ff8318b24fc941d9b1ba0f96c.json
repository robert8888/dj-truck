{"ast":null,"code":"import _regeneratorRuntime from\"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\node_modules\\\\@babel\\\\runtime/regenerator\";var _marked=/*#__PURE__*/_regeneratorRuntime.mark(interceptPlayback),_marked2=/*#__PURE__*/_regeneratorRuntime.mark(handel);import{put,select,takeEvery}from\"redux-saga/effects\";import{ACTIONS,pushLog,updateEndTime,updateStartTime}from\"../../../actions\";import RECORD_STATE from\"./../../../reducers/console/recorder/stateDef\";import{Log}from\"./../../../utils/logger/logger\";export default function interceptPlayback(){return _regeneratorRuntime.wrap(function interceptPlayback$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return takeEvery(ACTIONS.TOGGLE_PLAY,handel);case 2:case\"end\":return _context.stop();}}},_marked);}var getChannelState=function getChannelState(state,channel){return state.console.channel[channel];};var isRecording=function isRecording(state){return state.recorder.recordingState===RECORD_STATE.RECORDING;};function handel(action){var channel,channelState,recording,paused;return _regeneratorRuntime.wrap(function handel$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.prev=0;channel=action.destination;_context2.next=4;return select(getChannelState,channel);case 4:channelState=_context2.sent;_context2.next=7;return select(isRecording);case 7:recording=_context2.sent;if(recording){_context2.next=10;break;}return _context2.abrupt(\"return\");case 10:paused=!channelState.playBackState.paused;if(!paused){_context2.next=16;break;}_context2.next=14;return put(updateStartTime(channelState.track.id));case 14:_context2.next=18;break;case 16:_context2.next=18;return put(updateEndTime(channelState.track.id));case 18:_context2.next=24;break;case 20:_context2.prev=20;_context2.t0=_context2[\"catch\"](0);_context2.next=24;return put(pushLog(Log.Error(['saga','recorder','tracklis','intercept toggle play action'],\"Can't updated start / end time :\"+_context2.t0.message,_context2.t0)));case 24:case\"end\":return _context2.stop();}}},_marked2,null,[[0,20]]);}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/sagas/recorder/tracklist/catchPlayback.js"],"names":["interceptPlayback","handel","put","select","takeEvery","ACTIONS","pushLog","updateEndTime","updateStartTime","RECORD_STATE","Log","TOGGLE_PLAY","getChannelState","state","channel","console","isRecording","recorder","recordingState","RECORDING","action","destination","channelState","recording","paused","playBackState","track","id","Error","message"],"mappings":"2JAKyBA,iB,iDAQfC,M,EAbV,OAASC,GAAT,CAAcC,MAAd,CAAsBC,SAAtB,KAAuC,oBAAvC,CACA,OAASC,OAAT,CAAkBC,OAAlB,CAA2BC,aAA3B,CAA0CC,eAA1C,KAAiE,kBAAjE,CACA,MAAOC,CAAAA,YAAP,KAAyB,+CAAzB,CACA,OAASC,GAAT,KAAoB,gCAApB,CAEA,cAAe,SAAUV,CAAAA,iBAAV,6IACX,MAAMI,CAAAA,SAAS,CAACC,OAAO,CAACM,WAAT,CAAsBV,MAAtB,CAAf,CADW,sDAIf,GAAMW,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACC,KAAD,CAAQC,OAAR,QAAoBD,CAAAA,KAAK,CAACE,OAAN,CAAcD,OAAd,CAAsBA,OAAtB,CAApB,EAAxB,CAEA,GAAME,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAAAH,KAAK,QAAIA,CAAAA,KAAK,CAACI,QAAN,CAAeC,cAAf,GAAkCT,YAAY,CAACU,SAAnD,EAAzB,CAEA,QAAUlB,CAAAA,MAAV,CAAiBmB,MAAjB,+KAEcN,OAFd,CAEwBM,MAAM,CAACC,WAF/B,kBAG6B,MAAMlB,CAAAA,MAAM,CAACS,eAAD,CAAkBE,OAAlB,CAAZ,CAH7B,OAGcQ,YAHd,iCAK0B,MAAMnB,CAAAA,MAAM,CAACa,WAAD,CAAZ,CAL1B,OAKcO,SALd,mBAMYA,SANZ,qEAQcC,MARd,CAQuB,CAACF,YAAY,CAACG,aAAb,CAA2BD,MARnD,KASWA,MATX,6CAUY,MAAMtB,CAAAA,GAAG,CAACM,eAAe,CAACc,YAAY,CAACI,KAAb,CAAmBC,EAApB,CAAhB,CAAT,CAVZ,0DAYY,MAAMzB,CAAAA,GAAG,CAACK,aAAa,CAACe,YAAY,CAACI,KAAb,CAAmBC,EAApB,CAAd,CAAT,CAZZ,+GAeQ,MAAMzB,CAAAA,GAAG,CAACI,OAAO,CAACI,GAAG,CAACkB,KAAJ,CACd,CAAC,MAAD,CAAS,UAAT,CAAqB,UAArB,CAAiC,8BAAjC,CADc,CAEd,mCAAqC,aAAMC,OAF7B,cAAD,CAAR,CAAT,CAfR","sourcesContent":["import { put, select, takeEvery } from \"redux-saga/effects\";\r\nimport { ACTIONS, pushLog, updateEndTime, updateStartTime } from \"../../../actions\";\r\nimport RECORD_STATE from \"./../../../reducers/console/recorder/stateDef\";\r\nimport { Log } from \"./../../../utils/logger/logger\";\r\n\r\nexport default function* interceptPlayback() {\r\n    yield takeEvery(ACTIONS.TOGGLE_PLAY, handel);\r\n}\r\n\r\nconst getChannelState = (state, channel) => state.console.channel[channel];\r\n\r\nconst isRecording = state => state.recorder.recordingState === RECORD_STATE.RECORDING; \r\n\r\nfunction* handel(action){   \r\n    try{\r\n        const channel = action.destination;\r\n        const channelState = yield select(getChannelState, channel)\r\n    \r\n        const recording = yield select(isRecording);\r\n        if(!recording) return;\r\n    \r\n        const paused = !channelState.playBackState.paused;\r\n        if(paused){\r\n            yield put(updateStartTime(channelState.track.id))\r\n        } else {\r\n            yield put(updateEndTime(channelState.track.id))\r\n        }\r\n    } catch(error){\r\n        yield put(pushLog(Log.Error(\r\n            ['saga', 'recorder', 'tracklis', 'intercept toggle play action'],\r\n            \"Can't updated start / end time :\" + error.message,\r\n            error\r\n        )))\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}