{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJEKTY\\\\APKI\\\\DjTruck\\\\djtruck\\\\src\\\\components\\\\search\\\\search.js\";\nimport React, { useState } from 'react';\nimport { connect } from \"react-redux\";\nimport { FormControl } from \"react-bootstrap\";\nimport SearchList from './serachList/SearchList.js';\nimport { searchInput } from \"./../../actions/actions.js\";\nimport \"./search.scss\";\n\nconst Search = props => {\n  const searchInputHandler = props.searchInput;\n  const [listOpen, setListOpen] = useState(false);\n\n  const closeList = () => setListOpen(false);\n\n  const openList = () => {\n    console.log(arguments);\n    setListOpen(true);\n  };\n\n  return React.createElement(\"div\", {\n    className: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, React.createElement(FormControl, {\n    className: \"search-control\",\n    type: \"text\",\n    placeholder: \"Tap in to serach on youtube\",\n    onChange: event => searchInputHandler(event.target.value),\n    onFocus: openList,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }), React.createElement(SearchList, {\n    open: listOpen,\n    closeListHandle: closeList,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }));\n};\n\nconst mapDispachToProps = dispach => ({\n  searchInput: text => dispach(searchInput(text))\n});\n\nexport default connect(null, mapDispachToProps)(Search);","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/components/search/search.js"],"names":["React","useState","connect","FormControl","SearchList","searchInput","Search","props","searchInputHandler","listOpen","setListOpen","closeList","openList","console","log","arguments","event","target","value","mapDispachToProps","dispach","text"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,SAASC,WAAT,QAA4B,iBAA5B;AACA,OAAOC,UAAP,MAAuB,4BAAvB;AAGA,SAASC,WAAT,QAA4B,4BAA5B;AAEA,OAAO,eAAP;;AAGA,MAAMC,MAAM,GAAGC,KAAK,IAAI;AACpB,QAAMC,kBAAkB,GAAGD,KAAK,CAACF,WAAjC;AACA,QAAM,CAACI,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAAC,KAAD,CAAxC;;AAEA,QAAMU,SAAS,GAAG,MAAMD,WAAW,CAAE,KAAF,CAAnC;;AACA,QAAME,QAAQ,GAAG,MAAM;AACnBC,IAAAA,OAAO,CAACC,GAAR,CAAYC,SAAZ;AACAL,IAAAA,WAAW,CAAE,IAAF,CAAX;AACH,GAHD;;AAKA,SACI;AAAK,IAAA,SAAS,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,oBAAC,WAAD;AAAa,IAAA,SAAS,EAAC,gBAAvB;AACA,IAAA,IAAI,EAAC,MADL;AAEA,IAAA,WAAW,EAAC,6BAFZ;AAGA,IAAA,QAAQ,EAAGM,KAAK,IAAIR,kBAAkB,CAACQ,KAAK,CAACC,MAAN,CAAaC,KAAd,CAHtC;AAIA,IAAA,OAAO,EAAEN,QAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADH,EAOG,oBAAC,UAAD;AACA,IAAA,IAAI,EAAGH,QADP;AAEA,IAAA,eAAe,EAAGE,SAFlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPH,CADJ;AAaH,CAvBD;;AAyBA,MAAMQ,iBAAiB,GAAGC,OAAO,KAAK;AAClCf,EAAAA,WAAW,EAAIgB,IAAD,IAAUD,OAAO,CAACf,WAAW,CAACgB,IAAD,CAAZ;AADG,CAAL,CAAjC;;AAIA,eAAenB,OAAO,CAAC,IAAD,EAAOiB,iBAAP,CAAP,CAAiCb,MAAjC,CAAf","sourcesContent":["import React, { useState } from 'react';\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { FormControl } from \"react-bootstrap\"\r\nimport SearchList from './serachList/SearchList.js';\r\n\r\n\r\nimport { searchInput } from \"./../../actions/actions.js\";\r\n\r\nimport \"./search.scss\";\r\n\r\n\r\nconst Search = props => {\r\n    const searchInputHandler = props.searchInput;\r\n    const [listOpen, setListOpen] = useState(false)\r\n\r\n    const closeList = () => setListOpen( false );\r\n    const openList = () => {\r\n        console.log(arguments)\r\n        setListOpen( true );\r\n    }\r\n\r\n    return (\r\n        <div className>\r\n           <FormControl className=\"search-control\"\r\n           type=\"text\" \r\n           placeholder=\"Tap in to serach on youtube\"\r\n           onChange={ event => searchInputHandler(event.target.value) }\r\n           onFocus={openList}\r\n           />\r\n           <SearchList \r\n           open={ listOpen }\r\n           closeListHandle={ closeList }/>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapDispachToProps = dispach => ({\r\n    searchInput : (text) => dispach(searchInput(text))\r\n})\r\n\r\nexport default connect(null, mapDispachToProps)(Search);"]},"metadata":{},"sourceType":"module"}