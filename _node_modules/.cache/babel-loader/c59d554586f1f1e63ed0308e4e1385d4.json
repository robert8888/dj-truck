{"ast":null,"code":"import React, { useMemo, useState, useEffect, useCallback, useContext } from \"react\";\nimport { getApi } from \"./../../../../apis/apiProvider\";\nimport { PLAYBACK_STATE } from \"./ListItem/PlaybackButton/PlaybackButton\"; //getRecordUrl\n\nexport const PlayerContext = React.createContext({\n  btnStateHandlers: {},\n  setProgressHandlers: [],\n  getProgressDataHandler: [],\n\n  setBtnCtrlHandler(id, handler) {\n    this.btnStateHandlers[id] = handler;\n  },\n\n  setBtnState(id, state) {\n    this.btnStateHandlers[id](state);\n  },\n\n  setProgressHandler(id, handler) {\n    if (this.setProgressHandlers[id]) {\n      this.setProgressHandlers[id].push(handler);\n    }\n\n    this.setProgressHandlers[id] = [handler];\n  },\n\n  setProgress(id, progress) {\n    for (let handler of this.setProgressHandlers[id]) {\n      handler(progress);\n    }\n  },\n\n  setProgressDataHandler(id, handler) {\n    this.getProgressDataHandler[id] = handler;\n  },\n\n  getProgress(id) {\n    return this.getProgressDataHandler[id]();\n  }\n\n});\nexport function useRecordPlayer() {\n  const [mediaElement, setMediaElement] = useState(null);\n  const [current, setCurrent] = useState(null);\n  const [progressUpdater, setProgressUpdater] = useState(null);\n  const ctrContext = useContext(PlayerContext);\n  const api = useMemo(() => {\n    return getApi('RecordsStore');\n  }, [getApi]);\n  useEffect(() => {\n    const medEl = document.createElement('audio');\n    medEl.autoplay = true;\n    medEl.preload = 'metadata';\n    setMediaElement(medEl);\n  }, [setMediaElement]);\n  const startUpdateProg = useCallback(() => {\n    const handler = setInterval(() => {}, 500);\n    setProgressUpdater(handler);\n  }, []);\n  const stopUpdateProg = useCallback(() => {\n    clearInterval(progressUpdater);\n  }, [progressUpdater]);\n  const playback = useCallback((id, pbState) => {\n    if (pbState === PLAYBACK_STATE.PLAY) {\n      mediaElement.src = api.getRecordUrl(id);\n      mediaElement.play();\n\n      if (current) {\n        ctrContext.setBtnState(current, PLAYBACK_STATE.PAUSE);\n      }\n\n      setCurrent(id);\n    } else if (pbState === PLAYBACK_STATE.PAUSE) {\n      mediaElement.pause();\n    }\n\n    console.log(id, pbState);\n  }, [mediaElement, api]);\n\n  function seek({\n    id,\n    filePosition,\n    progress,\n    duration\n  }) {\n    mediaElement.src = api.getRecordUrl(id, filePosition);\n    ctrContext.setBtnState(id, PLAYBACK_STATE.PLAY);\n    ctrContext.setProgress(id, progress);\n    setCurrent(id); // console.log(\"seek \", id , position)\n  }\n\n  return [playback, seek];\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/pages/common/components/RecordList/useRecordPlayer.js"],"names":["React","useMemo","useState","useEffect","useCallback","useContext","getApi","PLAYBACK_STATE","PlayerContext","createContext","btnStateHandlers","setProgressHandlers","getProgressDataHandler","setBtnCtrlHandler","id","handler","setBtnState","state","setProgressHandler","push","setProgress","progress","setProgressDataHandler","getProgress","useRecordPlayer","mediaElement","setMediaElement","current","setCurrent","progressUpdater","setProgressUpdater","ctrContext","api","medEl","document","createElement","autoplay","preload","startUpdateProg","setInterval","stopUpdateProg","clearInterval","playback","pbState","PLAY","src","getRecordUrl","play","PAUSE","pause","console","log","seek","filePosition","duration"],"mappings":"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","sourcesContent":["import React, { useMemo, useState, useEffect, useCallback, useContext } from \"react\"\r\nimport { getApi } from \"./../../../../apis/apiProvider\";\r\nimport {PLAYBACK_STATE} from \"./ListItem/PlaybackButton/PlaybackButton\";\r\n\r\n//getRecordUrl\r\nexport const PlayerContext = React.createContext({\r\n    btnStateHandlers: {},\r\n    setProgressHandlers:[],\r\n    getProgressDataHandler: [],\r\n\r\n    setBtnCtrlHandler(id, handler){\r\n        this.btnStateHandlers[id] = handler;\r\n    },\r\n\r\n    setBtnState(id, state){\r\n        this.btnStateHandlers[id](state)\r\n    },\r\n\r\n    setProgressHandler(id, handler){\r\n        if(this.setProgressHandlers[id]){\r\n            this.setProgressHandlers[id].push(handler);\r\n        }\r\n        this.setProgressHandlers[id] = [handler];\r\n    },\r\n\r\n    setProgress(id, progress){\r\n        for(let handler of this.setProgressHandlers[id]){\r\n            handler(progress)\r\n        }\r\n    },\r\n  \r\n    setProgressDataHandler(id, handler){\r\n        this.getProgressDataHandler[id] = handler;\r\n    },\r\n\r\n    getProgress(id){\r\n        return this.getProgressDataHandler[id]();\r\n    }\r\n})\r\n\r\nexport function useRecordPlayer(){\r\n    const [mediaElement, setMediaElement] = useState(null);\r\n    const [current, setCurrent] = useState(null);\r\n     const [progressUpdater, setProgressUpdater] = useState(null);\r\n    const ctrContext = useContext(PlayerContext);\r\n\r\n    const api = useMemo(()=>{\r\n        return getApi('RecordsStore');\r\n    }, [getApi])\r\n\r\n    useEffect(()=>{\r\n        const medEl = document.createElement('audio');\r\n        medEl.autoplay = true;\r\n        medEl.preload = 'metadata'\r\n        setMediaElement(medEl)\r\n    }, [setMediaElement])\r\n\r\n    const startUpdateProg = useCallback(()=>{\r\n        const handler = setInterval(()=>{\r\n\r\n        }, 500)\r\n        setProgressUpdater(handler)\r\n    }, [])\r\n\r\n    const stopUpdateProg = useCallback(()=>{\r\n        clearInterval(progressUpdater);\r\n    }, [progressUpdater])\r\n\r\n    const playback = useCallback((id, pbState)=>{\r\n        if(pbState === PLAYBACK_STATE.PLAY){\r\n            mediaElement.src = api.getRecordUrl(id);\r\n            mediaElement.play();\r\n            if(current){\r\n                ctrContext.setBtnState(current, PLAYBACK_STATE.PAUSE)\r\n            } \r\n            setCurrent(id);\r\n        } else if(pbState === PLAYBACK_STATE.PAUSE){\r\n            mediaElement.pause(); \r\n        }\r\n        console.log(id, pbState);\r\n    }, [mediaElement, api])\r\n\r\n    function seek({id, filePosition, progress, duration}){\r\n\r\n        mediaElement.src = api.getRecordUrl(id, filePosition);\r\n        ctrContext.setBtnState(id, PLAYBACK_STATE.PLAY);\r\n        ctrContext.setProgress(id, progress);\r\n        setCurrent(id);\r\n        // console.log(\"seek \", id , position)\r\n    }\r\n\r\n\r\n\r\n    return [playback, seek ]\r\n}"]},"metadata":{},"sourceType":"module"}