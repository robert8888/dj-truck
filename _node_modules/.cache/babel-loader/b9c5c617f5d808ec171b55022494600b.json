{"ast":null,"code":"import store from \"./../../../../store\";\nimport Observer from \"./observer/observer\";\nimport STATUS from \"./observer/STATUS\";\nimport Channels from \"./channels/channels\";\nimport Mixer from \"./mixer/mixer\";\nimport Effector from \"./effector/effector\";\nlet instance = null;\nexport default class Console {\n  constructor() {\n    console.log(\"Create consoel\");\n    store.subscribe(this.handleChange.bind(this));\n    this.dispatch = store.dispatch;\n    this.observer = new Observer(store);\n    this.channels = new Channels();\n    this.mixer = new Mixer(this.channels);\n    this.effector = new Effector(this.mixer.mainAudioContext);\n    this.mixer.connect(this.effector);\n  }\n\n  static Get() {\n    console.log(\"console instacne\", Console.instance);\n\n    if (!Console.instance) {\n      Console.instance = new Console();\n      console.log(\"created consoel instacee\", Console.instance);\n      return Console.instance;\n    } else {\n      return Console.instance;\n    }\n  }\n\n  getMixerChannelInterface(channelName) {\n    return this.mixer.getChannelInterface(channelName);\n  }\n\n  getChannelInterface(channelName) {\n    return this.channels.getChannelInterface(channelName);\n  }\n\n  createChannel(channelName, ...args) {\n    args.push(this.mixer.mainAudioContext);\n    this.channels.createChannel(channelName, ...args);\n    this.mixer.setUpChannelsAudioNodes(channelName);\n  }\n\n  handleChange() {\n    const storeChanges = this.observer.check();\n\n    for (let diff of storeChanges) {\n      this.callAction(diff);\n    }\n  }\n\n  callAction(diff) {\n    switch (diff.status) {\n      //-- PLAY BACK\n      case STATUS.TRACK_LOADED:\n        {\n          this.channels.loadTrack(diff.channel, diff.currentValue);\n          break;\n        }\n\n      case STATUS.TOGGLE_PLAY:\n        {\n          this.channels.togglePlay(diff.channel, diff.currentValue);\n          break;\n        }\n\n      case STATUS.TOGGLE_CUE:\n        {\n          this.channels.toggleCue(diff.channel, diff.currentValue);\n          break;\n        }\n      //----BPM AND SYNC\n\n      case STATUS.BPM_AND_OFFSET_READY:\n        {\n          this.channels.createBars(diff.channel, diff.currentValue);\n          break;\n        }\n\n      case STATUS.PITCH_CHANGE:\n        {\n          this.channels.adjustPitch(diff.channel, diff.currentValue);\n          break;\n        }\n\n      case STATUS.SYNC_ACTIVATE:\n        {\n          this.channels.sync(diff.channel);\n          break;\n        }\n      //---- MIXER \n\n      case STATUS.GAIN_CHANGE:\n        {\n          this.mixer.setGain(diff.channel, diff.currentValue);\n          break;\n        }\n\n      case STATUS.EQ_LOW_CHANGE:\n        {\n          this.mixer.setEqLow(diff.channel, diff.currentValue);\n          break;\n        }\n\n      case STATUS.EQ_MID_CHANGE:\n        {\n          this.mixer.setEqMid(diff.channel, diff.currentValue);\n          break;\n        }\n\n      case STATUS.EQ_HI_CHANGE:\n        {\n          this.mixer.setEqHigh(diff.channel, diff.currentValue);\n          break;\n        }\n\n      case STATUS.FILTER_CHANGE:\n        {\n          this.mixer.setFilterFreq(diff.channel, diff.currentValue);\n          break;\n        }\n\n      case STATUS.FILTER_RES_CHANGE:\n        {\n          this.mixer.setFiterResonas(diff.channel, diff.currentValue);\n          break;\n        }\n\n      case STATUS.SEND_CHANGE:\n        {\n          this.mixer.setSend(diff.channel, diff.send, diff.currentValue);\n          break;\n        }\n\n      case STATUS.FADER_CHANGE:\n        {\n          this.mixer.setFader(diff.currentValue);\n          break;\n        }\n      // -- LOOPER\n\n      case STATUS.LOOP_CHANGE:\n        {\n          if (diff.currentValue.state) {\n            this.channels.makeLoop(diff.channel, diff.currentValue);\n          } else {\n            this.channels.endLoop(diff.channel);\n          }\n\n          break;\n        }\n\n      case STATUS.LOOP_LENGTH_CHANGE:\n        {\n          this.channels.updateLoop(diff.channel, diff.currentValue);\n          break;\n        }\n      // -- EFFECTOR \n\n      case STATUS.DRY_WET_CHANGED:\n        {\n          this.effector.setDryWet(diff.channel, diff.currentValue);\n          break;\n        }\n\n      case STATUS.CURRENT_EFFECT_CHANGED:\n        {\n          this.effector.connectEffect(diff.channel, diff.currentValue);\n          break;\n        }\n\n      case STATUS.EFFECT_PARAM_CHANGED:\n        {\n          this.effector.setParam(diff.channel, diff.effect, diff.param);\n          break;\n        }\n      //------ MASTERING\n\n      case STATUS.MASTERING:\n        {\n          this.mixer.mastering.setMasterParam(diff.subStatus, diff.value);\n        }\n\n      default:\n        return;\n    }\n  }\n\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/pages/app/core/console/console.js"],"names":["store","Observer","STATUS","Channels","Mixer","Effector","instance","Console","constructor","console","log","subscribe","handleChange","bind","dispatch","observer","channels","mixer","effector","mainAudioContext","connect","Get","getMixerChannelInterface","channelName","getChannelInterface","createChannel","args","push","setUpChannelsAudioNodes","storeChanges","check","diff","callAction","status","TRACK_LOADED","loadTrack","channel","currentValue","TOGGLE_PLAY","togglePlay","TOGGLE_CUE","toggleCue","BPM_AND_OFFSET_READY","createBars","PITCH_CHANGE","adjustPitch","SYNC_ACTIVATE","sync","GAIN_CHANGE","setGain","EQ_LOW_CHANGE","setEqLow","EQ_MID_CHANGE","setEqMid","EQ_HI_CHANGE","setEqHigh","FILTER_CHANGE","setFilterFreq","FILTER_RES_CHANGE","setFiterResonas","SEND_CHANGE","setSend","send","FADER_CHANGE","setFader","LOOP_CHANGE","state","makeLoop","endLoop","LOOP_LENGTH_CHANGE","updateLoop","DRY_WET_CHANGED","setDryWet","CURRENT_EFFECT_CHANGED","connectEffect","EFFECT_PARAM_CHANGED","setParam","effect","param","MASTERING","mastering","setMasterParam","subStatus","value"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,qBAAlB;AACA,OAAOC,QAAP,MAAqB,qBAArB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,OAAOC,QAAP,MAAqB,qBAArB;AACA,OAAOC,KAAP,MAAkB,eAAlB;AACA,OAAOC,QAAP,MAAqB,qBAArB;AAEA,IAAIC,QAAQ,GAAC,IAAb;AAEA,eAAe,MAAMC,OAAN,CAAa;AAExBC,EAAAA,WAAW,GAAE;AACTC,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACAV,IAAAA,KAAK,CAACW,SAAN,CAAgB,KAAKC,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAAhB;AACA,SAAKC,QAAL,GAAgBd,KAAK,CAACc,QAAtB;AACA,SAAKC,QAAL,GAAgB,IAAId,QAAJ,CAAaD,KAAb,CAAhB;AAEA,SAAKgB,QAAL,GAAgB,IAAIb,QAAJ,EAAhB;AACA,SAAKc,KAAL,GAAa,IAAIb,KAAJ,CAAU,KAAKY,QAAf,CAAb;AACA,SAAKE,QAAL,GAAgB,IAAIb,QAAJ,CAAa,KAAKY,KAAL,CAAWE,gBAAxB,CAAhB;AACA,SAAKF,KAAL,CAAWG,OAAX,CAAmB,KAAKF,QAAxB;AAEH;;AAGD,SAAOG,GAAP,GAAY;AACRZ,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCH,OAAO,CAACD,QAAxC;;AACA,QAAG,CAACC,OAAO,CAACD,QAAZ,EAAqB;AACjBC,MAAAA,OAAO,CAACD,QAAR,GAAmB,IAAIC,OAAJ,EAAnB;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAAwCH,OAAO,CAACD,QAAhD;AACA,aAAOC,OAAO,CAACD,QAAf;AACH,KAJD,MAIO;AACH,aAAOC,OAAO,CAACD,QAAf;AACH;AACJ;;AAEDgB,EAAAA,wBAAwB,CAACC,WAAD,EAAa;AACjC,WAAO,KAAKN,KAAL,CAAWO,mBAAX,CAA+BD,WAA/B,CAAP;AACH;;AAEDC,EAAAA,mBAAmB,CAACD,WAAD,EAAa;AAC5B,WAAO,KAAKP,QAAL,CAAcQ,mBAAd,CAAkCD,WAAlC,CAAP;AACH;;AAGDE,EAAAA,aAAa,CAACF,WAAD,EAAc,GAAGG,IAAjB,EAAsB;AAC/BA,IAAAA,IAAI,CAACC,IAAL,CAAU,KAAKV,KAAL,CAAWE,gBAArB;AACA,SAAKH,QAAL,CAAcS,aAAd,CAA4BF,WAA5B,EAAyC,GAAGG,IAA5C;AACA,SAAKT,KAAL,CAAWW,uBAAX,CAAmCL,WAAnC;AACH;;AAEDX,EAAAA,YAAY,GAAE;AACV,UAAMiB,YAAY,GAAG,KAAKd,QAAL,CAAce,KAAd,EAArB;;AACA,SAAI,IAAIC,IAAR,IAAgBF,YAAhB,EAA6B;AACzB,WAAKG,UAAL,CAAgBD,IAAhB;AACH;AACJ;;AAEDC,EAAAA,UAAU,CAACD,IAAD,EAAM;AAEZ,YAAOA,IAAI,CAACE,MAAZ;AACI;AAEA,WAAK/B,MAAM,CAACgC,YAAZ;AAA2B;AACvB,eAAKlB,QAAL,CAAcmB,SAAd,CAAwBJ,IAAI,CAACK,OAA7B,EAAsCL,IAAI,CAACM,YAA3C;AACA;AACH;;AAED,WAAKnC,MAAM,CAACoC,WAAZ;AAA0B;AACtB,eAAKtB,QAAL,CAAcuB,UAAd,CAAyBR,IAAI,CAACK,OAA9B,EAAuCL,IAAI,CAACM,YAA5C;AACA;AACH;;AACD,WAAKnC,MAAM,CAACsC,UAAZ;AAAyB;AACrB,eAAKxB,QAAL,CAAcyB,SAAd,CAAwBV,IAAI,CAACK,OAA7B,EAAsCL,IAAI,CAACM,YAA3C;AACA;AACH;AAED;;AACA,WAAKnC,MAAM,CAACwC,oBAAZ;AAAmC;AAC/B,eAAK1B,QAAL,CAAc2B,UAAd,CAAyBZ,IAAI,CAACK,OAA9B,EAAuCL,IAAI,CAACM,YAA5C;AACA;AACH;;AAED,WAAKnC,MAAM,CAAC0C,YAAZ;AAA2B;AACvB,eAAK5B,QAAL,CAAc6B,WAAd,CAA0Bd,IAAI,CAACK,OAA/B,EAAwCL,IAAI,CAACM,YAA7C;AACA;AACH;;AAED,WAAKnC,MAAM,CAAC4C,aAAZ;AAA4B;AACxB,eAAK9B,QAAL,CAAc+B,IAAd,CAAmBhB,IAAI,CAACK,OAAxB;AACA;AACH;AAED;;AACA,WAAKlC,MAAM,CAAC8C,WAAZ;AAA0B;AACtB,eAAK/B,KAAL,CAAWgC,OAAX,CAAmBlB,IAAI,CAACK,OAAxB,EAAiCL,IAAI,CAACM,YAAtC;AACA;AACH;;AACD,WAAKnC,MAAM,CAACgD,aAAZ;AAA4B;AACxB,eAAKjC,KAAL,CAAWkC,QAAX,CAAoBpB,IAAI,CAACK,OAAzB,EAAkCL,IAAI,CAACM,YAAvC;AACA;AACH;;AACD,WAAKnC,MAAM,CAACkD,aAAZ;AAA4B;AACxB,eAAKnC,KAAL,CAAWoC,QAAX,CAAoBtB,IAAI,CAACK,OAAzB,EAAkCL,IAAI,CAACM,YAAvC;AACA;AACH;;AACD,WAAKnC,MAAM,CAACoD,YAAZ;AAA2B;AACvB,eAAKrC,KAAL,CAAWsC,SAAX,CAAqBxB,IAAI,CAACK,OAA1B,EAAmCL,IAAI,CAACM,YAAxC;AACA;AACH;;AAED,WAAKnC,MAAM,CAACsD,aAAZ;AAA4B;AACxB,eAAKvC,KAAL,CAAWwC,aAAX,CAAyB1B,IAAI,CAACK,OAA9B,EAAuCL,IAAI,CAACM,YAA5C;AACA;AACH;;AAED,WAAKnC,MAAM,CAACwD,iBAAZ;AAAgC;AAC5B,eAAKzC,KAAL,CAAW0C,eAAX,CAA2B5B,IAAI,CAACK,OAAhC,EAAyCL,IAAI,CAACM,YAA9C;AACA;AACH;;AAED,WAAKnC,MAAM,CAAC0D,WAAZ;AAA0B;AACtB,eAAK3C,KAAL,CAAW4C,OAAX,CAAmB9B,IAAI,CAACK,OAAxB,EAAiCL,IAAI,CAAC+B,IAAtC,EAA4C/B,IAAI,CAACM,YAAjD;AACA;AACH;;AAED,WAAKnC,MAAM,CAAC6D,YAAZ;AAA2B;AACvB,eAAK9C,KAAL,CAAW+C,QAAX,CAAoBjC,IAAI,CAACM,YAAzB;AACA;AACH;AAGD;;AACA,WAAKnC,MAAM,CAAC+D,WAAZ;AAA0B;AACtB,cAAGlC,IAAI,CAACM,YAAL,CAAkB6B,KAArB,EAA2B;AACvB,iBAAKlD,QAAL,CAAcmD,QAAd,CAAuBpC,IAAI,CAACK,OAA5B,EAAqCL,IAAI,CAACM,YAA1C;AACH,WAFD,MAEO;AACH,iBAAKrB,QAAL,CAAcoD,OAAd,CAAsBrC,IAAI,CAACK,OAA3B;AACH;;AACD;AACH;;AAED,WAAKlC,MAAM,CAACmE,kBAAZ;AAAiC;AAC7B,eAAKrD,QAAL,CAAcsD,UAAd,CAAyBvC,IAAI,CAACK,OAA9B,EAAuCL,IAAI,CAACM,YAA5C;AACA;AACH;AAGD;;AACA,WAAKnC,MAAM,CAACqE,eAAZ;AAA8B;AAC1B,eAAKrD,QAAL,CAAcsD,SAAd,CAAwBzC,IAAI,CAACK,OAA7B,EAAsCL,IAAI,CAACM,YAA3C;AACA;AACH;;AAED,WAAKnC,MAAM,CAACuE,sBAAZ;AAAoC;AAChC,eAAKvD,QAAL,CAAcwD,aAAd,CAA4B3C,IAAI,CAACK,OAAjC,EAA0CL,IAAI,CAACM,YAA/C;AACA;AACH;;AAED,WAAKnC,MAAM,CAACyE,oBAAZ;AAAmC;AAC/B,eAAKzD,QAAL,CAAc0D,QAAd,CAAuB7C,IAAI,CAACK,OAA5B,EAAqCL,IAAI,CAAC8C,MAA1C,EAAkD9C,IAAI,CAAC+C,KAAvD;AACA;AACH;AAED;;AAEA,WAAK5E,MAAM,CAAC6E,SAAZ;AAAwB;AACpB,eAAK9D,KAAL,CAAW+D,SAAX,CAAqBC,cAArB,CAAoClD,IAAI,CAACmD,SAAzC,EAAoDnD,IAAI,CAACoD,KAAzD;AACH;;AAED;AAAU;AA9Gd;AAgHH;;AAnKuB","sourcesContent":["import store from \"./../../../../store\";\r\nimport Observer from \"./observer/observer\";\r\nimport STATUS from \"./observer/STATUS\";\r\n\r\nimport Channels from \"./channels/channels\";\r\nimport Mixer from \"./mixer/mixer\";\r\nimport Effector from \"./effector/effector\";\r\n\r\nlet instance=null; \r\n\r\nexport default class Console{\r\n\r\n    constructor(){\r\n        console.log(\"Create consoel\")\r\n        store.subscribe(this.handleChange.bind(this));\r\n        this.dispatch = store.dispatch;\r\n        this.observer = new Observer(store);\r\n\r\n        this.channels = new Channels();\r\n        this.mixer = new Mixer(this.channels);\r\n        this.effector = new Effector(this.mixer.mainAudioContext);\r\n        this.mixer.connect(this.effector);\r\n\r\n    }\r\n\r\n\r\n    static Get(){\r\n        console.log(\"console instacne\", Console.instance)\r\n        if(!Console.instance){\r\n            Console.instance = new Console();\r\n            console.log(\"created consoel instacee\", Console.instance)\r\n            return Console.instance;\r\n        } else {\r\n            return Console.instance;\r\n        }\r\n    }\r\n\r\n    getMixerChannelInterface(channelName){\r\n        return this.mixer.getChannelInterface(channelName);\r\n    }\r\n\r\n    getChannelInterface(channelName){\r\n        return this.channels.getChannelInterface(channelName);\r\n    }\r\n\r\n\r\n    createChannel(channelName, ...args){\r\n        args.push(this.mixer.mainAudioContext);\r\n        this.channels.createChannel(channelName, ...args);\r\n        this.mixer.setUpChannelsAudioNodes(channelName);\r\n    }\r\n\r\n    handleChange(){\r\n        const storeChanges = this.observer.check();\r\n        for(let diff of storeChanges){\r\n            this.callAction(diff);\r\n        }\r\n    }\r\n\r\n    callAction(diff){\r\n\r\n        switch(diff.status){\r\n            //-- PLAY BACK\r\n\r\n            case STATUS.TRACK_LOADED : {\r\n                this.channels.loadTrack(diff.channel, diff.currentValue);\r\n                break;\r\n            }\r\n\r\n            case STATUS.TOGGLE_PLAY : {\r\n                this.channels.togglePlay(diff.channel, diff.currentValue);\r\n                break;\r\n            }\r\n            case STATUS.TOGGLE_CUE : {\r\n                this.channels.toggleCue(diff.channel, diff.currentValue)\r\n                break;\r\n            }\r\n\r\n            //----BPM AND SYNC\r\n            case STATUS.BPM_AND_OFFSET_READY : {\r\n                this.channels.createBars(diff.channel, diff.currentValue);\r\n                break;\r\n            }\r\n            \r\n            case STATUS.PITCH_CHANGE : {\r\n                this.channels.adjustPitch(diff.channel, diff.currentValue)\r\n                break;\r\n            }\r\n\r\n            case STATUS.SYNC_ACTIVATE : {\r\n                this.channels.sync(diff.channel);\r\n                break;\r\n            }\r\n\r\n            //---- MIXER \r\n            case STATUS.GAIN_CHANGE : {\r\n                this.mixer.setGain(diff.channel, diff.currentValue);\r\n                break;\r\n            }\r\n            case STATUS.EQ_LOW_CHANGE : {\r\n                this.mixer.setEqLow(diff.channel, diff.currentValue);\r\n                break;\r\n            }\r\n            case STATUS.EQ_MID_CHANGE : {\r\n                this.mixer.setEqMid(diff.channel, diff.currentValue);\r\n                break;\r\n            }\r\n            case STATUS.EQ_HI_CHANGE : {\r\n                this.mixer.setEqHigh(diff.channel, diff.currentValue);\r\n                break;\r\n            }\r\n\r\n            case STATUS.FILTER_CHANGE : {\r\n                this.mixer.setFilterFreq(diff.channel, diff.currentValue);\r\n                break;\r\n            }\r\n\r\n            case STATUS.FILTER_RES_CHANGE : {\r\n                this.mixer.setFiterResonas(diff.channel, diff.currentValue);\r\n                break;\r\n            }\r\n\r\n            case STATUS.SEND_CHANGE : {\r\n                this.mixer.setSend(diff.channel, diff.send, diff.currentValue)\r\n                break;\r\n            }\r\n\r\n            case STATUS.FADER_CHANGE : {\r\n                this.mixer.setFader(diff.currentValue);\r\n                break;\r\n            }\r\n\r\n\r\n            // -- LOOPER\r\n            case STATUS.LOOP_CHANGE : {\r\n                if(diff.currentValue.state){\r\n                    this.channels.makeLoop(diff.channel, diff.currentValue);\r\n                } else {\r\n                    this.channels.endLoop(diff.channel);\r\n                }\r\n                break;\r\n            }\r\n\r\n            case STATUS.LOOP_LENGTH_CHANGE : {\r\n                this.channels.updateLoop(diff.channel, diff.currentValue);\r\n                break;\r\n            }\r\n\r\n\r\n            // -- EFFECTOR \r\n            case STATUS.DRY_WET_CHANGED : {\r\n                this.effector.setDryWet(diff.channel, diff.currentValue);\r\n                break;\r\n            }\r\n\r\n            case STATUS.CURRENT_EFFECT_CHANGED: {\r\n                this.effector.connectEffect(diff.channel, diff.currentValue)\r\n                break;\r\n            }\r\n\r\n            case STATUS.EFFECT_PARAM_CHANGED : {\r\n                this.effector.setParam(diff.channel, diff.effect, diff.param)\r\n                break;\r\n            }\r\n\r\n            //------ MASTERING\r\n\r\n            case STATUS.MASTERING : {\r\n                this.mixer.mastering.setMasterParam(diff.subStatus, diff.value);\r\n            }\r\n\r\n            default : return; \r\n        }\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}