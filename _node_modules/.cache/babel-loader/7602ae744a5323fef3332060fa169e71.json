{"ast":null,"code":"import _defineProperty from\"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";import _objectSpread from\"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import _toConsumableArray from\"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";import _classCallCheck from\"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import{setCueEnable}from\"./../../../../../actions\";import store from\"./../../../../../store\";import{nodeChain as audioNodeChain}from\"./../../../../../utils/sound/audioNodes\";import Cue from\"./cue\";import Equaliztion from\"./equalization\";import Fader from\"./fader\";import Mastering from\"./mastering\";import PeakMeters from\"./peakMeters\";import Recorder from\"./recorder/recorder\";var Mixer=/*#__PURE__*/function(){function Mixer(channels){_classCallCheck(this,Mixer);this.config=store.getState().configuration.mixer;this.channels=channels;this.mastering=new Mastering(this);Object.assign(this,Equaliztion);Object.assign(this,Fader);Object.assign(this,PeakMeters);Object.assign(this,Cue);this.initChannelContainer('audioNodes');this.initChannelContainer('sampleBuffers');this.createMainChannel();this.recorder=new Recorder(this);}//connecting extrnal (effector)\n_createClass(Mixer,[{key:\"connect\",value:function connect(external){this.external=external;}},{key:\"initChannelContainer\",value:function initChannelContainer(containerName){this[containerName]={channels:{}};for(var _i=0,_arr=[].concat(_toConsumableArray(this.channels.getChannelNames()),[\"main\"]);_i<_arr.length;_i++){var channelName=_arr[_i];this[containerName].channels=_objectSpread({},this[containerName].channels,_defineProperty({},channelName,null));}}},{key:\"createMainChannel\",value:function createMainChannel(){//main audio context with is share between wavesurfer objects\nthis.mainAudioContext=new AudioContext();var ac=this.mainAudioContext;var main=this.audioNodes.channels['main']={};ac.destination.channelCount=Math.min(4,ac.destination.maxChannelCount);if(ac.destination.channelCount===4){this.isCueEnable=true;setTimeout(function(){store.dispatch(setCueEnable(true));},0);}main.preGainNode=ac.createGain();main.preAnalyserNode=ac.createAnalyser();main.compressorNode=ac.createDynamicsCompressor();main.postGainNode=ac.createGain();main.postAnalyserNode=ac.createAnalyser();//cue\nmain.cueInput=ac.createGain();if(this.isCueEnable){main.cueChannelMerger=ac.createChannelMerger(ac.destination.channelCount);main.cueChannelMerger.channelCountMode=\"explicit\";main.cueInput.channelCountMode=\"explicit\";main.cueInput.channelCount=ac.destination.channelCount;main.cueChannelMerger.connect(main.cueInput);}main.recorderStremDestination=ac.createMediaStreamDestination();main.postGainNode.connect(main.recorderStremDestination);this.mastering.configCompressor();//wiring in chain\naudioNodeChain([main.preGainNode,main.preAnalyserNode,main.compressorNode,main.postGainNode,main.postAnalyserNode,main.cueInput,ac.destination]);}},{key:\"getChannelInterface\",value:function getChannelInterface(channelName){var _this=this;return{getPeakMeter:function getPeakMeter(){return _this.getChannelPeakMeter(channelName);}};}},{key:\"getMasteringInterface\",value:function getMasteringInterface(){return{getPrePeakMeter:{getPeakMeter:this.getMasterPeakMetter.bind(this,\"pre\")},getPostPeakMeter:{getPeakMeter:this.getMasterPeakMetter.bind(this,\"post\")}};}},{key:\"setUpChannelsAudioNodes\",value:function setUpChannelsAudioNodes(channelName){//surfer - waveSurfer obj\nvar surfer=this.channels.getChannel(channelName);var audioCtx=surfer.backend.ac;//build aduio nodes after, below chain in this order\nthis.audioNodes.channels[channelName]={outputCueNode:audioCtx.createGain(),cue:{cueGainNode:audioCtx.createGain(),cueChannelSpliterNode:audioCtx.createChannelSplitter(2)},eqHiFilterNode:audioCtx.createBiquadFilter(),eqMidFilterNode:audioCtx.createBiquadFilter(),eqLowFilterNode:audioCtx.createBiquadFilter(),lowPassFilterNode:audioCtx.createBiquadFilter(),highPassFilterNode:audioCtx.createBiquadFilter(),//\nsendNode:audioCtx.createGain(),sendAndReturns:Array(this.config.externalChannels).fill(1).map(function(){return{send:audioCtx.createGain(),return:null};}),//\nbypassNode:audioCtx.createGain(),mainGainNode:audioCtx.createGain(),analyserNode:audioCtx.createAnalyser(),faderVolumeNode:audioCtx.createGain()};//--Confign\nvar channelNodes=this.audioNodes.channels[channelName];//-- Cue\nchannelNodes.outputCueNode.connect(channelNodes.cue.cueGainNode);channelNodes.cue.cueGainNode.connect(channelNodes.cue.cueChannelSpliterNode);//connecting to main chanel\nif(this.isCueEnable){var mainChannelNodes=this.audioNodes.channels['main'];channelNodes.cue.cueChannelSpliterNode.connect(mainChannelNodes.cueChannelMerger,0,2);channelNodes.cue.cueChannelSpliterNode.connect(mainChannelNodes.cueChannelMerger,1,3);}//\nchannelNodes.analyserNode.fftSize=256;//--EQ filters\nchannelNodes.eqLowFilterNode.type=\"lowshelf\";channelNodes.eqLowFilterNode.frequency.setValueAtTime(this.config.low.frequency,audioCtx.currentTime);channelNodes.eqHiFilterNode.type=\"highshelf\";channelNodes.eqHiFilterNode.frequency.setValueAtTime(this.config.hi.frequency,audioCtx.currentTime);channelNodes.eqMidFilterNode.type=\"peaking\";channelNodes.eqMidFilterNode.frequency.setValueAtTime(this.config.mid.frequency,audioCtx.currentTime);channelNodes.eqMidFilterNode.Q.setValueAtTime(this.config.mid.Q,audioCtx.currentTime);//--Filters\nchannelNodes.lowPassFilterNode.type=\"lowpass\";channelNodes.lowPassFilterNode.frequency.setValueAtTime(24000,audioCtx.currentTime);channelNodes.highPassFilterNode.type=\"highpass\";channelNodes.highPassFilterNode.frequency.setValueAtTime(0,audioCtx.currentTime);//--Send and return\nchannelNodes.sendAndReturns.forEach(function(channel){channelNodes.sendNode.connect(channel.send);//mute on start\nchannel.send.gain.value=0;});var sends=channelNodes.sendAndReturns.map(function(channel){return channel.send;});if(this.external&&this.external.connect){var returns=this.external.connect(sends);returns.forEach(function(returnNode,index){returnNode.gain.value=0;channelNodes.sendAndReturns[index].return=returnNode;returnNode.connect(channelNodes.mainGainNode);});}//Assign in chain \nthis.channels.getChannel(channelName).backend.setFilters([channelNodes.outputCueNode,channelNodes.eqLowFilterNode,channelNodes.eqHiFilterNode,channelNodes.eqMidFilterNode,channelNodes.lowPassFilterNode,channelNodes.highPassFilterNode,channelNodes.sendNode,channelNodes.bypassNode,channelNodes.mainGainNode,channelNodes.analyserNode,channelNodes.faderVolumeNode]);//-Conect to main output mixer channel\nsurfer.backend.gainNode.disconnect();surfer.backend.gainNode.connect(this.audioNodes.channels['main'].preGainNode);this.setUpSampleBuffers(channelName);}},{key:\"setSend\",value:function setSend(channelName,sendNumber,value){var _this2=this;var sendAndReturns=this.audioNodes.channels[channelName].sendAndReturns;if(value===1){sendAndReturns._currentSends=sendAndReturns._currentSends?sendAndReturns._currentSends.add(sendNumber):new Set([sendNumber]);}else if(value===0&&sendAndReturns._currentSends){sendAndReturns._currentSends.delete(sendNumber);}var gain=1;if(sendAndReturns._currentSends&&sendAndReturns._currentSends.size>1){gain*=Math.pow(0.71,sendAndReturns._currentSends.size-1);}sendAndReturns.forEach(function(channel,index){var send=channel.send,returns=channel.return;//current sending\nif(sendAndReturns._currentSends.has(index)){send.gain.setTargetAtTime(gain,_this2.mainAudioContext.currentTime,0.01);returns.gain.setTargetAtTime(gain,_this2.mainAudioContext.currentTime,0.01);}else{send.gain.setTargetAtTime(0,_this2.mainAudioContext.currentTime,0.01);returns.gain.setTargetAtTime(0,_this2.mainAudioContext.currentTime,0.01);}});//turn on/off bypass\nvar bypass=+!sendAndReturns._currentSends.size;this.audioNodes.channels[channelName].bypassNode.gain.setTargetAtTime(bypass,this.mainAudioContext.currentTime,0.01);}}]);return Mixer;}();export{Mixer as default};","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/pages/console/core/console/mixer/mixer.js"],"names":["setCueEnable","store","nodeChain","audioNodeChain","Cue","Equaliztion","Fader","Mastering","PeakMeters","Recorder","Mixer","channels","config","getState","configuration","mixer","mastering","Object","assign","initChannelContainer","createMainChannel","recorder","external","containerName","getChannelNames","channelName","mainAudioContext","AudioContext","ac","main","audioNodes","destination","channelCount","Math","min","maxChannelCount","isCueEnable","setTimeout","dispatch","preGainNode","createGain","preAnalyserNode","createAnalyser","compressorNode","createDynamicsCompressor","postGainNode","postAnalyserNode","cueInput","cueChannelMerger","createChannelMerger","channelCountMode","connect","recorderStremDestination","createMediaStreamDestination","configCompressor","getPeakMeter","getChannelPeakMeter","getPrePeakMeter","getMasterPeakMetter","bind","getPostPeakMeter","surfer","getChannel","audioCtx","backend","outputCueNode","cue","cueGainNode","cueChannelSpliterNode","createChannelSplitter","eqHiFilterNode","createBiquadFilter","eqMidFilterNode","eqLowFilterNode","lowPassFilterNode","highPassFilterNode","sendNode","sendAndReturns","Array","externalChannels","fill","map","send","return","bypassNode","mainGainNode","analyserNode","faderVolumeNode","channelNodes","mainChannelNodes","fftSize","type","frequency","setValueAtTime","low","currentTime","hi","mid","Q","forEach","channel","gain","value","sends","returns","returnNode","index","setFilters","gainNode","disconnect","setUpSampleBuffers","sendNumber","_currentSends","add","Set","delete","size","has","setTargetAtTime","bypass"],"mappings":"ikBAAA,OAASA,YAAT,KAA6B,0BAA7B,CACA,MAAOC,CAAAA,KAAP,KAAkB,wBAAlB,CACA,OAASC,SAAS,GAAIC,CAAAA,cAAtB,KAA4C,yCAA5C,CACA,MAAOC,CAAAA,GAAP,KAAgB,OAAhB,CACA,MAAOC,CAAAA,WAAP,KAAwB,gBAAxB,CACA,MAAOC,CAAAA,KAAP,KAAkB,SAAlB,CACA,MAAOC,CAAAA,SAAP,KAAsB,aAAtB,CACA,MAAOC,CAAAA,UAAP,KAAuB,cAAvB,CACA,MAAOC,CAAAA,QAAP,KAAqB,qBAArB,C,GAGqBC,CAAAA,K,yBACjB,eAAYC,QAAZ,CAAsB,6BAClB,KAAKC,MAAL,CAAcX,KAAK,CAACY,QAAN,GAAiBC,aAAjB,CAA+BC,KAA7C,CAEA,KAAKJ,QAAL,CAAgBA,QAAhB,CACA,KAAKK,SAAL,CAAiB,GAAIT,CAAAA,SAAJ,CAAc,IAAd,CAAjB,CAGAU,MAAM,CAACC,MAAP,CAAc,IAAd,CAAoBb,WAApB,EACAY,MAAM,CAACC,MAAP,CAAc,IAAd,CAAoBZ,KAApB,EACAW,MAAM,CAACC,MAAP,CAAc,IAAd,CAAoBV,UAApB,EACAS,MAAM,CAACC,MAAP,CAAc,IAAd,CAAoBd,GAApB,EAEA,KAAKe,oBAAL,CAA0B,YAA1B,EACA,KAAKA,oBAAL,CAA0B,eAA1B,EACA,KAAKC,iBAAL,GAEA,KAAKC,QAAL,CAAgB,GAAIZ,CAAAA,QAAJ,CAAa,IAAb,CAAhB,CACH,CAED;0DACQa,Q,CAAU,CACd,KAAKA,QAAL,CAAgBA,QAAhB,CACH,C,kEAEoBC,a,CAAe,CAChC,KAAKA,aAAL,EAAsB,CAClBZ,QAAQ,CAAE,EADQ,CAAtB,CAIA,+CAA4B,KAAKA,QAAL,CAAca,eAAd,EAA5B,GAA6D,MAA7D,uBAAsE,CAAjE,GAAIC,CAAAA,WAAW,SAAf,CACD,KAAKF,aAAL,EAAoBZ,QAApB,kBACO,KAAKY,aAAL,EAAoBZ,QAD3B,oBAEKc,WAFL,CAEmB,IAFnB,GAIH,CACJ,C,6DAEmB,CAChB;AACA,KAAKC,gBAAL,CAAwB,GAAIC,CAAAA,YAAJ,EAAxB,CAEA,GAAIC,CAAAA,EAAE,CAAG,KAAKF,gBAAd,CACA,GAAIG,CAAAA,IAAI,CAAG,KAAKC,UAAL,CAAgBnB,QAAhB,CAAyB,MAAzB,EAAmC,EAA9C,CAEAiB,EAAE,CAACG,WAAH,CAAeC,YAAf,CAA8BC,IAAI,CAACC,GAAL,CAAS,CAAT,CAAYN,EAAE,CAACG,WAAH,CAAeI,eAA3B,CAA9B,CAEA,GAAIP,EAAE,CAACG,WAAH,CAAeC,YAAf,GAAgC,CAApC,CAAuC,CACnC,KAAKI,WAAL,CAAmB,IAAnB,CACAC,UAAU,CAAC,UAAM,CACbpC,KAAK,CAACqC,QAAN,CAAetC,YAAY,CAAC,IAAD,CAA3B,EACH,CAFS,CAEP,CAFO,CAAV,CAGH,CAED6B,IAAI,CAACU,WAAL,CAAmBX,EAAE,CAACY,UAAH,EAAnB,CACAX,IAAI,CAACY,eAAL,CAAuBb,EAAE,CAACc,cAAH,EAAvB,CACAb,IAAI,CAACc,cAAL,CAAsBf,EAAE,CAACgB,wBAAH,EAAtB,CACAf,IAAI,CAACgB,YAAL,CAAoBjB,EAAE,CAACY,UAAH,EAApB,CACAX,IAAI,CAACiB,gBAAL,CAAwBlB,EAAE,CAACc,cAAH,EAAxB,CAEA;AACAb,IAAI,CAACkB,QAAL,CAAgBnB,EAAE,CAACY,UAAH,EAAhB,CACA,GAAI,KAAKJ,WAAT,CAAsB,CAClBP,IAAI,CAACmB,gBAAL,CAAwBpB,EAAE,CAACqB,mBAAH,CAAuBrB,EAAE,CAACG,WAAH,CAAeC,YAAtC,CAAxB,CAEAH,IAAI,CAACmB,gBAAL,CAAsBE,gBAAtB,CAAyC,UAAzC,CACArB,IAAI,CAACkB,QAAL,CAAcG,gBAAd,CAAiC,UAAjC,CACArB,IAAI,CAACkB,QAAL,CAAcf,YAAd,CAA6BJ,EAAE,CAACG,WAAH,CAAeC,YAA5C,CAEAH,IAAI,CAACmB,gBAAL,CAAsBG,OAAtB,CAA8BtB,IAAI,CAACkB,QAAnC,EACH,CAEDlB,IAAI,CAACuB,wBAAL,CAAgCxB,EAAE,CAACyB,4BAAH,EAAhC,CACAxB,IAAI,CAACgB,YAAL,CAAkBM,OAAlB,CAA0BtB,IAAI,CAACuB,wBAA/B,EAGA,KAAKpC,SAAL,CAAesC,gBAAf,GAEA;AACAnD,cAAc,CAAC,CACX0B,IAAI,CAACU,WADM,CAEXV,IAAI,CAACY,eAFM,CAGXZ,IAAI,CAACc,cAHM,CAIXd,IAAI,CAACgB,YAJM,CAKXhB,IAAI,CAACiB,gBALM,CAMXjB,IAAI,CAACkB,QANM,CAOXnB,EAAE,CAACG,WAPQ,CAAD,CAAd,CAQH,C,gEAEmBN,W,CAAa,gBAC7B,MAAO,CACH8B,YAAY,CAAE,8BAAM,CAAA,KAAI,CAACC,mBAAL,CAAyB/B,WAAzB,CAAN,EADX,CAAP,CAGH,C,qEAEuB,CACpB,MAAO,CACHgC,eAAe,CAAE,CACbF,YAAY,CAAE,KAAKG,mBAAL,CAAyBC,IAAzB,CAA8B,IAA9B,CAAoC,KAApC,CADD,CADd,CAIHC,gBAAgB,CAAE,CACdL,YAAY,CAAE,KAAKG,mBAAL,CAAyBC,IAAzB,CAA8B,IAA9B,CAAoC,MAApC,CADA,CAJf,CAAP,CASH,C,wEAEuBlC,W,CAAa,CACjC;AACA,GAAIoC,CAAAA,MAAM,CAAG,KAAKlD,QAAL,CAAcmD,UAAd,CAAyBrC,WAAzB,CAAb,CACA,GAAIsC,CAAAA,QAAQ,CAAGF,MAAM,CAACG,OAAP,CAAepC,EAA9B,CAEA;AACA,KAAKE,UAAL,CAAgBnB,QAAhB,CAAyBc,WAAzB,EAAwC,CACpCwC,aAAa,CAAEF,QAAQ,CAACvB,UAAT,EADqB,CAEpC0B,GAAG,CAAE,CACDC,WAAW,CAAEJ,QAAQ,CAACvB,UAAT,EADZ,CAED4B,qBAAqB,CAAEL,QAAQ,CAACM,qBAAT,CAA+B,CAA/B,CAFtB,CAF+B,CAMpCC,cAAc,CAAEP,QAAQ,CAACQ,kBAAT,EANoB,CAOpCC,eAAe,CAAET,QAAQ,CAACQ,kBAAT,EAPmB,CAQpCE,eAAe,CAAEV,QAAQ,CAACQ,kBAAT,EARmB,CASpCG,iBAAiB,CAAEX,QAAQ,CAACQ,kBAAT,EATiB,CAUpCI,kBAAkB,CAAEZ,QAAQ,CAACQ,kBAAT,EAVgB,CAWpC;AACAK,QAAQ,CAAEb,QAAQ,CAACvB,UAAT,EAZ0B,CAapCqC,cAAc,CAAEC,KAAK,CAAC,KAAKlE,MAAL,CAAYmE,gBAAb,CAAL,CAAoCC,IAApC,CAAyC,CAAzC,EAA4CC,GAA5C,CAAgD,iBAAO,CACnEC,IAAI,CAAEnB,QAAQ,CAACvB,UAAT,EAD6D,CAEnE2C,MAAM,CAAE,IAF2D,CAAP,EAAhD,CAboB,CAiBpC;AACAC,UAAU,CAAErB,QAAQ,CAACvB,UAAT,EAlBwB,CAmBpC6C,YAAY,CAAEtB,QAAQ,CAACvB,UAAT,EAnBsB,CAoBpC8C,YAAY,CAAEvB,QAAQ,CAACrB,cAAT,EApBsB,CAqBpC6C,eAAe,CAAExB,QAAQ,CAACvB,UAAT,EArBmB,CAAxC,CAwBA;AACA,GAAMgD,CAAAA,YAAY,CAAG,KAAK1D,UAAL,CAAgBnB,QAAhB,CAAyBc,WAAzB,CAArB,CACA;AACA+D,YAAY,CAACvB,aAAb,CAA2Bd,OAA3B,CAAmCqC,YAAY,CAACtB,GAAb,CAAiBC,WAApD,EACAqB,YAAY,CAACtB,GAAb,CAAiBC,WAAjB,CAA6BhB,OAA7B,CAAqCqC,YAAY,CAACtB,GAAb,CAAiBE,qBAAtD,EACA;AACA,GAAI,KAAKhC,WAAT,CAAsB,CAClB,GAAMqD,CAAAA,gBAAgB,CAAG,KAAK3D,UAAL,CAAgBnB,QAAhB,CAAyB,MAAzB,CAAzB,CACA6E,YAAY,CAACtB,GAAb,CAAiBE,qBAAjB,CAAuCjB,OAAvC,CAA+CsC,gBAAgB,CAACzC,gBAAhE,CAAkF,CAAlF,CAAqF,CAArF,EACAwC,YAAY,CAACtB,GAAb,CAAiBE,qBAAjB,CAAuCjB,OAAvC,CAA+CsC,gBAAgB,CAACzC,gBAAhE,CAAkF,CAAlF,CAAqF,CAArF,EACH,CACD;AACAwC,YAAY,CAACF,YAAb,CAA0BI,OAA1B,CAAoC,GAApC,CACA;AACAF,YAAY,CAACf,eAAb,CAA6BkB,IAA7B,CAAoC,UAApC,CACAH,YAAY,CAACf,eAAb,CAA6BmB,SAA7B,CAAuCC,cAAvC,CAAsD,KAAKjF,MAAL,CAAYkF,GAAZ,CAAgBF,SAAtE,CAAiF7B,QAAQ,CAACgC,WAA1F,EAEAP,YAAY,CAAClB,cAAb,CAA4BqB,IAA5B,CAAmC,WAAnC,CACAH,YAAY,CAAClB,cAAb,CAA4BsB,SAA5B,CAAsCC,cAAtC,CAAqD,KAAKjF,MAAL,CAAYoF,EAAZ,CAAeJ,SAApE,CAA+E7B,QAAQ,CAACgC,WAAxF,EAEAP,YAAY,CAAChB,eAAb,CAA6BmB,IAA7B,CAAoC,SAApC,CACAH,YAAY,CAAChB,eAAb,CAA6BoB,SAA7B,CAAuCC,cAAvC,CAAsD,KAAKjF,MAAL,CAAYqF,GAAZ,CAAgBL,SAAtE,CAAiF7B,QAAQ,CAACgC,WAA1F,EACAP,YAAY,CAAChB,eAAb,CAA6B0B,CAA7B,CAA+BL,cAA/B,CAA8C,KAAKjF,MAAL,CAAYqF,GAAZ,CAAgBC,CAA9D,CAAiEnC,QAAQ,CAACgC,WAA1E,EACA;AACAP,YAAY,CAACd,iBAAb,CAA+BiB,IAA/B,CAAsC,SAAtC,CACAH,YAAY,CAACd,iBAAb,CAA+BkB,SAA/B,CAAyCC,cAAzC,CAAwD,KAAxD,CAA+D9B,QAAQ,CAACgC,WAAxE,EAEAP,YAAY,CAACb,kBAAb,CAAgCgB,IAAhC,CAAuC,UAAvC,CACAH,YAAY,CAACb,kBAAb,CAAgCiB,SAAhC,CAA0CC,cAA1C,CAAyD,CAAzD,CAA4D9B,QAAQ,CAACgC,WAArE,EACA;AACAP,YAAY,CAACX,cAAb,CAA4BsB,OAA5B,CAAoC,SAACC,OAAD,CAAa,CAC7CZ,YAAY,CAACZ,QAAb,CAAsBzB,OAAtB,CAA8BiD,OAAO,CAAClB,IAAtC,EACA;AACAkB,OAAO,CAAClB,IAAR,CAAamB,IAAb,CAAkBC,KAAlB,CAA0B,CAA1B,CACH,CAJD,EAKA,GAAMC,CAAAA,KAAK,CAAGf,YAAY,CAACX,cAAb,CAA4BI,GAA5B,CAAgC,SAAAmB,OAAO,QAAIA,CAAAA,OAAO,CAAClB,IAAZ,EAAvC,CAAd,CACA,GAAI,KAAK5D,QAAL,EAAiB,KAAKA,QAAL,CAAc6B,OAAnC,CAA4C,CACxC,GAAMqD,CAAAA,OAAO,CAAG,KAAKlF,QAAL,CAAc6B,OAAd,CAAsBoD,KAAtB,CAAhB,CACAC,OAAO,CAACL,OAAR,CAAgB,SAACM,UAAD,CAAaC,KAAb,CAAuB,CACnCD,UAAU,CAACJ,IAAX,CAAgBC,KAAhB,CAAwB,CAAxB,CACAd,YAAY,CAACX,cAAb,CAA4B6B,KAA5B,EAAmCvB,MAAnC,CAA4CsB,UAA5C,CACAA,UAAU,CAACtD,OAAX,CAAmBqC,YAAY,CAACH,YAAhC,EACH,CAJD,EAKH,CAED;AACA,KAAK1E,QAAL,CAAcmD,UAAd,CAAyBrC,WAAzB,EAAsCuC,OAAtC,CAA8C2C,UAA9C,CAAyD,CACrDnB,YAAY,CAACvB,aADwC,CAErDuB,YAAY,CAACf,eAFwC,CAGrDe,YAAY,CAAClB,cAHwC,CAIrDkB,YAAY,CAAChB,eAJwC,CAKrDgB,YAAY,CAACd,iBALwC,CAMrDc,YAAY,CAACb,kBANwC,CAOrDa,YAAY,CAACZ,QAPwC,CAQrDY,YAAY,CAACJ,UARwC,CASrDI,YAAY,CAACH,YATwC,CAUrDG,YAAY,CAACF,YAVwC,CAWrDE,YAAY,CAACD,eAXwC,CAAzD,EAcA;AACA1B,MAAM,CAACG,OAAP,CAAe4C,QAAf,CAAwBC,UAAxB,GACAhD,MAAM,CAACG,OAAP,CAAe4C,QAAf,CAAwBzD,OAAxB,CACI,KAAKrB,UAAL,CAAgBnB,QAAhB,CAAyB,MAAzB,EAAiC4B,WADrC,EAGA,KAAKuE,kBAAL,CAAwBrF,WAAxB,EACH,C,wCAEOA,W,CAAasF,U,CAAYT,K,CAAO,iBACpC,GAAMzB,CAAAA,cAAc,CAAG,KAAK/C,UAAL,CAAgBnB,QAAhB,CAAyBc,WAAzB,EAAsCoD,cAA7D,CACA,GAAIyB,KAAK,GAAK,CAAd,CAAiB,CACbzB,cAAc,CAACmC,aAAf,CACKnC,cAAc,CAACmC,aAAhB,CAAiCnC,cAAc,CAACmC,aAAf,CAA6BC,GAA7B,CAAiCF,UAAjC,CAAjC,CAAgF,GAAIG,CAAAA,GAAJ,CAAQ,CAACH,UAAD,CAAR,CADpF,CAEH,CAHD,IAGO,IAAIT,KAAK,GAAK,CAAV,EAAezB,cAAc,CAACmC,aAAlC,CAAiD,CACpDnC,cAAc,CAACmC,aAAf,CAA6BG,MAA7B,CAAoCJ,UAApC,EACH,CAED,GAAIV,CAAAA,IAAI,CAAG,CAAX,CACA,GAAIxB,cAAc,CAACmC,aAAf,EAAgCnC,cAAc,CAACmC,aAAf,CAA6BI,IAA7B,CAAoC,CAAxE,CAA2E,CACvEf,IAAI,WAAI,IAAJ,CAAaxB,cAAc,CAACmC,aAAf,CAA6BI,IAA7B,CAAoC,CAAjD,CAAJ,CACH,CAEDvC,cAAc,CAACsB,OAAf,CAAuB,SAACC,OAAD,CAAUM,KAAV,CAAoB,IAC/BxB,CAAAA,IAD+B,CACLkB,OADK,CAC/BlB,IAD+B,CACjBsB,OADiB,CACLJ,OADK,CACzBjB,MADyB,CAEvC;AACA,GAAIN,cAAc,CAACmC,aAAf,CAA6BK,GAA7B,CAAiCX,KAAjC,CAAJ,CAA6C,CACzCxB,IAAI,CAACmB,IAAL,CAAUiB,eAAV,CAA0BjB,IAA1B,CAAgC,MAAI,CAAC3E,gBAAL,CAAsBqE,WAAtD,CAAmE,IAAnE,EACAS,OAAO,CAACH,IAAR,CAAaiB,eAAb,CAA6BjB,IAA7B,CAAmC,MAAI,CAAC3E,gBAAL,CAAsBqE,WAAzD,CAAsE,IAAtE,EACH,CAHD,IAGO,CACHb,IAAI,CAACmB,IAAL,CAAUiB,eAAV,CAA0B,CAA1B,CAA6B,MAAI,CAAC5F,gBAAL,CAAsBqE,WAAnD,CAAgE,IAAhE,EACAS,OAAO,CAACH,IAAR,CAAaiB,eAAb,CAA6B,CAA7B,CAAgC,MAAI,CAAC5F,gBAAL,CAAsBqE,WAAtD,CAAmE,IAAnE,EACH,CACJ,CAVD,EAYA;AACA,GAAMwB,CAAAA,MAAM,CAAG,CAAC,CAAC1C,cAAc,CAACmC,aAAf,CAA6BI,IAA9C,CACA,KAAKtF,UAAL,CAAgBnB,QAAhB,CAAyBc,WAAzB,EAAsC2D,UAAtC,CACKiB,IADL,CACUiB,eADV,CAC0BC,MAD1B,CACkC,KAAK7F,gBAAL,CAAsBqE,WADxD,CACqE,IADrE,EAEH,C,4BA3OgBrF,K","sourcesContent":["import { setCueEnable } from \"./../../../../../actions\";\r\nimport store from \"./../../../../../store\";\r\nimport { nodeChain as audioNodeChain } from \"./../../../../../utils/sound/audioNodes\";\r\nimport Cue from \"./cue\";\r\nimport Equaliztion from \"./equalization\";\r\nimport Fader from \"./fader\";\r\nimport Mastering from \"./mastering\";\r\nimport PeakMeters from \"./peakMeters\";\r\nimport Recorder from \"./recorder/recorder\";\r\n\r\n\r\nexport default class Mixer {\r\n    constructor(channels) {\r\n        this.config = store.getState().configuration.mixer;\r\n\r\n        this.channels = channels;\r\n        this.mastering = new Mastering(this);\r\n\r\n\r\n        Object.assign(this, Equaliztion);\r\n        Object.assign(this, Fader);\r\n        Object.assign(this, PeakMeters);\r\n        Object.assign(this, Cue);\r\n\r\n        this.initChannelContainer('audioNodes');\r\n        this.initChannelContainer('sampleBuffers');\r\n        this.createMainChannel();\r\n\r\n        this.recorder = new Recorder(this);\r\n    }\r\n\r\n    //connecting extrnal (effector)\r\n    connect(external) {\r\n        this.external = external;\r\n    }\r\n\r\n    initChannelContainer(containerName) {\r\n        this[containerName] = {\r\n            channels: {\r\n            }\r\n        }\r\n        for (let channelName of [...this.channels.getChannelNames(), \"main\"]) {\r\n            this[containerName].channels = {\r\n                ...this[containerName].channels,\r\n                [channelName]: null\r\n            }\r\n        }\r\n    }\r\n\r\n    createMainChannel() {\r\n        //main audio context with is share between wavesurfer objects\r\n        this.mainAudioContext = new AudioContext();\r\n\r\n        let ac = this.mainAudioContext;\r\n        let main = this.audioNodes.channels['main'] = {};\r\n\r\n        ac.destination.channelCount = Math.min(4, ac.destination.maxChannelCount);\r\n\r\n        if (ac.destination.channelCount === 4) {\r\n            this.isCueEnable = true;\r\n            setTimeout(() => {\r\n                store.dispatch(setCueEnable(true))\r\n            }, 0)\r\n        }\r\n\r\n        main.preGainNode = ac.createGain();\r\n        main.preAnalyserNode = ac.createAnalyser();\r\n        main.compressorNode = ac.createDynamicsCompressor();\r\n        main.postGainNode = ac.createGain();\r\n        main.postAnalyserNode = ac.createAnalyser();\r\n\r\n        //cue\r\n        main.cueInput = ac.createGain();\r\n        if (this.isCueEnable) {\r\n            main.cueChannelMerger = ac.createChannelMerger(ac.destination.channelCount);\r\n\r\n            main.cueChannelMerger.channelCountMode = \"explicit\";\r\n            main.cueInput.channelCountMode = \"explicit\";\r\n            main.cueInput.channelCount = ac.destination.channelCount;\r\n\r\n            main.cueChannelMerger.connect(main.cueInput);\r\n        }\r\n\r\n        main.recorderStremDestination = ac.createMediaStreamDestination();\r\n        main.postGainNode.connect(main.recorderStremDestination)\r\n\r\n\r\n        this.mastering.configCompressor();\r\n\r\n        //wiring in chain\r\n        audioNodeChain([\r\n            main.preGainNode,\r\n            main.preAnalyserNode,\r\n            main.compressorNode,\r\n            main.postGainNode,\r\n            main.postAnalyserNode,\r\n            main.cueInput,\r\n            ac.destination])\r\n    }\r\n\r\n    getChannelInterface(channelName) {\r\n        return {\r\n            getPeakMeter: () => this.getChannelPeakMeter(channelName),\r\n        }\r\n    }\r\n\r\n    getMasteringInterface() {\r\n        return {\r\n            getPrePeakMeter: {\r\n                getPeakMeter: this.getMasterPeakMetter.bind(this, \"pre\")\r\n            },\r\n            getPostPeakMeter: {\r\n                getPeakMeter: this.getMasterPeakMetter.bind(this, \"post\")\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    setUpChannelsAudioNodes(channelName) {\r\n        //surfer - waveSurfer obj\r\n        let surfer = this.channels.getChannel(channelName)\r\n        let audioCtx = surfer.backend.ac;\r\n\r\n        //build aduio nodes after, below chain in this order\r\n        this.audioNodes.channels[channelName] = {\r\n            outputCueNode: audioCtx.createGain(),\r\n            cue: {\r\n                cueGainNode: audioCtx.createGain(),\r\n                cueChannelSpliterNode: audioCtx.createChannelSplitter(2),\r\n            },\r\n            eqHiFilterNode: audioCtx.createBiquadFilter(),\r\n            eqMidFilterNode: audioCtx.createBiquadFilter(),\r\n            eqLowFilterNode: audioCtx.createBiquadFilter(),\r\n            lowPassFilterNode: audioCtx.createBiquadFilter(),\r\n            highPassFilterNode: audioCtx.createBiquadFilter(),\r\n            //\r\n            sendNode: audioCtx.createGain(),\r\n            sendAndReturns: Array(this.config.externalChannels).fill(1).map(() => ({\r\n                send: audioCtx.createGain(),\r\n                return: null\r\n            })),\r\n            //\r\n            bypassNode: audioCtx.createGain(),\r\n            mainGainNode: audioCtx.createGain(),\r\n            analyserNode: audioCtx.createAnalyser(),\r\n            faderVolumeNode: audioCtx.createGain(),\r\n        }\r\n\r\n        //--Confign\r\n        const channelNodes = this.audioNodes.channels[channelName];\r\n        //-- Cue\r\n        channelNodes.outputCueNode.connect(channelNodes.cue.cueGainNode);\r\n        channelNodes.cue.cueGainNode.connect(channelNodes.cue.cueChannelSpliterNode);\r\n        //connecting to main chanel\r\n        if (this.isCueEnable) {\r\n            const mainChannelNodes = this.audioNodes.channels['main']\r\n            channelNodes.cue.cueChannelSpliterNode.connect(mainChannelNodes.cueChannelMerger, 0, 2);\r\n            channelNodes.cue.cueChannelSpliterNode.connect(mainChannelNodes.cueChannelMerger, 1, 3);\r\n        }\r\n        //\r\n        channelNodes.analyserNode.fftSize = 256;\r\n        //--EQ filters\r\n        channelNodes.eqLowFilterNode.type = \"lowshelf\";\r\n        channelNodes.eqLowFilterNode.frequency.setValueAtTime(this.config.low.frequency, audioCtx.currentTime);\r\n\r\n        channelNodes.eqHiFilterNode.type = \"highshelf\";\r\n        channelNodes.eqHiFilterNode.frequency.setValueAtTime(this.config.hi.frequency, audioCtx.currentTime);\r\n\r\n        channelNodes.eqMidFilterNode.type = \"peaking\";\r\n        channelNodes.eqMidFilterNode.frequency.setValueAtTime(this.config.mid.frequency, audioCtx.currentTime);\r\n        channelNodes.eqMidFilterNode.Q.setValueAtTime(this.config.mid.Q, audioCtx.currentTime);\r\n        //--Filters\r\n        channelNodes.lowPassFilterNode.type = \"lowpass\";\r\n        channelNodes.lowPassFilterNode.frequency.setValueAtTime(24000, audioCtx.currentTime);\r\n\r\n        channelNodes.highPassFilterNode.type = \"highpass\";\r\n        channelNodes.highPassFilterNode.frequency.setValueAtTime(0, audioCtx.currentTime);\r\n        //--Send and return\r\n        channelNodes.sendAndReturns.forEach((channel) => {\r\n            channelNodes.sendNode.connect(channel.send);\r\n            //mute on start\r\n            channel.send.gain.value = 0;\r\n        });\r\n        const sends = channelNodes.sendAndReturns.map(channel => channel.send);\r\n        if (this.external && this.external.connect) {\r\n            const returns = this.external.connect(sends);\r\n            returns.forEach((returnNode, index) => {\r\n                returnNode.gain.value = 0;\r\n                channelNodes.sendAndReturns[index].return = returnNode;\r\n                returnNode.connect(channelNodes.mainGainNode);\r\n            })\r\n        }\r\n\r\n        //Assign in chain \r\n        this.channels.getChannel(channelName).backend.setFilters([\r\n            channelNodes.outputCueNode,\r\n            channelNodes.eqLowFilterNode,\r\n            channelNodes.eqHiFilterNode,\r\n            channelNodes.eqMidFilterNode,\r\n            channelNodes.lowPassFilterNode,\r\n            channelNodes.highPassFilterNode,\r\n            channelNodes.sendNode,\r\n            channelNodes.bypassNode,\r\n            channelNodes.mainGainNode,\r\n            channelNodes.analyserNode,\r\n            channelNodes.faderVolumeNode,\r\n        ])\r\n\r\n        //-Conect to main output mixer channel\r\n        surfer.backend.gainNode.disconnect();\r\n        surfer.backend.gainNode.connect(\r\n            this.audioNodes.channels['main'].preGainNode\r\n        );\r\n        this.setUpSampleBuffers(channelName);\r\n    }\r\n\r\n    setSend(channelName, sendNumber, value) {\r\n        const sendAndReturns = this.audioNodes.channels[channelName].sendAndReturns;\r\n        if (value === 1) {\r\n            sendAndReturns._currentSends =\r\n                (sendAndReturns._currentSends) ? sendAndReturns._currentSends.add(sendNumber) : new Set([sendNumber]);\r\n        } else if (value === 0 && sendAndReturns._currentSends) {\r\n            sendAndReturns._currentSends.delete(sendNumber);\r\n        }\r\n\r\n        let gain = 1;\r\n        if (sendAndReturns._currentSends && sendAndReturns._currentSends.size > 1) {\r\n            gain *= 0.71 ** (sendAndReturns._currentSends.size - 1);\r\n        }\r\n\r\n        sendAndReturns.forEach((channel, index) => {\r\n            const { send, return: returns } = channel;\r\n            //current sending\r\n            if (sendAndReturns._currentSends.has(index)) {\r\n                send.gain.setTargetAtTime(gain, this.mainAudioContext.currentTime, 0.01);\r\n                returns.gain.setTargetAtTime(gain, this.mainAudioContext.currentTime, 0.01);\r\n            } else {\r\n                send.gain.setTargetAtTime(0, this.mainAudioContext.currentTime, 0.01);\r\n                returns.gain.setTargetAtTime(0, this.mainAudioContext.currentTime, 0.01);\r\n            }\r\n        })\r\n\r\n        //turn on/off bypass\r\n        const bypass = +!sendAndReturns._currentSends.size;\r\n        this.audioNodes.channels[channelName].bypassNode\r\n            .gain.setTargetAtTime(bypass, this.mainAudioContext.currentTime, 0.01);\r\n    }\r\n\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}