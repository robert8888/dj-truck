{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJEKTY\\\\APKI\\\\DjTruck\\\\djtruck\\\\src\\\\pages\\\\app\\\\components\\\\Console\\\\Mixer\\\\Channel\\\\PeakLevelMeter\\\\PeakLevelMeter.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport Console from \"./../../../../../core/console/console\";\nimport \"./peak-level-meter.scss\"; // there is 20 leds indicators\n// 15 is blue and calc from bottom last 15 is zero dB.\n// scale range is between -40 dB and + 10 dB\n// this means that on led is 2.5 dB\n\nclass PeakLevelMater extends React.PureComponent {\n  constructor(...args) {\n    super(...args);\n    this.size = 30;\n    this.rightChannel = [];\n    this.leftChannel = [];\n    this.leftRefs = new Array(this.size);\n    this.rightRefs = new Array(this.size);\n\n    for (let i = 0; i < this.size; i++) {\n      this.leftRefs[i] = React.createRef();\n      this.rightRefs[i] = React.createRef();\n      this.rightChannel.push(React.createElement(\"div\", {\n        ref: this.rightRefs[i],\n        key: 'right-' + i,\n        className: \"level-meter-led right-bar led-\" + i,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }));\n      this.leftChannel.push(React.createElement(\"div\", {\n        ref: this.leftRefs[i],\n        key: 'left-' + i,\n        className: \"level-meter-led left-bar led-\" + i,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }));\n    }\n\n    this.mixerChannelInterface = Console.Get().getMixerChannelInterface(this.props.name);\n    this.breakFlag = false;\n    this.lastCall = 0;\n  }\n\n  updateLedStates() {\n    if (this.breakFlag) {\n      return;\n    }\n\n    requestAnimationFrame(this.updateLedStates.bind(this)); //throtell to 50ms\n\n    const now = new Date().getTime();\n\n    if (now - this.lastCall < 50) {\n      return;\n    }\n\n    this.lastCall = now; //drawing ...\n\n    let peakMeter = this.mixerChannelInterface.getPeakMeter();\n    let ledOn = 25 + peakMeter.peakdB / 2;\n\n    for (let i = 0; i < this.size; i++) {\n      this.leftRefs[i].current.classList.toggle(\"led--on\", i <= ledOn);\n      this.rightRefs[i].current.classList.toggle(\"led--on\", i <= ledOn);\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.chReady) {\n      this.breakFlag = false;\n      this.updateLedStates();\n    } else {\n      this.breakFlag = true;\n    }\n  }\n\n  componentWillUnmount() {\n    this.breakFlag = true;\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"peak-level-meter\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"meter-channel\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, this.leftChannel), React.createElement(\"div\", {\n      className: \"meter-channel\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, this.rightChannel));\n  }\n\n}\n\nconst mapStateToProps = (state, ownProps) => ({\n  chReady: state.console.channel[ownProps.name].playBackState.ready\n});\n\nexport default connect(mapStateToProps)(PeakLevelMater);","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/pages/app/components/Console/Mixer/Channel/PeakLevelMeter/PeakLevelMeter.js"],"names":["React","connect","Console","PeakLevelMater","PureComponent","constructor","args","size","rightChannel","leftChannel","leftRefs","Array","rightRefs","i","createRef","push","mixerChannelInterface","Get","getMixerChannelInterface","props","name","breakFlag","lastCall","updateLedStates","requestAnimationFrame","bind","now","Date","getTime","peakMeter","getPeakMeter","ledOn","peakdB","current","classList","toggle","componentDidUpdate","prevProps","chReady","componentWillUnmount","render","mapStateToProps","state","ownProps","console","channel","playBackState","ready"],"mappings":"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","sourcesContent":["import React from \"react\"\r\nimport { connect } from \"react-redux\"\r\nimport Console from \"./../../../../../core/console/console\";\r\nimport \"./peak-level-meter.scss\";\r\n// there is 20 leds indicators\r\n// 15 is blue and calc from bottom last 15 is zero dB.\r\n// scale range is between -40 dB and + 10 dB\r\n// this means that on led is 2.5 dB\r\n\r\nclass PeakLevelMater extends React.PureComponent {\r\n    constructor(...args) {\r\n        super(...args);\r\n        this.size = 30;\r\n\r\n\r\n        this.rightChannel = [];\r\n        this.leftChannel = [];\r\n\r\n        this.leftRefs = new Array(this.size);\r\n        this.rightRefs = new Array(this.size);\r\n\r\n        for (let i = 0; i < this.size; i++) {\r\n            this.leftRefs[i] = React.createRef();\r\n            this.rightRefs[i] = React.createRef();\r\n\r\n            this.rightChannel.push(\r\n                <div\r\n                    ref={this.rightRefs[i]}\r\n                    key={'right-' + i}\r\n                    className={\"level-meter-led right-bar led-\" + i} />\r\n            )\r\n            this.leftChannel.push(\r\n                <div\r\n                    ref={this.leftRefs[i]}\r\n                    key={'left-' + i}\r\n                    className={\"level-meter-led left-bar led-\" + i} />\r\n            )\r\n        }\r\n\r\n        this.mixerChannelInterface = Console.Get().getMixerChannelInterface(this.props.name);\r\n        this.breakFlag = false;\r\n        this.lastCall = 0;\r\n    }\r\n\r\n  \r\n    updateLedStates() {\r\n\r\n        if (this.breakFlag) {\r\n            return;\r\n        }\r\n\r\n        requestAnimationFrame(this.updateLedStates.bind(this));\r\n        //throtell to 50ms\r\n        const now = new Date().getTime();\r\n        if (now - this.lastCall < 50) {\r\n            return;\r\n        }\r\n        this.lastCall = now;\r\n\r\n        //drawing ...\r\n        let peakMeter = this.mixerChannelInterface.getPeakMeter();\r\n        let ledOn = 25 + peakMeter.peakdB / 2;\r\n\r\n        for (let i = 0; i < this.size; i++) {\r\n\r\n            this.leftRefs[i].current.classList.toggle(\"led--on\", (i <= ledOn))\r\n            this.rightRefs[i].current.classList.toggle(\"led--on\", (i <= ledOn))\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if(this.props.chReady){\r\n            this.breakFlag = false;\r\n            this.updateLedStates();\r\n        } else {\r\n            this.breakFlag = true;\r\n        }\r\n    }\r\n\r\n\r\n    componentWillUnmount() {\r\n        this.breakFlag = true;\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"peak-level-meter\">\r\n                <div className=\"meter-channel\">\r\n                    {this.leftChannel}\r\n                </div>\r\n                <div className=\"meter-channel\">\r\n                    {this.rightChannel}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => ({\r\n    chReady: state.console.channel[ownProps.name].playBackState.ready\r\n})\r\n\r\nexport default connect(mapStateToProps)(PeakLevelMater);"]},"metadata":{},"sourceType":"module"}