{"ast":null,"code":"import { ACTIONS } from \"../../actions\";\nimport { takeEvery, select } from \"redux-saga/effects\";\nimport { getApi } from \"./../../apis/apiProvider\";\nexport default function* requestUpdateRecord() {\n  yield takeEvery(ACTIONS.R_REC_FINAL_UPDATE, handel);\n}\n\nconst getToken = state => state.user.token;\n\nconst getTracklist = state => state.recorder.tracklist.filter(track => track.start !== undefined && track.start !== null).map(track => ({\n  id: track.id,\n  start: track.start,\n  end: track.end\n})).map(track => {\n  console.log(track);\n\n  if (!track.end) {\n    track.end = (new Date().getTime() - state.recorder.startTime) / 1000;\n  }\n\n  return track;\n});\n\nfunction* handel(action) {\n  const token = yield select(getToken);\n\n  if (token) {\n    try {\n      var _result$data;\n\n      const {\n        callQuery,\n        queries\n      } = getApi(\"UserAssets\");\n      const query = queries.updateRecordQl;\n      const variables = {};\n      ({\n        id: variables.id,\n        peaks: variables.peaks,\n        duration: variables.duration,\n        fileSize: variables.fileSize\n      } = action);\n      const tracks = yield select(getTracklist);\n      variables.tracks = tracks;\n      const result = yield callQuery(query, token, variables);\n      const succes = result === null || result === void 0 ? void 0 : (_result$data = result.data) === null || _result$data === void 0 ? void 0 : _result$data.updateRecord;\n\n      if (!result.errors && succes) {} else {\n        console.log('Update record metadata fail');\n      }\n    } catch {}\n  }\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/sagas/recorder/reqUpdateRecord.js"],"names":["ACTIONS","takeEvery","select","getApi","requestUpdateRecord","R_REC_FINAL_UPDATE","handel","getToken","state","user","token","getTracklist","recorder","tracklist","filter","track","start","undefined","map","id","end","console","log","Date","getTime","startTime","action","callQuery","queries","query","updateRecordQl","variables","peaks","duration","fileSize","tracks","result","succes","data","updateRecord","errors"],"mappings":"AAAA,SAASA,OAAT,QAAwB,eAAxB;AACA,SAASC,SAAT,EAAoBC,MAApB,QAAkC,oBAAlC;AACA,SAASC,MAAT,QAAuB,0BAAvB;AAGA,eAAe,UAAUC,mBAAV,GAAgC;AAC3C,QAAMH,SAAS,CAACD,OAAO,CAACK,kBAAT,EAA6BC,MAA7B,CAAf;AACH;;AAED,MAAMC,QAAQ,GAAGC,KAAK,IAAIA,KAAK,CAACC,IAAN,CAAWC,KAArC;;AAEA,MAAMC,YAAY,GAAGH,KAAK,IACtBA,KAAK,CAACI,QAAN,CAAeC,SAAf,CACCC,MADD,CACSC,KAAK,IAAKA,KAAK,CAACC,KAAN,KAAgBC,SAAhB,IAA6BF,KAAK,CAACC,KAAN,KAAgB,IADhE,EAECE,GAFD,CAEKH,KAAK,KAAK;AACXI,EAAAA,EAAE,EAAEJ,KAAK,CAACI,EADC;AAEXH,EAAAA,KAAK,EAAED,KAAK,CAACC,KAFF;AAGXI,EAAAA,GAAG,EAAEL,KAAK,CAACK;AAHA,CAAL,CAFV,EAOCF,GAPD,CAOKH,KAAK,IAAI;AACVM,EAAAA,OAAO,CAACC,GAAR,CAAYP,KAAZ;;AACA,MAAG,CAACA,KAAK,CAACK,GAAV,EAAc;AACVL,IAAAA,KAAK,CAACK,GAAN,GAAY,CAAC,IAAIG,IAAJ,GAAWC,OAAX,KAAuBhB,KAAK,CAACI,QAAN,CAAea,SAAvC,IAAoD,IAAhE;AACH;;AACD,SAAOV,KAAP;AACH,CAbD,CADJ;;AAgBA,UAAUT,MAAV,CAAiBoB,MAAjB,EAAyB;AACrB,QAAMhB,KAAK,GAAG,MAAMR,MAAM,CAACK,QAAD,CAA1B;;AAEA,MAAIG,KAAJ,EAAW;AACP,QAAI;AAAA;;AACA,YAAM;AAAEiB,QAAAA,SAAF;AAAaC,QAAAA;AAAb,UAAyBzB,MAAM,CAAC,YAAD,CAArC;AACA,YAAM0B,KAAK,GAAGD,OAAO,CAACE,cAAtB;AACA,YAAMC,SAAS,GAAG,EAAlB;AACA,OAAC;AACGZ,QAAAA,EAAE,EAAEY,SAAS,CAACZ,EADjB;AAEGa,QAAAA,KAAK,EAAED,SAAS,CAACC,KAFpB;AAGGC,QAAAA,QAAQ,EAAEF,SAAS,CAACE,QAHvB;AAIGC,QAAAA,QAAQ,EAAEH,SAAS,CAACG;AAJvB,UAKGR,MALJ;AAMA,YAAMS,MAAM,GAAG,MAAMjC,MAAM,CAACS,YAAD,CAA3B;AACAoB,MAAAA,SAAS,CAACI,MAAV,GAAmBA,MAAnB;AAEA,YAAMC,MAAM,GAAG,MAAMT,SAAS,CAACE,KAAD,EAAQnB,KAAR,EAAeqB,SAAf,CAA9B;AAEA,YAAMM,MAAM,GAAGD,MAAH,aAAGA,MAAH,uCAAGA,MAAM,CAAEE,IAAX,iDAAG,aAAcC,YAA7B;;AACA,UAAI,CAACH,MAAM,CAACI,MAAR,IAAkBH,MAAtB,EAA8B,CAE7B,CAFD,MAEO;AACHhB,QAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACH;AACJ,KArBD,CAqBE,MAAM,CAEP;AAEJ;AAEJ","sourcesContent":["import { ACTIONS } from \"../../actions\";\r\nimport { takeEvery, select } from \"redux-saga/effects\";\r\nimport { getApi } from \"./../../apis/apiProvider\";\r\n\r\n\r\nexport default function* requestUpdateRecord() {\r\n    yield takeEvery(ACTIONS.R_REC_FINAL_UPDATE, handel)\r\n}\r\n\r\nconst getToken = state => state.user.token\r\n\r\nconst getTracklist = state => \r\n    state.recorder.tracklist\r\n    .filter( track => (track.start !== undefined && track.start !== null))\r\n    .map(track => ({\r\n        id: track.id,\r\n        start: track.start,\r\n        end: track.end\r\n    }))\r\n    .map(track => {\r\n        console.log(track)\r\n        if(!track.end){\r\n            track.end = (new Date().getTime() - state.recorder.startTime) / 1000;\r\n        }\r\n        return track;\r\n    })\r\n\r\nfunction* handel(action) {\r\n    const token = yield select(getToken);\r\n\r\n    if (token) {\r\n        try {\r\n            const { callQuery, queries } = getApi(\"UserAssets\");\r\n            const query = queries.updateRecordQl;\r\n            const variables = {};\r\n            ({\r\n                id: variables.id,\r\n                peaks: variables.peaks,\r\n                duration: variables.duration,\r\n                fileSize: variables.fileSize\r\n            } = action);\r\n            const tracks = yield select(getTracklist);\r\n            variables.tracks = tracks;\r\n          \r\n            const result = yield callQuery(query, token, variables);\r\n    \r\n            const succes = result?.data?.updateRecord;\r\n            if (!result.errors && succes) {\r\n\r\n            } else {\r\n                console.log('Update record metadata fail')\r\n            }\r\n        } catch {\r\n\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}