{"ast":null,"code":"import store from \"./../../../../../store\";\nimport { nodeChain as audioNodeChain } from \"./../../../../../utils/sound/audioNodes\";\nimport Equaliztion from \"./equalization\";\nimport Fader from \"./fader\";\nimport Mastering from \"./mastering\";\nimport PeakMeters from \"./peakMeters\";\nimport Recorder from \"./recorder/recorder\";\nexport default class Mixer {\n  constructor(channels) {\n    this.config = store.getState().configuration.mixer;\n    this.channels = channels;\n    this.mastering = new Mastering(this);\n    Object.assign(this, Equaliztion);\n    Object.assign(this, Fader);\n    Object.assign(this, PeakMeters);\n    this.initChannelContainer('audioNodes');\n    this.initChannelContainer('sampleBuffers');\n    this.createMainChannel();\n    this.recorder = new Recorder(this);\n  } //connecting extrnal (effector)\n\n\n  connect(external) {\n    this.external = external;\n  }\n\n  initChannelContainer(containerName) {\n    this[containerName] = {\n      channels: {}\n    };\n\n    for (let channelName of [...this.channels.getChannelNames(), \"main\"]) {\n      this[containerName].channels = { ...this[containerName].channels,\n        [channelName]: null\n      };\n    }\n  }\n\n  createMainChannel() {\n    //main audio context with is share between wavesurfer objects\n    this.mainAudioContext = new AudioContext();\n    let ac = this.mainAudioContext;\n    let main = this.audioNodes.channels['main'] = {};\n    ac.destination.channelCount = Math.min(4, ac.destination.maxChannelCount);\n    this.isCueEnable = ac.destination.channelCount === 4;\n    main.preGainNode = ac.createGain();\n    main.preAnalyserNode = ac.createAnalyser();\n    main.compressorNode = ac.createDynamicsCompressor();\n    main.postGainNode = ac.createGain();\n    main.postAnalyserNode = ac.createAnalyser(); //cue\n\n    main.cueChannelMerger = ac.createChannelMerger();\n    main.cueInput = ac.createGain();\n    main.cueInput.channelCountMode = \"explicit\";\n    main.cueInput.channelCount = ac.destination.channelCount;\n    main.cueChannelMerger.connect(main.cueInput); //---\n\n    main.recorderStremDestination = ac.createMediaStreamDestination();\n    main.postGainNode.connect(main.recorderStremDestination);\n    this.mastering.configCompressor(); //wiring in chain\n\n    audioNodeChain([main.preGainNode, main.preAnalyserNode, main.compressorNode, main.postGainNode, main.postAnalyserNode, main.cueInput, ac.destination]);\n  }\n\n  getChannelInterface(channelName) {\n    return {\n      getPeakMeter: () => this.getChannelPeakMeter(channelName)\n    };\n  }\n\n  getMasteringInterface() {\n    return {\n      getPrePeakMeter: {\n        getPeakMeter: this.getMasterPeakMetter.bind(this, \"pre\")\n      },\n      getPostPeakMeter: {\n        getPeakMeter: this.getMasterPeakMetter.bind(this, \"post\")\n      }\n    };\n  }\n\n  setUpChannelsAudioNodes(channelName) {\n    //surfer - waveSurfer obj\n    let surfer = this.channels.getChannel(channelName);\n    let audioCtx = surfer.backend.ac; //build aduio nodes after, below chain in this order\n\n    this.audioNodes.channels[channelName] = {\n      outputCueNode: audioCtx.createGain(),\n      cue: {\n        cueGainNode: audioCtx.createGain(),\n        cueChannelSpliterNode: audioCtx.createChannelSplitter(2)\n      },\n      eqHiFilterNode: audioCtx.createBiquadFilter(),\n      eqMidFilterNode: audioCtx.createBiquadFilter(),\n      eqLowFilterNode: audioCtx.createBiquadFilter(),\n      lowPassFilterNode: audioCtx.createBiquadFilter(),\n      highPassFilterNode: audioCtx.createBiquadFilter(),\n      //\n      sendNode: audioCtx.createGain(),\n      sendAndReturns: Array(this.config.externalChannels).fill(1).map(() => ({\n        send: audioCtx.createGain(),\n        return: null\n      })),\n      //\n      bypassNode: audioCtx.createGain(),\n      mainGainNode: audioCtx.createGain(),\n      analyserNode: audioCtx.createAnalyser(),\n      faderVolumeNode: audioCtx.createGain()\n    }; //--Confign\n\n    const channelNodes = this.audioNodes.channels[channelName]; //-- Cue\n\n    channelNodes.outputCueNode.connect(channelNodes.cue.cueGainNode);\n    channelNodes.cue.cueGainNode.connect(channelNodes.cue.cueChannelSpliterNode); //connecting to main chanel\n\n    console.log(this.mainAudioContext.destination.channelCount);\n    console.log(this.audioNodes.channels[\"main\"].cueInput.channelCount);\n    console.log(channelNodes.cue.cueChannelSpliterNode.numberOfOutputs); //    const mainChannelNodes = this.audioNodes.channels['main']\n    //    channelNodes.cue.cueChannelSpliterNode.connect(mainChannelNodes.cueInput, 0 , 3);\n    //    channelNodes.cue.cueChannelSpliterNode.connect(mainChannelNodes.cueInput, 1 , 4);\n    //\n\n    channelNodes.analyserNode.fftSize = 256; //--EQ filters\n\n    channelNodes.eqLowFilterNode.type = \"lowshelf\";\n    channelNodes.eqLowFilterNode.frequency.setValueAtTime(this.config.low.frequency, audioCtx.currentTime);\n    channelNodes.eqHiFilterNode.type = \"highshelf\";\n    channelNodes.eqHiFilterNode.frequency.setValueAtTime(this.config.hi.frequency, audioCtx.currentTime);\n    channelNodes.eqMidFilterNode.type = \"peaking\";\n    channelNodes.eqMidFilterNode.frequency.setValueAtTime(this.config.mid.frequency, audioCtx.currentTime);\n    channelNodes.eqMidFilterNode.Q.setValueAtTime(this.config.mid.Q, audioCtx.currentTime); //--Filters\n\n    channelNodes.lowPassFilterNode.type = \"lowpass\";\n    channelNodes.lowPassFilterNode.frequency.setValueAtTime(24000, audioCtx.currentTime);\n    channelNodes.highPassFilterNode.type = \"highpass\";\n    channelNodes.highPassFilterNode.frequency.setValueAtTime(0, audioCtx.currentTime); //--Send and return\n\n    channelNodes.sendAndReturns.forEach(channel => {\n      channelNodes.sendNode.connect(channel.send); //mute on start\n\n      channel.send.gain.value = 0;\n    });\n    const sends = channelNodes.sendAndReturns.map(channel => channel.send);\n\n    if (this.external && this.external.connect) {\n      const returns = this.external.connect(sends);\n      returns.forEach((returnNode, index) => {\n        returnNode.gain.value = 0;\n        channelNodes.sendAndReturns[index].return = returnNode;\n        returnNode.connect(channelNodes.mainGainNode);\n      });\n    } //Assign in chain \n\n\n    this.channels.getChannel(channelName).backend.setFilters([channelNodes.outputCueNode, channelNodes.eqLowFilterNode, channelNodes.eqHiFilterNode, channelNodes.eqMidFilterNode, channelNodes.lowPassFilterNode, channelNodes.highPassFilterNode, channelNodes.sendNode, channelNodes.bypassNode, channelNodes.mainGainNode, channelNodes.analyserNode, channelNodes.faderVolumeNode]); //-Conect to main output mixer channel\n\n    surfer.backend.gainNode.disconnect();\n    surfer.backend.gainNode.connect(this.audioNodes.channels['main'].preGainNode);\n    this.setUpSampleBuffers(channelName);\n  }\n\n  setSend(channelName, sendNumber, value) {\n    const sendAndReturns = this.audioNodes.channels[channelName].sendAndReturns;\n\n    if (value === 1) {\n      sendAndReturns._currentSends = sendAndReturns._currentSends ? sendAndReturns._currentSends.add(sendNumber) : new Set([sendNumber]);\n    } else if (value === 0 && sendAndReturns._currentSends) {\n      sendAndReturns._currentSends.delete(sendNumber);\n    }\n\n    let gain = 1;\n\n    if (sendAndReturns._currentSends && sendAndReturns._currentSends.size > 1) {\n      gain *= 0.71 ** (sendAndReturns._currentSends.size - 1);\n    }\n\n    sendAndReturns.forEach((channel, index) => {\n      console.log(\"for channek \" + channelName, \" gain \" + gain, \"send nubmer \" + sendNumber);\n      const {\n        send,\n        return: returns\n      } = channel; //current sending\n\n      if (sendAndReturns._currentSends.has(index)) {\n        send.gain.setTargetAtTime(gain, this.mainAudioContext.currentTime, 0.01);\n        returns.gain.setTargetAtTime(gain, this.mainAudioContext.currentTime, 0.01);\n      } else {\n        send.gain.setTargetAtTime(0, this.mainAudioContext.currentTime, 0.01);\n        returns.gain.setTargetAtTime(0, this.mainAudioContext.currentTime, 0.01);\n      }\n    }); //turn on/off bypass\n\n    const bypass = +!sendAndReturns._currentSends.size;\n    this.audioNodes.channels[channelName].bypassNode.gain.setTargetAtTime(bypass, this.mainAudioContext.currentTime, 0.01);\n  }\n\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/pages/console/core/console/mixer/mixer.js"],"names":["store","nodeChain","audioNodeChain","Equaliztion","Fader","Mastering","PeakMeters","Recorder","Mixer","constructor","channels","config","getState","configuration","mixer","mastering","Object","assign","initChannelContainer","createMainChannel","recorder","connect","external","containerName","channelName","getChannelNames","mainAudioContext","AudioContext","ac","main","audioNodes","destination","channelCount","Math","min","maxChannelCount","isCueEnable","preGainNode","createGain","preAnalyserNode","createAnalyser","compressorNode","createDynamicsCompressor","postGainNode","postAnalyserNode","cueChannelMerger","createChannelMerger","cueInput","channelCountMode","recorderStremDestination","createMediaStreamDestination","configCompressor","getChannelInterface","getPeakMeter","getChannelPeakMeter","getMasteringInterface","getPrePeakMeter","getMasterPeakMetter","bind","getPostPeakMeter","setUpChannelsAudioNodes","surfer","getChannel","audioCtx","backend","outputCueNode","cue","cueGainNode","cueChannelSpliterNode","createChannelSplitter","eqHiFilterNode","createBiquadFilter","eqMidFilterNode","eqLowFilterNode","lowPassFilterNode","highPassFilterNode","sendNode","sendAndReturns","Array","externalChannels","fill","map","send","return","bypassNode","mainGainNode","analyserNode","faderVolumeNode","channelNodes","console","log","numberOfOutputs","fftSize","type","frequency","setValueAtTime","low","currentTime","hi","mid","Q","forEach","channel","gain","value","sends","returns","returnNode","index","setFilters","gainNode","disconnect","setUpSampleBuffers","setSend","sendNumber","_currentSends","add","Set","delete","size","has","setTargetAtTime","bypass"],"mappings":"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","sourcesContent":["import store from \"./../../../../../store\";\r\nimport { nodeChain as audioNodeChain } from \"./../../../../../utils/sound/audioNodes\";\r\nimport Equaliztion from \"./equalization\";\r\nimport Fader from \"./fader\";\r\nimport Mastering from \"./mastering\";\r\nimport PeakMeters from \"./peakMeters\";\r\nimport Recorder from \"./recorder/recorder\";\r\n\r\nexport default class Mixer {\r\n    constructor(channels) {\r\n        this.config = store.getState().configuration.mixer;\r\n\r\n        this.channels = channels;\r\n        this.mastering = new Mastering(this);\r\n\r\n        \r\n        Object.assign(this, Equaliztion);\r\n        Object.assign(this, Fader);\r\n        Object.assign(this, PeakMeters)\r\n\r\n        this.initChannelContainer('audioNodes');\r\n        this.initChannelContainer('sampleBuffers');\r\n        this.createMainChannel();\r\n\r\n        this.recorder = new Recorder(this);\r\n    }\r\n\r\n\r\n    //connecting extrnal (effector)\r\n    connect(external) {\r\n        this.external = external;\r\n    }\r\n\r\n    initChannelContainer(containerName) {\r\n        this[containerName] = {\r\n            channels: {\r\n            }\r\n        }\r\n        for (let channelName of [...this.channels.getChannelNames(), \"main\"]) {\r\n            this[containerName].channels = {\r\n                ...this[containerName].channels,\r\n                [channelName]: null\r\n            }\r\n        }\r\n    }\r\n\r\n    createMainChannel() {\r\n        //main audio context with is share between wavesurfer objects\r\n        this.mainAudioContext = new AudioContext();\r\n\r\n        let ac = this.mainAudioContext;\r\n        let main = this.audioNodes.channels['main'] = {};\r\n\r\n        ac.destination.channelCount = Math.min(4, ac.destination.maxChannelCount);\r\n        this.isCueEnable = (ac.destination.channelCount === 4);\r\n\r\n        main.preGainNode = ac.createGain();\r\n        main.preAnalyserNode = ac.createAnalyser();\r\n        main.compressorNode = ac.createDynamicsCompressor();\r\n        main.postGainNode = ac.createGain();\r\n        main.postAnalyserNode = ac.createAnalyser();\r\n\r\n        //cue\r\n        main.cueChannelMerger = ac.createChannelMerger();\r\n        main.cueInput = ac.createGain();\r\n\r\n        main.cueInput.channelCountMode = \"explicit\";\r\n        main.cueInput.channelCount = ac.destination.channelCount;\r\n\r\n        main.cueChannelMerger.connect(main.cueInput);\r\n        //---\r\n\r\n        main.recorderStremDestination = ac.createMediaStreamDestination();\r\n        main.postGainNode.connect(main.recorderStremDestination)\r\n\r\n\r\n        this.mastering.configCompressor();\r\n\r\n        //wiring in chain\r\n         audioNodeChain([\r\n         main.preGainNode,\r\n         main.preAnalyserNode, \r\n         main.compressorNode, \r\n         main.postGainNode,\r\n         main.postAnalyserNode, \r\n         main.cueInput,\r\n         ac.destination])\r\n    }\r\n\r\n\r\n    getChannelInterface(channelName) {\r\n        return {\r\n            getPeakMeter: () => this.getChannelPeakMeter(channelName),\r\n        }\r\n    }\r\n\r\n    getMasteringInterface(){\r\n        return {\r\n            getPrePeakMeter: {\r\n                getPeakMeter: this.getMasterPeakMetter.bind(this, \"pre\")\r\n            },\r\n            getPostPeakMeter: {\r\n                getPeakMeter: this.getMasterPeakMetter.bind(this, \"post\")\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    setUpChannelsAudioNodes(channelName) {\r\n        //surfer - waveSurfer obj\r\n        let surfer = this.channels.getChannel(channelName)\r\n        let audioCtx = surfer.backend.ac;\r\n\r\n        //build aduio nodes after, below chain in this order\r\n        this.audioNodes.channels[channelName] = {\r\n            outputCueNode: audioCtx.createGain(),\r\n            cue : {\r\n                cueGainNode: audioCtx.createGain(),\r\n                cueChannelSpliterNode: audioCtx.createChannelSplitter(2),\r\n            }, \r\n            eqHiFilterNode: audioCtx.createBiquadFilter(),\r\n            eqMidFilterNode: audioCtx.createBiquadFilter(),\r\n            eqLowFilterNode: audioCtx.createBiquadFilter(),\r\n            lowPassFilterNode: audioCtx.createBiquadFilter(),\r\n            highPassFilterNode: audioCtx.createBiquadFilter(),\r\n            //\r\n            sendNode: audioCtx.createGain(),\r\n            sendAndReturns: Array(this.config.externalChannels).fill(1).map(() => ({\r\n                send: audioCtx.createGain(),\r\n                return: null\r\n            })),\r\n            //\r\n            bypassNode: audioCtx.createGain(),\r\n            mainGainNode: audioCtx.createGain(),\r\n            analyserNode: audioCtx.createAnalyser(),\r\n            faderVolumeNode: audioCtx.createGain(),\r\n        }\r\n\r\n        //--Confign\r\n        const channelNodes = this.audioNodes.channels[channelName];\r\n        //-- Cue\r\n        channelNodes.outputCueNode.connect(channelNodes.cue.cueGainNode);\r\n        channelNodes.cue.cueGainNode.connect(channelNodes.cue.cueChannelSpliterNode);\r\n        //connecting to main chanel\r\n        console.log(this.mainAudioContext.destination.channelCount)\r\n        console.log(this.audioNodes.channels[\"main\"].cueInput.channelCount)\r\n        console.log(channelNodes.cue.cueChannelSpliterNode.numberOfOutputs)\r\n    //    const mainChannelNodes = this.audioNodes.channels['main']\r\n    //    channelNodes.cue.cueChannelSpliterNode.connect(mainChannelNodes.cueInput, 0 , 3);\r\n    //    channelNodes.cue.cueChannelSpliterNode.connect(mainChannelNodes.cueInput, 1 , 4);\r\n        //\r\n        channelNodes.analyserNode.fftSize = 256;\r\n        //--EQ filters\r\n        channelNodes.eqLowFilterNode.type = \"lowshelf\";\r\n        channelNodes.eqLowFilterNode.frequency.setValueAtTime(this.config.low.frequency, audioCtx.currentTime);\r\n\r\n        channelNodes.eqHiFilterNode.type = \"highshelf\";\r\n        channelNodes.eqHiFilterNode.frequency.setValueAtTime(this.config.hi.frequency, audioCtx.currentTime);\r\n\r\n        channelNodes.eqMidFilterNode.type = \"peaking\";\r\n        channelNodes.eqMidFilterNode.frequency.setValueAtTime(this.config.mid.frequency, audioCtx.currentTime);\r\n        channelNodes.eqMidFilterNode.Q.setValueAtTime(this.config.mid.Q, audioCtx.currentTime);\r\n        //--Filters\r\n        channelNodes.lowPassFilterNode.type = \"lowpass\";\r\n        channelNodes.lowPassFilterNode.frequency.setValueAtTime(24000, audioCtx.currentTime);\r\n\r\n        channelNodes.highPassFilterNode.type = \"highpass\";\r\n        channelNodes.highPassFilterNode.frequency.setValueAtTime(0, audioCtx.currentTime);\r\n        //--Send and return\r\n        channelNodes.sendAndReturns.forEach((channel) => {\r\n            channelNodes.sendNode.connect(channel.send);\r\n            //mute on start\r\n            channel.send.gain.value = 0;\r\n        });\r\n        const sends = channelNodes.sendAndReturns.map(channel => channel.send);\r\n        if (this.external && this.external.connect) {\r\n            const returns = this.external.connect(sends);\r\n            returns.forEach((returnNode, index) => {\r\n                returnNode.gain.value = 0;\r\n                channelNodes.sendAndReturns[index].return = returnNode;\r\n                returnNode.connect(channelNodes.mainGainNode);\r\n            })\r\n        }\r\n\r\n        //Assign in chain \r\n        this.channels.getChannel(channelName).backend.setFilters([\r\n            channelNodes.outputCueNode,\r\n            channelNodes.eqLowFilterNode,\r\n            channelNodes.eqHiFilterNode,\r\n            channelNodes.eqMidFilterNode,\r\n            channelNodes.lowPassFilterNode,\r\n            channelNodes.highPassFilterNode,\r\n            channelNodes.sendNode,\r\n            channelNodes.bypassNode,\r\n            channelNodes.mainGainNode,\r\n            channelNodes.analyserNode,\r\n            channelNodes.faderVolumeNode,\r\n        ])\r\n\r\n        //-Conect to main output mixer channel\r\n        surfer.backend.gainNode.disconnect();\r\n        surfer.backend.gainNode.connect(\r\n            this.audioNodes.channels['main'].preGainNode\r\n            );\r\n        this.setUpSampleBuffers(channelName);\r\n    }\r\n\r\n\r\n\r\n\r\n    setSend(channelName, sendNumber, value) {\r\n        const sendAndReturns = this.audioNodes.channels[channelName].sendAndReturns;\r\n        if (value === 1) {\r\n            sendAndReturns._currentSends =\r\n                (sendAndReturns._currentSends) ? sendAndReturns._currentSends.add(sendNumber) : new Set([sendNumber]);\r\n        } else if (value === 0 && sendAndReturns._currentSends) {\r\n            sendAndReturns._currentSends.delete(sendNumber);\r\n        }\r\n\r\n        let gain = 1;\r\n        if (sendAndReturns._currentSends && sendAndReturns._currentSends.size > 1) {\r\n            gain *= 0.71 ** (sendAndReturns._currentSends.size - 1);\r\n        }\r\n\r\n        sendAndReturns.forEach((channel, index) => {\r\n            console.log(\"for channek \" + channelName, \" gain \" + gain, \"send nubmer \" + sendNumber)\r\n            const { send, return: returns } = channel;\r\n            //current sending\r\n            if (sendAndReturns._currentSends.has(index)) {\r\n                send.gain.setTargetAtTime(gain, this.mainAudioContext.currentTime, 0.01);\r\n                returns.gain.setTargetAtTime(gain, this.mainAudioContext.currentTime, 0.01);\r\n            } else {\r\n                send.gain.setTargetAtTime(0, this.mainAudioContext.currentTime, 0.01);\r\n                returns.gain.setTargetAtTime(0, this.mainAudioContext.currentTime, 0.01);\r\n            }\r\n        })\r\n\r\n        //turn on/off bypass\r\n        const bypass = +!sendAndReturns._currentSends.size;\r\n        this.audioNodes.channels[channelName].bypassNode\r\n            .gain.setTargetAtTime(bypass, this.mainAudioContext.currentTime, 0.01);\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}