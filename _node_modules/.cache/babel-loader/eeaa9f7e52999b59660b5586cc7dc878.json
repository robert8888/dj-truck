{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\src\\\\pages\\\\common\\\\components\\\\Logger\\\\Logger.js\";\nimport { faTimesCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport classNames from \"classnames\";\nimport React, { useCallback, useMemo, useState } from \"react\";\nimport { Button, Col, Container, Row } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport LOG_TYPES from \"./../../LoggerLogTypes\";\nimport \"./logger.scss\";\n\nconst Logger = ({\n  log\n}) => {\n  const [hidden, setHidden] = useState(false);\n  const getHeader = useCallback((text, className = \"\") => {\n    return React.createElement(\"h6\", {\n      className: \"logger-header \" + className,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14\n      },\n      __self: this\n    }, text);\n  }, []);\n  const header = useMemo(() => {\n    switch (log.type) {\n      case LOG_TYPES.ERROR:\n        {\n          return getHeader(\"Error:\", \"logger-header-error\");\n        }\n\n      case LOG_TYPES.DEBUG:\n        {\n          return getHeader(\"Debug:\", \"logger-header-debug\");\n        }\n\n      case LOG_TYPES.LOG:\n        {\n          return getHeader(\"Log\");\n        }\n\n      default:\n        return null;\n    }\n  }, [log, getHeader]);\n  const content = useMemo(() => {\n    switch (log.type) {\n      case LOG_TYPES.DEBUG:\n        {\n          return React.createElement(\"pre\", {\n            className: \"logger-message logger-pre\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 36\n            },\n            __self: this\n          }, log.message);\n        }\n\n      default:\n        return React.createElement(\"p\", {\n          className: \"logger-message\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 42\n          },\n          __self: this\n        }, log.message);\n    }\n  }, [log]);\n  const loggerClasses = useMemo(() => {\n    return classNames('logger', {\n      'logger--hidden': hidden\n    });\n  }, [hidden]);\n  return React.createElement(Container, {\n    className: \"app layout container-xl\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, React.createElement(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(Col, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: loggerClasses,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(Button, {\n    className: \"btn-close\",\n    onClick: setHidden.bind(null, true),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, React.createElement(FontAwesomeIcon, {\n    icon: faTimesCircle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  })), header, content))));\n};\n\nconst mapStateToProps = state => ({\n  log: state.logger.last\n});\n\nexport default connect(mapStateToProps)(Logger);","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/pages/common/components/Logger/Logger.js"],"names":["faTimesCircle","FontAwesomeIcon","classNames","React","useCallback","useMemo","useState","Button","Col","Container","Row","connect","LOG_TYPES","Logger","log","hidden","setHidden","getHeader","text","className","header","type","ERROR","DEBUG","LOG","content","message","loggerClasses","bind","mapStateToProps","state","logger","last"],"mappings":"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","sourcesContent":["import { faTimesCircle } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport classNames from \"classnames\";\r\nimport React, { useCallback, useMemo, useState } from \"react\";\r\nimport { Button, Col, Container, Row } from \"react-bootstrap\";\r\nimport { connect } from \"react-redux\";\r\nimport LOG_TYPES from \"./../../LoggerLogTypes\";\r\nimport \"./logger.scss\";\r\n\r\nconst Logger = ({ log }) => {\r\n    const [hidden, setHidden] = useState(false);\r\n\r\n    const getHeader = useCallback((text, className = \"\") => {\r\n        return <h6 className={\"logger-header \" + className}>{text}</h6>\r\n    }, []);\r\n\r\n    const header = useMemo(()=>{\r\n        switch(log.type){\r\n            case LOG_TYPES.ERROR : {\r\n                return getHeader(\"Error:\", \"logger-header-error\");\r\n            }\r\n            case LOG_TYPES.DEBUG: {\r\n                return getHeader(\"Debug:\", \"logger-header-debug\");\r\n            }\r\n            case LOG_TYPES.LOG : {\r\n                return getHeader(\"Log\");\r\n            }\r\n            default: return null;\r\n        }\r\n    }, [log, getHeader])\r\n\r\n    const content = useMemo(()=>{\r\n        switch(log.type){\r\n            case LOG_TYPES.DEBUG: {\r\n                return (\r\n                    <pre className=\"logger-message logger-pre\">\r\n                        {log.message}\r\n                    </pre>\r\n                )\r\n            }\r\n            default: return (\r\n                <p className=\"logger-message\">\r\n                    {log.message}\r\n                </p>\r\n            )\r\n        }\r\n    }, [log])\r\n\r\n  \r\n    const loggerClasses = useMemo(()=>{\r\n        return classNames(\r\n            'logger',\r\n            {'logger--hidden': hidden}\r\n        )\r\n    }, [hidden])\r\n    \r\n    return (\r\n        <Container className=\"app layout container-xl\" >\r\n            <Row><Col>\r\n                <div className={loggerClasses}>\r\n                    <Button className=\"btn-close\" onClick={setHidden.bind(null, true)}>\r\n                        <FontAwesomeIcon icon={faTimesCircle}/>\r\n                    </Button>\r\n                    {header}\r\n                    {content}\r\n                </div>\r\n            </Col></Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    log: state.logger.last,\r\n})\r\n\r\nexport default connect(mapStateToProps)(Logger);"]},"metadata":{},"sourceType":"module"}