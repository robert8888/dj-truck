{"ast":null,"code":"import { ACTIONS, pushToTracklist, updateEndTime } from \"../../../actions\";\nimport { takeEvery, select, put, call } from \"redux-saga/effects\";\nexport default function* interceptLoadtrack() {\n  yield takeEvery(ACTIONS.LOAD_TRACK, handel);\n}\n\nconst getTracklist = state => state.recorder.tracklist;\n\nfunction* finishInfinite(tracklist, channel) {\n  const unfinished = tracklist.find(track => track.channel === channel && track.start && !track.end);\n  if (!unfinished) return;\n  yield put(updateEndTime(unfinished.id));\n}\n\nfunction* handel(action) {\n  const channel = action.destination;\n  const track = action.track; //check if is on this channel track witoud end\n\n  const tracklist = yield select(getTracklist);\n  yield call(finishInfinite, tracklist, channel);\n  yield put(pushToTracklist({\n    id: track.id,\n    channel,\n    start: null,\n    end: null\n  }));\n  console.log('intercept load track');\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/sagas/recorder/tracklist/loadtrack.js"],"names":["ACTIONS","pushToTracklist","updateEndTime","takeEvery","select","put","call","interceptLoadtrack","LOAD_TRACK","handel","getTracklist","state","recorder","tracklist","finishInfinite","channel","unfinished","find","track","start","end","id","action","destination","console","log"],"mappings":"AAAA,SAAUA,OAAV,EAAmBC,eAAnB,EAAoCC,aAApC,QAAyD,kBAAzD;AACA,SAASC,SAAT,EAAoBC,MAApB,EAA4BC,GAA5B,EAAiCC,IAAjC,QAA4C,oBAA5C;AAGA,eAAe,UAAUC,kBAAV,GAA+B;AAC1C,QAAMJ,SAAS,CAACH,OAAO,CAACQ,UAAT,EAAqBC,MAArB,CAAf;AACH;;AAED,MAAMC,YAAY,GAAGC,KAAK,IAAIA,KAAK,CAACC,QAAN,CAAeC,SAA7C;;AAEA,UAAWC,cAAX,CAA0BD,SAA1B,EAAsCE,OAAtC,EAA8C;AAC1C,QAAMC,UAAU,GAAGH,SAAS,CAACI,IAAV,CAAeC,KAAK,IAClCA,KAAK,CAACH,OAAN,KAAkBA,OAAlB,IAA6BG,KAAK,CAACC,KAAnC,IAA4C,CAACD,KAAK,CAACE,GADrC,CAAnB;AAGA,MAAG,CAACJ,UAAJ,EAAgB;AAEhB,QAAMX,GAAG,CAACH,aAAa,CAACc,UAAU,CAACK,EAAZ,CAAd,CAAT;AACH;;AAED,UAAUZ,MAAV,CAAiBa,MAAjB,EAAwB;AACpB,QAAMP,OAAO,GAAGO,MAAM,CAACC,WAAvB;AACA,QAAML,KAAK,GAAGI,MAAM,CAACJ,KAArB,CAFoB,CAGpB;;AACA,QAAML,SAAS,GAAG,MAAMT,MAAM,CAACM,YAAD,CAA9B;AACA,QAAMJ,IAAI,CAACQ,cAAD,EAAiBD,SAAjB,EAA4BE,OAA5B,CAAV;AAEA,QAAMV,GAAG,CAACJ,eAAe,CAAC;AACtBoB,IAAAA,EAAE,EAAEH,KAAK,CAACG,EADY;AAEtBN,IAAAA,OAFsB;AAGtBI,IAAAA,KAAK,EAAE,IAHe;AAItBC,IAAAA,GAAG,EAAE;AAJiB,GAAD,CAAhB,CAAT;AAMAI,EAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACH","sourcesContent":["import {  ACTIONS, pushToTracklist, updateEndTime } from \"../../../actions\";\r\nimport { takeEvery, select, put, call} from \"redux-saga/effects\";\r\n\r\n\r\nexport default function* interceptLoadtrack() {\r\n    yield takeEvery(ACTIONS.LOAD_TRACK, handel)\r\n}\r\n\r\nconst getTracklist = state => state.recorder.tracklist;\r\n\r\nfunction * finishInfinite(tracklist , channel){\r\n    const unfinished = tracklist.find(track => \r\n        (track.channel === channel && track.start && !track.end)\r\n    )\r\n    if(!unfinished) return; \r\n\r\n    yield put(updateEndTime(unfinished.id))\r\n}\r\n\r\nfunction* handel(action){\r\n    const channel = action.destination;\r\n    const track = action.track;\r\n    //check if is on this channel track witoud end\r\n    const tracklist = yield select(getTracklist)\r\n    yield call(finishInfinite, tracklist, channel);\r\n\r\n    yield put(pushToTracklist({\r\n        id: track.id,\r\n        channel,\r\n        start: null,\r\n        end: null,\r\n    }))\r\n    console.log('intercept load track')\r\n}"]},"metadata":{},"sourceType":"module"}