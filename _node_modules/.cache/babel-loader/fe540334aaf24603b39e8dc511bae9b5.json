{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\src\\\\pages\\\\console\\\\components\\\\Console\\\\Deck\\\\TrackInfo\\\\TimeLeft\\\\TimeLeft.js\";\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { formater } from \"./../../../../../../../utils/time/timeFromater\";\nimport { connect } from \"react-redux\";\nimport Console from \"./../../../../../core/console/console\";\n\nconst TimeLeft = props => {\n  const container = useRef(null);\n  const [channelInterface, setChannelInterface] = useState();\n  useEffect(() => {\n    setChannelInterface(Console.Get().getChannelInterface(this.props.name));\n  }, [setChannelInterface]);\n  useEffect(() => {\n    let timeLeft;\n\n    if (props.timeLeft) {\n      timeLeft = formater.secondsToStr(props.timeLeft);\n    } else {\n      if (typeof props.trackDuration === \"string\") {\n        timeLeft = formater.ptToStr(props.trackDuration);\n      } else {\n        timeLeft = formater.secondsToStr(props.trackDuration);\n      }\n    }\n\n    container.current.textContent = timeLeft;\n  }, [props.timeLeft, container, props.trackDuration]);\n  return React.createElement(\"span\", {\n    className: \"time-left\",\n    ref: container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  });\n};\n\nconst mapsStateToProps = (state, ownProps) => ({\n  trackDuration: state.console.channel[ownProps.name].track.duration,\n  timeLeft: state.console.channel[ownProps.name].playBackState.timeLeft\n});\n\nexport default connect(mapsStateToProps)(TimeLeft);","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/pages/console/components/Console/Deck/TrackInfo/TimeLeft/TimeLeft.js"],"names":["React","useRef","useEffect","useState","formater","connect","Console","TimeLeft","props","container","channelInterface","setChannelInterface","Get","getChannelInterface","name","timeLeft","secondsToStr","trackDuration","ptToStr","current","textContent","mapsStateToProps","state","ownProps","console","channel","track","duration","playBackState"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,EAAmCC,QAAnC,QAAkD,OAAlD;AACA,SAASC,QAAT,QAAyB,gDAAzB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,OAAP,MAAoB,uCAApB;;AAEA,MAAMC,QAAQ,GAAGC,KAAK,IAAI;AACtB,QAAMC,SAAS,GAAGR,MAAM,CAAC,IAAD,CAAxB;AAEA,QAAM,CAACS,gBAAD,EAAmBC,mBAAnB,IAA2CR,QAAQ,EAAzD;AAEAD,EAAAA,SAAS,CAAC,MAAI;AACVS,IAAAA,mBAAmB,CAACL,OAAO,CAACM,GAAR,GAAcC,mBAAd,CAAkC,KAAKL,KAAL,CAAWM,IAA7C,CAAD,CAAnB;AACH,GAFQ,EAEN,CAACH,mBAAD,CAFM,CAAT;AAIAT,EAAAA,SAAS,CAAC,MAAI;AACV,QAAIa,QAAJ;;AACA,QAAGP,KAAK,CAACO,QAAT,EAAkB;AACdA,MAAAA,QAAQ,GAAGX,QAAQ,CAACY,YAAT,CAAsBR,KAAK,CAACO,QAA5B,CAAX;AACH,KAFD,MAEO;AACH,UAAG,OAAOP,KAAK,CAACS,aAAb,KAA+B,QAAlC,EAA2C;AACvCF,QAAAA,QAAQ,GAAGX,QAAQ,CAACc,OAAT,CAAiBV,KAAK,CAACS,aAAvB,CAAX;AACH,OAFD,MAEO;AACHF,QAAAA,QAAQ,GAAGX,QAAQ,CAACY,YAAT,CAAsBR,KAAK,CAACS,aAA5B,CAAX;AACH;AACJ;;AACDR,IAAAA,SAAS,CAACU,OAAV,CAAkBC,WAAlB,GAAgCL,QAAhC;AACH,GAZQ,EAYN,CAACP,KAAK,CAACO,QAAP,EAAiBN,SAAjB,EAA4BD,KAAK,CAACS,aAAlC,CAZM,CAAT;AAcA,SACI;AAAM,IAAA,SAAS,EAAC,WAAhB;AAA4B,IAAA,GAAG,EAAER,SAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAGH,CA1BD;;AA4BA,MAAMY,gBAAgB,GAAG,CAACC,KAAD,EAAQC,QAAR,MAAsB;AAC3CN,EAAAA,aAAa,EAAGK,KAAK,CAACE,OAAN,CAAcC,OAAd,CAAsBF,QAAQ,CAACT,IAA/B,EAAqCY,KAArC,CAA2CC,QADhB;AAE3CZ,EAAAA,QAAQ,EAAIO,KAAK,CAACE,OAAN,CAAcC,OAAd,CAAsBF,QAAQ,CAACT,IAA/B,EAAqCc,aAArC,CAAmDb;AAFpB,CAAtB,CAAzB;;AAKA,eAAeV,OAAO,CAACgB,gBAAD,CAAP,CAA0Bd,QAA1B,CAAf","sourcesContent":["import React, { useRef, useEffect, useState} from \"react\"\r\nimport { formater } from \"./../../../../../../../utils/time/timeFromater\";\r\nimport { connect } from \"react-redux\";\r\nimport Console from \"./../../../../../core/console/console\";\r\n\r\nconst TimeLeft = props => {\r\n    const container = useRef(null);\r\n\r\n    const [channelInterface, setChannelInterface] =  useState();\r\n\r\n    useEffect(()=>{ \r\n        setChannelInterface(Console.Get().getChannelInterface(this.props.name));\r\n    }, [setChannelInterface])\r\n\r\n    useEffect(()=>{\r\n        let timeLeft;\r\n        if(props.timeLeft){\r\n            timeLeft = formater.secondsToStr(props.timeLeft);\r\n        } else {\r\n            if(typeof props.trackDuration === \"string\"){\r\n                timeLeft = formater.ptToStr(props.trackDuration);\r\n            } else {\r\n                timeLeft = formater.secondsToStr(props.trackDuration);\r\n            }\r\n        }\r\n        container.current.textContent = timeLeft;\r\n    }, [props.timeLeft, container, props.trackDuration])\r\n\r\n    return (\r\n        <span className=\"time-left\" ref={container}/>\r\n    )\r\n}\r\n\r\nconst mapsStateToProps = (state, ownProps) => ({\r\n    trackDuration : state.console.channel[ownProps.name].track.duration,\r\n    timeLeft :  state.console.channel[ownProps.name].playBackState.timeLeft,\r\n})\r\n\r\nexport default connect(mapsStateToProps)(TimeLeft);"]},"metadata":{},"sourceType":"module"}