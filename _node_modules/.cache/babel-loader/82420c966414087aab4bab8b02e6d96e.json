{"ast":null,"code":"/**\r\n * Adapted from https://github.com/web-audio-components/simple-reverb\r\n */\nimport Effect from \"./../effect\";\nimport worker from \"./buildImpulseWebWorker\";\nexport default class Reverb extends Effect {\n  static defaultParams() {\n    return {\n      params: {\n        seconds: {\n          min: 1,\n          max: 50,\n          defaultValue: 3,\n          type: \"float\",\n          description: \"time\"\n        },\n        decay: {\n          min: 0,\n          max: 100,\n          defaultValue: 2,\n          type: \"float\",\n          description: \"decay\"\n        },\n        reverse: {\n          min: 0,\n          max: 1,\n          defaultValue: 0,\n          type: \"bool\",\n          description: \"rev\"\n        }\n      }\n    };\n  }\n\n  constructor(context, opt = {}) {\n    super();\n    this.input = this.output = context.createConvolver();\n    this._context = context;\n    const defaultParams = Reverb.defaultParams().params;\n    this._seconds = opt.seconds || defaultParams.seconds.defaultValue;\n    this._decay = opt.decay || defaultParams.decay.defaultValue;\n    this._reverse = opt.reverse || defaultParams.reverse.defaultValue;\n    this._buildImpulseWorker = new Worker(worker);\n\n    this._buildImpulseWorker.postMessage([\"sended to worker\"]);\n\n    this._buildImpulseWorker.onmessage(() => {\n      console.log(\"message from worker recived\");\n    });\n\n    this._buildImpulse();\n\n    console.log(\"rung reverb constructor\");\n  }\n\n  connect(input, dest) {\n    input.connect(this.input);\n    this.output.connect(dest);\n  }\n\n  disconnect() {\n    this.output.disconnect();\n  }\n\n  _buildImpulse() {\n    let rate = this._context.sampleRate,\n        length = rate * this.seconds,\n        decay = this.decay,\n        impulse = this._context.createBuffer(2, length, rate),\n        impulseL = impulse.getChannelData(0),\n        impulseR = impulse.getChannelData(1),\n        n,\n        i;\n\n    for (i = 0; i < length; i++) {\n      n = this.reverse ? length - i : i;\n      impulseL[i] = (Math.random() * 2 - 1) * Math.pow(1 - n / length, decay);\n      impulseR[i] = (Math.random() * 2 - 1) * Math.pow(1 - n / length, decay);\n    }\n\n    this.input.buffer = impulse;\n  }\n\n  get seconds() {\n    return this._seconds;\n  }\n\n  set seconds(value) {\n    let params = Reverb.defaultParams().params;\n    value = Math.min(params.seconds.min, value);\n    value = Math.max(params.seconds.max, value);\n    this._seconds = value;\n\n    this._buildImpulse();\n  }\n\n  get decay() {\n    return this._decay;\n  }\n\n  set decay(value) {\n    let params = Reverb.defaultParams().params;\n    value = Math.min(params.decay.min, value);\n    value = Math.max(params.decay.max, value);\n    this._decay = value;\n\n    this._buildImpulse();\n  }\n\n  get reverse() {\n    return this._reverse;\n  }\n\n  set reverse(value) {\n    this._reverse = value === 1 || value === \"true\";\n\n    this._buildImpulse();\n  }\n\n  get name() {\n    return \"reverb\";\n  }\n\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/pages/app/core/console/effector/effects/reverb/reverb.js"],"names":["Effect","worker","Reverb","defaultParams","params","seconds","min","max","defaultValue","type","description","decay","reverse","constructor","context","opt","input","output","createConvolver","_context","_seconds","_decay","_reverse","_buildImpulseWorker","Worker","postMessage","onmessage","console","log","_buildImpulse","connect","dest","disconnect","rate","sampleRate","length","impulse","createBuffer","impulseL","getChannelData","impulseR","n","i","Math","random","pow","buffer","value","name"],"mappings":"AAAA;;;AAGA,OAAOA,MAAP,MAAmB,aAAnB;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AAEA,eAAe,MAAMC,MAAN,SAAqBF,MAArB,CAA4B;AACvC,SAAOG,aAAP,GAAuB;AACnB,WAAO;AACHC,MAAAA,MAAM,EAAE;AACJC,QAAAA,OAAO,EAAE;AACLC,UAAAA,GAAG,EAAE,CADA;AAELC,UAAAA,GAAG,EAAE,EAFA;AAGLC,UAAAA,YAAY,EAAE,CAHT;AAILC,UAAAA,IAAI,EAAE,OAJD;AAKLC,UAAAA,WAAW,EAAE;AALR,SADL;AAQJC,QAAAA,KAAK,EAAE;AACHL,UAAAA,GAAG,EAAE,CADF;AAEHC,UAAAA,GAAG,EAAE,GAFF;AAGHC,UAAAA,YAAY,EAAE,CAHX;AAIHC,UAAAA,IAAI,EAAE,OAJH;AAKHC,UAAAA,WAAW,EAAE;AALV,SARH;AAeJE,QAAAA,OAAO,EAAE;AACLN,UAAAA,GAAG,EAAE,CADA;AAELC,UAAAA,GAAG,EAAE,CAFA;AAGLC,UAAAA,YAAY,EAAE,CAHT;AAILC,UAAAA,IAAI,EAAE,MAJD;AAKLC,UAAAA,WAAW,EAAG;AALT;AAfL;AADL,KAAP;AAyBH;;AAEDG,EAAAA,WAAW,CAACC,OAAD,EAAUC,GAAG,GAAG,EAAhB,EAAoB;AAC3B;AACA,SAAKC,KAAL,GAAa,KAAKC,MAAL,GAAcH,OAAO,CAACI,eAAR,EAA3B;AACA,SAAKC,QAAL,GAAgBL,OAAhB;AAEA,UAAMX,aAAa,GAAGD,MAAM,CAACC,aAAP,GAAuBC,MAA7C;AACA,SAAKgB,QAAL,GAAgBL,GAAG,CAACV,OAAJ,IAAeF,aAAa,CAACE,OAAd,CAAsBG,YAArD;AACA,SAAKa,MAAL,GAAcN,GAAG,CAACJ,KAAJ,IAAaR,aAAa,CAACQ,KAAd,CAAoBH,YAA/C;AACA,SAAKc,QAAL,GAAgBP,GAAG,CAACH,OAAJ,IAAeT,aAAa,CAACS,OAAd,CAAsBJ,YAArD;AAEA,SAAKe,mBAAL,GAA2B,IAAIC,MAAJ,CAAWvB,MAAX,CAA3B;;AACA,SAAKsB,mBAAL,CAAyBE,WAAzB,CAAqC,CAAC,kBAAD,CAArC;;AACA,SAAKF,mBAAL,CAAyBG,SAAzB,CAAmC,MAAI;AACnCC,MAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACH,KAFD;;AAGA,SAAKC,aAAL;;AACAF,IAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACH;;AAEDE,EAAAA,OAAO,CAACd,KAAD,EAAQe,IAAR,EAAc;AACjBf,IAAAA,KAAK,CAACc,OAAN,CAAc,KAAKd,KAAnB;AACA,SAAKC,MAAL,CAAYa,OAAZ,CAAoBC,IAApB;AACH;;AAEDC,EAAAA,UAAU,GAAG;AACT,SAAKf,MAAL,CAAYe,UAAZ;AACH;;AAEDH,EAAAA,aAAa,GAAG;AACZ,QAAII,IAAI,GAAG,KAAKd,QAAL,CAAce,UAAzB;AAAA,QACIC,MAAM,GAAGF,IAAI,GAAG,KAAK5B,OADzB;AAAA,QAEIM,KAAK,GAAG,KAAKA,KAFjB;AAAA,QAGIyB,OAAO,GAAG,KAAKjB,QAAL,CAAckB,YAAd,CAA2B,CAA3B,EAA8BF,MAA9B,EAAsCF,IAAtC,CAHd;AAAA,QAIIK,QAAQ,GAAGF,OAAO,CAACG,cAAR,CAAuB,CAAvB,CAJf;AAAA,QAKIC,QAAQ,GAAGJ,OAAO,CAACG,cAAR,CAAuB,CAAvB,CALf;AAAA,QAMIE,CANJ;AAAA,QAOIC,CAPJ;;AASA,SAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGP,MAAhB,EAAwBO,CAAC,EAAzB,EAA6B;AACzBD,MAAAA,CAAC,GAAG,KAAK7B,OAAL,GAAeuB,MAAM,GAAGO,CAAxB,GAA4BA,CAAhC;AACAJ,MAAAA,QAAQ,CAACI,CAAD,CAAR,GAAc,CAACC,IAAI,CAACC,MAAL,KAAgB,CAAhB,GAAoB,CAArB,IAA0BD,IAAI,CAACE,GAAL,CAAS,IAAIJ,CAAC,GAAGN,MAAjB,EAAyBxB,KAAzB,CAAxC;AACA6B,MAAAA,QAAQ,CAACE,CAAD,CAAR,GAAc,CAACC,IAAI,CAACC,MAAL,KAAgB,CAAhB,GAAoB,CAArB,IAA0BD,IAAI,CAACE,GAAL,CAAS,IAAIJ,CAAC,GAAGN,MAAjB,EAAyBxB,KAAzB,CAAxC;AACH;;AAED,SAAKK,KAAL,CAAW8B,MAAX,GAAoBV,OAApB;AACH;;AAED,MAAI/B,OAAJ,GAAc;AACV,WAAO,KAAKe,QAAZ;AACH;;AAED,MAAIf,OAAJ,CAAY0C,KAAZ,EAAmB;AACf,QAAI3C,MAAM,GAAGF,MAAM,CAACC,aAAP,GAAuBC,MAApC;AACA2C,IAAAA,KAAK,GAAGJ,IAAI,CAACrC,GAAL,CAASF,MAAM,CAACC,OAAP,CAAeC,GAAxB,EAA6ByC,KAA7B,CAAR;AACAA,IAAAA,KAAK,GAAGJ,IAAI,CAACpC,GAAL,CAASH,MAAM,CAACC,OAAP,CAAeE,GAAxB,EAA6BwC,KAA7B,CAAR;AACA,SAAK3B,QAAL,GAAgB2B,KAAhB;;AACA,SAAKlB,aAAL;AACH;;AAED,MAAIlB,KAAJ,GAAY;AACR,WAAO,KAAKU,MAAZ;AACH;;AAED,MAAIV,KAAJ,CAAUoC,KAAV,EAAiB;AACb,QAAI3C,MAAM,GAAGF,MAAM,CAACC,aAAP,GAAuBC,MAApC;AACA2C,IAAAA,KAAK,GAAGJ,IAAI,CAACrC,GAAL,CAASF,MAAM,CAACO,KAAP,CAAaL,GAAtB,EAA2ByC,KAA3B,CAAR;AACAA,IAAAA,KAAK,GAAGJ,IAAI,CAACpC,GAAL,CAASH,MAAM,CAACO,KAAP,CAAaJ,GAAtB,EAA2BwC,KAA3B,CAAR;AACA,SAAK1B,MAAL,GAAc0B,KAAd;;AACA,SAAKlB,aAAL;AACH;;AAED,MAAIjB,OAAJ,GAAc;AACV,WAAO,KAAKU,QAAZ;AACH;;AAED,MAAIV,OAAJ,CAAYmC,KAAZ,EAAmB;AACf,SAAKzB,QAAL,GAAiByB,KAAK,KAAK,CAAV,IAAeA,KAAK,KAAK,MAA1C;;AACA,SAAKlB,aAAL;AACH;;AAED,MAAImB,IAAJ,GAAU;AACN,WAAO,QAAP;AACH;;AA/GsC","sourcesContent":["/**\r\n * Adapted from https://github.com/web-audio-components/simple-reverb\r\n */\r\nimport Effect from \"./../effect\";\r\nimport worker from \"./buildImpulseWebWorker\";\r\n\r\nexport default class Reverb extends Effect {\r\n    static defaultParams() {\r\n        return {\r\n            params: {\r\n                seconds: {\r\n                    min: 1,\r\n                    max: 50,\r\n                    defaultValue: 3,\r\n                    type: \"float\",\r\n                    description: \"time\"\r\n                },\r\n                decay: {\r\n                    min: 0,\r\n                    max: 100,\r\n                    defaultValue: 2,\r\n                    type: \"float\",\r\n                    description: \"decay\"\r\n                },\r\n                reverse: {\r\n                    min: 0,\r\n                    max: 1,\r\n                    defaultValue: 0,\r\n                    type: \"bool\",\r\n                    description : \"rev\"\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    constructor(context, opt = {}) {\r\n        super();\r\n        this.input = this.output = context.createConvolver()\r\n        this._context = context;\r\n\r\n        const defaultParams = Reverb.defaultParams().params;\r\n        this._seconds = opt.seconds || defaultParams.seconds.defaultValue;\r\n        this._decay = opt.decay || defaultParams.decay.defaultValue;\r\n        this._reverse = opt.reverse || defaultParams.reverse.defaultValue;\r\n\r\n        this._buildImpulseWorker = new Worker(worker);\r\n        this._buildImpulseWorker.postMessage([\"sended to worker\"]);\r\n        this._buildImpulseWorker.onmessage(()=>{\r\n            console.log(\"message from worker recived\")\r\n        })\r\n        this._buildImpulse();\r\n        console.log(\"rung reverb constructor\")\r\n    }\r\n\r\n    connect(input, dest) {\r\n        input.connect(this.input);\r\n        this.output.connect(dest);\r\n    }\r\n\r\n    disconnect() {\r\n        this.output.disconnect();\r\n    }\r\n\r\n    _buildImpulse() {\r\n        let rate = this._context.sampleRate,\r\n            length = rate * this.seconds,\r\n            decay = this.decay,\r\n            impulse = this._context.createBuffer(2, length, rate),\r\n            impulseL = impulse.getChannelData(0),\r\n            impulseR = impulse.getChannelData(1),\r\n            n,\r\n            i;\r\n\r\n        for (i = 0; i < length; i++) {\r\n            n = this.reverse ? length - i : i;\r\n            impulseL[i] = (Math.random() * 2 - 1) * Math.pow(1 - n / length, decay);\r\n            impulseR[i] = (Math.random() * 2 - 1) * Math.pow(1 - n / length, decay);\r\n        }\r\n\r\n        this.input.buffer = impulse;\r\n    }\r\n\r\n    get seconds() {\r\n        return this._seconds;\r\n    }\r\n\r\n    set seconds(value) {\r\n        let params = Reverb.defaultParams().params;\r\n        value = Math.min(params.seconds.min, value);\r\n        value = Math.max(params.seconds.max, value);\r\n        this._seconds = value;\r\n        this._buildImpulse();\r\n    }\r\n\r\n    get decay() {\r\n        return this._decay;\r\n    }\r\n\r\n    set decay(value) {\r\n        let params = Reverb.defaultParams().params;\r\n        value = Math.min(params.decay.min, value);\r\n        value = Math.max(params.decay.max, value);\r\n        this._decay = value;\r\n        this._buildImpulse();\r\n    }\r\n\r\n    get reverse() {\r\n        return this._reverse;\r\n    };\r\n\r\n    set reverse(value) {\r\n        this._reverse = (value === 1 || value === \"true\");\r\n        this._buildImpulse();\r\n    }\r\n\r\n    get name(){\r\n        return \"reverb\";\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}