{"ast":null,"code":"const {\n  tokenizeCssClass\n} = require(\"./tokenizeCssClass\");\n\nconst {\n  tokenizeCssClassBlock\n} = require(\"./tokenizeCssClassBlock\");\n\nmodule.exports = parseCssClass;\n\nfunction parseCssClass() {\n  // console.log(\"this from pars class\", this)\n  let processor = this;\n  let Parser = this.Parser;\n  let inlineTokenizers = Parser.prototype.inlineTokenizers;\n  let blockTokenizers = Parser.prototype.blockTokenizers;\n  let inlineMethods = Parser.prototype.inlineMethods;\n  let blockMethods = Parser.prototype.blockMethods; // console.log('inline methods', inlineMethods);\n  // console.log('block methods', blockMethods)\n  // Add an inline tokenizer (defined in the following example).\n\n  function locateMention(value, fromIndex) {\n    return value.indexOf('{.', fromIndex);\n  }\n\n  tokenizeCssClass.notInLink = true;\n  tokenizeCssClass.locator = locateMention;\n\n  function tokenizeCssClass(eat, value, silent) {\n    console.log(\"in value\", value); //var match = /^.+?{\\.(\\w+)}/.exec(value)\n\n    let match = /^(.*){\\.(\\w+)}(?:[^(\\\\*_{}\\[\\]()#+-.!|]+?)/.exec(value);\n\n    if (match) {\n      if (silent) {\n        return true;\n      }\n\n      let rest = match[0].replace(\"{.\" + match[1] + \"}\", \"\");\n      let sub = processor.parse(rest);\n      let node = sub.children[0];\n      node.className = match[1];\n      console.log(value, rest, sub);\n      return eat(match[0])(node);\n    }\n  }\n\n  inlineTokenizers.cssClass = tokenizeCssClass;\n  blockTokenizers.cssClassBlock = tokenizeCssClassBlock; // Run it just before `text`.\n\n  inlineMethods.splice(inlineMethods.indexOf('thematicBreak'), 0, 'cssClass'); // blockMethods.splice(blockMethods.indexOf('paragraph'), 0, 'cssClassBlock')\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/pages/introduction/MarkDonwExtesnion/parseCssClass.js"],"names":["tokenizeCssClass","require","tokenizeCssClassBlock","module","exports","parseCssClass","processor","Parser","inlineTokenizers","prototype","blockTokenizers","inlineMethods","blockMethods","locateMention","value","fromIndex","indexOf","notInLink","locator","eat","silent","console","log","match","exec","rest","replace","sub","parse","node","children","className","cssClass","cssClassBlock","splice"],"mappings":"AACA,MAAM;AAACA,EAAAA;AAAD,IAAqBC,OAAO,CAAC,oBAAD,CAAlC;;AACA,MAAM;AAACC,EAAAA;AAAD,IAA0BD,OAAO,CAAC,yBAAD,CAAvC;;AACAE,MAAM,CAACC,OAAP,GAAiBC,aAAjB;;AAEA,SAASA,aAAT,GAAyB;AACtB;AACC,MAAIC,SAAS,GAAG,IAAhB;AACA,MAAIC,MAAM,GAAG,KAAKA,MAAlB;AACA,MAAIC,gBAAgB,GAAGD,MAAM,CAACE,SAAP,CAAiBD,gBAAxC;AACA,MAAIE,eAAe,GAAGH,MAAM,CAACE,SAAP,CAAiBC,eAAvC;AACA,MAAIC,aAAa,GAAGJ,MAAM,CAACE,SAAP,CAAiBE,aAArC;AACA,MAAIC,YAAY,GAAGL,MAAM,CAACE,SAAP,CAAiBG,YAApC,CAPqB,CAStB;AACA;AACC;;AAGA,WAASC,aAAT,CAAuBC,KAAvB,EAA8BC,SAA9B,EAAyC;AACrC,WAAOD,KAAK,CAACE,OAAN,CAAc,IAAd,EAAoBD,SAApB,CAAP;AACH;;AAEDf,EAAAA,gBAAgB,CAACiB,SAAjB,GAA6B,IAA7B;AACAjB,EAAAA,gBAAgB,CAACkB,OAAjB,GAA2BL,aAA3B;;AAEA,WAASb,gBAAT,CAA0BmB,GAA1B,EAA+BL,KAA/B,EAAsCM,MAAtC,EAA8C;AAC1CC,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBR,KAAxB,EAD0C,CAE1C;;AACA,QAAIS,KAAK,GAAG,6CAA6CC,IAA7C,CAAkDV,KAAlD,CAAZ;;AAEA,QAAIS,KAAJ,EAAW;AACP,UAAIH,MAAJ,EAAY;AACR,eAAO,IAAP;AACH;;AACD,UAAIK,IAAI,GAAGF,KAAK,CAAC,CAAD,CAAL,CAASG,OAAT,CAAiB,OAAOH,KAAK,CAAC,CAAD,CAAZ,GAAkB,GAAnC,EAAwC,EAAxC,CAAX;AACA,UAAII,GAAG,GAAGrB,SAAS,CAACsB,KAAV,CAAgBH,IAAhB,CAAV;AACA,UAAII,IAAI,GAAGF,GAAG,CAACG,QAAJ,CAAa,CAAb,CAAX;AACAD,MAAAA,IAAI,CAACE,SAAL,GAAiBR,KAAK,CAAC,CAAD,CAAtB;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAYR,KAAZ,EAAmBW,IAAnB,EAA0BE,GAA1B;AACA,aAAOR,GAAG,CAACI,KAAK,CAAC,CAAD,CAAN,CAAH,CAAcM,IAAd,CAAP;AACH;AACJ;;AAIDrB,EAAAA,gBAAgB,CAACwB,QAAjB,GAA4BhC,gBAA5B;AACAU,EAAAA,eAAe,CAACuB,aAAhB,GAAgC/B,qBAAhC,CA1CqB,CA4CrB;;AACAS,EAAAA,aAAa,CAACuB,MAAd,CAAqBvB,aAAa,CAACK,OAAd,CAAsB,eAAtB,CAArB,EAA6D,CAA7D,EAAgE,UAAhE,EA7CqB,CA8CtB;AACF","sourcesContent":["\r\nconst {tokenizeCssClass} = require(\"./tokenizeCssClass\");\r\nconst {tokenizeCssClassBlock} = require(\"./tokenizeCssClassBlock\")\r\nmodule.exports = parseCssClass;\r\n\r\nfunction parseCssClass() {\r\n   // console.log(\"this from pars class\", this)\r\n    let processor = this;\r\n    let Parser = this.Parser\r\n    let inlineTokenizers = Parser.prototype.inlineTokenizers\r\n    let blockTokenizers = Parser.prototype.blockTokenizers;\r\n    let inlineMethods = Parser.prototype.inlineMethods\r\n    let blockMethods = Parser.prototype.blockMethods;\r\n\r\n   // console.log('inline methods', inlineMethods);\r\n   // console.log('block methods', blockMethods)\r\n    // Add an inline tokenizer (defined in the following example).\r\n\r\n\r\n    function locateMention(value, fromIndex) {\r\n        return value.indexOf('{.', fromIndex)\r\n    }\r\n\r\n    tokenizeCssClass.notInLink = true\r\n    tokenizeCssClass.locator = locateMention\r\n\r\n    function tokenizeCssClass(eat, value, silent) {\r\n        console.log(\"in value\", value)\r\n        //var match = /^.+?{\\.(\\w+)}/.exec(value)\r\n        let match = /^(.*){\\.(\\w+)}(?:[^(\\\\*_{}\\[\\]()#+-.!|]+?)/.exec(value)\r\n\r\n        if (match) {\r\n            if (silent) {\r\n                return true\r\n            }\r\n            let rest = match[0].replace(\"{.\" + match[1] + \"}\", \"\")\r\n            let sub = processor.parse(rest);\r\n            let node = sub.children[0];\r\n            node.className = match[1];\r\n            console.log(value, rest,  sub);\r\n            return eat(match[0])(node)\r\n        }\r\n    }\r\n\r\n\r\n\r\n    inlineTokenizers.cssClass = tokenizeCssClass;\r\n    blockTokenizers.cssClassBlock = tokenizeCssClassBlock;\r\n\r\n    // Run it just before `text`.\r\n    inlineMethods.splice(inlineMethods.indexOf('thematicBreak'), 0, 'cssClass')\r\n   // blockMethods.splice(blockMethods.indexOf('paragraph'), 0, 'cssClassBlock')\r\n}"]},"metadata":{},"sourceType":"module"}