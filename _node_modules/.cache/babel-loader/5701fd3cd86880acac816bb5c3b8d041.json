{"ast":null,"code":"import _objectSpread from \"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nvar DEFAULT_OPTIONS = {\n  channelCount: 2,\n  channelCountMode: 'max',\n  channelInterpretation: 'speakers',\n  gain: 1\n};\nexport var createGainNodeConstructor = function createGainNodeConstructor(audioNodeConstructor, createAudioParam, createGainNodeRenderer, createNativeGainNode, getNativeContext, isNativeOfflineAudioContext) {\n  return (\n    /*#__PURE__*/\n    function (_audioNodeConstructor) {\n      _inherits(GainNode, _audioNodeConstructor);\n\n      function GainNode(context) {\n        var _this;\n\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_OPTIONS;\n\n        _classCallCheck(this, GainNode);\n\n        var nativeContext = getNativeContext(context);\n\n        var mergedOptions = _objectSpread({}, DEFAULT_OPTIONS, {}, options);\n\n        var nativeGainNode = createNativeGainNode(nativeContext, mergedOptions);\n        var isOffline = isNativeOfflineAudioContext(nativeContext);\n        var gainNodeRenderer = isOffline ? createGainNodeRenderer() : null;\n        _this = _possibleConstructorReturn(this, _getPrototypeOf(GainNode).call(this, context, false, nativeGainNode, gainNodeRenderer)); // Bug #74: Edge & Safari do not export the correct values for maxValue and minValue.\n\n        _this._gain = createAudioParam(_assertThisInitialized(_this), isOffline, nativeGainNode.gain, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n        return _this;\n      }\n\n      _createClass(GainNode, [{\n        key: \"gain\",\n        get: function get() {\n          return this._gain;\n        }\n      }]);\n\n      return GainNode;\n    }(audioNodeConstructor)\n  );\n};","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/node_modules/standardized-audio-context/build/es2019/factories/gain-node-constructor.js"],"names":["MOST_NEGATIVE_SINGLE_FLOAT","MOST_POSITIVE_SINGLE_FLOAT","DEFAULT_OPTIONS","channelCount","channelCountMode","channelInterpretation","gain","createGainNodeConstructor","audioNodeConstructor","createAudioParam","createGainNodeRenderer","createNativeGainNode","getNativeContext","isNativeOfflineAudioContext","context","options","nativeContext","mergedOptions","nativeGainNode","isOffline","gainNodeRenderer","_gain"],"mappings":";;;;;;;AAAA,SAASA,0BAAT,EAAqCC,0BAArC,QAAuE,cAAvE;AACA,IAAMC,eAAe,GAAG;AACpBC,EAAAA,YAAY,EAAE,CADM;AAEpBC,EAAAA,gBAAgB,EAAE,KAFE;AAGpBC,EAAAA,qBAAqB,EAAE,UAHH;AAIpBC,EAAAA,IAAI,EAAE;AAJc,CAAxB;AAMA,OAAO,IAAMC,yBAAyB,GAAG,SAA5BA,yBAA4B,CAACC,oBAAD,EAAuBC,gBAAvB,EAAyCC,sBAAzC,EAAiEC,oBAAjE,EAAuFC,gBAAvF,EAAyGC,2BAAzG,EAAyI;AAC9K;AAAA;AAAA;AAAA;;AACI,wBAAYC,OAAZ,EAAgD;AAAA;;AAAA,YAA3BC,OAA2B,uEAAjBb,eAAiB;;AAAA;;AAC5C,YAAMc,aAAa,GAAGJ,gBAAgB,CAACE,OAAD,CAAtC;;AACA,YAAMG,aAAa,qBAAQf,eAAR,MAA4Ba,OAA5B,CAAnB;;AACA,YAAMG,cAAc,GAAGP,oBAAoB,CAACK,aAAD,EAAgBC,aAAhB,CAA3C;AACA,YAAME,SAAS,GAAGN,2BAA2B,CAACG,aAAD,CAA7C;AACA,YAAMI,gBAAgB,GAAKD,SAAD,GAAcT,sBAAsB,EAApC,GAAyC,IAAnE;AACA,sFAAMI,OAAN,EAAe,KAAf,EAAsBI,cAAtB,EAAsCE,gBAAtC,GAN4C,CAO5C;;AACA,cAAKC,KAAL,GAAaZ,gBAAgB,gCAAOU,SAAP,EAAkBD,cAAc,CAACZ,IAAjC,EAAuCL,0BAAvC,EAAmED,0BAAnE,CAA7B;AAR4C;AAS/C;;AAVL;AAAA;AAAA,4BAWe;AACP,iBAAO,KAAKqB,KAAZ;AACH;AAbL;;AAAA;AAAA,MAA8Bb,oBAA9B;AAAA;AAeH,CAhBM","sourcesContent":["import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    gain: 1\n};\nexport const createGainNodeConstructor = (audioNodeConstructor, createAudioParam, createGainNodeRenderer, createNativeGainNode, getNativeContext, isNativeOfflineAudioContext) => {\n    return class GainNode extends audioNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeGainNode = createNativeGainNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const gainNodeRenderer = ((isOffline) ? createGainNodeRenderer() : null);\n            super(context, false, nativeGainNode, gainNodeRenderer);\n            // Bug #74: Edge & Safari do not export the correct values for maxValue and minValue.\n            this._gain = createAudioParam(this, isOffline, nativeGainNode.gain, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n        }\n        get gain() {\n            return this._gain;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/gain-node-constructor.js.map"]},"metadata":{},"sourceType":"module"}