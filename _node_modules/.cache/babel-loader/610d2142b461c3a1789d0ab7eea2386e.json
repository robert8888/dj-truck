{"ast":null,"code":"import _regeneratorRuntime from\"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\node_modules\\\\@babel\\\\runtime/regenerator\";var _marked=/*#__PURE__*/_regeneratorRuntime.mark(requestUpdateRecord),_marked2=/*#__PURE__*/_regeneratorRuntime.mark(handel);import{put,select,takeEvery}from\"redux-saga/effects\";import{ACTIONS,pushLog}from\"../../actions\";import{getApi}from\"./../../apis/apiProvider\";import{Log}from\"./../../utils/logger/logger\";import errorParser from\"./../../utils/serverErrorParser/errorParser\";export default function requestUpdateRecord(){return _regeneratorRuntime.wrap(function requestUpdateRecord$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return takeEvery(ACTIONS.R_REC_FINAL_UPDATE,handel);case 2:case\"end\":return _context.stop();}}},_marked);}var getToken=function getToken(state){return state.user.token;};var getTracklist=function getTracklist(state){return state.recorder.tracklist.filter(function(track){return track.start!==undefined&&track.start!==null;}).map(function(track){return{id:track.id,start:track.start,end:track.end};}).map(function(track){console.log(track);if(!track.end){track.end=(new Date().getTime()-state.recorder.startTime)/1000;}return track;});};function handel(action){var token,_response$data,_getApi,callQuery,queries,query,variables,tracks,response,success;return _regeneratorRuntime.wrap(function handel$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return select(getToken);case 2:token=_context2.sent;if(!token){_context2.next=32;break;}_context2.prev=4;_getApi=getApi(\"UserAssets\"),callQuery=_getApi.callQuery,queries=_getApi.queries;query=queries.updateRecordQl;variables={};variables.id=action.id;variables.peaks=action.peaks;variables.duration=action.duration;variables.fileSize=action.fileSize;_context2.next=14;return select(getTracklist);case 14:tracks=_context2.sent;variables.tracks=tracks;_context2.next=18;return callQuery(query,token,variables);case 18:response=_context2.sent;if(!response.errors){_context2.next=21;break;}throw new Error('Server response contains errors ',+errorParser(response.errors));case 21:success=response===null||response===void 0?void 0:(_response$data=response.data)===null||_response$data===void 0?void 0:_response$data.updateRecord;if(success){_context2.next=24;break;}throw new Error();case 24:_context2.next=26;return put(pushLog(new Log(\"Record metadata updated successful id: \".concat(variables.id))));case 26:_context2.next=32;break;case 28:_context2.prev=28;_context2.t0=_context2[\"catch\"](4);_context2.next=32;return put(pushLog(Log.Error(['saga','recorder','request update record'],\"Can't update record data in database\"+_context2.t0.message,\"Sorry. During process of updating record metadata occurred a problem\",_context2.t0)));case 32:case\"end\":return _context2.stop();}}},_marked2,null,[[4,28]]);}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/sagas/recorder/reqUpdateRecord.js"],"names":["requestUpdateRecord","handel","put","select","takeEvery","ACTIONS","pushLog","getApi","Log","errorParser","R_REC_FINAL_UPDATE","getToken","state","user","token","getTracklist","recorder","tracklist","filter","track","start","undefined","map","id","end","console","log","Date","getTime","startTime","action","callQuery","queries","query","updateRecordQl","variables","peaks","duration","fileSize","tracks","response","errors","Error","success","data","updateRecord","message"],"mappings":"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","sourcesContent":["import { put, select, takeEvery } from \"redux-saga/effects\";\r\nimport { ACTIONS, pushLog } from \"../../actions\";\r\nimport { getApi } from \"./../../apis/apiProvider\";\r\nimport { Log } from \"./../../utils/logger/logger\";\r\nimport errorParser from \"./../../utils/serverErrorParser/errorParser\";\r\n\r\nexport default function* requestUpdateRecord() {\r\n    yield takeEvery(ACTIONS.R_REC_FINAL_UPDATE, handel)\r\n}\r\n\r\nconst getToken = state => state.user.token\r\n\r\nconst getTracklist = state =>\r\n    state.recorder.tracklist\r\n        .filter(track => (track.start !== undefined && track.start !== null))\r\n        .map(track => ({\r\n            id: track.id,\r\n            start: track.start,\r\n            end: track.end\r\n        }))\r\n        .map(track => {\r\n            console.log(track)\r\n            if (!track.end) {\r\n                track.end = (new Date().getTime() - state.recorder.startTime) / 1000;\r\n            }\r\n            return track;\r\n        })\r\n\r\nfunction* handel(action) {\r\n    const token = yield select(getToken);\r\n\r\n    if (token) {\r\n        try {\r\n            const { callQuery, queries } = getApi(\"UserAssets\");\r\n            const query = queries.updateRecordQl;\r\n            const variables = {};\r\n            ({\r\n                id: variables.id,\r\n                peaks: variables.peaks,\r\n                duration: variables.duration,\r\n                fileSize: variables.fileSize,\r\n            } = action);\r\n\r\n            const tracks = yield select(getTracklist);\r\n            variables.tracks = tracks;\r\n\r\n            const response = yield callQuery(query, token, variables);\r\n\r\n            if (response.errors) {\r\n                throw new Error('Server response contains errors ', + errorParser(response.errors))\r\n            }\r\n\r\n            const success = response?.data?.updateRecord;\r\n\r\n            if(!success){\r\n                throw new Error();\r\n            }\r\n\r\n            yield put(pushLog(\r\n                    new Log(`Record metadata updated successful id: ${variables.id}`)\r\n                ))\r\n        } catch (error) {\r\n            yield put(pushLog(Log.Error(\r\n                ['saga', 'recorder', 'request update record'],\r\n                \"Can't update record data in database\" + error.message,\r\n                \"Sorry. During process of updating record metadata occurred a problem\",\r\n                error\r\n            )))\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}