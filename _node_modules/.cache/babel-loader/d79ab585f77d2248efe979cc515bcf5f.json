{"ast":null,"code":"import _classCallCheck from\"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import store from\"./../../../../../../store\";import{recording,recordingRquestFail,recordFinalUpdate,roolbackRecord}from\"./../../../../../../actions\";import STATUS from\"./../../observer/STATUS\";import io from\"socket.io-client\";import{getApi}from\"./../../../../../../apis/apiProvider\";import{Logger,Log}from\"./../../../../../../utils/logger/logger\";var Recorder=/*#__PURE__*/function(){function Recorder(mixer){_classCallCheck(this,Recorder);this.mixer=mixer;var streamDestination=this.mixer.audioNodes.channels['main'].recorderStremDestination;this.mediaRecorder=new MediaRecorder(streamDestination.stream,{mimeType:'audio/webm;codecs=opus'});var api=getApi(\"RecordsStore\");this.wsUrl=api.getSocketUrl();this.currentRec=Recorder.initRecState();this.peaksUpdateIntervalHandle=null;this.peaksUpdateIntervalTime=100;//ms\nthis.peaksSizeLimit=2000;}_createClass(Recorder,[{key:\"action\",value:function action(status,param){switch(status){case STATUS.RECORD_START:{this.startRecording(param);break;}case STATUS.RECORD_END:{this.endRecording();break;}default:return;}}},{key:\"startRecording\",value:function startRecording(_ref){var _this=this;var recId=_ref.recId,recName=_ref.recName;try{var token=store.getState().user.token;if(!token){Logger.push(Log.Error({private:\"Attempt to start recordin not' authorized user\",path:['pages','console','core','mixxer','recorder','startRecording']}));return;}if(this.mediaRecorder.state===\"recording\"){Logger.push(Log.Error({private:\"Attempt to start recordin during active recording\",path:['pages','console','core','mixxer','recorder','startRecording']}));return;}var socket=io.connect(this.wsUrl);socket.on(\"connect\",function(){socket.emit('authentication',{token:token});socket.on('authenticated',function(){socket.emit(\"record_details\",{recId:recId,recName:recName});});socket.on('recorder_ready',function(){_this.currentRec.id=recId;_this.currentRec.title=recName;_this.mediaRecorder.ondataavailable=function(e){socket.emit('record_chunk',e.data);};_this.mediaRecorder.addEventListener('stop',function(){socket.emit('record_stop');});_this.mediaRecorder.start(1000);_this.currentRec.duration=new Date().getTime();_this.peaksUpdateIntervalHandle=setInterval(_this.updatePeaks.bind(_this),100);store.dispatch(recording());});socket.on('connect_error',function(){store.dispatch(recordingRquestFail());Logger.push(Log.Error({private:\"Error durring connectio to recorder api\",public:\"During porccess of connection to record database occured problem\",path:['pages','console','core','mixxer','recorder','record socket connecting record']}));});socket.on('recording_finished',function(_ref2){var fileSize=_ref2.fileSize;_this.currentRec.fileSize=fileSize;var _this$currentRec=_this.currentRec,id=_this$currentRec.id,duration=_this$currentRec.duration,peaks=_this$currentRec.peaks;_this.updateRecord({id:id,duration:duration,fileSize:fileSize,peaks:peaks});socket.close();});socket.on(\"recording_error\",function(){store.dispatch(roolbackRecord(_this.currentRec.id));Logger.push(Log.Error({private:\"Rocording socket error. \",public:\"During porccess of recording occured problem\",path:['pages','console','core','mixxer','recorder','record socket error']}));});});}catch(error){Logger.push(Log.Error({private:\"Rocording error \"+error.message,public:\"During porccess of recording occured problem\",path:['pages','console','core','mixxer','recorder','startRecording'],error:error}));}}},{key:\"endRecording\",value:function endRecording(){if(this.mediaRecorder.state===\"inactive\"){return;}clearInterval(this.peaksUpdateIntervalHandle);this.mediaRecorder.stop();this.currentRec.duration=new Date().getTime()-this.currentRec.duration;}},{key:\"updatePeaks\",value:function updatePeaks(){try{var len=this.currentRec.peaks.length;this.currentRec.peaks[len]=this.mixer.currentPeakMinMax[0];this.currentRec.peaks[len+1]=this.mixer.currentPeakMinMax[1];if(this.currentRec.peaks.length>this.peaksSizeLimit){this.currentRec.peaks=this.reducePeaks(this.currentRec.peaks);clearInterval(this.peaksUpdateIntervalHandle);this.peaksUpdateIntervalTime*=2;this.peaksUpdateIntervalHandle=setInterval(this.updatePeaks.bind(this),this.peaksUpdateIntervalTime);}}catch(error){Logger.push(Log.Error({private:\"Error during updating record peaks, Can't udpate record waveform\",public:\"During porccess of recording occured problem\",path:['pages','console','core','mixxer','recorder','updatePeaks'],error:error}));}}},{key:\"updateRecord\",value:function updateRecord(data){var id=data.id,peaks=data.peaks,duration=data.duration,fileSize=data.fileSize;store.dispatch(recordFinalUpdate(id,peaks,duration,fileSize));this.currentRec=Recorder.initRecState();}},{key:\"reducePeaks\",value:function reducePeaks(input){var ratio=arguments.length>1&&arguments[1]!==undefined?arguments[1]:2;var output=[];var inputSize=input.length;var outputSize=Math.ceil(inputSize/ratio);for(var i=0;i<outputSize/2;i++){output[2*i]=input[2*(i*ratio)];output[2*i+1]=input[2*(i*ratio)+1];}return output;}}]);return Recorder;}();Recorder.initRecState=function(){return{id:null,title:\"\",peaks:[],duration:0};};export{Recorder as default};","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/pages/console/core/console/mixer/recorder/recorder.js"],"names":["store","recording","recordingRquestFail","recordFinalUpdate","roolbackRecord","STATUS","io","getApi","Logger","Log","Recorder","mixer","streamDestination","audioNodes","channels","recorderStremDestination","mediaRecorder","MediaRecorder","stream","mimeType","api","wsUrl","getSocketUrl","currentRec","initRecState","peaksUpdateIntervalHandle","peaksUpdateIntervalTime","peaksSizeLimit","status","param","RECORD_START","startRecording","RECORD_END","endRecording","recId","recName","token","getState","user","push","Error","private","path","state","socket","connect","on","emit","id","title","ondataavailable","e","data","addEventListener","start","duration","Date","getTime","setInterval","updatePeaks","bind","dispatch","public","fileSize","peaks","updateRecord","close","error","message","clearInterval","stop","len","length","currentPeakMinMax","reducePeaks","input","ratio","output","inputSize","outputSize","Math","ceil","i"],"mappings":"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","sourcesContent":["import store from \"./../../../../../../store\";\r\nimport { recording, recordingRquestFail, recordFinalUpdate, roolbackRecord } from \"./../../../../../../actions\"\r\nimport STATUS from \"./../../observer/STATUS\";\r\nimport io from \"socket.io-client\";\r\nimport { getApi } from \"./../../../../../../apis/apiProvider\";\r\nimport { Logger, Log } from \"./../../../../../../utils/logger/logger\";\r\n\r\n\r\nexport default class Recorder {\r\n    static initRecState = () => ({\r\n        id: null,\r\n        title: \"\",\r\n        peaks: [],\r\n        duration: 0,\r\n    })\r\n\r\n    constructor(mixer) {\r\n        this.mixer = mixer;\r\n\r\n        const streamDestination = this.mixer.audioNodes.channels['main'].recorderStremDestination;\r\n        this.mediaRecorder = new MediaRecorder(streamDestination.stream, {\r\n            mimeType: 'audio/webm;codecs=opus',\r\n        });\r\n\r\n        const api = getApi(\"RecordsStore\");\r\n        this.wsUrl = api.getSocketUrl();\r\n\r\n        this.currentRec = Recorder.initRecState();\r\n\r\n\r\n        this.peaksUpdateIntervalHandle = null;\r\n        this.peaksUpdateIntervalTime = 100; //ms\r\n        this.peaksSizeLimit = 2000;\r\n    }\r\n\r\n\r\n    action(status, param) {\r\n        switch (status) {\r\n            case STATUS.RECORD_START: {\r\n                this.startRecording(param);\r\n                break;\r\n            }\r\n            case STATUS.RECORD_END: {\r\n                this.endRecording()\r\n                break;\r\n            }\r\n            default: return;\r\n        }\r\n    }\r\n\r\n    startRecording({ recId, recName }) {\r\n    try {\r\n        const token = store.getState().user.token;\r\n        if (!token) {\r\n            Logger.push(Log.Error(\r\n                {\r\n                    private: \"Attempt to start recordin not' authorized user\",\r\n                    path: ['pages', 'console', 'core', 'mixxer', 'recorder', 'startRecording']\r\n                }))\r\n            return;\r\n        }\r\n        if (this.mediaRecorder.state === \"recording\") {\r\n            Logger.push(Log.Error(\r\n                {\r\n                    private: \"Attempt to start recordin during active recording\",\r\n                    path: ['pages', 'console', 'core', 'mixxer', 'recorder', 'startRecording']\r\n                }))\r\n            return;\r\n        }\r\n\r\n        const socket = io.connect(this.wsUrl);\r\n\r\n        socket.on(\"connect\", () => {\r\n            socket.emit('authentication', { token: token });\r\n            socket.on('authenticated', () => {\r\n                socket.emit(\"record_details\", { recId, recName })\r\n            })\r\n            socket.on('recorder_ready', () => {\r\n                this.currentRec.id = recId;\r\n                this.currentRec.title = recName;\r\n\r\n                this.mediaRecorder.ondataavailable = (e) => {\r\n                    socket.emit('record_chunk', e.data)\r\n                }\r\n\r\n                this.mediaRecorder.addEventListener('stop', () => {\r\n                    socket.emit('record_stop')\r\n                })\r\n\r\n                this.mediaRecorder.start(1000);\r\n\r\n                this.currentRec.duration = new Date().getTime();\r\n\r\n                this.peaksUpdateIntervalHandle = setInterval(this.updatePeaks.bind(this), 100);\r\n\r\n                store.dispatch(recording());\r\n            });\r\n\r\n            socket.on('connect_error', () => {\r\n                store.dispatch(recordingRquestFail())\r\n                Logger.push(Log.Error(\r\n                    {\r\n                        private: \"Error durring connectio to recorder api\",\r\n                        public: \"During porccess of connection to record database occured problem\",\r\n                        path: ['pages', 'console', 'core', 'mixxer', 'recorder', 'record socket connecting record'],\r\n                    }))\r\n            })\r\n\r\n            socket.on('recording_finished', ({ fileSize }) => {\r\n                this.currentRec.fileSize = fileSize;\r\n                const { id, duration, peaks } = this.currentRec;\r\n                this.updateRecord({\r\n                    id, duration, fileSize, peaks\r\n                })\r\n                socket.close();\r\n            })\r\n\r\n            socket.on(\"recording_error\", () => {\r\n                store.dispatch(roolbackRecord(this.currentRec.id))\r\n                Logger.push(Log.Error(\r\n                    {\r\n                        private: \"Rocording socket error. \",\r\n                        public: \"During porccess of recording occured problem\",\r\n                        path: ['pages', 'console', 'core', 'mixxer', 'recorder', 'record socket error'],\r\n                    }))\r\n            })\r\n        })\r\n        } catch(error){\r\n            Logger.push(Log.Error(\r\n                {\r\n                    private: \"Rocording error \" + error.message,\r\n                    public: \"During porccess of recording occured problem\",\r\n                    path: ['pages', 'console', 'core', 'mixxer', 'recorder', 'startRecording'],\r\n                    error,\r\n                }))\r\n        }\r\n    }\r\n\r\n    endRecording() {\r\n        if(this.mediaRecorder.state === \"inactive\"){\r\n            return;\r\n        }\r\n\r\n        clearInterval(this.peaksUpdateIntervalHandle);\r\n        this.mediaRecorder.stop();\r\n        this.currentRec.duration = new Date().getTime() - this.currentRec.duration;\r\n    }\r\n\r\n    updatePeaks() {\r\n        try {\r\n            const len = this.currentRec.peaks.length;\r\n            this.currentRec.peaks[len] = this.mixer.currentPeakMinMax[0];\r\n            this.currentRec.peaks[len + 1] = this.mixer.currentPeakMinMax[1];\r\n            if (this.currentRec.peaks.length > this.peaksSizeLimit) {\r\n                this.currentRec.peaks = this.reducePeaks(this.currentRec.peaks)\r\n                clearInterval(this.peaksUpdateIntervalHandle);\r\n                this.peaksUpdateIntervalTime *= 2;\r\n                this.peaksUpdateIntervalHandle = setInterval(this.updatePeaks.bind(this), this.peaksUpdateIntervalTime);\r\n            }\r\n        } catch(error){\r\n            Logger.push(Log.Error(\r\n                {\r\n                    private: \"Error during updating record peaks, Can't udpate record waveform\",\r\n                    public: \"During porccess of recording occured problem\",\r\n                    path: ['pages', 'console', 'core', 'mixxer', 'recorder', 'updatePeaks'],\r\n                    error\r\n                }))\r\n        }\r\n    }\r\n\r\n    updateRecord(data) {\r\n        const { id, peaks, duration, fileSize } = data;\r\n        store.dispatch(recordFinalUpdate(\r\n            id, peaks, duration, fileSize\r\n        ))\r\n        this.currentRec = Recorder.initRecState();\r\n    }\r\n\r\n    reducePeaks(input, ratio = 2) {\r\n        let output = [];\r\n        const inputSize = input.length;\r\n        const outputSize = Math.ceil(inputSize / ratio);\r\n\r\n        for (let i = 0; i < outputSize / 2; i++) {\r\n            output[2 * i] = input[2 * (i * ratio)];\r\n            output[2 * i + 1] = input[(2 * (i * ratio)) + 1];\r\n        }\r\n\r\n        return output;\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}