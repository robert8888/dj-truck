{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJEKTY\\\\APKI\\\\DjTruck\\\\djtruck\\\\src\\\\pages\\\\app\\\\components\\\\Console\\\\Effector\\\\Effector.js\";\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { connect } from \"react-redux\";\nimport { throttle } from \"./../../../../../utils/functions/lodash\";\nimport \"./effector-channel.scss\";\nimport DryWetKnob from \"./components/DryWetKnob/DryWetKnob\";\nimport EffectorButton from \"./components/EffectorButton/EffectorButton\";\nimport EffectorKnob from \"./components/EffectorKnob/EffectorKnob\";\nimport { Dropdown, DropdownButton } from \"react-bootstrap\";\nimport { setEffectParametr, setCurrentEffect, setDryWet } from \"./../../../../../actions\";\nimport mapComponentToParameter from \"./utils/mapComponentToParameter\";\n\nconst Effector = props => {\n  const [currentEffect, setCurrentEffect] = useState(undefined);\n  const [effectorParams, setEffectorParams] = useState([]);\n  /*const paramChangeHandle = (param, value) => {\r\n      props.setParameter(currentEffect, param, value);\r\n  }\r\n  */\n\n  const setParameterHandle = props.setParameter;\n  const paramChangeHandle = useCallback((param, value) => {\n    setParameterHandle(currentEffect, param, value);\n  }, [setParameterHandle, currentEffect]);\n  const setCurrentEffectHandle = props.setCurrentEffect;\n  useEffect(() => {\n    setCurrentEffectHandle(currentEffect);\n  }, [currentEffect, setCurrentEffectHandle]);\n  useEffect(() => {\n    let currentEffectParams = props.availableEffects[currentEffect];\n\n    if (!currentEffectParams) {\n      setEffectorParams([]);\n      return;\n    }\n\n    setEffectorParams(Object.entries(currentEffectParams).map(([name, param]) => {\n      //console.log(\"producing knobs\")\n      const effectState = props.channelState.effects[currentEffect];\n      let value = param.defaultValue;\n\n      if (effectState) {\n        value = effectState[name] || value;\n      }\n\n      let bindData = {\n        channel: props.channel,\n        effect: currentEffect,\n        name: name\n      };\n      let reactElement = \"\";\n\n      if (param.type === \"float\") {\n        let Knob = mapComponentToParameter(bindData, EffectorKnob);\n        reactElement = React.createElement(Knob, {\n          key: name + param.description,\n          scale: param.max - param.min,\n          initValue: value,\n          alt: param.description,\n          showValue: true,\n          onChange: paramChangeHandle.bind(null, name),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60\n          },\n          __self: this\n        });\n      } else if (param.type === \"bool\") {\n        const Button = mapComponentToParameter(bindData, EffectorButton);\n        reactElement = React.createElement(Button, {\n          key: currentEffect + name + param.description,\n          onChange: paramChangeHandle.bind(null, name),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71\n          },\n          __self: this\n        }, param.description);\n      }\n\n      return reactElement;\n    }));\n  }, [currentEffect]);\n  const availableEffects = Object.keys(props.availableEffects).map((effect, index) => {\n    return React.createElement(Dropdown.Item, {\n      key: effect + \"-\" + index,\n      onClick: setCurrentEffect.bind(null, effect),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, effect);\n  });\n  return React.createElement(\"div\", {\n    className: \"effector-channel effector ch-\" + props.channel,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, \"FX \" + props.channel), React.createElement(\"div\", {\n    className: \"dra-wet-knob\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, React.createElement(DryWetKnob, {\n    alt: \"D/W\",\n    onChange: props.setDryWet,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"effect-selector\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, React.createElement(DropdownButton, {\n    title: currentEffect || \"-----\",\n    className: \"btn-effect-select\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, React.createElement(Dropdown.Item, {\n    key: \"none\",\n    onClick: setCurrentEffect.bind(null, undefined),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, \" ----- \"), availableEffects)), React.createElement(\"div\", {\n    className: \"effector-param\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, effectorParams));\n};\n\nconst mapStateToProps = (state, ownProps) => ({\n  availableEffects: state.effector.effects,\n  channelState: state.effector.channels[ownProps.channel]\n});\n\nconst mapDispachToProps = (dispatch, ownProps) => {\n  const tdispatch = throttle(dispatch, 100);\n  return {\n    setParameter: (...args) => tdispatch(setEffectParametr(ownProps.channel, ...args)),\n    setCurrentEffect: effect => dispatch(setCurrentEffect(ownProps.channel, effect)),\n    setDryWet: value => dispatch(setDryWet(ownProps.channel, value))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispachToProps)(Effector);","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/pages/app/components/Console/Effector/Effector.js"],"names":["React","useState","useEffect","useCallback","connect","throttle","DryWetKnob","EffectorButton","EffectorKnob","Dropdown","DropdownButton","setEffectParametr","setCurrentEffect","setDryWet","mapComponentToParameter","Effector","props","currentEffect","undefined","effectorParams","setEffectorParams","setParameterHandle","setParameter","paramChangeHandle","param","value","setCurrentEffectHandle","currentEffectParams","availableEffects","Object","entries","map","name","effectState","channelState","effects","defaultValue","bindData","channel","effect","reactElement","type","Knob","description","max","min","bind","Button","keys","index","mapStateToProps","state","ownProps","effector","channels","mapDispachToProps","dispatch","tdispatch","args"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { throttle } from \"./../../../../../utils/functions/lodash\";\r\n\r\nimport \"./effector-channel.scss\";\r\nimport DryWetKnob from \"./components/DryWetKnob/DryWetKnob\";\r\nimport EffectorButton from \"./components/EffectorButton/EffectorButton\";\r\nimport EffectorKnob from \"./components/EffectorKnob/EffectorKnob\";\r\nimport { Dropdown, DropdownButton } from \"react-bootstrap\";\r\nimport { setEffectParametr, setCurrentEffect, setDryWet } from \"./../../../../../actions\";\r\nimport mapComponentToParameter from \"./utils/mapComponentToParameter\";\r\nconst Effector = props => {\r\n\r\n    const [currentEffect, setCurrentEffect] = useState(undefined);\r\n    const [effectorParams, setEffectorParams] = useState([]);\r\n\r\n\r\n    /*const paramChangeHandle = (param, value) => {\r\n        props.setParameter(currentEffect, param, value);\r\n    }\r\n*/\r\n\r\n    const setParameterHandle = props.setParameter;\r\n    const paramChangeHandle = useCallback((param, value)=>{\r\n        setParameterHandle(currentEffect, param, value);\r\n    }, [setParameterHandle, currentEffect])\r\n\r\n    const setCurrentEffectHandle = props.setCurrentEffect;\r\n    useEffect(() => {\r\n        setCurrentEffectHandle(currentEffect);\r\n    }, [currentEffect, setCurrentEffectHandle])\r\n\r\n\r\n    useEffect(() => {\r\n        let currentEffectParams = props.availableEffects[currentEffect];\r\n        if (!currentEffectParams) {\r\n            setEffectorParams([]);\r\n            return;\r\n        }\r\n\r\n        setEffectorParams(Object.entries(currentEffectParams).map(([name, param]) => {\r\n            //console.log(\"producing knobs\")\r\n            const effectState = props.channelState.effects[currentEffect];\r\n\r\n            let value = param.defaultValue;\r\n            if (effectState) {\r\n                value = effectState[name] || value;\r\n            }\r\n\r\n            let bindData = {\r\n                channel: props.channel,\r\n                effect: currentEffect,\r\n                name: name\r\n            };\r\n\r\n            let reactElement = \"\";\r\n            if (param.type === \"float\") {\r\n                let Knob = mapComponentToParameter(bindData, EffectorKnob);\r\n                reactElement = (\r\n                    <Knob\r\n                        key={name + param.description}\r\n                        scale={param.max - param.min}\r\n                        initValue={value}\r\n                        alt={param.description}\r\n                        showValue\r\n                        onChange={paramChangeHandle.bind(null, name)} />\r\n                )\r\n            } else if (param.type === \"bool\") {\r\n                const Button = mapComponentToParameter(bindData, EffectorButton);\r\n\r\n                reactElement = (<Button\r\n                    key={currentEffect + name + param.description}\r\n                    onChange={paramChangeHandle.bind(null, name)}>\r\n                    {param.description}\r\n                </Button>)\r\n            }\r\n\r\n            return reactElement\r\n        }))\r\n    }, [ currentEffect])\r\n\r\n\r\n    const availableEffects = Object.keys(props.availableEffects).map((effect, index) => {\r\n        return (<Dropdown.Item key={effect + \"-\" + index} onClick={setCurrentEffect.bind(null, effect)}>{effect}</Dropdown.Item>)\r\n    })\r\n\r\n\r\n    return (\r\n        <div className={\"effector-channel effector ch-\" + props.channel}>\r\n            <span className=\"label\">{\"FX \" + props.channel}</span>\r\n            <div className=\"dra-wet-knob\">\r\n                <DryWetKnob alt=\"D/W\" onChange={props.setDryWet} />\r\n            </div>\r\n            <div className=\"effect-selector\">\r\n                <DropdownButton title={currentEffect || \"-----\"} className=\"btn-effect-select\">\r\n                    <Dropdown.Item key={\"none\"} onClick={setCurrentEffect.bind(null, undefined)}> ----- </Dropdown.Item>\r\n                    {availableEffects}\r\n                </DropdownButton>\r\n            </div>\r\n            <div className=\"effector-param\">\r\n                {effectorParams}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => ({\r\n    availableEffects: state.effector.effects,\r\n    channelState: state.effector.channels[ownProps.channel]\r\n})\r\n\r\nconst mapDispachToProps = (dispatch, ownProps) => {\r\n    const tdispatch = throttle(dispatch, 100);\r\n    return {\r\n    setParameter: (...args) => tdispatch(setEffectParametr(ownProps.channel, ...args)),\r\n    setCurrentEffect: (effect) => dispatch(setCurrentEffect(ownProps.channel, effect)),\r\n    setDryWet: (value) => dispatch(setDryWet(ownProps.channel, value))\r\n}}\r\n\r\nexport default connect(mapStateToProps, mapDispachToProps)(Effector);\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}