{"ast":null,"code":"import { put, select, takeEvery } from \"redux-saga/effects\";\nimport { ACTIONS, pushLog, updateComment } from \"../../../actions\";\nimport { getApi } from \"./../../../apis/apiProvider\";\nimport { Log } from \"./../../../utils/logger/logger\";\nimport errorParser from \"./../../../utils/serverErrorParser/errorParser\";\nexport default function* requestCreateComment() {\n  yield takeEvery(ACTIONS.RECS_REQ_UPDATE_COMMENT, handel);\n}\n\nconst getToken = state => state.user.token;\n\nfunction* handel(action) {\n  const token = yield select(getToken);\n  if (!token) return;\n\n  try {\n    const {\n      callQuery,\n      queries\n    } = getApi(\"UserAssets\");\n    const query = queries.updateCommentQl;\n    const response = yield callQuery(query, token, action.commentData);\n\n    if (response.errors) {\n      throw new Error(\"Server response contains errors \" + errorParser(response.errors));\n    }\n\n    const success = response === null || response === void 0 ? void 0 : response.data;\n\n    if (!success) {\n      throw new Error();\n    }\n\n    yield put(updateComment(action.commentData));\n    yield put(pushLog(new Log(`Comment id: ${action.commentId} data updated in database`)));\n  } catch (error) {\n    yield put(pushLog(Log.Error(['saga', 'record', 'comments', 'request updated comment'], \"Can't update comenta data in database\" + error.message, \"Sorry. During updating comment in database occurred problem\", error)));\n  }\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/sagas/records/comments/reqUpdateComment.js"],"names":["put","select","takeEvery","ACTIONS","pushLog","updateComment","getApi","Log","errorParser","requestCreateComment","RECS_REQ_UPDATE_COMMENT","handel","getToken","state","user","token","action","callQuery","queries","query","updateCommentQl","response","commentData","errors","Error","success","data","commentId","error","message"],"mappings":"AAAA,SAASA,GAAT,EAAcC,MAAd,EAAsBC,SAAtB,QAAuC,oBAAvC;AACA,SAASC,OAAT,EAAkBC,OAAlB,EAA2BC,aAA3B,QAAgD,kBAAhD;AACA,SAASC,MAAT,QAAuB,6BAAvB;AACA,SAASC,GAAT,QAAoB,gCAApB;AACA,OAAOC,WAAP,MAAwB,gDAAxB;AAEA,eAAe,UAAUC,oBAAV,GAAiC;AAC5C,QAAMP,SAAS,CAACC,OAAO,CAACO,uBAAT,EAAkCC,MAAlC,CAAf;AACH;;AAED,MAAMC,QAAQ,GAAGC,KAAK,IAAIA,KAAK,CAACC,IAAN,CAAWC,KAArC;;AAEA,UAAUJ,MAAV,CAAiBK,MAAjB,EAAyB;AACrB,QAAMD,KAAK,GAAG,MAAMd,MAAM,CAACW,QAAD,CAA1B;AACA,MAAG,CAACG,KAAJ,EAAW;;AAEX,MAAI;AACA,UAAM;AAAEE,MAAAA,SAAF;AAAaC,MAAAA;AAAb,QAAyBZ,MAAM,CAAC,YAAD,CAArC;AAEA,UAAMa,KAAK,GAAGD,OAAO,CAACE,eAAtB;AACA,UAAMC,QAAQ,GAAG,MAAMJ,SAAS,CAACE,KAAD,EAAQJ,KAAR,EAAeC,MAAM,CAACM,WAAtB,CAAhC;;AAGA,QAAID,QAAQ,CAACE,MAAb,EAAqB;AACjB,YAAM,IAAIC,KAAJ,CAAU,qCAAqChB,WAAW,CAACa,QAAQ,CAACE,MAAV,CAA1D,CAAN;AACH;;AAED,UAAME,OAAO,GAAGJ,QAAH,aAAGA,QAAH,uBAAGA,QAAQ,CAAEK,IAA1B;;AAEA,QAAI,CAACD,OAAL,EAAc;AACV,YAAM,IAAID,KAAJ,EAAN;AACH;;AAED,UAAMxB,GAAG,CAACK,aAAa,CAACW,MAAM,CAACM,WAAR,CAAd,CAAT;AAEA,UAAMtB,GAAG,CAACI,OAAO,CAAC,IAAIG,GAAJ,CAAS,eAAcS,MAAM,CAACW,SAAU,2BAAxC,CAAD,CAAR,CAAT;AACH,GApBD,CAoBE,OAAOC,KAAP,EAAc;AACZ,UAAM5B,GAAG,CAACI,OAAO,CAACG,GAAG,CAACiB,KAAJ,CACd,CAAC,MAAD,EAAS,QAAT,EAAmB,UAAnB,EAA+B,yBAA/B,CADc,EAEd,0CAA0CI,KAAK,CAACC,OAFlC,EAGd,6DAHc,EAIdD,KAJc,CAAD,CAAR,CAAT;AAMH;AACJ","sourcesContent":["import { put, select, takeEvery } from \"redux-saga/effects\";\r\nimport { ACTIONS, pushLog, updateComment } from \"../../../actions\";\r\nimport { getApi } from \"./../../../apis/apiProvider\";\r\nimport { Log } from \"./../../../utils/logger/logger\";\r\nimport errorParser from \"./../../../utils/serverErrorParser/errorParser\";\r\n\r\nexport default function* requestCreateComment() {\r\n    yield takeEvery(ACTIONS.RECS_REQ_UPDATE_COMMENT, handel)\r\n}\r\n\r\nconst getToken = state => state.user.token\r\n\r\nfunction* handel(action) {\r\n    const token = yield select(getToken);\r\n    if(!token) return;\r\n\r\n    try {\r\n        const { callQuery, queries } = getApi(\"UserAssets\");\r\n\r\n        const query = queries.updateCommentQl;\r\n        const response = yield callQuery(query, token, action.commentData);\r\n\r\n        \r\n        if (response.errors) {\r\n            throw new Error(\"Server response contains errors \" + errorParser(response.errors));\r\n        }\r\n\r\n        const success = response?.data;\r\n        \r\n        if (!success) {\r\n            throw new Error()\r\n        } \r\n\r\n        yield put(updateComment(action.commentData));\r\n        \r\n        yield put(pushLog(new Log(`Comment id: ${action.commentId} data updated in database`)))\r\n    } catch (error) {\r\n        yield put(pushLog(Log.Error(\r\n            ['saga', 'record', 'comments', 'request updated comment'],\r\n            \"Can't update comenta data in database\" + error.message,\r\n            \"Sorry. During updating comment in database occurred problem\",\r\n            error\r\n        )))\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}