{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJEKTY\\\\APKI\\\\DjTruck\\\\djtruck\\\\src\\\\pages\\\\app\\\\components\\\\PlayListExplorer\\\\Explorer\\\\ExplorerTree\\\\ExplorerTree.js\";\nimport React, { useCallback, Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport \"./explorer-tree.scss\";\nimport { toggleDir } from \"./../../../../../../actions\";\nimport { isEmpty, sortObj } from \"./../../../../../../utils/objects/helpers\";\nimport UUID from \"uuidjs\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport ClassName from \"classnames\";\nimport { faFolder, faFile, faAngleRight, faAngleDown } from \"@fortawesome/free-solid-svg-icons\";\n\nconst ExplorerTree = props => {\n  const toogleDir = useCallback(path => {\n    props.toogleDir(path);\n  }, [props.toogleDir]);\n  const getDirElement = useCallback((name, path, open, empty) => {\n    console.log(path.join(\"\"), props.currentSelection.join(\"\"));\n    const liClassList = ClassName(\"list-item item-dir\", {\n      \"item-dir--empty\": empty\n    }, {\n      \"item--selected\": path.join(\"\") === props.currentSelection.join(\"\")\n    });\n    return React.createElement(\"li\", {\n      onDoubleClick: !empty ? toogleDir.bind(null, [...path, name]) : null,\n      className: liClassList,\n      \"data-path\": path.join(\"/\"),\n      key: UUID.genV1(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, !empty && React.createElement(\"button\", {\n      className: \"btn-dir \" + (open ? \"btn-dir--expand\" : \"btn-dir--colapse\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, React.createElement(FontAwesomeIcon, {\n      className: \"icon\",\n      icon: open ? faAngleDown : faAngleRight,\n      onClick: toogleDir.bind(null, [...path, name]),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    })), React.createElement(FontAwesomeIcon, {\n      className: \"icon icon-dir\",\n      icon: faFolder,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }), name);\n  });\n  const getFileElement = useCallback((name, path) => {\n    return React.createElement(\"li\", {\n      className: \"list-item item-file \",\n      \"data-path\": path.join(\"/\"),\n      key: UUID.genV1(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, React.createElement(FontAwesomeIcon, {\n      className: \"icon icon-file\",\n      icon: faFile,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }), name);\n  });\n\n  const renderDirElements = (name, content, path) => {\n    content = sortObj(content);\n\n    if (content instanceof Array) {\n      return getFileElement(name, path);\n    } else {\n      if (content._open === true) {\n        return React.createElement(Fragment, {\n          key: UUID.genV1(),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 63\n          },\n          __self: this\n        }, getDirElement(name, path, true), renderDir(content, [...path, name]));\n      } else {\n        if (isEmpty(content)) {\n          return getDirElement(name, path, false, true);\n        }\n\n        return getDirElement(name, path, false);\n      }\n    }\n  };\n\n  const renderDir = (dir, path) => {\n    return React.createElement(\"ul\", {\n      className: \"list-dir dir-content\",\n      key: UUID.generate(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, Object.entries(dir).map(([name, content]) => {\n      if (name === \"_open\") {\n        return null;\n      }\n\n      return renderDirElements(name, content, path);\n    }));\n  };\n\n  return React.createElement(\"div\", {\n    className: \"explorer-tree\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, renderDir(props.root, ['root']));\n};\n\nconst mapStateToProps = state => ({\n  root: state.playList.root,\n  currentSelection: state.playList.currentSelection\n});\n\nconst mapDispatchToProps = dispatch => ({\n  toogleDir: path => dispatch(toggleDir(path))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ExplorerTree);","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/pages/app/components/PlayListExplorer/Explorer/ExplorerTree/ExplorerTree.js"],"names":["React","useCallback","Fragment","connect","toggleDir","isEmpty","sortObj","UUID","FontAwesomeIcon","ClassName","faFolder","faFile","faAngleRight","faAngleDown","ExplorerTree","props","toogleDir","path","getDirElement","name","open","empty","console","log","join","currentSelection","liClassList","bind","genV1","getFileElement","renderDirElements","content","Array","_open","renderDir","dir","generate","Object","entries","map","root","mapStateToProps","state","playList","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useCallback, Fragment } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport \"./explorer-tree.scss\";\r\nimport { toggleDir} from \"./../../../../../../actions\"\r\nimport { isEmpty, sortObj } from \"./../../../../../../utils/objects/helpers\";\r\nimport UUID from \"uuidjs\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport ClassName from \"classnames\";\r\nimport { faFolder,  faFile, faAngleRight, faAngleDown } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst ExplorerTree = props => {\r\n\r\n    const toogleDir = useCallback((path) => {\r\n        props.toogleDir(path);\r\n    }, [props.toogleDir])\r\n\r\n    const getDirElement = useCallback((name, path, open, empty) => {\r\n        console.log(path.join(\"\") , props.currentSelection.join(\"\"))\r\n        const liClassList = ClassName(\r\n            \"list-item item-dir\",\r\n            {\"item-dir--empty\" : empty},\r\n            {\"item--selected\": path.join(\"\") === props.currentSelection.join(\"\")}\r\n        )\r\n        return (\r\n            <li\r\n                onDoubleClick={(!empty) ? toogleDir.bind(null, [...path, name]) : null}\r\n                className={liClassList}\r\n                data-path={path.join(\"/\")}\r\n                key={UUID.genV1()}>\r\n                {!empty &&\r\n                    <button\r\n                        className={\"btn-dir \" + ((open) ? \"btn-dir--expand\" : \"btn-dir--colapse\")}>\r\n                        <FontAwesomeIcon \r\n                            className=\"icon\" \r\n                            icon={(open) ? faAngleDown : faAngleRight } \r\n                            onClick={toogleDir.bind(null, [...path, name])}/>\r\n                    </button>}\r\n                    <FontAwesomeIcon className=\"icon icon-dir\" icon={faFolder} />\r\n                    {name}\r\n            </li>\r\n        )\r\n    })\r\n\r\n    const getFileElement = useCallback((name, path) => {\r\n        return (\r\n            <li\r\n                className=\"list-item item-file \"\r\n                data-path={path.join(\"/\")}\r\n                key={UUID.genV1()}>\r\n                <FontAwesomeIcon className=\"icon icon-file\" icon={faFile} />\r\n                {name}\r\n            </li>\r\n        );\r\n    })\r\n\r\n    const renderDirElements = (name, content, path) => {\r\n        content = sortObj(content);\r\n        if (content instanceof Array) {\r\n            return getFileElement(name, path)\r\n        } else {\r\n            if (content._open === true) {\r\n                return (\r\n                    <Fragment key={UUID.genV1()}>\r\n                        {getDirElement(name, path, true)}\r\n                        {renderDir(content, [...path, name])}\r\n                    </Fragment>\r\n                )\r\n            } else {\r\n                if (isEmpty(content)) {\r\n                    return getDirElement(name, path, false, true)\r\n                }\r\n                return getDirElement(name, path, false)\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    const renderDir = (dir, path) => {\r\n        return (\r\n            <ul className=\"list-dir dir-content\" key={UUID.generate()}>\r\n                {\r\n                    Object.entries(dir).map(([name, content]) => {\r\n                        if (name === \"_open\") {\r\n                            return null;\r\n                        }\r\n                        return renderDirElements(name, content, path);\r\n                    })\r\n                }\r\n            </ul>\r\n        )\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"explorer-tree\">\r\n            {renderDir(props.root, ['root'])}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    root: state.playList.root,\r\n    currentSelection : state.playList.currentSelection\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    toogleDir: path => dispatch(toggleDir(path)),\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ExplorerTree);"]},"metadata":{},"sourceType":"module"}