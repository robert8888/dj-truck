{"ast":null,"code":"import { get } from \"lodash/object\";\nimport { hideLoading, showLoading } from 'react-redux-loading-bar';\nimport { fork, put, select, takeEvery } from \"redux-saga/effects\";\nimport { ACTIONS, pushLog } from \"../../actions\";\nimport { getApi } from \"./../../apis/apiProvider\";\nimport Log from \"./../../utils/logger/logger\";\nimport { formater } from \"./../../utils/time/timeFromater\";\nexport default function* copyTrackToListSaga() {\n  yield takeEvery(ACTIONS.PL_COPY_TRACK_TO_LIST, forkHandle);\n\n  function* forkHandle(action) {\n    yield fork(handle, action);\n  }\n}\n\nconst getToken = state => state.user.token;\n\nconst getPlaylist = (state, path) => get(state.playList, path);\n\nfunction* handle(action) {\n  const path = ['saga', 'playlist', 'request copy'];\n  const token = yield select(getToken);\n\n  if (!token) {\n    return;\n  }\n\n  try {\n    yield put(showLoading());\n    const {\n      callQuery,\n      queries\n    } = getApi(\"UserAssets\");\n    const playlist = yield select(getPlaylist, action.path);\n    let playlistId = playlist._id;\n    let playlistLength = playlist._content.length;\n\n    if (!playlistId) {\n      throw new Error(\"Internal error - playlist id not found\");\n    }\n\n    const result = yield callQuery(queries.createTrackQl, token, {\n      playlist: playlistId,\n      title: action.track.title,\n      source: action.track.source,\n      sourceId: action.track.sourceId,\n      quality: action.track.quality,\n      bpm: action.bpm === 'calculating' ? 0 : action.track.bpm,\n      offset: action.track.offset,\n      duration: typeof action.track.duration === \"string\" ? formater.ytToSeconds(action.track.duration) : action.track.duration,\n      thumbnails: action.track.thumbnails,\n      position: playlistLength\n    });\n\n    if (result.errors) {\n      throw new Error(JSON.stringify(result.errors));\n    }\n\n    yield put(pushLog(new Log(`Copy track id:${track.id}to playlist id:${playlistId} successful`, path)));\n  } catch (error) {\n    yield put(pushLog(Log.Error(path, \"Can't create dir in database\" + error.message, \"Sorry. During process creating dir occurred a problem\", error)));\n  } finally {\n    yield put(hideLoading());\n  }\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/sagas/playlists/reqCopySaga.js"],"names":["get","hideLoading","showLoading","fork","put","select","takeEvery","ACTIONS","pushLog","getApi","Log","formater","copyTrackToListSaga","PL_COPY_TRACK_TO_LIST","forkHandle","action","handle","getToken","state","user","token","getPlaylist","path","playList","callQuery","queries","playlist","playlistId","_id","playlistLength","_content","length","Error","result","createTrackQl","title","track","source","sourceId","quality","bpm","offset","duration","ytToSeconds","thumbnails","position","errors","JSON","stringify","id","error","message"],"mappings":"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","sourcesContent":["import { get } from \"lodash/object\";\r\nimport { hideLoading, showLoading } from 'react-redux-loading-bar';\r\nimport { fork, put, select, takeEvery } from \"redux-saga/effects\";\r\nimport { ACTIONS, pushLog } from \"../../actions\";\r\nimport { getApi } from \"./../../apis/apiProvider\";\r\nimport Log from \"./../../utils/logger/logger\";\r\nimport { formater } from \"./../../utils/time/timeFromater\";\r\n\r\nexport default function* copyTrackToListSaga() {\r\n    yield takeEvery(ACTIONS.PL_COPY_TRACK_TO_LIST, forkHandle)\r\n    function* forkHandle(action){\r\n        yield fork(handle, action)\r\n    }\r\n}\r\n\r\nconst getToken = state => state.user.token;\r\n\r\nconst getPlaylist = (state, path) => get(state.playList, path);\r\n\r\nfunction* handle(action) {\r\n    const path = ['saga', 'playlist', 'request copy'];\r\n    const token = yield select(getToken);\r\n    if (!token) {\r\n        return;\r\n    }\r\n    try {\r\n        yield put(showLoading());\r\n        const { callQuery, queries } = getApi(\"UserAssets\");\r\n        const playlist = yield select(getPlaylist, action.path);\r\n        let playlistId = playlist._id;\r\n        let playlistLength = playlist._content.length;\r\n\r\n        if(!playlistId){\r\n            throw new Error(\"Internal error - playlist id not found\")\r\n        }\r\n\r\n        const result = yield callQuery(queries.createTrackQl, token, {\r\n            playlist: playlistId,\r\n            title: action.track.title,\r\n            source: action.track.source,\r\n            sourceId: action.track.sourceId,\r\n            quality: action.track.quality,\r\n            bpm: (action.bpm === 'calculating') ? 0 : action.track.bpm,\r\n            offset: action.track.offset,\r\n            duration: (typeof action.track.duration === \"string\") ?\r\n                formater.ytToSeconds(action.track.duration) :\r\n                action.track.duration,\r\n            thumbnails: action.track.thumbnails,\r\n            position: playlistLength,\r\n        });\r\n\r\n        \r\n        if (result.errors){\r\n            throw new Error(JSON.stringify(result.errors))\r\n        }\r\n        yield put(pushLog(\r\n                new Log(`Copy track id:${track.id}to playlist id:${playlistId} successful`, path)\r\n            ))\r\n    } catch (error) {\r\n        yield put(pushLog(Log.Error(\r\n            path,\r\n            \"Can't create dir in database\" + error.message,\r\n            \"Sorry. During process creating dir occurred a problem\",\r\n            error\r\n        )))\r\n    } finally {\r\n        yield put(hideLoading())\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}