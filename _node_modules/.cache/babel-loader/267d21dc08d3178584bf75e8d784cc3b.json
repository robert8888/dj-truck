{"ast":null,"code":"import { format } from 'date-fns';\nimport { put, select, takeEvery } from \"redux-saga/effects\";\nimport { ACTIONS, pushLog, recordingRquestFail, startRecording } from \"../../actions\";\nimport { getApi } from \"./../../apis/apiProvider\";\nimport { Log } from \"./../../utils/logger/logger\";\nimport errorParser from \"./../../utils/serverErrorParser/errorParser\";\nexport default function* requestCreatedRecord() {\n  yield takeEvery(ACTIONS.R_CREATE_RECORD_REQEST, handel);\n}\n\nconst getToken = state => state.user.token;\n\nconst getInitTracklist = state => {\n  let tracks = [];\n\n  for (let channelName in state.console.channel) {\n    let channel = state.console.channel[channelName];\n\n    if (channel.track.id) {\n      let track = {\n        id: channel.track.id,\n        channel: channelName\n      };\n\n      if (!channel.playBackState.paused) {\n        track.start = 0;\n        track.playedTime = channel.track.duration - channel.playBackState.timeLeft;\n      } else {\n        track.start = null;\n        track.playedTime = Infinity;\n      }\n\n      tracks.push(track);\n    }\n  }\n\n  tracks.sort((a, b) => a.playedTime - b.playedTime).map(track => ({\n    id: track.id,\n    channel: track.channel,\n    start: track.start\n  }));\n  return tracks;\n};\n\nfunction* handel(action) {\n  const token = yield select(getToken);\n  const path = ['saga', 'recorder', 'request created record'];\n\n  if (token) {\n    try {\n      var _action$recName, _response$data, _response$data$create;\n\n      const {\n        callQuery,\n        queries\n      } = getApi(\"UserAssets\");\n      let title = ((_action$recName = action.recName) === null || _action$recName === void 0 ? void 0 : _action$recName.split(\"_\").join(\" \")) || \"Record \" + format(new Date(), 'yy-MM-dd HH:mm');\n      const query = queries.createRecordQl(title);\n      const response = yield callQuery(query, token);\n      const id = response === null || response === void 0 ? void 0 : (_response$data = response.data) === null || _response$data === void 0 ? void 0 : (_response$data$create = _response$data.createRecord) === null || _response$data$create === void 0 ? void 0 : _response$data$create.id;\n\n      if (response.errors) {\n        throw new Error('Server response contains errors ' + errorParser(response.errors));\n      }\n\n      if (id === null || id === undefined) {\n        throw new Error(\"Record id undefined. Probably occure problem during creating record on server\");\n      }\n\n      const tracklist = yield select(getInitTracklist) || [];\n      yield put(startRecording(title, id, tracklist));\n      yield put(pushLog(new Log(`Record successful crated in database id: ${id}`, path)));\n    } catch (error) {\n      yield put(recordingRquestFail());\n      yield put(pushLog(Log.Error(path, \"Can't create record data in database\" + error.message, \"Sorry. During process of creating record occurred a problem\", error)));\n    }\n  }\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/sagas/recorder/reqCreateRecord.js"],"names":["format","put","select","takeEvery","ACTIONS","pushLog","recordingRquestFail","startRecording","getApi","Log","errorParser","requestCreatedRecord","R_CREATE_RECORD_REQEST","handel","getToken","state","user","token","getInitTracklist","tracks","channelName","console","channel","track","id","playBackState","paused","start","playedTime","duration","timeLeft","Infinity","push","sort","a","b","map","action","path","callQuery","queries","title","recName","split","join","Date","query","createRecordQl","response","data","createRecord","errors","Error","undefined","tracklist","error","message"],"mappings":"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","sourcesContent":["import { format } from 'date-fns';\r\nimport { put, select, takeEvery } from \"redux-saga/effects\";\r\nimport { ACTIONS, pushLog, recordingRquestFail, startRecording } from \"../../actions\";\r\nimport { getApi } from \"./../../apis/apiProvider\";\r\nimport { Log } from \"./../../utils/logger/logger\";\r\nimport errorParser from \"./../../utils/serverErrorParser/errorParser\";\r\n\r\nexport default function* requestCreatedRecord() {\r\n    yield takeEvery(ACTIONS.R_CREATE_RECORD_REQEST, handel)\r\n}\r\n\r\nconst getToken = state => state.user.token\r\n\r\n\r\nconst getInitTracklist = state => {\r\n    let tracks = []\r\n    for(let channelName in state.console.channel){\r\n        let channel = state.console.channel[channelName];\r\n        if(channel.track.id){\r\n            let track  = {\r\n                id: channel.track.id,\r\n                channel: channelName,\r\n            }\r\n            if(!channel.playBackState.paused){\r\n                track.start = 0;\r\n                track.playedTime  = channel.track.duration - channel.playBackState.timeLeft;\r\n            } else {\r\n                track.start = null;\r\n                track.playedTime = Infinity;\r\n            }\r\n            tracks.push(track);\r\n        }\r\n    }\r\n    tracks.sort((a, b) => a.playedTime - b.playedTime)\r\n            .map(track => ({\r\n                id: track.id,\r\n                channel: track.channel,\r\n                start: track.start,\r\n            }))\r\n    return tracks;\r\n}\r\n\r\nfunction* handel(action) {\r\n    const token = yield select(getToken);\r\n    const path = ['saga', 'recorder', 'request created record']\r\n    if(token){\r\n        try{\r\n            const { callQuery , queries } = getApi(\"UserAssets\");\r\n            let title = action.recName?.split(\"_\").join(\" \") || \"Record \" + format(new Date(), 'yy-MM-dd HH:mm')\r\n            const query = queries.createRecordQl(title);\r\n            const response = yield callQuery(query, token);\r\n            const id = response?.data?.createRecord?.id;\r\n\r\n            if (response.errors) {\r\n                throw new Error('Server response contains errors '+ errorParser(response.errors))\r\n            }\r\n\r\n            if(id === null || id === undefined){\r\n                throw new Error(\"Record id undefined. Probably occure problem during creating record on server\")\r\n            } \r\n\r\n            const tracklist = yield select(getInitTracklist) || [];\r\n\r\n            yield put(startRecording(title, id, tracklist))\r\n\r\n            yield put(pushLog(new Log(`Record successful crated in database id: ${id}`, path)))  \r\n            \r\n        } catch(error) {\r\n            yield put(recordingRquestFail());\r\n\r\n            yield put(pushLog(Log.Error(\r\n                path,\r\n                \"Can't create record data in database\" + error.message,\r\n                \"Sorry. During process of creating record occurred a problem\",\r\n                error\r\n            )))\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}