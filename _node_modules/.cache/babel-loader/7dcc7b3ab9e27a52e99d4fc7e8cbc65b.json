{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJEKTY\\\\APKI\\\\DjTruck\\\\djtruck\\\\src\\\\components\\\\Deck\\\\PitchControl\\\\PitchControl.js\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport \"./pitch-control.scss\";\n\nclass PitchControl extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      sliderRange: null,\n      sliderCurrnetPosition: null,\n      sliderPrevPosition: null,\n      isDragged: false,\n      thumbHeight: 0,\n      sliderAreaTopOffset: 0\n    };\n\n    this.getRange = () => {\n      const from = this.props.from;\n      const to = this.props.to;\n      return {\n        from,\n        to,\n        range: from * to < 0 ? Math.abs(to) + Math.abs(from) : to - from\n      };\n    };\n\n    this.evalValue = () => {\n      const {\n        from,\n        range\n      } = this.getRange();\n      const progress = (this.state.sliderCurrnetPosition - this.state.thumbHeight / 2) / this.state.sliderRange;\n      return range * progress + from;\n    };\n\n    this.setValue = value => {\n      const {\n        form,\n        range\n      } = this.getRange();\n    };\n\n    this.setPosition = (currentPosition, prevPosition) => {\n      this.setState({ ...this.state,\n        sliderCurrnetPosition: currentPosition,\n        sliderPrevPosition: prevPosition || this.state.sliderPrevPosition\n      }); //  console.log(this.evalValue());\n\n      if (this.props.onValueChange) {\n        this.props.onValueChange(this.evalValue);\n      }\n    };\n\n    this.mouseDownHandle = (event, sliderRange) => {\n      if (event.target === this.sliderAreaElement.current || event.target === this.sliderRangeElement.current) {\n        let clickY = event.clientY - this.sliderAreaElement.current.getBoundingClientRect().top;\n        this.setPosition(clickY, this.state.sliderCurrnetPosition);\n      } else if (event.target === this.sliderThumbElement.current) {\n        this.setState({ ...this.state,\n          isDragged: true\n        });\n        document.addEventListener('mousemove', this.mouseMoveHandler.bind(this));\n        document.addEventListener('dragstart', e => e.preventDefault());\n      }\n\n      document.addEventListener('mouseup', this.mouseUpHandler);\n      document.addEventListener('dragend', this.mouseUpHandler);\n    };\n\n    this.mouseUpHandler = event => {\n      if (this.state.isDragged) {\n        this.setState({ ...this.state,\n          isDragged: false\n        });\n      } else {\n        this.setPosition(this.state.sliderPrevPosition);\n      }\n\n      document.removeEventListener('mousemove', this.mouseMoveHandler.bind(this));\n      document.removeEventListener('mouseup', this.mouseUpHandler);\n      document.removeEventListener('dragend', this.mouseUpHandler);\n    };\n\n    this.mouseMoveHandler = event => {\n      if (!this.state.isDragged) return;\n      let position = event.clientY - this.state.sliderAreaTopOffset;\n      position = Math.min(Math.max(position, this.state.thumbHeight / 2), this.state.sliderRange + this.state.thumbHeight / 2);\n      this.setPosition(position);\n    };\n\n    this.sliderRangeElement = React.createRef(null);\n    this.sliderThumbElement = React.createRef(null);\n    this.sliderAreaElement = React.createRef(null);\n  }\n\n  componentDidMount() {\n    const top = parseInt(window.getComputedStyle(this.sliderThumbElement.current).top);\n    const range = parseInt(window.getComputedStyle(this.sliderRangeElement.current).height);\n    const thumbHeight = this.sliderThumbElement.current.getBoundingClientRect().height;\n    const topOffset = this.sliderAreaElement.current.getBoundingClientRect().top;\n    this.setState(state => {\n      const _state = { ...state\n      };\n      _state.sliderCurrnetPosition = top;\n      _state.sliderRange = range;\n      _state.thumbHeight = thumbHeight;\n      _state.sliderAreaTopOffset = topOffset;\n      return _state;\n    });\n\n    if (this.props.initValue) {\n      this.setValue(this.props.initValue);\n    }\n\n    this.sliderAreaElement.current.addEventListener('mousedown', this.mouseDownHandle.bind(this));\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"pitch-control \" + \"pitch-\" + this.props.name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      ref: this.sliderAreaElement,\n      className: \"pitch-area\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      ref: this.sliderRangeElement,\n      className: \"slider-range\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      ref: this.sliderThumbElement,\n      style: (this.state.sliderCurrnetPosition !== null || this.state.sliderCurrnetPosition !== undefined) && {\n        top: this.state.sliderCurrnetPosition\n      },\n      className: \"slider-thumb\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default PitchControl;","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/components/Deck/PitchControl/PitchControl.js"],"names":["React","useState","useEffect","useRef","PitchControl","Component","constructor","state","sliderRange","sliderCurrnetPosition","sliderPrevPosition","isDragged","thumbHeight","sliderAreaTopOffset","getRange","from","props","to","range","Math","abs","evalValue","progress","setValue","value","form","setPosition","currentPosition","prevPosition","setState","onValueChange","mouseDownHandle","event","target","sliderAreaElement","current","sliderRangeElement","clickY","clientY","getBoundingClientRect","top","sliderThumbElement","document","addEventListener","mouseMoveHandler","bind","e","preventDefault","mouseUpHandler","removeEventListener","position","min","max","createRef","componentDidMount","parseInt","window","getComputedStyle","height","topOffset","_state","initValue","render","name","undefined"],"mappings":"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","sourcesContent":["import React, { useState , useEffect, useRef} from \"react\";\r\nimport \"./pitch-control.scss\";\r\n\r\nclass PitchControl extends React.Component{\r\n    constructor() {\r\n        super();\r\n\r\n        this.sliderRangeElement = React.createRef(null);\r\n        this.sliderThumbElement = React.createRef(null);\r\n        this.sliderAreaElement = React.createRef(null);\r\n    }\r\n\r\n    state = {\r\n        sliderRange: null,\r\n        sliderCurrnetPosition: null,\r\n        sliderPrevPosition: null,\r\n        isDragged : false,\r\n\r\n        thumbHeight: 0,\r\n        sliderAreaTopOffset : 0,\r\n    }\r\n\r\n    getRange = () => {\r\n\r\n        const from = this.props.from;\r\n        const to = this.props.to;\r\n        return{\r\n            from,\r\n            to,\r\n            range : (from * to < 0) ?  Math.abs(to) + Math.abs(from) : to - from,\r\n        }\r\n  \r\n    }\r\n\r\n    evalValue = () => {\r\n        const {from , range} = this.getRange();\r\n\r\n        const progress = (this.state.sliderCurrnetPosition - this.state.thumbHeight / 2)\r\n                         / this.state.sliderRange;\r\n\r\n        return range * progress + from;\r\n    }\r\n\r\n    setValue = (value) => {\r\n        const { form , range } = this.getRange();\r\n    }\r\n\r\n    setPosition = (currentPosition, prevPosition) => {\r\n        this.setState({...this.state, \r\n            sliderCurrnetPosition : currentPosition,\r\n            sliderPrevPosition : prevPosition || this.state.sliderPrevPosition,\r\n        });\r\n        \r\n      //  console.log(this.evalValue());\r\n        if(this.props.onValueChange){\r\n            this.props.onValueChange(this.evalValue);\r\n        }\r\n    }\r\n\r\n    mouseDownHandle = (event, sliderRange) =>{\r\n        if(event.target === this.sliderAreaElement.current || event.target === this.sliderRangeElement.current){ \r\n            let clickY = event.clientY - this.sliderAreaElement.current.getBoundingClientRect().top;\r\n            this.setPosition(clickY, this.state.sliderCurrnetPosition);\r\n        } else \r\n            if(event.target === this.sliderThumbElement.current){ \r\n            this.setState({...this.state, isDragged: true});\r\n            document.addEventListener('mousemove',  this.mouseMoveHandler.bind(this))\r\n            document.addEventListener('dragstart', e => e.preventDefault())\r\n        }\r\n        document.addEventListener('mouseup', this.mouseUpHandler);\r\n        document.addEventListener('dragend', this.mouseUpHandler);\r\n    }\r\n\r\n    mouseUpHandler = event => {\r\n        if(this.state.isDragged){\r\n            this.setState({...this.state, isDragged: false});\r\n        } else {\r\n            this.setPosition(this.state.sliderPrevPosition);\r\n        }\r\n\r\n        document.removeEventListener('mousemove', this.mouseMoveHandler.bind(this));\r\n        document.removeEventListener('mouseup', this.mouseUpHandler);\r\n        document.removeEventListener('dragend', this.mouseUpHandler);\r\n    }\r\n\r\n    mouseMoveHandler = (event) =>{\r\n        if(!this.state.isDragged) return;\r\n\r\n        let position = event.clientY - this.state.sliderAreaTopOffset;\r\n        position = Math.min( Math.max(position, this.state.thumbHeight/2), \r\n                            this.state.sliderRange + this.state.thumbHeight/2 );\r\n                            \r\n        this.setPosition(position);\r\n    }\r\n\r\n    componentDidMount(){\r\n        const top = parseInt(window.getComputedStyle(this.sliderThumbElement.current).top);\r\n        const range = parseInt(window.getComputedStyle(this.sliderRangeElement.current).height)\r\n        const thumbHeight = this.sliderThumbElement.current.getBoundingClientRect().height;\r\n        const topOffset = this.sliderAreaElement.current.getBoundingClientRect().top;\r\n\r\n        this.setState( state => {\r\n            const _state = {...state};\r\n            _state.sliderCurrnetPosition = top;\r\n            _state.sliderRange = range;\r\n            _state.thumbHeight = thumbHeight;\r\n            _state.sliderAreaTopOffset = topOffset;\r\n            return _state;\r\n        })\r\n\r\n        if(this.props.initValue){\r\n            this.setValue(this.props.initValue);\r\n        }\r\n\r\n        this.sliderAreaElement.current.addEventListener('mousedown',  this.mouseDownHandle.bind(this));\r\n    }\r\n\r\n\r\n    render(){\r\n            return (\r\n                <div className={\"pitch-control \" + \"pitch-\" + this.props.name}>\r\n                    <div ref={this.sliderAreaElement} className=\"pitch-area\">\r\n                        <div ref={this.sliderRangeElement} className=\"slider-range\"/>\r\n                        <div ref={this.sliderThumbElement} style={ (this.state.sliderCurrnetPosition !== null || this.state.sliderCurrnetPosition !== undefined) && {top: this.state.sliderCurrnetPosition}}  className=\"slider-thumb\"/>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n}\r\n\r\n\r\n\r\nexport default PitchControl;"]},"metadata":{},"sourceType":"module"}