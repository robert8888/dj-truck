{"ast":null,"code":"import _regeneratorRuntime from \"D:\\\\PROJEKTY\\\\APKI\\\\DjTruck\\\\djtruck\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"D:\\\\PROJEKTY\\\\APKI\\\\DjTruck\\\\djtruck\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport { addUniqueNumber } from 'fast-unique-numbers';\nimport { isSupported } from 'standardized-audio-context';\nimport { render } from './helpers/render';\nexport { isSupported };\nexport var load = function load(url) {\n  var worker = new Worker(url);\n  var ongoingRecordingRequests = new Set();\n\n  var analyze = function analyze(audioBuffer) {\n    var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var duration = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : audioBuffer.duration - offset;\n    return new Promise(\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(resolve, reject) {\n        var _ref2, channelData, sampleRate, id, onMessage;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return render(audioBuffer, offset, duration);\n\n              case 2:\n                _ref2 = _context.sent;\n                channelData = _ref2.channelData;\n                sampleRate = _ref2.sampleRate;\n                id = addUniqueNumber(ongoingRecordingRequests);\n\n                onMessage = function onMessage(_ref3) {\n                  var data = _ref3.data;\n\n                  if (data.id === id) {\n                    ongoingRecordingRequests.delete(id);\n                    worker.removeEventListener('message', onMessage);\n\n                    if (data.error === null) {\n                      resolve(data.result.tempo);\n                    } else {\n                      reject(new Error(data.error.message));\n                    }\n                  }\n                };\n\n                worker.addEventListener('message', onMessage);\n                worker.postMessage({\n                  id: id,\n                  method: 'analyze',\n                  params: {\n                    channelData: channelData,\n                    sampleRate: sampleRate\n                  }\n                }, [channelData.buffer]);\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n  };\n\n  var guess = function guess(audioBuffer) {\n    var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var duration = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : audioBuffer.duration - offset;\n    return new Promise(\n    /*#__PURE__*/\n    function () {\n      var _ref4 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(resolve, reject) {\n        var _ref5, channelData, sampleRate, id, onMessage;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return render(audioBuffer, offset, duration);\n\n              case 2:\n                _ref5 = _context2.sent;\n                channelData = _ref5.channelData;\n                sampleRate = _ref5.sampleRate;\n                id = addUniqueNumber(ongoingRecordingRequests);\n\n                onMessage = function onMessage(_ref6) {\n                  var data = _ref6.data;\n\n                  if (data.id === id) {\n                    ongoingRecordingRequests.delete(id);\n                    worker.removeEventListener('message', onMessage);\n\n                    if (data.error === null) {\n                      resolve(data.result);\n                    } else {\n                      reject(new Error(data.error.message));\n                    }\n                  }\n                };\n\n                worker.addEventListener('message', onMessage);\n                worker.postMessage({\n                  id: id,\n                  method: 'guess',\n                  params: {\n                    channelData: channelData,\n                    sampleRate: sampleRate\n                  }\n                }, [channelData.buffer]);\n\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x3, _x4) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n  };\n\n  return {\n    analyze: analyze,\n    guess: guess\n  };\n};","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/node_modules/web-audio-beat-detector-broker/build/es2019/module.js"],"names":["addUniqueNumber","isSupported","render","load","url","worker","Worker","ongoingRecordingRequests","Set","analyze","audioBuffer","offset","duration","Promise","resolve","reject","channelData","sampleRate","id","onMessage","data","delete","removeEventListener","error","result","tempo","Error","message","addEventListener","postMessage","method","params","buffer","guess"],"mappings":"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","sourcesContent":["import { addUniqueNumber } from 'fast-unique-numbers';\nimport { isSupported } from 'standardized-audio-context';\nimport { render } from './helpers/render';\nexport { isSupported };\nexport const load = (url) => {\n    const worker = new Worker(url);\n    const ongoingRecordingRequests = new Set();\n    const analyze = (audioBuffer, offset = 0, duration = audioBuffer.duration - offset) => {\n        return new Promise(async (resolve, reject) => {\n            const { channelData, sampleRate } = await render(audioBuffer, offset, duration);\n            const id = addUniqueNumber(ongoingRecordingRequests);\n            const onMessage = ({ data }) => {\n                if (data.id === id) {\n                    ongoingRecordingRequests.delete(id);\n                    worker.removeEventListener('message', onMessage);\n                    if (data.error === null) {\n                        resolve(data.result.tempo);\n                    }\n                    else {\n                        reject(new Error(data.error.message));\n                    }\n                }\n            };\n            worker.addEventListener('message', onMessage);\n            worker.postMessage({ id, method: 'analyze', params: { channelData, sampleRate } }, [channelData.buffer]);\n        });\n    };\n    const guess = (audioBuffer, offset = 0, duration = audioBuffer.duration - offset) => {\n        return new Promise(async (resolve, reject) => {\n            const { channelData, sampleRate } = await render(audioBuffer, offset, duration);\n            const id = addUniqueNumber(ongoingRecordingRequests);\n            const onMessage = ({ data }) => {\n                if (data.id === id) {\n                    ongoingRecordingRequests.delete(id);\n                    worker.removeEventListener('message', onMessage);\n                    if (data.error === null) {\n                        resolve(data.result);\n                    }\n                    else {\n                        reject(new Error(data.error.message));\n                    }\n                }\n            };\n            worker.addEventListener('message', onMessage);\n            worker.postMessage({ id, method: 'guess', params: { channelData, sampleRate } }, [channelData.buffer]);\n        });\n    };\n    return {\n        analyze,\n        guess\n    };\n};\n//# sourceMappingURL=/build/es2019/module.js.map"]},"metadata":{},"sourceType":"module"}