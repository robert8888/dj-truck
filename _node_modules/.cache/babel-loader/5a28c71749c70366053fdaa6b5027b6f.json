{"ast":null,"code":"import Effect from \"./../effect\";\nexport default class DubDelay extends Effect {\n  static defaultParams() {\n    return {\n      params: {\n        feedback: {\n          min: 0,\n          max: 100,\n          defaultValue: 50,\n          type: \"float\",\n          description: \"fb\"\n        },\n        time: {\n          min: 0,\n          max: 180,\n          defaultValue: 5,\n          type: \"float\",\n          description: \"time\"\n        },\n        cutOff: {\n          min: 0,\n          max: 4000,\n          defaultValue: 700,\n          type: \"float\",\n          description: \"cut\"\n        }\n      }\n    };\n  }\n\n  constructor(context, params) {\n    super();\n    this._context = context;\n    this._default = DubDelay.defaultParams().params;\n\n    this._initParams(params);\n\n    this._buildNodes(context);\n  }\n\n  _buildNodes() {\n    this.inputNode = this._context.createGain();\n    this.outputNode = this._context.createGain();\n    this.dryGainNode = this._context.createGain();\n    this.wetGainNode = this._context.createGain();\n    this.feedbackGainNode = this._context.createGain();\n    this.delayNode = this._context.createDelay();\n    this.bqFilterNode = this._context.createBiquadFilter(); //connect\n\n    this.inputNode.connect(this.feedbackGainNode);\n    this.feedbackGainNode.connect(this.bqFilterNode);\n    this.bqFilterNode.connect(this.delayNode);\n    this.delayNode.connect(this.feedbackGainNode);\n    this.delayNode.connect(this.outputNode); //config\n\n    this.outputNode.gain.value = 0.5;\n  }\n\n  get name() {\n    \"Dub Delay\";\n  }\n\n  get time() {\n    return this._time;\n  }\n\n  set time(value) {\n    value = this._valueToRange(value, \"time\");\n    this._time = value;\n    this.delayNode.delayTime.setTargetAtTime(value, this._context.curretTime, 0.01);\n  }\n\n  get feedback() {\n    return this._feedback;\n  }\n\n  set feedback(value) {\n    value = this._valueToRange(value, \"feedback\");\n    this._feedback = value;\n    this.feedbackGainNode.gain.setTargetAtTime(value, this._context.curretTime, 0.01);\n  }\n\n  get cutOff() {\n    return this._cutOff;\n  }\n\n  set cutOff(value) {\n    value = this._valueToRange(value, \"cutOff\");\n    this._cutOff = value;\n    this.bqFilterNode.frequency.setTargetAtTime(value, this._context.curretTime, 0.01);\n  }\n\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/pages/app/core/console/effector/effects/dubDelay/dubDelay.js"],"names":["Effect","DubDelay","defaultParams","params","feedback","min","max","defaultValue","type","description","time","cutOff","constructor","context","_context","_default","_initParams","_buildNodes","inputNode","createGain","outputNode","dryGainNode","wetGainNode","feedbackGainNode","delayNode","createDelay","bqFilterNode","createBiquadFilter","connect","gain","value","name","_time","_valueToRange","delayTime","setTargetAtTime","curretTime","_feedback","_cutOff","frequency"],"mappings":"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","sourcesContent":["import Effect from \"./../effect\";\r\n\r\nexport default class DubDelay extends Effect{\r\n\r\n    static defaultParams(){\r\n        return {\r\n            params : {\r\n                feedback: {\r\n                    min: 0,\r\n                    max: 100,\r\n                    defaultValue: 50,\r\n                    type: \"float\",\r\n                    description : \"fb\"\r\n                },\r\n                time: {\r\n                    min: 0,\r\n                    max: 180,\r\n                    defaultValue: 5,\r\n                    type: \"float\",\r\n                    description: \"time\"\r\n                },\r\n                cutOff: {\r\n                    min: 0,\r\n                    max: 4000,\r\n                    defaultValue: 700,\r\n                    type: \"float\",\r\n                    description: \"cut\"\r\n                },\r\n            }\r\n        }\r\n    }\r\n\r\n    constructor(context, params){\r\n        super();\r\n        this._context = context;\r\n        this._default = DubDelay.defaultParams().params;\r\n        this._initParams(params);\r\n        this._buildNodes(context)\r\n    }\r\n\r\n    _buildNodes(){\r\n\r\n        this.inputNode = this._context.createGain();\r\n        this.outputNode = this._context.createGain();\r\n        this.dryGainNode = this._context.createGain();\r\n        this.wetGainNode = this._context.createGain();\r\n        this.feedbackGainNode = this._context.createGain();\r\n        this.delayNode = this._context.createDelay();\r\n        this.bqFilterNode = this._context.createBiquadFilter(); \r\n    \r\n        //connect\r\n        this.inputNode.connect(this.feedbackGainNode);\r\n    \r\n        this.feedbackGainNode.connect(this.bqFilterNode);\r\n        this.bqFilterNode.connect(this.delayNode);\r\n        this.delayNode.connect(this.feedbackGainNode);\r\n        this.delayNode.connect(this.outputNode);\r\n        \r\n        //config\r\n        this.outputNode.gain.value = 0.5;\r\n    }\r\n\r\n\r\n\r\n    get name(){\r\n        \"Dub Delay\"\r\n    }\r\n\r\n    get time(){\r\n        return this._time;\r\n    }\r\n\r\n    set time(value){\r\n        value = this._valueToRange(value, \"time\");\r\n        this._time = value;\r\n        this.delayNode.delayTime.setTargetAtTime(\r\n                value, \r\n                this._context.curretTime, \r\n                0.01\r\n            )\r\n    }\r\n\r\n    get feedback(){\r\n        return this._feedback;\r\n    }\r\n\r\n    set feedback(value){\r\n        value = this._valueToRange(value, \"feedback\");\r\n        this._feedback = value;\r\n        this.feedbackGainNode.gain.setTargetAtTime(\r\n                value, \r\n                this._context.curretTime, \r\n                0.01\r\n            )\r\n    }\r\n\r\n    get cutOff(){\r\n        return this._cutOff;\r\n    }\r\n\r\n    set cutOff(value){\r\n        value = this._valueToRange(value, \"cutOff\")\r\n        this._cutOff = value;\r\n        this.bqFilterNode.frequency.setTargetAtTime(\r\n                value, \r\n                this._context.curretTime, \r\n                0.01\r\n            );\r\n    }\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}