{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\src\\\\pages\\\\common\\\\components\\\\PlayerControls\\\\ProgressSlider\\\\ProgressSlider.js\";\nimport React, { useState, useRef, useEffect, useCallback } from \"react\";\nimport { formater } from \"./../../../../../utils/time/timeFromater\";\nimport { toRange } from \"./../../../../../utils/math/argRanges\";\nimport useWindowSize from \"./../../../Hooks/useWindowSize\";\nimport \"./progress-slider.scss\"; //horizontal\n\nconst ProgressSlider = ({\n  player,\n  seek\n}) => {\n  const [progress, setProgress] = useState(0);\n  const [buffered, setBuffred] = useState(0);\n  const [currentRecord, setCurrentRecord] = useState(null);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [currentDuration, setCurrentDuration] = useState(0);\n  const isDragged = useRef();\n  const seekTarget = useRef();\n  const progressRef = useRef();\n  const sliderArea = useRef(null);\n  const sliderThumb = useRef(null);\n  const sliderProgress = useRef(null);\n  const sliderBufferd = useRef(null);\n  const sliderTimePreview = useRef(null);\n  const [windowWidth] = useWindowSize();\n  const setThumbPosition = useCallback(progress => {\n    let position = 0;\n    const sliderAreaRect = sliderArea.current.getBoundingClientRect();\n    const thumbRect = sliderThumb.current.getBoundingClientRect();\n    position = sliderAreaRect.width * progress;\n    sliderProgress.current.style.transform = `scaleX(${position}) translateX(50%)`;\n    position -= thumbRect.width / 2;\n    sliderThumb.current.style.transform = `translateX(${position}px)`;\n  }, [sliderArea, sliderThumb]);\n  const setBuffredPosition = useCallback(buffered => {\n    const sliderAreaRect = sliderArea.current.getBoundingClientRect();\n\n    if (!sliderAreaRect) {\n      return;\n    }\n\n    const position = sliderAreaRect.width * buffered;\n    sliderBufferd.current.style.transform = `scaleX(${position}) translateX(50%)`;\n  }, [sliderBufferd, sliderArea]);\n  useEffect(() => {\n    setBuffredPosition(buffered);\n  }, [buffered, setBuffredPosition]);\n  useEffect(() => {\n    setCurrentTime(currentDuration * progress);\n    setThumbPosition(progress);\n  }, [progress, currentDuration, setCurrentTime, setThumbPosition]);\n  const refreshBuffered = useCallback(() => setBuffredPosition(buffered), [buffered, setBuffredPosition]);\n  const refreshProgress = useCallback(() => setThumbPosition(progress), [progress, setThumbPosition]);\n  useEffect(() => {\n    refreshBuffered();\n    refreshProgress();\n  }, [windowWidth, refreshBuffered, refreshProgress]);\n  const setProgressHandler = useCallback(progress => {\n    if (!isDragged.current) {\n      setProgress(progress);\n      progressRef.current = progress;\n    }\n  }, [isDragged, progressRef]);\n  const getProgress = useCallback(() => {\n    return progressRef.current;\n  }, [progressRef]);\n  useEffect(() => {\n    if (currentRecord) {\n      setCurrentDuration(currentRecord.duration);\n    }\n  }, [currentRecord, setCurrentDuration]);\n  useEffect(() => {\n    if (!player) {\n      return;\n    }\n\n    console.log('progres slider');\n    player.subscribeProgress('#', setProgressHandler);\n    player.subscribeCurrent(setCurrentRecord);\n    player.subscribeBuffred(setBuffred);\n    player.addProgressProvider(\"#\", getProgress);\n    return () => {\n      player.unSubscribeProgress('#', setProgressHandler);\n      player.unSubscribeCurrent(setCurrentRecord);\n      player.unSubscribeBuffered(setBuffred);\n      player.removeProgressProvider(\"#\", getProgress);\n    };\n  }, [player, setProgressHandler]);\n  const thumbDraging = useCallback((areaRect, e) => {\n    const x = e.clientX - areaRect.left;\n    let progress = x / areaRect.width;\n    progress = toRange(progress, 0, 1);\n    seekTarget.current = progress;\n    setProgress(progress);\n  }, []);\n  const thumbMouseDown = useCallback(e => {\n    if (currentDuration === 0) {\n      return;\n    }\n\n    const areaRect = sliderArea.current.getBoundingClientRect();\n    const thumbDragingWithArgs = thumbDraging.bind(null, areaRect);\n    isDragged.current = true;\n\n    const mouseup = () => {\n      window.removeEventListener('mouseup', mouseup);\n      window.removeEventListener('mousemove', thumbDragingWithArgs);\n      isDragged.current = false;\n      seek({\n        progress: seekTarget.current\n      });\n      seekTarget.current = null;\n    };\n\n    window.addEventListener('mousemove', thumbDragingWithArgs);\n    window.addEventListener('mouseup', mouseup);\n  }, [thumbDraging, sliderArea, isDragged, seek, seekTarget, currentDuration]);\n  const areaMouseDown = useCallback(e => {\n    const sliderAreaRect = sliderArea.current.getBoundingClientRect();\n    const thumbRect = sliderThumb.current.getBoundingClientRect();\n\n    if (e.target === sliderThumb.current) {\n      return;\n    }\n\n    const x = e.clientX - sliderAreaRect.left + thumbRect.width / 2;\n    let progress = x / sliderAreaRect.width;\n    progress = toRange(progress, 0, 1);\n    seek({\n      progress\n    });\n  }, [seek, sliderArea]);\n  const areaMouseMove = useCallback(e => {\n    const sliderAreaRect = sliderArea.current.getBoundingClientRect();\n    const thumbRect = sliderThumb.current.getBoundingClientRect();\n    const x = e.clientX - sliderAreaRect.left + thumbRect.width / 2;\n    let progress = x / sliderAreaRect.width;\n    progress = toRange(progress, 0, 1);\n    const time = currentDuration * progress;\n    const str = formater.secondsToStr(time / 1000);\n    sliderTimePreview.current.dataset.value = time ? str : \"\";\n    sliderTimePreview.current.style.transform = `translateX(${x}px)`;\n  }, [currentDuration, sliderTimePreview]);\n  const areaMouseEnter = useCallback(e => {\n    sliderTimePreview.current.classList.add(\"preview--visible\");\n  }, [sliderTimePreview]);\n  const areaMouseLeave = useCallback(e => {\n    sliderTimePreview.current.classList.remove(\"preview--visible\");\n  }, [sliderTimePreview]);\n  return React.createElement(\"div\", {\n    className: \"seek-slider\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"slider-time time-current\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  }, formater.secondsToStr(currentTime / 1000))), React.createElement(\"div\", {\n    className: \"slider-active-area\",\n    ref: sliderArea,\n    onMouseDown: areaMouseDown,\n    onMouseEnter: areaMouseEnter,\n    onMouseLeave: areaMouseLeave,\n    onMouseMove: areaMouseMove,\n    draggable: \"false\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"slider-buffered\",\n    ref: sliderBufferd,\n    draggable: \"false\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"slider-progress\",\n    ref: sliderProgress,\n    draggable: \"false\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"slider-thumb\",\n    ref: sliderThumb,\n    onMouseDown: thumbMouseDown,\n    draggable: \"false\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"slider-time-preview\",\n    ref: sliderTimePreview,\n    \"data-value\": \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"slider-time time-duration\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197\n    },\n    __self: this\n  }, formater.secondsToStr(currentDuration / 1000))));\n};\n\nexport default ProgressSlider;","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/pages/common/components/PlayerControls/ProgressSlider/ProgressSlider.js"],"names":["React","useState","useRef","useEffect","useCallback","formater","toRange","useWindowSize","ProgressSlider","player","seek","progress","setProgress","buffered","setBuffred","currentRecord","setCurrentRecord","currentTime","setCurrentTime","currentDuration","setCurrentDuration","isDragged","seekTarget","progressRef","sliderArea","sliderThumb","sliderProgress","sliderBufferd","sliderTimePreview","windowWidth","setThumbPosition","position","sliderAreaRect","current","getBoundingClientRect","thumbRect","width","style","transform","setBuffredPosition","refreshBuffered","refreshProgress","setProgressHandler","getProgress","duration","console","log","subscribeProgress","subscribeCurrent","subscribeBuffred","addProgressProvider","unSubscribeProgress","unSubscribeCurrent","unSubscribeBuffered","removeProgressProvider","thumbDraging","areaRect","e","x","clientX","left","thumbMouseDown","thumbDragingWithArgs","bind","mouseup","window","removeEventListener","addEventListener","areaMouseDown","target","areaMouseMove","time","str","secondsToStr","dataset","value","areaMouseEnter","classList","add","areaMouseLeave","remove"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect, useCallback } from \"react\";\r\nimport {formater} from \"./../../../../../utils/time/timeFromater\";\r\nimport {toRange} from \"./../../../../../utils/math/argRanges\";\r\nimport useWindowSize from \"./../../../Hooks/useWindowSize\"\r\nimport \"./progress-slider.scss\"\r\n\r\n//horizontal\r\nconst ProgressSlider = ({ player, seek}) => {\r\n    const [progress, setProgress] = useState(0);\r\n    const [buffered, setBuffred] = useState(0);\r\n    const [currentRecord, setCurrentRecord] = useState(null);\r\n    const [currentTime, setCurrentTime] = useState(0);\r\n    const [currentDuration, setCurrentDuration] = useState(0);\r\n    const isDragged = useRef();\r\n    const seekTarget = useRef();\r\n    const progressRef = useRef();\r\n\r\n    const sliderArea = useRef(null);\r\n    const sliderThumb = useRef(null);\r\n    const sliderProgress = useRef(null);\r\n    const sliderBufferd = useRef(null);\r\n    const sliderTimePreview = useRef(null);\r\n\r\n    const [ windowWidth, ] = useWindowSize();\r\n\r\n    const setThumbPosition = useCallback((progress)=>{\r\n        let position = 0;\r\n        const sliderAreaRect = sliderArea.current.getBoundingClientRect();\r\n        const thumbRect = sliderThumb.current.getBoundingClientRect();\r\n        position = sliderAreaRect.width * progress ;\r\n        sliderProgress.current.style.transform = `scaleX(${position}) translateX(50%)`;\r\n        position -= (thumbRect.width / 2) ;  \r\n        sliderThumb.current.style.transform = `translateX(${position}px)`;\r\n    }, [sliderArea, sliderThumb])\r\n\r\n    const setBuffredPosition = useCallback((buffered) => {\r\n        const sliderAreaRect = sliderArea.current.getBoundingClientRect();\r\n        if(!sliderAreaRect){\r\n            return;\r\n        }\r\n        const position = sliderAreaRect.width * buffered;\r\n        sliderBufferd.current.style.transform = `scaleX(${position}) translateX(50%)`;\r\n    }, [sliderBufferd, sliderArea])\r\n\r\n    useEffect(()=>{\r\n        setBuffredPosition(buffered)\r\n    }, [buffered, setBuffredPosition])\r\n\r\n    useEffect(()=>{\r\n        setCurrentTime(currentDuration * progress);\r\n        setThumbPosition(progress);\r\n     }, [progress, currentDuration, setCurrentTime, setThumbPosition])\r\n\r\n    const refreshBuffered = useCallback(\r\n            () => setBuffredPosition(buffered), \r\n            [buffered, setBuffredPosition]\r\n        );\r\n    const refreshProgress = useCallback(\r\n            () => setThumbPosition(progress), \r\n            [progress, setThumbPosition]\r\n        )\r\n\r\n    useEffect(()=>{\r\n        refreshBuffered();\r\n        refreshProgress();\r\n    },[windowWidth, refreshBuffered, refreshProgress])\r\n\r\n\r\n    const setProgressHandler = useCallback((progress)=>{\r\n        if(!isDragged.current){\r\n            setProgress(progress);\r\n            progressRef.current = progress\r\n        }\r\n    }, [isDragged, progressRef])\r\n\r\n    const getProgress = useCallback(()=>{\r\n        return progressRef.current;\r\n    }, [progressRef])\r\n\r\n    useEffect(()=>{\r\n        if(currentRecord){\r\n           setCurrentDuration(currentRecord.duration);\r\n        }\r\n    }, [currentRecord, setCurrentDuration])\r\n\r\n    useEffect(()=>{\r\n        if(!player){\r\n            return;\r\n        }\r\n        console.log('progres slider')\r\n        player.subscribeProgress('#', setProgressHandler);\r\n        player.subscribeCurrent(setCurrentRecord);\r\n        player.subscribeBuffred(setBuffred);\r\n        player.addProgressProvider(\"#\", getProgress)\r\n\r\n        return () => {\r\n            player.unSubscribeProgress('#', setProgressHandler);\r\n            player.unSubscribeCurrent(setCurrentRecord);\r\n            player.unSubscribeBuffered(setBuffred);\r\n            player.removeProgressProvider(\"#\", getProgress)\r\n        }\r\n\r\n    }, [player, setProgressHandler])\r\n\r\n    const thumbDraging = useCallback( (areaRect, e) => {\r\n       const x = e.clientX - areaRect.left;\r\n       let progress = x / areaRect.width;\r\n       progress = toRange(progress, 0 ,1);\r\n       seekTarget.current = progress;\r\n       setProgress(progress)\r\n    }, [])\r\n\r\n    const thumbMouseDown = useCallback((e)=>{\r\n        if(currentDuration === 0){\r\n            return;\r\n        }\r\n        const areaRect = sliderArea.current.getBoundingClientRect();\r\n        const thumbDragingWithArgs = thumbDraging.bind(null, areaRect)\r\n        isDragged.current = true;\r\n        const mouseup = () => {\r\n            window.removeEventListener('mouseup', mouseup);\r\n            window.removeEventListener('mousemove', thumbDragingWithArgs);\r\n            isDragged.current = false;\r\n            seek({progress : seekTarget.current});\r\n            seekTarget.current = null;\r\n        }\r\n        window.addEventListener('mousemove', thumbDragingWithArgs)\r\n        window.addEventListener('mouseup', mouseup)\r\n    }, [thumbDraging, \r\n        sliderArea, \r\n        isDragged,\r\n        seek, \r\n        seekTarget, \r\n        currentDuration])\r\n\r\n    const areaMouseDown = useCallback((e)=>{\r\n        const sliderAreaRect = sliderArea.current.getBoundingClientRect();\r\n        const thumbRect = sliderThumb.current.getBoundingClientRect();\r\n        if(e.target === sliderThumb.current){\r\n            return;\r\n        }\r\n        const x = e.clientX - sliderAreaRect.left  + (thumbRect.width / 2);\r\n        let progress = x / sliderAreaRect.width  ;\r\n        progress = toRange(progress, 0 , 1)\r\n        seek({progress})\r\n    }, [seek, sliderArea])\r\n\r\n    const areaMouseMove = useCallback( e =>{\r\n        const sliderAreaRect = sliderArea.current.getBoundingClientRect();\r\n        const thumbRect = sliderThumb.current.getBoundingClientRect();\r\n        const x = e.clientX - sliderAreaRect.left  + (thumbRect.width / 2);\r\n        let progress = x / sliderAreaRect.width;\r\n        progress = toRange(progress, 0 , 1)\r\n        const time = currentDuration * progress;\r\n        const str = formater.secondsToStr(time / 1000);\r\n        sliderTimePreview.current.dataset.value = time ? str : \"\";\r\n        sliderTimePreview.current.style.transform = `translateX(${x}px)`\r\n    }, [currentDuration , sliderTimePreview])\r\n\r\n    const areaMouseEnter = useCallback( e => {\r\n        sliderTimePreview.current.classList.add(\"preview--visible\")\r\n    }, [sliderTimePreview])\r\n\r\n    const areaMouseLeave = useCallback( e => {\r\n        sliderTimePreview.current.classList.remove(\"preview--visible\")\r\n    }, [sliderTimePreview])\r\n\r\n\r\n    return (\r\n        <div className=\"seek-slider\">\r\n            <div className=\"slider-time time-current\">\r\n                 <span>{formater.secondsToStr(currentTime / 1000)}</span>\r\n            </div>\r\n            <div className=\"slider-active-area\" \r\n                 ref={sliderArea}\r\n                 onMouseDown={areaMouseDown}\r\n                 onMouseEnter={areaMouseEnter}\r\n                 onMouseLeave={areaMouseLeave} \r\n                 onMouseMove={areaMouseMove}\r\n                 draggable=\"false\">\r\n                    <div className=\"slider-buffered\" \r\n                         ref={sliderBufferd} \r\n                         draggable=\"false\"/>\r\n                    <div className=\"slider-progress\" \r\n                         ref={sliderProgress} \r\n                         draggable=\"false\"/>\r\n                    \r\n                    <div className=\"slider-thumb\" \r\n                         ref={sliderThumb} \r\n                         onMouseDown={thumbMouseDown} \r\n                         draggable=\"false\"/>\r\n                    <div className=\"slider-time-preview\"  \r\n                         ref={sliderTimePreview} \r\n                         data-value=\"\"/>\r\n            </div>\r\n            <div className=\"slider-time time-duration\">\r\n                <span>{formater.secondsToStr(currentDuration/1000)}</span>\r\n            </div>\r\n        </div>\r\n    \r\n    )\r\n}\r\n\r\nexport default ProgressSlider;\r\n\r\n"]},"metadata":{},"sourceType":"module"}