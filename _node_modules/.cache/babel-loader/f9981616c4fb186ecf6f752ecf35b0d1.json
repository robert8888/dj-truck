{"ast":null,"code":"const ACTIONS = {\n  R_CREATE_RECORD_REQEST: \"Create recording metada\",\n  R_START_RECORDING: \"Start prepering ws recorder conection\",\n  R_END_RECORDING: \"Stop recording\",\n  R_RECORDING: \"Is recording\",\n  R_RECORDING_FAIL: \"indicates error during connections or creating objects\",\n  R_ROLLBACk_REC: \"removing rec metada in resopones comporesing or sending to database error\",\n  R_REC_FINAL_UPDATE: \"Set peaks array and time to recording\"\n};\nexport { ACTIONS as RECORDER_ACTIONS };\nexport function createRecordinRequest(recName) {\n  return {\n    type: ACTIONS.R_CREATE_RECORD_REQEST,\n    recName\n  };\n}\nexport function startRecording(recName, id, initTracklist) {\n  return {\n    type: ACTIONS.R_START_RECORDING,\n    recName,\n    id,\n    initTracklist\n  };\n}\nexport function endRecording() {\n  return {\n    type: ACTIONS.R_END_RECORDING\n  };\n}\nexport function recording() {\n  return {\n    type: ACTIONS.R_RECORDING\n  };\n}\nexport function recordingRquestFail() {\n  return {\n    type: ACTIONS.R_RECORDING_FAIL\n  };\n}\nexport function recordFinalUpdate(id, peaks, duration, fileSize) {\n  return {\n    type: ACTIONS.R_REC_FINAL_UPDATE,\n    id,\n    peaks,\n    duration,\n    fileSize\n  };\n}\nexport function roolbackRecord(id) {\n  return {\n    type: ACTIONS.R_ROLLBACk_REC,\n    id\n  };\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/actions/console/recorder.js"],"names":["ACTIONS","R_CREATE_RECORD_REQEST","R_START_RECORDING","R_END_RECORDING","R_RECORDING","R_RECORDING_FAIL","R_ROLLBACk_REC","R_REC_FINAL_UPDATE","RECORDER_ACTIONS","createRecordinRequest","recName","type","startRecording","id","initTracklist","endRecording","recording","recordingRquestFail","recordFinalUpdate","peaks","duration","fileSize","roolbackRecord"],"mappings":"AAAA,MAAMA,OAAO,GAAG;AACZC,EAAAA,sBAAsB,EAAG,yBADb;AAEZC,EAAAA,iBAAiB,EAAG,uCAFR;AAGZC,EAAAA,eAAe,EAAE,gBAHL;AAIZC,EAAAA,WAAW,EAAE,cAJD;AAKZC,EAAAA,gBAAgB,EAAE,wDALN;AAMZC,EAAAA,cAAc,EAAE,2EANJ;AAQZC,EAAAA,kBAAkB,EAAG;AART,CAAhB;AAUA,SAAQP,OAAO,IAAIQ,gBAAnB;AAEA,OAAO,SAASC,qBAAT,CAA+BC,OAA/B,EAAuC;AAC1C,SAAO;AAAEC,IAAAA,IAAI,EAAEX,OAAO,CAACC,sBAAhB;AAAwCS,IAAAA;AAAxC,GAAP;AACH;AAED,OAAO,SAASE,cAAT,CAAwBF,OAAxB,EAAiCG,EAAjC,EAAqCC,aAArC,EAAmD;AACtD,SAAO;AAAEH,IAAAA,IAAI,EAAEX,OAAO,CAACE,iBAAhB;AAAmCQ,IAAAA,OAAnC;AAA4CG,IAAAA,EAA5C;AAAgDC,IAAAA;AAAhD,GAAP;AACH;AAED,OAAO,SAASC,YAAT,GAAuB;AAC1B,SAAO;AAAEJ,IAAAA,IAAI,EAAEX,OAAO,CAACG;AAAhB,GAAP;AACH;AAED,OAAO,SAASa,SAAT,GAAoB;AACvB,SAAO;AAACL,IAAAA,IAAI,EAAEX,OAAO,CAACI;AAAf,GAAP;AACH;AAED,OAAO,SAASa,mBAAT,GAA8B;AACjC,SAAO;AAACN,IAAAA,IAAI,EAAEX,OAAO,CAACK;AAAf,GAAP;AACH;AAED,OAAO,SAASa,iBAAT,CAA2BL,EAA3B,EAA+BM,KAA/B,EAAsCC,QAAtC,EAAgDC,QAAhD,EAAyD;AAC5D,SAAO;AAACV,IAAAA,IAAI,EAAEX,OAAO,CAACO,kBAAf;AAAmCM,IAAAA,EAAnC;AAAuCM,IAAAA,KAAvC;AAA8CC,IAAAA,QAA9C;AAAwDC,IAAAA;AAAxD,GAAP;AACH;AAED,OAAO,SAASC,cAAT,CAAwBT,EAAxB,EAA2B;AAC9B,SAAO;AAACF,IAAAA,IAAI,EAAEX,OAAO,CAACM,cAAf;AAA+BO,IAAAA;AAA/B,GAAP;AACH","sourcesContent":["const ACTIONS = {\r\n    R_CREATE_RECORD_REQEST : \"Create recording metada\",\r\n    R_START_RECORDING : \"Start prepering ws recorder conection\",\r\n    R_END_RECORDING: \"Stop recording\",\r\n    R_RECORDING: \"Is recording\",\r\n    R_RECORDING_FAIL: \"indicates error during connections or creating objects\",\r\n    R_ROLLBACk_REC: \"removing rec metada in resopones comporesing or sending to database error\",\r\n\r\n    R_REC_FINAL_UPDATE : \"Set peaks array and time to recording\",\r\n}\r\nexport {ACTIONS as RECORDER_ACTIONS};\r\n\r\nexport function createRecordinRequest(recName){\r\n    return { type: ACTIONS.R_CREATE_RECORD_REQEST, recName }\r\n}\r\n\r\nexport function startRecording(recName, id, initTracklist){\r\n    return { type: ACTIONS.R_START_RECORDING, recName, id, initTracklist }\r\n}\r\n\r\nexport function endRecording(){\r\n    return { type: ACTIONS.R_END_RECORDING}\r\n}\r\n\r\nexport function recording(){\r\n    return {type: ACTIONS.R_RECORDING}\r\n}\r\n\r\nexport function recordingRquestFail(){\r\n    return {type: ACTIONS.R_RECORDING_FAIL}\r\n}\r\n\r\nexport function recordFinalUpdate(id, peaks, duration, fileSize){\r\n    return {type: ACTIONS.R_REC_FINAL_UPDATE, id, peaks, duration, fileSize}\r\n}\r\n\r\nexport function roolbackRecord(id){\r\n    return {type: ACTIONS.R_ROLLBACk_REC, id}\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}