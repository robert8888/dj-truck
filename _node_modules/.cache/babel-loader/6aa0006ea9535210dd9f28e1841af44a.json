{"ast":null,"code":"import { put, select, takeEvery } from \"redux-saga/effects\";\nimport { ACTIONS, pushLog } from \"../../actions\";\nimport { getApi } from \"./../../apis/apiProvider\";\nimport { Log } from \"./../../utils/logger/logger\";\nimport errorParser from \"./../../utils/serverErrorParser/errorParser\";\nexport default function* requestUpdateRecord() {\n  yield takeEvery(ACTIONS.R_REC_FINAL_UPDATE, handel);\n}\n\nconst getToken = state => state.user.token;\n\nconst getTracklist = state => state.recorder.tracklist.filter(track => track.start !== undefined && track.start !== null).map(track => ({\n  id: track.id,\n  start: track.start,\n  end: track.end\n})).map(track => {\n  console.log(track);\n\n  if (!track.end) {\n    track.end = (new Date().getTime() - state.recorder.startTime) / 1000;\n  }\n\n  return track;\n});\n\nfunction* handel(action) {\n  const token = yield select(getToken);\n\n  if (token) {\n    try {\n      var _result$data;\n\n      const {\n        callQuery,\n        queries\n      } = getApi(\"UserAssets\");\n      const query = queries.updateRecordQl;\n      const variables = {};\n      ({\n        id: variables.id,\n        peaks: variables.peaks,\n        duration: variables.duration,\n        fileSize: variables.fileSize\n      } = action);\n      const tracks = yield select(getTracklist);\n      variables.tracks = tracks;\n      const result = yield callQuery(query, token, variables);\n      const success = result === null || result === void 0 ? void 0 : (_result$data = result.data) === null || _result$data === void 0 ? void 0 : _result$data.updateRecord;\n\n      if (result.errors) {\n        throw new Error('Can\\'t update record metadata in database', +errorParser(result.errors));\n      }\n\n      if (!success) {\n        throw new Error();\n      }\n\n      yield put(pushLog(new Log(`Record metadata updated successful id: ${variables.id}`)));\n    } catch (error) {\n      yield put(pushLog(Log.Error(['saga', 'recorder', 'request update record'], \"Can't update record data in database\" + error.message, \"Sorry. During process of updating record metadata occurred a problem\", error)));\n    }\n  }\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/sagas/recorder/reqUpdateRecord.js"],"names":["put","select","takeEvery","ACTIONS","pushLog","getApi","Log","errorParser","requestUpdateRecord","R_REC_FINAL_UPDATE","handel","getToken","state","user","token","getTracklist","recorder","tracklist","filter","track","start","undefined","map","id","end","console","log","Date","getTime","startTime","action","callQuery","queries","query","updateRecordQl","variables","peaks","duration","fileSize","tracks","result","success","data","updateRecord","errors","Error","error","message"],"mappings":"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","sourcesContent":["import { put, select, takeEvery } from \"redux-saga/effects\";\r\nimport { ACTIONS, pushLog } from \"../../actions\";\r\nimport { getApi } from \"./../../apis/apiProvider\";\r\nimport { Log } from \"./../../utils/logger/logger\";\r\nimport errorParser from \"./../../utils/serverErrorParser/errorParser\";\r\n\r\nexport default function* requestUpdateRecord() {\r\n    yield takeEvery(ACTIONS.R_REC_FINAL_UPDATE, handel)\r\n}\r\n\r\nconst getToken = state => state.user.token\r\n\r\nconst getTracklist = state =>\r\n    state.recorder.tracklist\r\n        .filter(track => (track.start !== undefined && track.start !== null))\r\n        .map(track => ({\r\n            id: track.id,\r\n            start: track.start,\r\n            end: track.end\r\n        }))\r\n        .map(track => {\r\n            console.log(track)\r\n            if (!track.end) {\r\n                track.end = (new Date().getTime() - state.recorder.startTime) / 1000;\r\n            }\r\n            return track;\r\n        })\r\n\r\nfunction* handel(action) {\r\n    const token = yield select(getToken);\r\n\r\n    if (token) {\r\n        try {\r\n            const { callQuery, queries } = getApi(\"UserAssets\");\r\n            const query = queries.updateRecordQl;\r\n            const variables = {};\r\n            ({\r\n                id: variables.id,\r\n                peaks: variables.peaks,\r\n                duration: variables.duration,\r\n                fileSize: variables.fileSize\r\n            } = action);\r\n            const tracks = yield select(getTracklist);\r\n            variables.tracks = tracks;\r\n\r\n            const result = yield callQuery(query, token, variables);\r\n\r\n            const success = result?.data?.updateRecord;\r\n\r\n            if (result.errors) {\r\n                throw new Error('Can\\'t update record metadata in database', + errorParser(result.errors))\r\n            }\r\n\r\n            if(!success){\r\n                throw new Error();\r\n            }\r\n\r\n            yield put(pushLog(\r\n                    new Log(`Record metadata updated successful id: ${variables.id}`)\r\n                ))\r\n        } catch (error) {\r\n            yield put(pushLog(Log.Error(\r\n                ['saga', 'recorder', 'request update record'],\r\n                \"Can't update record data in database\" + error.message,\r\n                \"Sorry. During process of updating record metadata occurred a problem\",\r\n                error\r\n            )))\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}