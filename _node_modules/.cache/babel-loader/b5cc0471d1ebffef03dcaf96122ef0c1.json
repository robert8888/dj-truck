{"ast":null,"code":"const {\n  tokenizeHtmlClass\n} = require(\"./tokenizeHtmlClass\");\n\nconst {\n  tokenizeHtmlClassBlock\n} = require(\"./tokenizeHtmlClassBlock\");\n\nmodule.exports = parseHtmlClass;\n\nfunction parseHtmlClass() {\n  let Parser = this.Parser;\n  let inlineTokenizers = Parser.prototype.inlineTokenizers;\n  let blockTokenizers = Parser.prototype.blockTokenizers;\n  let inlineMethods = Parser.prototype.inlineMethods;\n  let blockMethods = Parser.prototype.blockMethods;\n  console.log('inline methods', inlineMethods);\n  console.log('block methods', blockMethods); // Add an inline tokenizer (defined in the following example).\n\n  inlineTokenizers.mention = tokenizeHtmlClass;\n  blockTokenizers.cssClass = tokenizeHtmlClassBlock; // Run it just before `text`.\n\n  inlineMethods.splice(inlineMethods.indexOf('text'), 0, 'mention');\n  blockMethods.slice(blockMethods.indexOf('paragraph'), cssClass);\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/pages/introduction/MarkDonwExtesnion/htmlClass.js"],"names":["tokenizeHtmlClass","require","tokenizeHtmlClassBlock","module","exports","parseHtmlClass","Parser","inlineTokenizers","prototype","blockTokenizers","inlineMethods","blockMethods","console","log","mention","cssClass","splice","indexOf","slice"],"mappings":"AACA,MAAM;AAACA,EAAAA;AAAD,IAAsBC,OAAO,CAAC,qBAAD,CAAnC;;AACA,MAAM;AAACC,EAAAA;AAAD,IAA2BD,OAAO,CAAC,0BAAD,CAAxC;;AACAE,MAAM,CAACC,OAAP,GAAiBC,cAAjB;;AAEA,SAASA,cAAT,GAA0B;AACtB,MAAIC,MAAM,GAAG,KAAKA,MAAlB;AACA,MAAIC,gBAAgB,GAAGD,MAAM,CAACE,SAAP,CAAiBD,gBAAxC;AACA,MAAIE,eAAe,GAAGH,MAAM,CAACE,SAAP,CAAiBC,eAAvC;AACA,MAAIC,aAAa,GAAGJ,MAAM,CAACE,SAAP,CAAiBE,aAArC;AACA,MAAIC,YAAY,GAAGL,MAAM,CAACE,SAAP,CAAiBG,YAApC;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BH,aAA9B;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BF,YAA7B,EARsB,CAStB;;AAGAJ,EAAAA,gBAAgB,CAACO,OAAjB,GAA2Bd,iBAA3B;AACAS,EAAAA,eAAe,CAACM,QAAhB,GAA2Bb,sBAA3B,CAbsB,CAetB;;AACAQ,EAAAA,aAAa,CAACM,MAAd,CAAqBN,aAAa,CAACO,OAAd,CAAsB,MAAtB,CAArB,EAAoD,CAApD,EAAuD,SAAvD;AACAN,EAAAA,YAAY,CAACO,KAAb,CAAmBP,YAAY,CAACM,OAAb,CAAqB,WAArB,CAAnB,EAAsDF,QAAtD;AACH","sourcesContent":["\r\nconst {tokenizeHtmlClass} = require(\"./tokenizeHtmlClass\");\r\nconst {tokenizeHtmlClassBlock} = require(\"./tokenizeHtmlClassBlock\")\r\nmodule.exports = parseHtmlClass;\r\n\r\nfunction parseHtmlClass() {\r\n    let Parser = this.Parser\r\n    let inlineTokenizers = Parser.prototype.inlineTokenizers\r\n    let blockTokenizers = Parser.prototype.blockTokenizers;\r\n    let inlineMethods = Parser.prototype.inlineMethods\r\n    let blockMethods = Parser.prototype.blockMethods;\r\n\r\n    console.log('inline methods', inlineMethods);\r\n    console.log('block methods', blockMethods)\r\n    // Add an inline tokenizer (defined in the following example).\r\n\r\n\r\n    inlineTokenizers.mention = tokenizeHtmlClass;\r\n    blockTokenizers.cssClass = tokenizeHtmlClassBlock;\r\n\r\n    // Run it just before `text`.\r\n    inlineMethods.splice(inlineMethods.indexOf('text'), 0, 'mention')\r\n    blockMethods.slice(blockMethods.indexOf('paragraph'), cssClass)\r\n}"]},"metadata":{},"sourceType":"module"}