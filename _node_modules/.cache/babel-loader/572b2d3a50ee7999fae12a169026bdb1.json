{"ast":null,"code":"import store from \"./../../../store\";\nexport default class Mixer {\n  constructor(channels) {\n    this.config = store.getState().configuration.mixer;\n    this.channels = channels;\n    this.audioNodes = {\n      channels: {}\n    };\n    this.sampleBuffers = {\n      channels: {}\n    };\n\n    for (let channelName of this.channels.getChannelNames()) {\n      this.audioNodes.channels = { ...this.audioNodes.channels,\n        [channelName]: {}\n      };\n      this.sampleBuffers.channels = { ...this.sampleBuffers.channels,\n        [channelName]: null\n      };\n    }\n  }\n\n  getChannelInterface(channelName) {\n    return {\n      getPeakMeter: () => this.getPeakMeter(channelName)\n    };\n  }\n\n  setUpAudioNodes(channelName) {\n    let audioCtx = this.channels.getChannel(channelName).backend.ac; //chained from up to down \n\n    this.audioNodes.channels[channelName] = {\n      analyserNode: audioCtx.createAnalyser(),\n      faderVolumeNode: audioCtx.createGain(),\n      gainNode: audioCtx.createGain(),\n      eqHiFilterNode: audioCtx.createBiquadFilter(),\n      eqMidFilterNode: audioCtx.createBiquadFilter(),\n      eqLowFilterNode: audioCtx.createBiquadFilter()\n    };\n    const channel = this.audioNodes.channels[channelName]; //\n\n    channel.analyserNode.fftSize = 256; //\n\n    channel.eqLowFilterNode.type = \"lowshelf\";\n    channel.eqLowFilterNode.frequency.setValueAtTime(this.config.low.frequency, audioCtx.currentTime);\n    channel.eqHiFilterNode.type = \"highshelf\";\n    channel.eqHiFilterNode.frequency.setValueAtTime(this.config.hi.frequency, audioCtx.currentTime);\n    channel.eqMidFilterNode.type = \"peaking\";\n    channel.eqMidFilterNode.frequency.setValueAtTime(this.config.mid.frequency, audioCtx.currentTime);\n    channel.eqMidFilterNode.Q.setValueAtTime(this.config.mid.Q, audioCtx.currentTime); //last in array is firt in chain (on top)\n\n    this.channels.getChannel(channelName).backend.setFilters([channel.eqLowFilterNode, channel.eqMidFilterNode, channel.eqHiFilterNode, channel.gainNode, channel.faderVolumeNode, channel.analyserNode]);\n    this.setUpSampleBuffers(channelName);\n  }\n\n  setUpSampleBuffers(channelName) {\n    let fftSize = this.audioNodes.channels[channelName].analyserNode.fftSize;\n    this.sampleBuffers.channels[channelName] = new Float32Array(fftSize);\n  }\n\n  setGainValue(channelName, knobValue, nodeName) {\n    let gain = 1 + knobValue / 100;\n    let audioCtx = this.channels.getChannel(channelName).backend.ac;\n    let channel = this.audioNodes.channels[channelName];\n    channel[nodeName].gain.setTargetAtTime(parseFloat(gain), audioCtx.currentTime, 0.01);\n  }\n\n  setFilterValue(channelName, knobValue, nodeName) {\n    let audioCtx = this.channels.getChannel(channelName).backend.ac;\n    let channel = this.audioNodes.channels[channelName];\n    channel[nodeName].gain.setValueAtTime(knobValue, audioCtx.currentTime);\n  }\n\n  setGain(channelName, knobValue) {\n    this.setGainValue(channelName, knobValue, 'gainNode');\n  }\n\n  setEqHigh(channelName, knobValue) {\n    this.setFilterValue(channelName, knobValue, 'eqHiFilterNode');\n  }\n\n  setEqMid(channelName, knobValue) {\n    this.setFilterValue(channelName, knobValue, 'eqMidFilterNode');\n  }\n\n  setEqLow(channelName, knobValue) {\n    this.setFilterValue(channelName, knobValue, 'eqLowFilterNode');\n  }\n\n  setFader(value) {\n    //in procent from -50%  to + 50% (not 0.01) but 1\n    let faderVolumeNodeA = this.audioNodes.channels[\"A\"].faderVolumeNode;\n    let faderVolumeNodeB = this.audioNodes.channels[\"B\"].faderVolumeNode;\n    let audioCtxA = this.channels.getChannel(\"A\").backend.ac;\n    let audioCtxB = this.channels.getChannel(\"B\").backend.ac;\n\n    if (!faderVolumeNodeA || !faderVolumeNodeB || !audioCtxA || !audioCtxB) {\n      throw new Error(\"Fased value not set checkout funtion setFader in mixer object\");\n    }\n\n    let percent = (value + 50) / 100;\n    let volA = Math.cos(percent * 0.5 * Math.PI);\n    let volB = Math.cos((1 - percent) * 0.5 * Math.PI);\n    faderVolumeNodeA.gain.setTargetAtTime(volA, audioCtxA.currentTime, 0.01);\n    faderVolumeNodeB.gain.setTargetAtTime(volB, audioCtxB.currentTime, 0.01);\n  }\n\n  getPeakMeter(channelName) {\n    var _this$audioNodes, _this$audioNodes$chan;\n\n    if (!((_this$audioNodes = this.audioNodes) === null || _this$audioNodes === void 0 ? void 0 : (_this$audioNodes$chan = _this$audioNodes.channels[channelName]) === null || _this$audioNodes$chan === void 0 ? void 0 : _this$audioNodes$chan.analyserNode)) return [];\n    let sampleBuffer = this.sampleBuffers.channels[channelName];\n    this.audioNodes.channels[channelName].analyserNode.getFloatTimeDomainData(sampleBuffer); //average \n\n    let sumOfSquares = 0;\n\n    for (let i = 0; i < sampleBuffer.length; i++) {\n      sumOfSquares += sampleBuffer[i] ** 2;\n    }\n\n    const avgPowerDecibels = 10 * Math.log10(sumOfSquares / sampleBuffer.length); //peak \n\n    let peakPower = 0;\n\n    for (let i = 0; i < sampleBuffer.length; i++) {\n      const power = sampleBuffer[i] ** 2;\n      peakPower = Math.max(power, peakPower);\n    }\n\n    const peakPowerDecibels = 10 * Math.log10(peakPower);\n    return {\n      avgdB: avgPowerDecibels,\n      peakdB: peakPowerDecibels\n    };\n  }\n\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/core/console/mixer/mixer.js"],"names":["store","Mixer","constructor","channels","config","getState","configuration","mixer","audioNodes","sampleBuffers","channelName","getChannelNames","getChannelInterface","getPeakMeter","setUpAudioNodes","audioCtx","getChannel","backend","ac","analyserNode","createAnalyser","faderVolumeNode","createGain","gainNode","eqHiFilterNode","createBiquadFilter","eqMidFilterNode","eqLowFilterNode","channel","fftSize","type","frequency","setValueAtTime","low","currentTime","hi","mid","Q","setFilters","setUpSampleBuffers","Float32Array","setGainValue","knobValue","nodeName","gain","setTargetAtTime","parseFloat","setFilterValue","setGain","setEqHigh","setEqMid","setEqLow","setFader","value","faderVolumeNodeA","faderVolumeNodeB","audioCtxA","audioCtxB","Error","percent","volA","Math","cos","PI","volB","sampleBuffer","getFloatTimeDomainData","sumOfSquares","i","length","avgPowerDecibels","log10","peakPower","power","max","peakPowerDecibels","avgdB","peakdB"],"mappings":"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","sourcesContent":["import store from \"./../../../store\";\r\n\r\n\r\nexport default class Mixer{\r\n    constructor(channels){\r\n        this.config = store.getState().configuration.mixer;\r\n        \r\n        this.channels = channels;\r\n        \r\n        this.audioNodes = {\r\n            channels : {\r\n            }\r\n        }\r\n\r\n        this.sampleBuffers = {\r\n            channels : {}\r\n        }\r\n\r\n        for(let channelName of this.channels.getChannelNames()){\r\n            this.audioNodes.channels = { \r\n                ...this.audioNodes.channels,\r\n                [channelName] : {},\r\n            }\r\n\r\n            this.sampleBuffers.channels = {\r\n                ...this.sampleBuffers.channels,\r\n                [channelName] : null,\r\n            }\r\n        }\r\n    }\r\n\r\n    getChannelInterface(channelName){\r\n        return {\r\n            getPeakMeter: () => this.getPeakMeter(channelName),\r\n        }\r\n    }\r\n\r\n\r\n\r\n    setUpAudioNodes(channelName){\r\n        let audioCtx = this.channels.getChannel(channelName).backend.ac;\r\n\r\n        //chained from up to down \r\n        this.audioNodes.channels[channelName] = {\r\n            analyserNode : audioCtx.createAnalyser(),\r\n            faderVolumeNode : audioCtx.createGain(),\r\n            gainNode : audioCtx.createGain(),\r\n            eqHiFilterNode : audioCtx.createBiquadFilter(),\r\n            eqMidFilterNode : audioCtx.createBiquadFilter(),\r\n            eqLowFilterNode : audioCtx.createBiquadFilter(),\r\n\r\n        }\r\n        const channel = this.audioNodes.channels[channelName];\r\n        //\r\n        channel.analyserNode.fftSize = 256;\r\n        //\r\n        channel.eqLowFilterNode.type = \"lowshelf\";\r\n        channel.eqLowFilterNode.frequency.setValueAtTime(this.config.low.frequency, audioCtx.currentTime);\r\n\r\n        channel.eqHiFilterNode.type = \"highshelf\";\r\n        channel.eqHiFilterNode.frequency.setValueAtTime(this.config.hi.frequency, audioCtx.currentTime);\r\n\r\n        channel.eqMidFilterNode.type = \"peaking\";\r\n        channel.eqMidFilterNode.frequency.setValueAtTime(this.config.mid.frequency, audioCtx.currentTime);\r\n        channel.eqMidFilterNode.Q.setValueAtTime(this.config.mid.Q, audioCtx.currentTime);  \r\n\r\n        //last in array is firt in chain (on top)\r\n        this.channels.getChannel(channelName).backend.setFilters([\r\n            channel.eqLowFilterNode, \r\n            channel.eqMidFilterNode, \r\n            channel.eqHiFilterNode, \r\n            channel.gainNode,\r\n            channel.faderVolumeNode,\r\n            channel.analyserNode,\r\n         ])\r\n        \r\n        this.setUpSampleBuffers(channelName);\r\n    }\r\n    \r\n    setUpSampleBuffers(channelName){\r\n        let fftSize = this.audioNodes.channels[channelName].analyserNode.fftSize;\r\n        this.sampleBuffers.channels[channelName] = new Float32Array(fftSize);\r\n    }\r\n\r\n\r\n    setGainValue(channelName, knobValue, nodeName){\r\n        let gain = 1 + knobValue / 100 ;\r\n        let audioCtx = this.channels.getChannel(channelName).backend.ac;\r\n\r\n        let channel = this.audioNodes.channels[channelName];\r\n        channel[nodeName].gain.setTargetAtTime( parseFloat(gain) , audioCtx.currentTime, 0.01);\r\n    }\r\n\r\n    setFilterValue(channelName, knobValue, nodeName){\r\n        let audioCtx = this.channels.getChannel(channelName).backend.ac;\r\n\r\n        let channel = this.audioNodes.channels[channelName];\r\n        channel[nodeName].gain.setValueAtTime( knobValue , audioCtx.currentTime);\r\n    }\r\n\r\n\r\n    setGain(channelName, knobValue){\r\n        this.setGainValue(channelName, knobValue, 'gainNode');\r\n    }\r\n\r\n    setEqHigh(channelName, knobValue){\r\n        this.setFilterValue(channelName, knobValue, 'eqHiFilterNode');\r\n    }\r\n\r\n    setEqMid(channelName, knobValue){\r\n        this.setFilterValue(channelName, knobValue, 'eqMidFilterNode');\r\n    }\r\n\r\n    setEqLow(channelName, knobValue){\r\n        this.setFilterValue(channelName, knobValue, 'eqLowFilterNode');\r\n    }\r\n\r\n    setFader(value){//in procent from -50%  to + 50% (not 0.01) but 1\r\n        let faderVolumeNodeA = this.audioNodes.channels[\"A\"].faderVolumeNode;\r\n        let faderVolumeNodeB = this.audioNodes.channels[\"B\"].faderVolumeNode;\r\n        let audioCtxA = this.channels.getChannel(\"A\").backend.ac;\r\n        let audioCtxB = this.channels.getChannel(\"B\").backend.ac;\r\n        if(!faderVolumeNodeA || !faderVolumeNodeB || !audioCtxA || !audioCtxB){\r\n            throw new Error(\"Fased value not set checkout funtion setFader in mixer object\");\r\n        }\r\n\r\n        let percent = (value + 50)/100;\r\n        let volA = Math.cos(percent * 0.5 * Math.PI);\r\n        let volB = Math.cos((1 - percent) * 0.5 * Math.PI);\r\n\r\n        faderVolumeNodeA.gain.setTargetAtTime(volA, audioCtxA.currentTime, 0.01);\r\n        faderVolumeNodeB.gain.setTargetAtTime(volB, audioCtxB.currentTime, 0.01);\r\n    }\r\n\r\n\r\n\r\n    getPeakMeter(channelName){\r\n        if(!this.audioNodes?.channels[channelName]?.analyserNode) return [];\r\n        let sampleBuffer = this.sampleBuffers.channels[channelName]\r\n        this.audioNodes.channels[channelName].analyserNode.getFloatTimeDomainData(sampleBuffer);\r\n       \r\n        //average \r\n        let sumOfSquares = 0;\r\n        for (let i = 0; i < sampleBuffer.length; i++) {\r\n          sumOfSquares += sampleBuffer[i] ** 2;\r\n        }\r\n\r\n        const avgPowerDecibels = 10 * Math.log10(sumOfSquares / sampleBuffer.length);\r\n\r\n        //peak \r\n\r\n        let peakPower = 0;\r\n        for (let i = 0; i < sampleBuffer.length; i++) {\r\n          const power = sampleBuffer[i] ** 2;\r\n          peakPower = Math.max(power, peakPower);\r\n        }\r\n        const peakPowerDecibels = 10 * Math.log10(peakPower);\r\n\r\n        return {\r\n            avgdB : avgPowerDecibels,\r\n            peakdB : peakPowerDecibels,\r\n        }\r\n    }\r\n    \r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}