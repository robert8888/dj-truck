{"ast":null,"code":"import _defineProperty from\"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";import _objectSpread from\"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import _toConsumableArray from\"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";import _classCallCheck from\"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import store from\"./../../../../../store\";import{nodeChain as audioNodeChain}from\"./../../../../../utils/sound/audioNodes\";import Mastering from\"./mastering\";import Recorder from\"./recorder/recorder\";import Equaliztion from\"./equalization\";import Fader from\"./fader\";import PeakMeters from\"./peakMeters\";var Mixer=/*#__PURE__*/function(){function Mixer(channels){_classCallCheck(this,Mixer);this.config=store.getState().configuration.mixer;this.channels=channels;this.mastering=new Mastering(this);Object.assign(this,Equaliztion);Object.assign(this,Fader);Object.assign(this,PeakMeters);this.initChannelContainer('audioNodes');this.initChannelContainer('sampleBuffers');this.createMainChannel();this.recorder=new Recorder(this);}//connecting extrnal (effector)\n_createClass(Mixer,[{key:\"connect\",value:function connect(external){this.external=external;}},{key:\"initChannelContainer\",value:function initChannelContainer(containerName){this[containerName]={channels:{}};for(var _i=0,_arr=[].concat(_toConsumableArray(this.channels.getChannelNames()),[\"main\"]);_i<_arr.length;_i++){var channelName=_arr[_i];this[containerName].channels=_objectSpread({},this[containerName].channels,_defineProperty({},channelName,null));}}},{key:\"createMainChannel\",value:function createMainChannel(){//main audio context with is share between wavesurfer objects\nthis.mainAudioContext=new AudioContext();var ac=this.mainAudioContext;var main=this.audioNodes.channels['main']={};main.preGainNode=ac.createGain();main.preAnalyserNode=ac.createAnalyser();main.compressorNode=ac.createDynamicsCompressor();main.postAnalyserNode=ac.createAnalyser();main.postGainNode=ac.createGain();main.recorderStremDestination=ac.createMediaStreamDestination();main.postGainNode.connect(main.recorderStremDestination);this.mastering.configCompressor();//wiring in chain\naudioNodeChain([main.preGainNode,main.preAnalyserNode,main.compressorNode,main.postGainNode,main.postAnalyserNode,ac.destination]);}},{key:\"getChannelInterface\",value:function getChannelInterface(channelName){var _this=this;return{getPeakMeter:function getPeakMeter(){return _this.getChannelPeakMeter(channelName);}};}},{key:\"getMasteringInterface\",value:function getMasteringInterface(){return{getPrePeakMeter:{getPeakMeter:this.getMasterPeakMetter.bind(this,\"pre\")},getPostPeakMeter:{getPeakMeter:this.getMasterPeakMetter.bind(this,\"post\")}};}},{key:\"setUpChannelsAudioNodes\",value:function setUpChannelsAudioNodes(channelName){//surfer - waveSurfer obj\nvar surfer=this.channels.getChannel(channelName);var audioCtx=surfer.backend.ac;//chained from up to down \nthis.audioNodes.channels[channelName]={eqHiFilterNode:audioCtx.createBiquadFilter(),eqMidFilterNode:audioCtx.createBiquadFilter(),eqLowFilterNode:audioCtx.createBiquadFilter(),lowPassFilterNode:audioCtx.createBiquadFilter(),highPassFilterNode:audioCtx.createBiquadFilter(),//\nsendNode:audioCtx.createGain(),sendAndReturns:Array(this.config.externalChannels).fill(1).map(function(){return{send:audioCtx.createGain(),return:null};}),//\nbypassNode:audioCtx.createGain(),mainGainNode:audioCtx.createGain(),analyserNode:audioCtx.createAnalyser(),faderVolumeNode:audioCtx.createGain()};//--Confign\nvar channelNodes=this.audioNodes.channels[channelName];//\nchannelNodes.analyserNode.fftSize=256;//--EQ filters\nchannelNodes.eqLowFilterNode.type=\"lowshelf\";channelNodes.eqLowFilterNode.frequency.setValueAtTime(this.config.low.frequency,audioCtx.currentTime);channelNodes.eqHiFilterNode.type=\"highshelf\";channelNodes.eqHiFilterNode.frequency.setValueAtTime(this.config.hi.frequency,audioCtx.currentTime);channelNodes.eqMidFilterNode.type=\"peaking\";channelNodes.eqMidFilterNode.frequency.setValueAtTime(this.config.mid.frequency,audioCtx.currentTime);channelNodes.eqMidFilterNode.Q.setValueAtTime(this.config.mid.Q,audioCtx.currentTime);//--Filters\nchannelNodes.lowPassFilterNode.type=\"lowpass\";channelNodes.lowPassFilterNode.frequency.setValueAtTime(24000,audioCtx.currentTime);channelNodes.highPassFilterNode.type=\"highpass\";channelNodes.highPassFilterNode.frequency.setValueAtTime(0,audioCtx.currentTime);//--Send and return\nchannelNodes.sendAndReturns.forEach(function(channel){channelNodes.sendNode.connect(channel.send);//mute on start\nchannel.send.gain.value=0;});var sends=channelNodes.sendAndReturns.map(function(channel){return channel.send;});if(this.external&&this.external.connect){var returns=this.external.connect(sends);returns.forEach(function(returnNode,index){returnNode.gain.value=0;channelNodes.sendAndReturns[index].return=returnNode;returnNode.connect(channelNodes.mainGainNode);});}//Assign in chain \nthis.channels.getChannel(channelName).backend.setFilters([channelNodes.eqLowFilterNode,channelNodes.eqHiFilterNode,channelNodes.eqMidFilterNode,channelNodes.lowPassFilterNode,channelNodes.highPassFilterNode,channelNodes.sendNode,channelNodes.bypassNode,channelNodes.mainGainNode,channelNodes.analyserNode,channelNodes.faderVolumeNode]);//-Conect to main output mixer channel\nsurfer.backend.gainNode.disconnect();surfer.backend.gainNode.connect(this.audioNodes.channels['main'].preGainNode);this.setUpSampleBuffers(channelName);}},{key:\"setSend\",value:function setSend(channelName,sendNumber,value){var _this2=this;var sendAndReturns=this.audioNodes.channels[channelName].sendAndReturns;if(value===1){sendAndReturns._currentSends=sendAndReturns._currentSends?sendAndReturns._currentSends.add(sendNumber):new Set([sendNumber]);}else if(value===0&&sendAndReturns._currentSends){sendAndReturns._currentSends.delete(sendNumber);}var gain=1;if(sendAndReturns._currentSends&&sendAndReturns._currentSends.size>1){gain*=Math.pow(0.71,sendAndReturns._currentSends.size-1);}sendAndReturns.forEach(function(channel,index){console.log(\"for channek \"+channelName,\" gain \"+gain,\"send nubmer \"+sendNumber);var send=channel.send,returns=channel.return;//current sending\nif(sendAndReturns._currentSends.has(index)){send.gain.setTargetAtTime(gain,_this2.mainAudioContext.currentTime,0.01);returns.gain.setTargetAtTime(gain,_this2.mainAudioContext.currentTime,0.01);}else{send.gain.setTargetAtTime(0,_this2.mainAudioContext.currentTime,0.01);returns.gain.setTargetAtTime(0,_this2.mainAudioContext.currentTime,0.01);}});//turn on/off bypass\nvar bypass=+!sendAndReturns._currentSends.size;this.audioNodes.channels[channelName].bypassNode.gain.setTargetAtTime(bypass,this.mainAudioContext.currentTime,0.01);}}]);return Mixer;}();export{Mixer as default};","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/pages/console/core/console/mixer/mixer.js"],"names":["store","nodeChain","audioNodeChain","Mastering","Recorder","Equaliztion","Fader","PeakMeters","Mixer","channels","config","getState","configuration","mixer","mastering","Object","assign","initChannelContainer","createMainChannel","recorder","external","containerName","getChannelNames","channelName","mainAudioContext","AudioContext","ac","main","audioNodes","preGainNode","createGain","preAnalyserNode","createAnalyser","compressorNode","createDynamicsCompressor","postAnalyserNode","postGainNode","recorderStremDestination","createMediaStreamDestination","connect","configCompressor","destination","getPeakMeter","getChannelPeakMeter","getPrePeakMeter","getMasterPeakMetter","bind","getPostPeakMeter","surfer","getChannel","audioCtx","backend","eqHiFilterNode","createBiquadFilter","eqMidFilterNode","eqLowFilterNode","lowPassFilterNode","highPassFilterNode","sendNode","sendAndReturns","Array","externalChannels","fill","map","send","return","bypassNode","mainGainNode","analyserNode","faderVolumeNode","channelNodes","fftSize","type","frequency","setValueAtTime","low","currentTime","hi","mid","Q","forEach","channel","gain","value","sends","returns","returnNode","index","setFilters","gainNode","disconnect","setUpSampleBuffers","sendNumber","_currentSends","add","Set","delete","size","console","log","has","setTargetAtTime","bypass"],"mappings":"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","sourcesContent":["import store from \"./../../../../../store\";\r\nimport { nodeChain as audioNodeChain } from \"./../../../../../utils/sound/audioNodes\";\r\nimport Mastering from \"./mastering\";\r\nimport Recorder from \"./recorder/recorder\";\r\nimport Equaliztion from \"./equalization\";\r\nimport Fader from \"./fader\";\r\nimport PeakMeters from \"./peakMeters\";\r\n\r\nexport default class Mixer {\r\n    constructor(channels) {\r\n        this.config = store.getState().configuration.mixer;\r\n\r\n        this.channels = channels;\r\n        this.mastering = new Mastering(this);\r\n\r\n        \r\n        Object.assign(this, Equaliztion);\r\n        Object.assign(this, Fader);\r\n        Object.assign(this, PeakMeters)\r\n\r\n        this.initChannelContainer('audioNodes');\r\n        this.initChannelContainer('sampleBuffers');\r\n        this.createMainChannel();\r\n\r\n        this.recorder = new Recorder(this);\r\n    }\r\n\r\n\r\n    //connecting extrnal (effector)\r\n    connect(external) {\r\n        this.external = external;\r\n    }\r\n\r\n    initChannelContainer(containerName) {\r\n        this[containerName] = {\r\n            channels: {\r\n            }\r\n        }\r\n        for (let channelName of [...this.channels.getChannelNames(), \"main\"]) {\r\n            this[containerName].channels = {\r\n                ...this[containerName].channels,\r\n                [channelName]: null\r\n            }\r\n        }\r\n    }\r\n\r\n    createMainChannel() {\r\n        //main audio context with is share between wavesurfer objects\r\n        this.mainAudioContext = new AudioContext();\r\n\r\n        let ac = this.mainAudioContext;\r\n        let main = this.audioNodes.channels['main'] = {};\r\n\r\n        main.preGainNode = ac.createGain();\r\n        main.preAnalyserNode = ac.createAnalyser();\r\n        main.compressorNode = ac.createDynamicsCompressor();\r\n        main.postAnalyserNode = ac.createAnalyser();\r\n        main.postGainNode = ac.createGain();\r\n\r\n        main.recorderStremDestination = ac.createMediaStreamDestination();\r\n        main.postGainNode.connect(main.recorderStremDestination)\r\n\r\n        this.mastering.configCompressor();\r\n\r\n        //wiring in chain\r\n         audioNodeChain([\r\n         main.preGainNode,\r\n         main.preAnalyserNode, \r\n         main.compressorNode, \r\n         main.postGainNode,\r\n         main.postAnalyserNode, \r\n         ac.destination])\r\n    }\r\n\r\n\r\n    getChannelInterface(channelName) {\r\n        return {\r\n            getPeakMeter: () => this.getChannelPeakMeter(channelName),\r\n        }\r\n    }\r\n\r\n    getMasteringInterface(){\r\n        return {\r\n            getPrePeakMeter: {\r\n                getPeakMeter: this.getMasterPeakMetter.bind(this, \"pre\")\r\n            },\r\n            getPostPeakMeter: {\r\n                getPeakMeter: this.getMasterPeakMetter.bind(this, \"post\")\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    setUpChannelsAudioNodes(channelName) {\r\n        //surfer - waveSurfer obj\r\n        let surfer = this.channels.getChannel(channelName)\r\n        let audioCtx = surfer.backend.ac;\r\n\r\n        //chained from up to down \r\n        this.audioNodes.channels[channelName] = {\r\n            eqHiFilterNode: audioCtx.createBiquadFilter(),\r\n            eqMidFilterNode: audioCtx.createBiquadFilter(),\r\n            eqLowFilterNode: audioCtx.createBiquadFilter(),\r\n            lowPassFilterNode: audioCtx.createBiquadFilter(),\r\n            highPassFilterNode: audioCtx.createBiquadFilter(),\r\n            //\r\n            sendNode: audioCtx.createGain(),\r\n            sendAndReturns: Array(this.config.externalChannels).fill(1).map(() => ({\r\n                send: audioCtx.createGain(),\r\n                return: null\r\n            })),\r\n            //\r\n            bypassNode: audioCtx.createGain(),\r\n            mainGainNode: audioCtx.createGain(),\r\n            analyserNode: audioCtx.createAnalyser(),\r\n            faderVolumeNode: audioCtx.createGain(),\r\n        }\r\n\r\n        //--Confign\r\n        const channelNodes = this.audioNodes.channels[channelName];\r\n        //\r\n        channelNodes.analyserNode.fftSize = 256;\r\n        //--EQ filters\r\n        channelNodes.eqLowFilterNode.type = \"lowshelf\";\r\n        channelNodes.eqLowFilterNode.frequency.setValueAtTime(this.config.low.frequency, audioCtx.currentTime);\r\n\r\n        channelNodes.eqHiFilterNode.type = \"highshelf\";\r\n        channelNodes.eqHiFilterNode.frequency.setValueAtTime(this.config.hi.frequency, audioCtx.currentTime);\r\n\r\n        channelNodes.eqMidFilterNode.type = \"peaking\";\r\n        channelNodes.eqMidFilterNode.frequency.setValueAtTime(this.config.mid.frequency, audioCtx.currentTime);\r\n        channelNodes.eqMidFilterNode.Q.setValueAtTime(this.config.mid.Q, audioCtx.currentTime);\r\n        //--Filters\r\n        channelNodes.lowPassFilterNode.type = \"lowpass\";\r\n        channelNodes.lowPassFilterNode.frequency.setValueAtTime(24000, audioCtx.currentTime);\r\n\r\n        channelNodes.highPassFilterNode.type = \"highpass\";\r\n        channelNodes.highPassFilterNode.frequency.setValueAtTime(0, audioCtx.currentTime);\r\n        //--Send and return\r\n        channelNodes.sendAndReturns.forEach((channel) => {\r\n            channelNodes.sendNode.connect(channel.send);\r\n            //mute on start\r\n            channel.send.gain.value = 0;\r\n        });\r\n        const sends = channelNodes.sendAndReturns.map(channel => channel.send);\r\n        if (this.external && this.external.connect) {\r\n            const returns = this.external.connect(sends);\r\n            returns.forEach((returnNode, index) => {\r\n                returnNode.gain.value = 0;\r\n                channelNodes.sendAndReturns[index].return = returnNode;\r\n                returnNode.connect(channelNodes.mainGainNode);\r\n            })\r\n        }\r\n\r\n        //Assign in chain \r\n        this.channels.getChannel(channelName).backend.setFilters([\r\n            channelNodes.eqLowFilterNode,\r\n            channelNodes.eqHiFilterNode,\r\n            channelNodes.eqMidFilterNode,\r\n            channelNodes.lowPassFilterNode,\r\n            channelNodes.highPassFilterNode,\r\n            channelNodes.sendNode,\r\n            channelNodes.bypassNode,\r\n            channelNodes.mainGainNode,\r\n            channelNodes.analyserNode,\r\n            channelNodes.faderVolumeNode,\r\n        ])\r\n\r\n        //-Conect to main output mixer channel\r\n        surfer.backend.gainNode.disconnect();\r\n        surfer.backend.gainNode.connect(\r\n            this.audioNodes.channels['main'].preGainNode\r\n            );\r\n        this.setUpSampleBuffers(channelName);\r\n    }\r\n\r\n\r\n\r\n\r\n    setSend(channelName, sendNumber, value) {\r\n        const sendAndReturns = this.audioNodes.channels[channelName].sendAndReturns;\r\n        if (value === 1) {\r\n            sendAndReturns._currentSends =\r\n                (sendAndReturns._currentSends) ? sendAndReturns._currentSends.add(sendNumber) : new Set([sendNumber]);\r\n        } else if (value === 0 && sendAndReturns._currentSends) {\r\n            sendAndReturns._currentSends.delete(sendNumber);\r\n        }\r\n\r\n        let gain = 1;\r\n        if (sendAndReturns._currentSends && sendAndReturns._currentSends.size > 1) {\r\n            gain *= 0.71 ** (sendAndReturns._currentSends.size - 1);\r\n        }\r\n\r\n        sendAndReturns.forEach((channel, index) => {\r\n            console.log(\"for channek \" + channelName, \" gain \" + gain, \"send nubmer \" + sendNumber)\r\n            const { send, return: returns } = channel;\r\n            //current sending\r\n            if (sendAndReturns._currentSends.has(index)) {\r\n                send.gain.setTargetAtTime(gain, this.mainAudioContext.currentTime, 0.01);\r\n                returns.gain.setTargetAtTime(gain, this.mainAudioContext.currentTime, 0.01);\r\n            } else {\r\n                send.gain.setTargetAtTime(0, this.mainAudioContext.currentTime, 0.01);\r\n                returns.gain.setTargetAtTime(0, this.mainAudioContext.currentTime, 0.01);\r\n            }\r\n        })\r\n\r\n        //turn on/off bypass\r\n        const bypass = +!sendAndReturns._currentSends.size;\r\n        this.audioNodes.channels[channelName].bypassNode\r\n            .gain.setTargetAtTime(bypass, this.mainAudioContext.currentTime, 0.01);\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}