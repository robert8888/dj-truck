{"ast":null,"code":"import Effect from \"./../effect\";\nexport default class Delay extends Effect {\n  static defaultParams() {\n    return {\n      params: {\n        feedback: {\n          min: 0,\n          max: 100,\n          defaultValue: 50,\n          type: \"float\",\n          description: \"fb\"\n        },\n        time: {\n          min: 0,\n          max: 180,\n          defaultValue: 5,\n          type: \"float\",\n          description: \"time\"\n        }\n      }\n    };\n  }\n\n  constructor(context, params) {\n    super();\n    this._default = Delay.defaultParams().params;\n    this._context = context;\n\n    this._buildNodes();\n\n    this._initParams(params);\n  }\n\n  _buildNodes() {\n    this.inputNode = this._context.createGain();\n    this.outputNode = this._context.createGain();\n    this.feedbackGainNode = this._context.createGain();\n    this.delayNode = this._context.createDelay(this._default.time.max - 0.01); // line in to wet mix\n\n    this.inputNode.connect(this.delayNode); // feedback loop\n\n    this.delayNode.connect(this.feedbackGainNode);\n    this.feedbackGainNode.connect(this.delayNode); // wet out\n\n    this.delayNode.connect(this.outputNode);\n  }\n\n  get name() {\n    return \"Delay\";\n  }\n\n  get time() {\n    return this._time;\n  }\n\n  set time(value) {\n    value = this._valueToRange(value, \"time\");\n    this._time = value;\n    this.delayNode.delayTime.setTargetAtTime(value, this._context.currentTime, 0.01);\n  }\n\n  get feedback() {\n    return this._feedback;\n  }\n\n  set feedback(value) {\n    value = this._valueToRange(value, \"feedback\");\n    this._feedback = value;\n    this.feedbackGainNode.gain.setTargetAtTime(value / 100, this._context.currentTime, 0.01);\n  }\n\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/pages/console/core/console/effector/effects/delay/delay.js"],"names":["Effect","Delay","defaultParams","params","feedback","min","max","defaultValue","type","description","time","constructor","context","_default","_context","_buildNodes","_initParams","inputNode","createGain","outputNode","feedbackGainNode","delayNode","createDelay","connect","name","_time","value","_valueToRange","delayTime","setTargetAtTime","currentTime","_feedback","gain"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,aAAnB;AAEA,eAAe,MAAMC,KAAN,SAAoBD,MAApB,CAA2B;AACtC,SAAOE,aAAP,GAAsB;AAClB,WAAO;AACHC,MAAAA,MAAM,EAAG;AACLC,QAAAA,QAAQ,EAAE;AACNC,UAAAA,GAAG,EAAE,CADC;AAENC,UAAAA,GAAG,EAAE,GAFC;AAGNC,UAAAA,YAAY,EAAE,EAHR;AAINC,UAAAA,IAAI,EAAE,OAJA;AAKNC,UAAAA,WAAW,EAAG;AALR,SADL;AAQLC,QAAAA,IAAI,EAAE;AACFL,UAAAA,GAAG,EAAE,CADH;AAEFC,UAAAA,GAAG,EAAE,GAFH;AAGFC,UAAAA,YAAY,EAAE,CAHZ;AAIFC,UAAAA,IAAI,EAAE,OAJJ;AAKFC,UAAAA,WAAW,EAAE;AALX;AARD;AADN,KAAP;AAkBH;;AAEDE,EAAAA,WAAW,CAACC,OAAD,EAAUT,MAAV,EAAiB;AACxB;AACA,SAAKU,QAAL,GAAgBZ,KAAK,CAACC,aAAN,GAAsBC,MAAtC;AACA,SAAKW,QAAL,GAAgBF,OAAhB;;AAEA,SAAKG,WAAL;;AACA,SAAKC,WAAL,CAAiBb,MAAjB;AAEH;;AAEDY,EAAAA,WAAW,GAAE;AACT,SAAKE,SAAL,GAAiB,KAAKH,QAAL,CAAcI,UAAd,EAAjB;AACA,SAAKC,UAAL,GAAkB,KAAKL,QAAL,CAAcI,UAAd,EAAlB;AACA,SAAKE,gBAAL,GAAwB,KAAKN,QAAL,CAAcI,UAAd,EAAxB;AACA,SAAKG,SAAL,GAAiB,KAAKP,QAAL,CAAcQ,WAAd,CAA0B,KAAKT,QAAL,CAAcH,IAAd,CAAmBJ,GAAnB,GAAyB,IAAnD,CAAjB,CAJS,CAMT;;AACA,SAAKW,SAAL,CAAeM,OAAf,CAAuB,KAAKF,SAA5B,EAPS,CAST;;AACA,SAAKA,SAAL,CAAeE,OAAf,CAAuB,KAAKH,gBAA5B;AACA,SAAKA,gBAAL,CAAsBG,OAAtB,CAA8B,KAAKF,SAAnC,EAXS,CAaT;;AACA,SAAKA,SAAL,CAAeE,OAAf,CAAuB,KAAKJ,UAA5B;AACH;;AAGD,MAAIK,IAAJ,GAAU;AACN,WAAO,OAAP;AACH;;AAED,MAAId,IAAJ,GAAU;AACN,WAAO,KAAKe,KAAZ;AACH;;AAED,MAAIf,IAAJ,CAASgB,KAAT,EAAe;AACXA,IAAAA,KAAK,GAAG,KAAKC,aAAL,CAAmBD,KAAnB,EAA0B,MAA1B,CAAR;AACA,SAAKD,KAAL,GAAaC,KAAb;AACA,SAAKL,SAAL,CAAeO,SAAf,CAAyBC,eAAzB,CACQH,KADR,EAEQ,KAAKZ,QAAL,CAAcgB,WAFtB,EAGQ,IAHR;AAKH;;AAED,MAAI1B,QAAJ,GAAc;AACV,WAAO,KAAK2B,SAAZ;AACH;;AAED,MAAI3B,QAAJ,CAAasB,KAAb,EAAmB;AACfA,IAAAA,KAAK,GAAG,KAAKC,aAAL,CAAmBD,KAAnB,EAA0B,UAA1B,CAAR;AACA,SAAKK,SAAL,GAAiBL,KAAjB;AACA,SAAKN,gBAAL,CAAsBY,IAAtB,CAA2BH,eAA3B,CACQH,KAAK,GAAG,GADhB,EAEQ,KAAKZ,QAAL,CAAcgB,WAFtB,EAGQ,IAHR;AAKH;;AAhFqC","sourcesContent":["import Effect from \"./../effect\";\r\n\r\nexport default class Delay extends Effect {\r\n    static defaultParams(){\r\n        return {\r\n            params : {\r\n                feedback: {\r\n                    min: 0,\r\n                    max: 100,\r\n                    defaultValue: 50,\r\n                    type: \"float\",\r\n                    description : \"fb\"\r\n                },\r\n                time: {\r\n                    min: 0,\r\n                    max: 180,\r\n                    defaultValue: 5,\r\n                    type: \"float\",\r\n                    description: \"time\"\r\n                },\r\n            }\r\n        }\r\n    }\r\n\r\n    constructor(context, params){\r\n        super();\r\n        this._default = Delay.defaultParams().params;\r\n        this._context = context;\r\n\r\n        this._buildNodes();\r\n        this._initParams(params)\r\n\r\n    }\r\n\r\n    _buildNodes(){\r\n        this.inputNode = this._context.createGain();\r\n        this.outputNode = this._context.createGain();\r\n        this.feedbackGainNode = this._context.createGain();\r\n        this.delayNode = this._context.createDelay(this._default.time.max - 0.01);\r\n\r\n        // line in to wet mix\r\n        this.inputNode.connect(this.delayNode);\r\n\r\n        // feedback loop\r\n        this.delayNode.connect(this.feedbackGainNode);\r\n        this.feedbackGainNode.connect(this.delayNode);\r\n\r\n        // wet out\r\n        this.delayNode.connect(this.outputNode);\r\n    }\r\n\r\n    \r\n    get name(){\r\n        return \"Delay\"\r\n    }\r\n\r\n    get time(){\r\n        return this._time;\r\n    }\r\n\r\n    set time(value){\r\n        value = this._valueToRange(value, \"time\")\r\n        this._time = value;\r\n        this.delayNode.delayTime.setTargetAtTime(\r\n                value, \r\n                this._context.currentTime,\r\n                0.01\r\n            );\r\n    }\r\n\r\n    get feedback(){\r\n        return this._feedback;\r\n    }\r\n\r\n    set feedback(value){\r\n        value = this._valueToRange(value, \"feedback\")\r\n        this._feedback = value;\r\n        this.feedbackGainNode.gain.setTargetAtTime(\r\n                value / 100,\r\n                this._context.currentTime, \r\n                0.01\r\n            )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}