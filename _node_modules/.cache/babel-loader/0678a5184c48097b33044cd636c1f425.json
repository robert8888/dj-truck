{"ast":null,"code":"import _objectSpread from\"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import _regeneratorRuntime from\"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\node_modules\\\\@babel\\\\runtime/regenerator\";var _marked=/*#__PURE__*/_regeneratorRuntime.mark(requestUserRecords),_marked2=/*#__PURE__*/_regeneratorRuntime.mark(handel);import{put,select,takeEvery}from\"redux-saga/effects\";import{ACTIONS,loadRecords,pushLog,recReqFails}from\"../../actions\";import{getApi}from\"./../../apis/apiProvider\";import{Log}from\"./../../utils/logger/logger\";import errorParser from\"./../../utils/serverErrorParser/errorParser\";export default function requestUserRecords(){return _regeneratorRuntime.wrap(function requestUserRecords$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return takeEvery(ACTIONS.RECS_REQ_RECS,handel);case 2:case\"end\":return _context.stop();}}},_marked);}var getToken=function getToken(state){return state.user.token;};function handel(action){var token,_response$data,_response$data$record,_response$data2,_response$data2$recor,_getApi,callQuery,queries,variables,query,response,records,countAll;return _regeneratorRuntime.wrap(function handel$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return select(getToken);case 2:token=_context2.sent;_context2.prev=3;_getApi=getApi(\"UserAssets\"),callQuery=_getApi.callQuery,queries=_getApi.queries;variables=_objectSpread({},action.where);variables.pageSize=action.pageSize;variables.page=action.page;query=queries.recordsQl;_context2.next=11;return callQuery(query,token,variables);case 11:response=_context2.sent;records=response===null||response===void 0?void 0:(_response$data=response.data)===null||_response$data===void 0?void 0:(_response$data$record=_response$data.records)===null||_response$data$record===void 0?void 0:_response$data$record.records;countAll=response===null||response===void 0?void 0:(_response$data2=response.data)===null||_response$data2===void 0?void 0:(_response$data2$recor=_response$data2.records)===null||_response$data2$recor===void 0?void 0:_response$data2$recor.countAll;if(!response.errors){_context2.next=16;break;}throw new Error(\"Server response contains errors\"+errorParser(response.errors));case 16:if(records){_context2.next=18;break;}throw new Error(\"Can't load reacords from database, response don't contains records object\");case 18:_context2.next=20;return put(loadRecords(records,countAll));case 20:_context2.next=22;return put(pushLog(new Log(\"Records successfully downloaded from database parameters: \\n \".concat(JSON.stringify(variables)))));case 22:_context2.next=30;break;case 24:_context2.prev=24;_context2.t0=_context2[\"catch\"](3);_context2.next=28;return put(recReqFails(_context2.t0.message));case 28:_context2.next=30;return put(pushLog(Log.Error(['saga','records','request records'],\"Can't load records from database \"+_context2.t0.message,_context2.t0)));case 30:case\"end\":return _context2.stop();}}},_marked2,null,[[3,24]]);}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/sagas/records/reqRecords.js"],"names":["requestUserRecords","handel","put","select","takeEvery","ACTIONS","loadRecords","pushLog","recReqFails","getApi","Log","errorParser","RECS_REQ_RECS","getToken","state","user","token","action","callQuery","queries","variables","where","pageSize","page","query","recordsQl","response","records","data","countAll","errors","Error","JSON","stringify","message"],"mappings":"4QAMyBA,kB,iDAOfC,M,EAbV,OAASC,GAAT,CAAcC,MAAd,CAAsBC,SAAtB,KAAuC,oBAAvC,CACA,OAASC,OAAT,CAAkBC,WAAlB,CAA+BC,OAA/B,CAAwCC,WAAxC,KAA2D,eAA3D,CACA,OAASC,MAAT,KAAuB,0BAAvB,CACA,OAASC,GAAT,KAAoB,6BAApB,CACA,MAAOC,CAAAA,WAAP,KAAwB,6CAAxB,CAEA,cAAe,SAAUX,CAAAA,kBAAV,8IAEX,MAAMI,CAAAA,SAAS,CAACC,OAAO,CAACO,aAAT,CAAwBX,MAAxB,CAAf,CAFW,sDAKf,GAAMY,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAAAC,KAAK,QAAIA,CAAAA,KAAK,CAACC,IAAN,CAAWC,KAAf,EAAtB,CAEA,QAAUf,CAAAA,MAAV,CAAiBgB,MAAjB,8RACkB,MAAMd,CAAAA,MAAM,CAACU,QAAD,CAAZ,CADlB,OACUG,KADV,yCAIuCP,MAAM,CAAC,YAAD,CAJ7C,CAIgBS,SAJhB,SAIgBA,SAJhB,CAI2BC,OAJ3B,SAI2BA,OAJ3B,CAKcC,SALd,kBAK+BH,MAAM,CAACI,KALtC,EAMQD,SAAS,CAACE,QAAV,CAAqBL,MAAM,CAACK,QAA5B,CACAF,SAAS,CAACG,IAAV,CAAiBN,MAAM,CAACM,IAAxB,CACMC,KARd,CAQsBL,OAAO,CAACM,SAR9B,mBASyB,MAAMP,CAAAA,SAAS,CAACM,KAAD,CAAQR,KAAR,CAAeI,SAAf,CAAf,CATzB,QAScM,QATd,gBAUcC,OAVd,CAUwBD,QAVxB,SAUwBA,QAVxB,iCAUwBA,QAAQ,CAAEE,IAVlC,gEAUwB,eAAgBD,OAVxC,gDAUwB,sBAAyBA,OAVjD,CAWcE,QAXd,CAWyBH,QAXzB,SAWyBA,QAXzB,kCAWyBA,QAAQ,CAAEE,IAXnC,iEAWyB,gBAAgBD,OAXzC,gDAWyB,sBAAyBE,QAXlD,KAaYH,QAAQ,CAACI,MAbrB,gCAckB,IAAIC,CAAAA,KAAJ,CAAU,kCAAoCpB,WAAW,CAACe,QAAQ,CAACI,MAAV,CAAzD,CAdlB,YAgBaH,OAhBb,gCAiBkB,IAAII,CAAAA,KAAJ,CAAU,2EAAV,CAjBlB,2BAoBQ,MAAM7B,CAAAA,GAAG,CAACI,WAAW,CAACqB,OAAD,CAAUE,QAAV,CAAZ,CAAT,CApBR,0BAsBQ,MAAM3B,CAAAA,GAAG,CAACK,OAAO,CAAC,GAAIG,CAAAA,GAAJ,wEAAwEsB,IAAI,CAACC,SAAL,CAAeb,SAAf,CAAxE,EAAD,CAAR,CAAT,CAtBR,+GAwBQ,MAAMlB,CAAAA,GAAG,CAACM,WAAW,CAAC,aAAM0B,OAAP,CAAZ,CAAT,CAxBR,0BAyBQ,MAAMhC,CAAAA,GAAG,CAACK,OAAO,CAACG,GAAG,CAACqB,KAAJ,CACd,CAAC,MAAD,CAAS,SAAT,CAAoB,iBAApB,CADc,CAEd,oCAAsC,aAAMG,OAF9B,cAAD,CAAR,CAAT,CAzBR","sourcesContent":["import { put, select, takeEvery } from \"redux-saga/effects\";\r\nimport { ACTIONS, loadRecords, pushLog, recReqFails } from \"../../actions\";\r\nimport { getApi } from \"./../../apis/apiProvider\";\r\nimport { Log } from \"./../../utils/logger/logger\";\r\nimport errorParser from \"./../../utils/serverErrorParser/errorParser\";\r\n\r\nexport default function* requestUserRecords() {\r\n\r\n    yield takeEvery(ACTIONS.RECS_REQ_RECS, handel)\r\n}\r\n\r\nconst getToken = state => state.user.token\r\n\r\nfunction* handel(action) {\r\n    const token = yield select(getToken);\r\n\r\n    try {\r\n        const { callQuery, queries } = getApi(\"UserAssets\");\r\n        const variables = { ...action.where };\r\n        variables.pageSize = action.pageSize;\r\n        variables.page = action.page;\r\n        const query = queries.recordsQl;\r\n        const response = yield callQuery(query, token, variables);\r\n        const records = response?.data?.records?.records;\r\n        const countAll = response?.data?.records?.countAll;\r\n\r\n        if (response.errors) {\r\n            throw new Error(\"Server response contains errors\" + errorParser(response.errors));\r\n        }\r\n        if (!records) {\r\n            throw new Error(\"Can't load reacords from database, response don't contains records object\")\r\n        }\r\n\r\n        yield put(loadRecords(records, countAll))\r\n\r\n        yield put(pushLog(new Log(`Records successfully downloaded from database parameters: \\n ${JSON.stringify(variables)}`)))\r\n    } catch (error) {\r\n        yield put(recReqFails(error.message))\r\n        yield put(pushLog(Log.Error(\r\n            ['saga', 'records', 'request records'],\r\n            \"Can't load records from database \" + error.message,\r\n            error\r\n        )))\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}