{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJEKTY\\\\APKI\\\\DjTruck\\\\djtruck\\\\src\\\\components\\\\Deck\\\\Deck.js\";\nimport React, { useEffect, useRef } from \"react\";\nimport { connect } from \"react-redux\";\nimport WaveSurfer from \"wavesurfer\";\nimport WaveSurferC from \"./WaveSurfer/WaveSurfer\";\nimport { analyze } from 'web-audio-beat-detector';\n\nclass Deck extends React.Component {\n  constructor() {\n    super();\n    this.mainWave = React.createRef();\n    this.smallWave = React.createRef();\n  }\n\n  componentDidMount() {\n    if (!this.props.active) return;\n    this.bigWaveSurfer = WaveSurfer.create({\n      container: this.mainWave.current,\n      waveColor: 'violet',\n      progressColor: 'purple',\n      autoCenter: true,\n      scrollParent: true,\n      hideScrollbar: true,\n      fillParent: false,\n      height: 130,\n      minPxPerSec: 150\n    });\n    this.smallWaveSurfer = WaveSurfer.create({\n      container: this.smallWave.current,\n      fillParent: true,\n      scrollParent: false,\n      hideScrollbar: true,\n      scrollParent: false,\n      height: 50\n    });\n    let duration = 0;\n    this.bigWaveSurfer.on('ready', () => {\n      // this.bigWaveSurfer.play();\n      duration = this.bigWaveSurfer.getDuration();\n      let resolution = 430;\n      let peaks = this.bigWaveSurfer.backend.getPeaks(resolution, 0, resolution);\n      this.smallWaveSurfer.load(null, peaks);\n      startSync(); //this.calcBmp();\n    });\n    this.smallWaveSurfer.on('seek', progress => {\n      this.bigWaveSurfer.seekTo(progress);\n\n      if (!this.bigWaveSurfer.isPlaying()) {\n        this.bigWaveSurfer.play();\n      }\n    });\n    let syncHandle = null;\n\n    let startSync = () => {\n      syncHandle = setInterval(() => {\n        let progress = this.bigWaveSurfer.getCurrentTime() / duration;\n        this.smallWaveSurfer.drawer.progress(progress);\n      }, 100);\n    };\n\n    let url = \"https://ciagnik-yt-downloader.herokuapp.com/download?url=https://www.youtube.com/watch?v=hVv331iLMXM\";\n    this.bigWaveSurfer.load(url);\n\n    this.calcBmp = () => {\n      fetch(url).then(response => response.arrayBuffer()).then(buffer => {\n        const audioContext = new AudioContext();\n        return audioContext.decodeAudioData(buffer);\n      }).then(audioBuffer => analyze(audioBuffer)).then(tempo => console.log(tempo));\n    }; //analyze()\n\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      style: {\n        height: 250 + 'px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, this.props.children, React.createElement(WaveSurferC, {\n      type: \"master\",\n      height: \"130\",\n      url: \"\",\n      name: this.props.name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      ref: this.mainWave,\n      style: {\n        height: 130 + 'px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, \"  \"), React.createElement(\"div\", {\n      ref: this.smallWave,\n      style: {\n        height: 50 + 'px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, \"  \"));\n  }\n\n}\n\nconst mapStateToProps = (state, ownProps) => ({\n  state: state.console.deck[ownProps.name]\n});\n\nconst mapDispachToProps = dispach => ({});\n\nexport default connect(mapStateToProps)(Deck);","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/components/Deck/Deck.js"],"names":["React","useEffect","useRef","connect","WaveSurfer","WaveSurferC","analyze","Deck","Component","constructor","mainWave","createRef","smallWave","componentDidMount","props","active","bigWaveSurfer","create","container","current","waveColor","progressColor","autoCenter","scrollParent","hideScrollbar","fillParent","height","minPxPerSec","smallWaveSurfer","duration","on","getDuration","resolution","peaks","backend","getPeaks","load","startSync","progress","seekTo","isPlaying","play","syncHandle","setInterval","getCurrentTime","drawer","url","calcBmp","fetch","then","response","arrayBuffer","buffer","audioContext","AudioContext","decodeAudioData","audioBuffer","tempo","console","log","render","children","name","mapStateToProps","state","ownProps","deck","mapDispachToProps","dispach"],"mappings":"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","sourcesContent":["import React, { useEffect , useRef} from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport WaveSurfer from \"wavesurfer\";\r\n\r\nimport WaveSurferC from \"./WaveSurfer/WaveSurfer\";\r\n\r\nimport { analyze } from 'web-audio-beat-detector';\r\n\r\nclass Deck extends React.Component {\r\n    constructor(){\r\n        super();\r\n        this.mainWave = React.createRef();\r\n        this.smallWave = React.createRef();\r\n        \r\n    }\r\n\r\n\r\n    componentDidMount(){\r\n        if(!this.props.active) return;\r\n        this.bigWaveSurfer = WaveSurfer.create({\r\n            container: this.mainWave.current,\r\n            waveColor: 'violet',\r\n            progressColor: 'purple',\r\n            autoCenter : true,\r\n            scrollParent: true,\r\n            hideScrollbar:true,\r\n            fillParent: false,\r\n            height: 130,\r\n            minPxPerSec : 150\r\n        });\r\n\r\n        this.smallWaveSurfer = WaveSurfer.create({\r\n            container: this.smallWave.current,\r\n            fillParent: true,\r\n            scrollParent : false,\r\n            hideScrollbar: true,\r\n            scrollParent : false,\r\n            height: 50,\r\n        })\r\n\r\n        let duration = 0;\r\n        this.bigWaveSurfer.on('ready', () => {\r\n           // this.bigWaveSurfer.play();\r\n            duration = this.bigWaveSurfer.getDuration();\r\n            let resolution = 430;\r\n            let peaks = this.bigWaveSurfer.backend.getPeaks(resolution, 0, resolution);\r\n            this.smallWaveSurfer.load(null, peaks);\r\n            startSync();\r\n            //this.calcBmp();\r\n        });\r\n\r\n        this.smallWaveSurfer.on('seek', (progress) => {\r\n            this.bigWaveSurfer.seekTo(progress);\r\n            if(!this.bigWaveSurfer.isPlaying()){\r\n                this.bigWaveSurfer.play();\r\n            }\r\n        })\r\n\r\n        let syncHandle = null;\r\n        let startSync = () => {\r\n            syncHandle = setInterval(() => {\r\n                let progress = this.bigWaveSurfer.getCurrentTime() / duration;\r\n                this.smallWaveSurfer.drawer.progress(progress);\r\n            }, 100);\r\n        }\r\n\r\n        let url = \"https://ciagnik-yt-downloader.herokuapp.com/download?url=https://www.youtube.com/watch?v=hVv331iLMXM\";\r\n        this.bigWaveSurfer.load(url);\r\n\r\n        this.calcBmp = () => {\r\n            fetch(url)\r\n            .then( response => response.arrayBuffer())\r\n            .then( buffer => {\r\n                const audioContext = new AudioContext();\r\n                return audioContext.decodeAudioData(buffer);\r\n            }).then( audioBuffer => analyze(audioBuffer))\r\n            .then(tempo => console.log(tempo))\r\n\r\n        }\r\n        //analyze()\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div style={{height: 250 + 'px'}}>\r\n                {this.props.children}\r\n                <WaveSurferC type=\"master\" height=\"130\" url=\"\" name={ this.props.name } />\r\n                <div ref={ this.mainWave } style={{height:130 + 'px'}} >  </div>\r\n                <div ref={ this.smallWave }  style={{height: 50 + 'px'}} >  </div>\r\n            </div>\r\n            )\r\n        }\r\n    \r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => ({\r\n    state : state.console.deck[ownProps.name],\r\n})\r\n\r\nconst mapDispachToProps = dispach => ({\r\n    \r\n})\r\n\r\nexport default connect(mapStateToProps)(Deck);"]},"metadata":{},"sourceType":"module"}