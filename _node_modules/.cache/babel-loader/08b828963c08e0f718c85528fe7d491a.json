{"ast":null,"code":"import store from \"./../../store\";\nimport Observer from \"./observer/observer\";\nimport STATUS from \"./observer/STATUS\";\nimport { togglePlay, setTimeLeft } from \"./../../actions\";\nimport Channels from \"./channels/channels\";\nimport Mixer from \"./mixer/mixer\";\nlet mixConsole;\nexport default class Console {\n  constructor() {\n    store.subscribe(this.handleChange.bind(this));\n    this.dispatch = store.dispatch;\n    this.observer = new Observer(store);\n    this.channels = new Channels();\n    this.mixer = new Mixer(this.channels);\n  }\n\n  static Create() {\n    mixConsole = new Console();\n  }\n\n  static Get() {\n    if (!mixConsole) {\n      mixConsole = new Console();\n      return mixConsole;\n    } else {\n      return mixConsole;\n    }\n  }\n\n  getMixerChannelInterface(channelName) {\n    return this.mixer.getChannelInterface(channelName);\n  }\n\n  getChannelInterface(channelName) {\n    return this.channels.getChannelInterface(channelName);\n  }\n\n  createChannel(channelName, ...args) {\n    this.channels.createChannel(channelName, ...args);\n    this.mixer.setUpAudioNodes(channelName);\n  }\n\n  handleChange() {\n    const storeChanges = this.observer.check();\n\n    for (let diff of storeChanges) {\n      this.callAction(diff);\n    }\n  }\n\n  callAction(diff) {\n    switch (diff.status) {\n      case STATUS.TRACK_LOADED:\n        {\n          this.channels.loadTrack(diff.channel, diff.currentValue);\n          break;\n        }\n\n      case STATUS.BPM_AND_OFFSET_READY:\n        {\n          this.channels.createBars(diff.channel, diff.currentValue);\n        }\n\n      case STATUS.TOGGLE_PLAY:\n        {\n          this.channels.togglePlay(diff.channel, diff.currentValue);\n          break;\n        }\n\n      case STATUS.TOGGLE_CUE:\n        {\n          this.channels.toggleCue(diff.channel, diff.currentValue);\n          break;\n        }\n\n      case STATUS.PITCH_CHANGE:\n        {\n          this.channels.adjustPitch(diff.channel, diff.currentValue);\n          break;\n        }\n\n      case STATUS.GAIN_CHANGE:\n        {\n          this.mixer.setGain(diff.channel, diff.currentValue);\n          break;\n        }\n\n      case STATUS.EQ_LOW_CHANGE:\n        {\n          this.mixer.setEqLow(diff.channel, diff.currentValue);\n          break;\n        }\n\n      case STATUS.EQ_MID_CHANGE:\n        {\n          this.mixer.setEqMid(diff.channel, diff.currentValue);\n          break;\n        }\n\n      case STATUS.EQ_HI_CHANGE:\n        {\n          this.mixer.setEqHigh(diff.channel, diff.currentValue);\n          break;\n        }\n\n      case STATUS.FADER_CHANGE:\n        {\n          this.mixer.setFader(diff.currentValue);\n          break;\n        }\n\n      case STATUS.SYNC_ACTIVATE:\n        {\n          this.channels.sync(diff.channel);\n        }\n\n      default:\n        return;\n    }\n  }\n\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/core/console/console.js"],"names":["store","Observer","STATUS","togglePlay","setTimeLeft","Channels","Mixer","mixConsole","Console","constructor","subscribe","handleChange","bind","dispatch","observer","channels","mixer","Create","Get","getMixerChannelInterface","channelName","getChannelInterface","createChannel","args","setUpAudioNodes","storeChanges","check","diff","callAction","status","TRACK_LOADED","loadTrack","channel","currentValue","BPM_AND_OFFSET_READY","createBars","TOGGLE_PLAY","TOGGLE_CUE","toggleCue","PITCH_CHANGE","adjustPitch","GAIN_CHANGE","setGain","EQ_LOW_CHANGE","setEqLow","EQ_MID_CHANGE","setEqMid","EQ_HI_CHANGE","setEqHigh","FADER_CHANGE","setFader","SYNC_ACTIVATE","sync"],"mappings":"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","sourcesContent":["import store from \"./../../store\";\r\nimport Observer from \"./observer/observer\";\r\nimport STATUS from \"./observer/STATUS\";\r\nimport { togglePlay,\r\n         setTimeLeft }\r\n         from \"./../../actions\";\r\nimport Channels from \"./channels/channels\";\r\nimport Mixer from \"./mixer/mixer\";\r\n\r\nlet mixConsole;\r\n\r\nexport default class Console{\r\n    constructor(){\r\n        store.subscribe(this.handleChange.bind(this));\r\n        this.dispatch = store.dispatch;\r\n        this.observer = new Observer(store);\r\n\r\n        this.channels = new Channels();\r\n        this.mixer = new Mixer(this.channels);\r\n\r\n    }\r\n\r\n    static Create(){\r\n        mixConsole = new Console();\r\n    }\r\n\r\n    static Get(){\r\n        if(!mixConsole){\r\n            mixConsole = new Console();\r\n            return mixConsole;\r\n        } else {\r\n            return mixConsole;\r\n        }\r\n    }\r\n\r\n    getMixerChannelInterface(channelName){\r\n        return this.mixer.getChannelInterface(channelName);\r\n    }\r\n\r\n    getChannelInterface(channelName){\r\n        return this.channels.getChannelInterface(channelName);\r\n    }\r\n\r\n\r\n    createChannel(channelName, ...args){\r\n        this.channels.createChannel(channelName, ...args);\r\n        this.mixer.setUpAudioNodes(channelName);\r\n    }\r\n\r\n\r\n    handleChange(){\r\n        const storeChanges = this.observer.check();\r\n        for(let diff of storeChanges){\r\n            this.callAction(diff);\r\n        }\r\n    }\r\n\r\n    callAction(diff){\r\n        switch(diff.status){\r\n            case STATUS.TRACK_LOADED : {\r\n                this.channels.loadTrack(diff.channel, diff.currentValue);\r\n                break;\r\n            }\r\n\r\n            case STATUS.BPM_AND_OFFSET_READY : {\r\n                this.channels.createBars(diff.channel, diff.currentValue)\r\n            }\r\n            \r\n            case STATUS.TOGGLE_PLAY : {\r\n                this.channels.togglePlay(diff.channel, diff.currentValue);\r\n                break;\r\n            }\r\n            case STATUS.TOGGLE_CUE : {\r\n                this.channels.toggleCue(diff.channel, diff.currentValue)\r\n                break;\r\n            }\r\n            case STATUS.PITCH_CHANGE : {\r\n                this.channels.adjustPitch(diff.channel, diff.currentValue)\r\n                break;\r\n            }\r\n            case STATUS.GAIN_CHANGE : {\r\n                this.mixer.setGain(diff.channel, diff.currentValue);\r\n                break;\r\n            }\r\n            case STATUS.EQ_LOW_CHANGE : {\r\n                this.mixer.setEqLow(diff.channel, diff.currentValue);\r\n                break;\r\n            }\r\n            case STATUS.EQ_MID_CHANGE : {\r\n                this.mixer.setEqMid(diff.channel, diff.currentValue);\r\n                break;\r\n            }\r\n            case STATUS.EQ_HI_CHANGE : {\r\n                this.mixer.setEqHigh(diff.channel, diff.currentValue);\r\n                break;\r\n            }\r\n            case STATUS.FADER_CHANGE : {\r\n                this.mixer.setFader(diff.currentValue);\r\n                break;\r\n            }\r\n\r\n            case STATUS.SYNC_ACTIVATE : {\r\n                this.channels.sync(diff.channel);\r\n            }\r\n            default : return; \r\n        }\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}