{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\src\\\\pages\\\\common\\\\components\\\\PlayListExplorer\\\\PlayList\\\\PlayList.js\";\nimport React, { Fragment } from \"react\";\nimport { ContextMenuTrigger } from \"react-contextmenu\";\nimport { connect } from \"react-redux\";\nimport CtxMenu from \"../../../../common/components/ContextMenu/ContextMenu\";\nimport { deleteTrackRequest, loadTrack, resetCurrentPlaylistContent, startCalcBpm, swapTrackOnList, updateTrackPositionRequest } from \"./../../../../../actions\";\nimport EmptyListInfo from \"./EmptList/EmptyList\";\nimport \"./play-list.scss\";\nimport PlaylistCtx from \"./PlaylistContext\";\nimport PlaylistTable from \"./PlaylistTable/PlaylistTable\";\nimport PlaylistItem from \"./Playlist_Item/PlaylistItem\";\n\nclass PlayList extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.currentHoverElement = -1;\n    this.playlistSnapshot = null;\n    this.headers = ['#', 'Source', 'Title', 'Quality', 'Time', 'Bpm'];\n\n    this.isEmpty = () => !this.props.currentPlaylist || this.props.currentPlaylist.length === 0;\n  }\n\n  setCurrentHover(index) {\n    if (!this.menuVisible) {\n      this.currentHoverElement = index;\n    }\n  }\n\n  loadTrack(destination) {\n    if (this.currentHoverElement === -1) return;\n    const track = this.props.playlist[this.currentHoverElement];\n    this.props.load(track, destination);\n  }\n\n  deleteTrack() {\n    if (this.props.playlist.length === 0 || this.currentHoverElement === -1) {\n      return;\n    }\n\n    const id = this.props.playlist[this.currentHoverElement].id;\n    this.props.delete(this.currentHoverElement, id);\n  }\n\n  reCalcBpm() {\n    if (this.currentHoverElement === -1) return;\n    this.props.reCalcBpm(this.props.playlist[this.currentHoverElement], this.props.currentPlaylist);\n    this.forceUpdate();\n  }\n\n  makeListSnapshot() {\n    this.playlistSnapshot = this.props.playlist;\n  }\n\n  resetList() {\n    this.props.resetList(this.playlistSnapshot);\n  }\n\n  acceptListOrder() {\n    const prev = this.playlistSnapshot;\n    const current = this.props.playlist; //find difretces and call to api\n\n    const tracksPositionsMap = [];\n    current.forEach((_, index) => {\n      if (prev[index].id !== current[index].id) {\n        tracksPositionsMap.push({\n          id: current[index].id,\n          position: index\n        });\n      }\n    });\n    this.props.updateTracksPositions(tracksPositionsMap);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.refreshFalg !== this.props.refreshFalg) {\n      this.forceUpdate();\n    }\n  }\n\n  getContextMenuItems() {\n    let items = {\n      \"Calc BPM\": this.reCalcBpm.bind(this),\n      \"Delete\": this.deleteTrack.bind(this)\n    };\n\n    if (this.props.page === \"console\") {\n      items = { ...items,\n        \"Send to A\": this.loadTrack.bind(this, \"A\"),\n        \"Send to B\": this.loadTrack.bind(this, \"B\")\n      };\n    }\n\n    return items;\n  }\n\n  render() {\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"playlist\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(ContextMenuTrigger, {\n      id: \"playlist_ctx_menu\",\n      className: \"playlist\",\n      holdToDisplay: -1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(PlaylistCtx.Provider, {\n      value: {\n        setHover: this.setCurrentHover.bind(this)\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, React.createElement(PlaylistTable, {\n      headers: this.headers,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, this.props.playlist && this.props.playlist.map((item, index) => React.createElement(PlaylistItem, {\n      item: item,\n      listIndex: index,\n      swapItems: this.props.swapTrack,\n      dragStart: this.makeListSnapshot.bind(this),\n      endOutside: this.resetList.bind(this),\n      endWithin: this.acceptListOrder.bind(this),\n      key: item.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    })))))), React.createElement(EmptyListInfo, {\n      empty: this.isEmpty(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    })), React.createElement(CtxMenu, {\n      id: \"playlist_ctx_menu\",\n      items: this.getContextMenuItems(),\n      handlers: {\n        onShow: () => this.menuVisible = true,\n        onHide: () => this.menuVisible = false\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  playlist: state.playList.list,\n  currentPlaylist: state.playList.currentPlaylist,\n  refreshFalg: state.playList.refreshFalg\n});\n\nconst mapDispatchToProps = dispatch => ({\n  load: (track, destination) => dispatch(loadTrack(track, destination)),\n  delete: (index, id) => dispatch(deleteTrackRequest(index, id)),\n  swapTrack: (from, to) => dispatch(swapTrackOnList(from, to)),\n  reCalcBpm: (track, playlist) => dispatch(startCalcBpm(track, playlist)),\n  resetList: list => dispatch(resetCurrentPlaylistContent(list)),\n  updateTracksPositions: tracksPositions => dispatch(updateTrackPositionRequest(tracksPositions))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PlayList);","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/pages/common/components/PlayListExplorer/PlayList/PlayList.js"],"names":["React","Fragment","ContextMenuTrigger","connect","CtxMenu","deleteTrackRequest","loadTrack","resetCurrentPlaylistContent","startCalcBpm","swapTrackOnList","updateTrackPositionRequest","EmptyListInfo","PlaylistCtx","PlaylistTable","PlaylistItem","PlayList","Component","currentHoverElement","playlistSnapshot","headers","isEmpty","props","currentPlaylist","length","setCurrentHover","index","menuVisible","destination","track","playlist","load","deleteTrack","id","delete","reCalcBpm","forceUpdate","makeListSnapshot","resetList","acceptListOrder","prev","current","tracksPositionsMap","forEach","_","push","position","updateTracksPositions","componentDidUpdate","prevProps","refreshFalg","getContextMenuItems","items","bind","page","render","setHover","map","item","swapTrack","onShow","onHide","mapStateToProps","state","playList","list","mapDispatchToProps","dispatch","from","to","tracksPositions"],"mappings":"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","sourcesContent":["import React, { Fragment } from \"react\";\r\nimport { ContextMenuTrigger } from \"react-contextmenu\";\r\nimport { connect } from \"react-redux\";\r\nimport CtxMenu from \"../../../../common/components/ContextMenu/ContextMenu\";\r\nimport { deleteTrackRequest, loadTrack, resetCurrentPlaylistContent, startCalcBpm, swapTrackOnList, updateTrackPositionRequest } from \"./../../../../../actions\";\r\nimport EmptyListInfo from \"./EmptList/EmptyList\";\r\nimport \"./play-list.scss\";\r\nimport PlaylistCtx from \"./PlaylistContext\";\r\nimport PlaylistTable from \"./PlaylistTable/PlaylistTable\";\r\nimport PlaylistItem from \"./Playlist_Item/PlaylistItem\";\r\n\r\n\r\n\r\nclass PlayList extends React.Component {\r\n    currentHoverElement = -1;\r\n    playlistSnapshot = null;\r\n\r\n    headers = ['#', 'Source', 'Title', 'Quality', 'Time', 'Bpm'];\r\n\r\n    setCurrentHover(index) {\r\n        if (!this.menuVisible) {\r\n            this.currentHoverElement = index;\r\n        }\r\n    }\r\n\r\n    loadTrack(destination) {\r\n        if (this.currentHoverElement === -1) return;\r\n\r\n        const track = this.props.playlist[this.currentHoverElement];\r\n        this.props.load(track, destination)\r\n    }\r\n\r\n    deleteTrack() {\r\n        if (this.props.playlist.length === 0 || this.currentHoverElement === -1) {\r\n            return;\r\n        }\r\n        const id = this.props.playlist[this.currentHoverElement].id;\r\n        this.props.delete(this.currentHoverElement, id);\r\n    }\r\n\r\n    isEmpty = () => (!this.props.currentPlaylist || this.props.currentPlaylist.length === 0)\r\n\r\n    reCalcBpm() {\r\n        if (this.currentHoverElement === -1) return;\r\n\r\n        this.props.reCalcBpm(\r\n            this.props.playlist[this.currentHoverElement],\r\n            this.props.currentPlaylist\r\n        )\r\n        this.forceUpdate();\r\n    }\r\n\r\n\r\n    makeListSnapshot() {\r\n        this.playlistSnapshot = this.props.playlist;\r\n    }\r\n\r\n    resetList() {\r\n        this.props.resetList(this.playlistSnapshot);\r\n    }\r\n\r\n    acceptListOrder() {\r\n        const prev = this.playlistSnapshot;\r\n        const current = this.props.playlist;\r\n        //find difretces and call to api\r\n        const tracksPositionsMap = [];\r\n        current.forEach((_, index) => {\r\n            if (prev[index].id !== current[index].id) {\r\n                tracksPositionsMap.push({\r\n                    id: current[index].id,\r\n                    position: index,\r\n                })\r\n            }\r\n        })\r\n        this.props.updateTracksPositions(tracksPositionsMap);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.refreshFalg !== this.props.refreshFalg) {\r\n            this.forceUpdate();\r\n        }\r\n    }\r\n\r\n    getContextMenuItems(){\r\n        let items =  {\r\n            \"Calc BPM\": this.reCalcBpm.bind(this),\r\n            \"Delete\": this.deleteTrack.bind(this)\r\n        }\r\n        if(this.props.page === \"console\"){\r\n            items = {\r\n                ...items,\r\n                \"Send to A\": this.loadTrack.bind(this, \"A\"),\r\n                \"Send to B\": this.loadTrack.bind(this, \"B\"),\r\n            }\r\n        }\r\n        return items;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <div className=\"playlist\">\r\n                    <ContextMenuTrigger id=\"playlist_ctx_menu\" className=\"playlist\" holdToDisplay={-1}>\r\n                        <PlaylistCtx.Provider value={{ setHover: this.setCurrentHover.bind(this) }}>\r\n                            <Fragment>\r\n                                <PlaylistTable headers={this.headers}>\r\n                                    {this.props.playlist && this.props.playlist.map((item, index) =>\r\n                                        <PlaylistItem\r\n                                            item={item}\r\n                                            listIndex={index}\r\n                                            swapItems={this.props.swapTrack}\r\n                                            dragStart={this.makeListSnapshot.bind(this)}\r\n                                            endOutside={this.resetList.bind(this)}\r\n                                            endWithin={this.acceptListOrder.bind(this)}\r\n                                            key={item.id}\r\n                                        />\r\n                                    )}\r\n                                </PlaylistTable>\r\n                            </Fragment>\r\n                        </PlaylistCtx.Provider>\r\n                    </ContextMenuTrigger>\r\n                    <EmptyListInfo empty={this.isEmpty()} />\r\n                </div>\r\n                <CtxMenu\r\n                    id=\"playlist_ctx_menu\"\r\n                    items={this.getContextMenuItems()}\r\n                    handlers={{\r\n                        onShow: () => this.menuVisible = true,\r\n                        onHide: () => this.menuVisible = false,\r\n                    }}\r\n                />\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    playlist: state.playList.list,\r\n    currentPlaylist: state.playList.currentPlaylist,\r\n    refreshFalg: state.playList.refreshFalg,\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    load: (track, destination) => dispatch(loadTrack(track, destination)),\r\n    delete: (index, id) => dispatch(deleteTrackRequest(index, id)),\r\n    swapTrack: (from, to) => dispatch(swapTrackOnList(from, to)),\r\n    reCalcBpm: (track, playlist) => dispatch(startCalcBpm(track, playlist)),\r\n    resetList: (list) => dispatch(resetCurrentPlaylistContent(list)),\r\n    updateTracksPositions : (tracksPositions) => dispatch(updateTrackPositionRequest(tracksPositions))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PlayList);"]},"metadata":{},"sourceType":"module"}