{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\src\\\\pages\\\\common\\\\components\\\\ExternalSearch\\\\Search.js\";\nimport React, { useEffect, useState } from 'react';\nimport { Dropdown, DropdownButton, FormControl } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { clearSearch, searchInput, searchStart } from \"../../../../actions\";\nimport { API_TYPES, getApisName } from \"./../../../../apis/apiProvider\";\nimport \"./search.scss\";\nimport SearchList from './SerachList/SearchList.js';\n\nconst Search = ({\n  clearSearchHandler,\n  searchStartHandler,\n  searchInput,\n  searchString\n}) => {\n  const [listOpen, setListOpen] = useState(false);\n  const [source, setSource] = useState(null);\n  const [apiDropdownList, setApiList] = useState(null);\n  const [maxResults, setMaxResults] = useState(10);\n\n  const openList = () => setListOpen(true);\n\n  const selectedHandel = () => {\n    clearSearchHandler();\n    setListOpen(false);\n  };\n\n  useEffect(() => {\n    setApiList(getApisName(API_TYPES.MIUSIC_SOURCE).map(api => {\n      return React.createElement(Dropdown.Item, {\n        key: api,\n        onClick: setSource.bind(null, api),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, \"  \", api, \" \");\n    }));\n  }, [setApiList, setSource]);\n  const controlKeyPress = useCallback(() => {}, []);\n  return React.createElement(\"div\", {\n    className: \"search\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"search-controls\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, React.createElement(DropdownButton, {\n    className: \"btn-api-select\",\n    title: source ? source : getApisName(API_TYPES.MIUSIC_SOURCE, {\n      default: true\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, apiDropdownList), React.createElement(FormControl, {\n    className: \"search-control\",\n    type: \"text\",\n    placeholder: \"Tap in to serach on youtube\",\n    onChange: event => searchInputHandler(event.target.value),\n    onKeyPress: event => {\n      if (event.key === \"Enter\") {\n        searchStartHandler(searchString);\n      }\n    },\n    onFocus: openList,\n    value: searchString,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }), React.createElement(DropdownButton, {\n    className: \"btn-max-result-select\",\n    title: maxResults,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(Dropdown.Item, {\n    onClick: () => setMaxResults(10),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, \" 10 \"), React.createElement(Dropdown.Item, {\n    onClick: () => setMaxResults(25),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, \" 25 \"), React.createElement(Dropdown.Item, {\n    onClick: () => setMaxResults(50),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, \" 50 \"))), React.createElement(SearchList, {\n    open: listOpen,\n    selectedHandle: selectedHandel,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }));\n};\n\nconst mapStateToProps = state => ({\n  searchString: state.searchReducer.searchString\n});\n\nconst mapDispachToProps = dispatch => ({\n  searchInputHandler: text => dispatch(searchInput(text)),\n  searchStartHandler: (text, source) => dispatch(searchStart(text, source)),\n  clearSearchHandler: () => dispatch(clearSearch())\n});\n\nexport default connect(mapStateToProps, mapDispachToProps)(Search);","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/pages/common/components/ExternalSearch/Search.js"],"names":["React","useEffect","useState","Dropdown","DropdownButton","FormControl","connect","clearSearch","searchInput","searchStart","API_TYPES","getApisName","SearchList","Search","clearSearchHandler","searchStartHandler","searchString","listOpen","setListOpen","source","setSource","apiDropdownList","setApiList","maxResults","setMaxResults","openList","selectedHandel","MIUSIC_SOURCE","map","api","bind","controlKeyPress","useCallback","default","event","searchInputHandler","target","value","key","mapStateToProps","state","searchReducer","mapDispachToProps","dispatch","text"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,QAAT,EAAmBC,cAAnB,EAAmCC,WAAnC,QAAsD,iBAAtD;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,WAAT,EAAsBC,WAAtB,EAAmCC,WAAnC,QAAsD,qBAAtD;AACA,SAASC,SAAT,EAAoBC,WAApB,QAAuC,gCAAvC;AACA,OAAO,eAAP;AACA,OAAOC,UAAP,MAAuB,4BAAvB;;AAMA,MAAMC,MAAM,GAAG,CAAC;AACZC,EAAAA,kBADY;AAEZC,EAAAA,kBAFY;AAGZP,EAAAA,WAHY;AAIZQ,EAAAA;AAJY,CAAD,KAKT;AACF,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BhB,QAAQ,CAAC,KAAD,CAAxC;AAEA,QAAM,CAACiB,MAAD,EAASC,SAAT,IAAsBlB,QAAQ,CAAC,IAAD,CAApC;AACA,QAAM,CAACmB,eAAD,EAAkBC,UAAlB,IAAgCpB,QAAQ,CAAC,IAAD,CAA9C;AAEA,QAAM,CAACqB,UAAD,EAAaC,aAAb,IAA8BtB,QAAQ,CAAC,EAAD,CAA5C;;AAEA,QAAMuB,QAAQ,GAAG,MAAMP,WAAW,CAAC,IAAD,CAAlC;;AAEA,QAAMQ,cAAc,GAAG,MAAM;AACzBZ,IAAAA,kBAAkB;AAClBI,IAAAA,WAAW,CAAC,KAAD,CAAX;AACH,GAHD;;AAKAjB,EAAAA,SAAS,CAAC,MAAM;AACZqB,IAAAA,UAAU,CAACX,WAAW,CAACD,SAAS,CAACiB,aAAX,CAAX,CAAqCC,GAArC,CAAyCC,GAAG,IAAI;AACvD,aAAQ,oBAAC,QAAD,CAAU,IAAV;AAAe,QAAA,GAAG,EAAEA,GAApB;AAAyB,QAAA,OAAO,EAAET,SAAS,CAACU,IAAV,CAAe,IAAf,EAAqBD,GAArB,CAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAgEA,GAAhE,MAAR;AACH,KAFU,CAAD,CAAV;AAGH,GAJQ,EAIN,CAACP,UAAD,EAAaF,SAAb,CAJM,CAAT;AAMA,QAAMW,eAAe,GAAGC,WAAW,CAAC,MAAI,CAEvC,CAFkC,EAEhC,EAFgC,CAAnC;AAIA,SACI;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,cAAD;AACI,IAAA,SAAS,EAAC,gBADd;AAEI,IAAA,KAAK,EAAGb,MAAD,GAAWA,MAAX,GAAoBR,WAAW,CAACD,SAAS,CAACiB,aAAX,EAA0B;AAAEM,MAAAA,OAAO,EAAE;AAAX,KAA1B,CAF1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGKZ,eAHL,CADJ,EAMI,oBAAC,WAAD;AACI,IAAA,SAAS,EAAC,gBADd;AAEI,IAAA,IAAI,EAAC,MAFT;AAGI,IAAA,WAAW,EAAC,6BAHhB;AAII,IAAA,QAAQ,EAAEa,KAAK,IAAIC,kBAAkB,CAACD,KAAK,CAACE,MAAN,CAAaC,KAAd,CAJzC;AAKI,IAAA,UAAU,EAAEH,KAAK,IAAI;AAAE,UAAIA,KAAK,CAACI,GAAN,KAAc,OAAlB,EAA2B;AAAEvB,QAAAA,kBAAkB,CAACC,YAAD,CAAlB;AAAkC;AAAE,KAL5F;AAMI,IAAA,OAAO,EAAES,QANb;AAOI,IAAA,KAAK,EAAET,YAPX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANJ,EAcI,oBAAC,cAAD;AACI,IAAA,SAAS,EAAC,uBADd;AAEI,IAAA,KAAK,EAAEO,UAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGI,oBAAC,QAAD,CAAU,IAAV;AAAe,IAAA,OAAO,EAAE,MAAIC,aAAa,CAAC,EAAD,CAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHJ,EAII,oBAAC,QAAD,CAAU,IAAV;AAAe,IAAA,OAAO,EAAE,MAAIA,aAAa,CAAC,EAAD,CAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJJ,EAKI,oBAAC,QAAD,CAAU,IAAV;AAAe,IAAA,OAAO,EAAE,MAAIA,aAAa,CAAC,EAAD,CAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YALJ,CAdJ,CADJ,EA0BI,oBAAC,UAAD;AACI,IAAA,IAAI,EAAEP,QADV;AAEI,IAAA,cAAc,EAAES,cAFpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA1BJ,CADJ;AAgCH,CA9DD;;AAgEA,MAAMa,eAAe,GAAGC,KAAK,KAAK;AAC9BxB,EAAAA,YAAY,EAAEwB,KAAK,CAACC,aAAN,CAAoBzB;AADJ,CAAL,CAA7B;;AAIA,MAAM0B,iBAAiB,GAAGC,QAAQ,KAAK;AACnCR,EAAAA,kBAAkB,EAAGS,IAAD,IAAUD,QAAQ,CAACnC,WAAW,CAACoC,IAAD,CAAZ,CADH;AAEnC7B,EAAAA,kBAAkB,EAAE,CAAC6B,IAAD,EAAOzB,MAAP,KAAkBwB,QAAQ,CAAClC,WAAW,CAACmC,IAAD,EAAOzB,MAAP,CAAZ,CAFX;AAGnCL,EAAAA,kBAAkB,EAAE,MAAM6B,QAAQ,CAACpC,WAAW,EAAZ;AAHC,CAAL,CAAlC;;AAMA,eAAeD,OAAO,CAACiC,eAAD,EAAkBG,iBAAlB,CAAP,CAA4C7B,MAA5C,CAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Dropdown, DropdownButton, FormControl } from \"react-bootstrap\";\r\nimport { connect } from \"react-redux\";\r\nimport { clearSearch, searchInput, searchStart } from \"../../../../actions\";\r\nimport { API_TYPES, getApisName } from \"./../../../../apis/apiProvider\";\r\nimport \"./search.scss\";\r\nimport SearchList from './SerachList/SearchList.js';\r\n\r\n\r\n\r\n\r\n\r\nconst Search = ({\r\n    clearSearchHandler,\r\n    searchStartHandler,\r\n    searchInput,\r\n    searchString,\r\n}) => {\r\n    const [listOpen, setListOpen] = useState(false);\r\n\r\n    const [source, setSource] = useState(null);\r\n    const [apiDropdownList, setApiList] = useState(null);\r\n\r\n    const [maxResults, setMaxResults] = useState(10);\r\n\r\n    const openList = () => setListOpen(true);\r\n\r\n    const selectedHandel = () => {\r\n        clearSearchHandler();\r\n        setListOpen(false);\r\n    }\r\n\r\n    useEffect(() => {\r\n        setApiList(getApisName(API_TYPES.MIUSIC_SOURCE).map(api => {\r\n            return (<Dropdown.Item key={api} onClick={setSource.bind(null, api)}>  {api} </Dropdown.Item>)\r\n        }))\r\n    }, [setApiList, setSource])\r\n\r\n    const controlKeyPress = useCallback(()=>{\r\n\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"search\">\r\n            <div className=\"search-controls\">\r\n                <DropdownButton \r\n                    className=\"btn-api-select\"\r\n                    title={(source) ? source : getApisName(API_TYPES.MIUSIC_SOURCE, { default: true})}>\r\n                    {apiDropdownList}\r\n                </DropdownButton>\r\n                <FormControl\r\n                    className=\"search-control\"\r\n                    type=\"text\"\r\n                    placeholder=\"Tap in to serach on youtube\"\r\n                    onChange={event => searchInputHandler(event.target.value)}\r\n                    onKeyPress={event => { if (event.key === \"Enter\") { searchStartHandler(searchString) } }}\r\n                    onFocus={openList}\r\n                    value={searchString} />\r\n                <DropdownButton \r\n                    className=\"btn-max-result-select\"\r\n                    title={maxResults}>\r\n                    <Dropdown.Item onClick={()=>setMaxResults(10)}> 10 </Dropdown.Item>\r\n                    <Dropdown.Item onClick={()=>setMaxResults(25)}> 25 </Dropdown.Item>\r\n                    <Dropdown.Item onClick={()=>setMaxResults(50)}> 50 </Dropdown.Item>\r\n                </DropdownButton>\r\n\r\n\r\n            </div>\r\n\r\n            <SearchList\r\n                open={listOpen}\r\n                selectedHandle={selectedHandel} />\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    searchString: state.searchReducer.searchString\r\n})\r\n\r\nconst mapDispachToProps = dispatch => ({\r\n    searchInputHandler: (text) => dispatch(searchInput(text)),\r\n    searchStartHandler: (text, source) => dispatch(searchStart(text, source)),\r\n    clearSearchHandler: () => dispatch(clearSearch()),\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispachToProps)(Search);"]},"metadata":{},"sourceType":"module"}