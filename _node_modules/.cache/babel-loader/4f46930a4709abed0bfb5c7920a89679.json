{"ast":null,"code":"import { ACTIONS } from \"./../actions\";\nimport { produce } from \"imer\";\nconst deck = {\n  track: {\n    title: \"\",\n    bpm: 0,\n    quality: \"\",\n    duration: \"\",\n    source: \"\",\n    id: \"\",\n    thumbnail: {}\n  },\n  // \n  playBackState: {\n    ready: false,\n    loadingProgress: 0,\n    paused: true,\n    cuePoint: 0,\n    cueActive: false,\n    pitch: 0,\n    timeLeft: null,\n    offset: null,\n    sync: false,\n    loop: false,\n    loopLength: 0\n  }\n};\nconst initState = {\n  master: null,\n  //A, B ....\n  channel: {\n    A: { ...deck\n    },\n    B: { ...deck\n    }\n  }\n};\n\nfunction nextState(part) {\n  return (state, destination, haveToBeReady, variables) => {\n    if (!state.channel[destination]) return state;\n    if (haveToBeReady && !state.channel[destination].playBackState.ready) return state;\n    const nextState = produce(state, draftState => {\n      for (let [variable, value] of Object.entries(variables)) {\n        if (part === \"playBackState\") {\n          draftState.channel[destination].playBackState[variable] = value;\n        } else if (part === \"track\") {\n          draftState.channel[destination].track[variable] = value;\n        }\n      }\n    });\n    return nextState;\n  };\n}\n\nconst nextPlayBackState = nextState('playBackState');\nconst nextTrackState = nextState('track');\n\nfunction consoleReducer(state = initState, action) {\n  switch (action.type) {\n    case ACTIONS.LOAD_TRACK:\n      {\n        const nextTrack = action.track;\n        return produce(state, draftState => {\n          draftState.channel[action.destination].track = {\n            title: nextTrack.title,\n            bpm: nextTrack.bpm || 0,\n            quality: nextTrack.quality,\n            duration: nextTrack.duration,\n            source: nextTrack.source,\n            id: nextTrack.id,\n            thumbnail: nextTrack.thumbnail\n          };\n          draftState.channel[action.destination].playBackState = { ...state.channel[action.destination].playBackState,\n            offset: nextTrack.offset\n          };\n        });\n      }\n\n    case ACTIONS.SET_LOADING_PROGRESS:\n      {\n        return nextPlayBackState(state, action.destination, false, {\n          loadingProgress: action.value\n        });\n      }\n\n    case ACTIONS.SET_READY:\n      {\n        return nextPlayBackState(state, action.destination, false, {\n          ready: action.value\n        });\n      }\n\n    case ACTIONS.SET_PITCH:\n      {\n        return nextPlayBackState(state, action.destination, false, {\n          pitch: action.pitch\n        });\n      }\n\n    case ACTIONS.INCREASE_PITCH:\n      {\n        var _state$channel$action, _state$channel$action2;\n\n        let prevPitch = (_state$channel$action = state.channel[action.destination]) === null || _state$channel$action === void 0 ? void 0 : (_state$channel$action2 = _state$channel$action.playBackState) === null || _state$channel$action2 === void 0 ? void 0 : _state$channel$action2.pitch;\n        if (prevPitch === undefined) return state;\n        return nextPlayBackState(state, action.destination, false, {\n          pitch: prevPitch + action.amount\n        });\n      }\n\n    case ACTIONS.DECREASE_PITCH:\n      {\n        var _state$channel$action3, _state$channel$action4;\n\n        let prevPitch = (_state$channel$action3 = state.channel[action.destination]) === null || _state$channel$action3 === void 0 ? void 0 : (_state$channel$action4 = _state$channel$action3.playBackState) === null || _state$channel$action4 === void 0 ? void 0 : _state$channel$action4.pitch;\n        if (prevPitch === undefined) return state;\n        return nextPlayBackState(state, action.destination, false, {\n          pitch: prevPitch - action.amount\n        });\n      }\n\n    case ACTIONS.TOGGLE_PLAY:\n      {\n        var _state$channel$action5, _state$channel$action6;\n\n        let prevPause = (_state$channel$action5 = state.channel[action.destination]) === null || _state$channel$action5 === void 0 ? void 0 : (_state$channel$action6 = _state$channel$action5.playBackState) === null || _state$channel$action6 === void 0 ? void 0 : _state$channel$action6.paused;\n        prevPause = prevPause === undefined ? true : prevPause;\n        return nextPlayBackState(state, action.destination, true, {\n          paused: !prevPause\n        });\n      }\n\n    case ACTIONS.SET_TIME_LEFT:\n      {\n        return nextPlayBackState(state, action.destination, true, {\n          timeLeft: action.timeLeft\n        });\n      }\n\n    case ACTIONS.TOGGLE_CUE:\n      {\n        var _state$channel$action7, _state$channel$action8;\n\n        let prevCue = (_state$channel$action7 = state.channel[action.destination]) === null || _state$channel$action7 === void 0 ? void 0 : (_state$channel$action8 = _state$channel$action7.playBackState) === null || _state$channel$action8 === void 0 ? void 0 : _state$channel$action8.cueActive;\n        prevCue = prevCue === undefined ? false : prevCue;\n        return nextPlayBackState(state, action.destination, true, {\n          cueActive: !prevCue\n        });\n      }\n\n    case ACTIONS.CANCEL_CUE_AND_PLAY:\n      {\n        return nextPlayBackState(state, action.destination, true, {\n          cueActive: false,\n          paused: false\n        });\n      }\n\n    case ACTIONS.SET_CUE_POINT:\n      {\n        return nextPlayBackState(state, action.destination, true, {\n          cuePoint: action.position\n        });\n      }\n\n    case ACTIONS.SET_MASTER:\n      {\n        const nextMaster = action.destination === state.master ? \"\" : action.destination;\n        return produce(state, draftState => draftState.master = nextMaster);\n      }\n\n    case ACTIONS.TOGGLE_SYNC:\n      {\n        var _state$channel$action9, _state$channel$action10, _state$channel$action11, _state$channel$action12;\n\n        let prevSync = (_state$channel$action9 = state.channel[action.destination]) === null || _state$channel$action9 === void 0 ? void 0 : (_state$channel$action10 = _state$channel$action9.playBackState) === null || _state$channel$action10 === void 0 ? void 0 : _state$channel$action10.sync;\n        prevSync = prevSync === undefined ? false : prevSync;\n        let offset = (_state$channel$action11 = state.channel[action.destination]) === null || _state$channel$action11 === void 0 ? void 0 : (_state$channel$action12 = _state$channel$action11.playBackState) === null || _state$channel$action12 === void 0 ? void 0 : _state$channel$action12.offset;\n        if (!offset && !prevSync) return state; // can't turn on sync if offset is not calculated \n\n        return nextPlayBackState(state, action.destination, true, {\n          sync: !prevSync\n        });\n      }\n\n    case ACTIONS.SET_SYNC:\n      {\n        var _state$channel$action13, _state$channel$action14;\n\n        let offset = (_state$channel$action13 = state.channel[action.destination]) === null || _state$channel$action13 === void 0 ? void 0 : (_state$channel$action14 = _state$channel$action13.playBackState) === null || _state$channel$action14 === void 0 ? void 0 : _state$channel$action14.offset;\n        if (!offset) return state; // can't turn on sync if offset is not calculated \n\n        return nextPlayBackState(state, action.destination, true, {\n          sync: action.value\n        });\n      }\n\n    case ACTIONS.SET_BPM:\n      {\n        const bpm = action.bpm;\n        const source = action.source;\n        const id = action.id;\n        let channels = [];\n\n        for (let channelName of Object.keys(state.channel)) {\n          if (state.channel[channelName].track.id === id && state.channel[channelName].track.source === source) {\n            channels.push(channelName);\n          }\n        }\n\n        if (channels.length === 0) return state;\n        return channels.reduce((prevState, channelName) => {\n          return nextTrackState(prevState, channelName, false, {\n            bpm: bpm\n          });\n        }, state);\n      }\n\n    case ACTIONS.SET_BPM_AND_OFFSET:\n      {\n        let channels = [];\n\n        for (let channelName of Object.keys(state.channel)) {\n          if (state.channel[channelName].track.id === action.id && state.channel[channelName].track.source === action.source) {\n            channels.push(channelName);\n          }\n        }\n\n        if (channels.length === 0) return state;\n        return channels.reduce((prevState, channelName) => {\n          let trackState = nextTrackState(prevState, channelName, false, {\n            bpm: action.bpm\n          });\n          return nextPlayBackState(trackState, channelName, false, {\n            offset: action.offset\n          });\n        }, state);\n      }\n\n    default:\n      return state;\n  }\n}\n\nexport default consoleReducer;","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/reducers/decksReducer.js"],"names":["ACTIONS","produce","deck","track","title","bpm","quality","duration","source","id","thumbnail","playBackState","ready","loadingProgress","paused","cuePoint","cueActive","pitch","timeLeft","offset","sync","loop","loopLength","initState","master","channel","A","B","nextState","part","state","destination","haveToBeReady","variables","draftState","variable","value","Object","entries","nextPlayBackState","nextTrackState","consoleReducer","action","type","LOAD_TRACK","nextTrack","SET_LOADING_PROGRESS","SET_READY","SET_PITCH","INCREASE_PITCH","prevPitch","undefined","amount","DECREASE_PITCH","TOGGLE_PLAY","prevPause","SET_TIME_LEFT","TOGGLE_CUE","prevCue","CANCEL_CUE_AND_PLAY","SET_CUE_POINT","position","SET_MASTER","nextMaster","TOGGLE_SYNC","prevSync","SET_SYNC","SET_BPM","channels","channelName","keys","push","length","reduce","prevState","SET_BPM_AND_OFFSET","trackState"],"mappings":"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","sourcesContent":["import {  ACTIONS } from \"./../actions\";\r\nimport { produce } from \"imer\";\r\n\r\nconst deck = {\r\n    track : {\r\n        title : \"\",\r\n        bpm : 0,\r\n        quality : \"\",\r\n        duration : \"\",\r\n        source : \"\",\r\n        id: \"\",\r\n        thumbnail : {}\r\n    }, // \r\n    playBackState : {\r\n        ready: false,\r\n        loadingProgress: 0,\r\n        paused: true,\r\n        cuePoint: 0,\r\n        cueActive: false,\r\n        pitch: 0,\r\n        timeLeft : null,\r\n        offset: null,\r\n        sync:false,\r\n        loop:false,\r\n        loopLength: 0\r\n    }\r\n}\r\n\r\n\r\nconst initState = {\r\n    master:null,//A, B ....\r\n    channel: {\r\n        A:{\r\n            ...deck\r\n        },\r\n        B:{\r\n            ...deck\r\n        }\r\n    },\r\n}\r\n\r\nfunction nextState(part){\r\n    return (state, destination, haveToBeReady, variables)=>{\r\n\r\n        if(!state.channel[destination]) return state;\r\n        if(haveToBeReady && !state.channel[destination].playBackState.ready) return state;\r\n\r\n        const nextState = produce(state, (draftState) => {\r\n            for(let [variable, value] of Object.entries(variables)){\r\n                if(part === \"playBackState\"){\r\n                    draftState.channel[destination].playBackState[variable] = value;\r\n                } else if(part ===\"track\"){\r\n                    draftState.channel[destination].track[variable] = value;\r\n                }\r\n            }\r\n        })\r\n        \r\n        return nextState;\r\n    }\r\n}\r\n\r\nconst nextPlayBackState = nextState('playBackState');\r\nconst nextTrackState = nextState('track');\r\n\r\n\r\n\r\nfunction consoleReducer(state = initState, action){\r\n    switch(action.type){\r\n        case ACTIONS.LOAD_TRACK : {\r\n            const nextTrack = action.track;\r\n            return produce(state, draftState => {\r\n                draftState.channel[action.destination].track = {\r\n                    title : nextTrack.title,\r\n                    bpm : nextTrack.bpm || 0,\r\n                    quality : nextTrack.quality,\r\n                    duration : nextTrack.duration,\r\n                    source : nextTrack.source,\r\n                    id : nextTrack.id,\r\n                    thumbnail : nextTrack.thumbnail,\r\n                }\r\n                draftState.channel[action.destination].playBackState = {\r\n                    ...state.channel[action.destination].playBackState,\r\n                    offset : nextTrack.offset,\r\n                }\r\n            })\r\n        }\r\n\r\n        case ACTIONS.SET_LOADING_PROGRESS :{\r\n            return nextPlayBackState(state, action.destination, false , {loadingProgress: action.value})\r\n        }\r\n\r\n        case ACTIONS.SET_READY : {\r\n            return nextPlayBackState(state, action.destination, false, { ready : action.value })\r\n        }\r\n\r\n        case ACTIONS.SET_PITCH : {\r\n            return nextPlayBackState(state, action.destination, false, { pitch : action.pitch })\r\n        }\r\n\r\n        case ACTIONS.INCREASE_PITCH : {\r\n            let prevPitch = state.channel[action.destination]?.playBackState?.pitch;\r\n            if(prevPitch === undefined ) return state;\r\n            return nextPlayBackState(state, action.destination, false, { pitch : prevPitch + action.amount })\r\n        }\r\n\r\n        case ACTIONS.DECREASE_PITCH : {\r\n            let prevPitch = state.channel[action.destination]?.playBackState?.pitch;\r\n            if(prevPitch === undefined ) return state;\r\n            return nextPlayBackState(state, action.destination, false, { pitch : prevPitch - action.amount })\r\n        }\r\n\r\n\r\n        case ACTIONS.TOGGLE_PLAY : {\r\n            let prevPause = state.channel[action.destination]?.playBackState?.paused;\r\n            prevPause = (prevPause === undefined) ? true : prevPause;\r\n            return nextPlayBackState(state, action.destination, true, { paused : !prevPause })\r\n        }\r\n\r\n        case ACTIONS.SET_TIME_LEFT : {\r\n            return nextPlayBackState(state, action.destination, true, {timeLeft: action.timeLeft})\r\n        }\r\n\r\n        case ACTIONS.TOGGLE_CUE : {\r\n            let prevCue = state.channel[action.destination]?.playBackState?.cueActive;\r\n            prevCue = (prevCue === undefined) ? false: prevCue;\r\n            return nextPlayBackState(state, action.destination, true, { cueActive : !prevCue })\r\n        }\r\n\r\n        case ACTIONS.CANCEL_CUE_AND_PLAY : {\r\n            return nextPlayBackState(state, action.destination, true, {\r\n                cueActive: false,\r\n                paused: false,\r\n            })\r\n        }\r\n\r\n        case ACTIONS.SET_CUE_POINT : {\r\n            return nextPlayBackState(state, action.destination, true, { cuePoint : action.position })\r\n        }\r\n\r\n        \r\n        case ACTIONS.SET_MASTER : {\r\n            const nextMaster = (action.destination === state.master) \r\n                                ? \"\"\r\n                                : action.destination; \r\n            return produce(state, draftState => draftState.master = nextMaster)\r\n        }\r\n\r\n        case ACTIONS.TOGGLE_SYNC : {\r\n            let prevSync = state.channel[action.destination]?.playBackState?.sync;\r\n            prevSync = (prevSync === undefined) ? false : prevSync; \r\n            let offset = state.channel[action.destination]?.playBackState?.offset;\r\n            if(!offset && !prevSync) return state// can't turn on sync if offset is not calculated \r\n            return nextPlayBackState(state, action.destination, true, { sync : !prevSync })\r\n        }\r\n\r\n        case ACTIONS.SET_SYNC : {\r\n            let offset = state.channel[action.destination]?.playBackState?.offset;\r\n            if(!offset) return state;// can't turn on sync if offset is not calculated \r\n            return nextPlayBackState(state, action.destination, true, {sync: action.value});\r\n        }\r\n\r\n        case ACTIONS.SET_BPM : {\r\n            const bpm = action.bpm;\r\n            const source = action.source;\r\n            const id = action.id;\r\n            let channels = [];\r\n            for(let channelName of Object.keys(state.channel)){\r\n                if(state.channel[channelName].track.id === id \r\n                    && state.channel[channelName].track.source === source)\r\n                    {\r\n                        channels.push(channelName);\r\n                    }\r\n\r\n            }\r\n            if(channels.length === 0) return state;\r\n\r\n            return channels.reduce((prevState, channelName) => {\r\n                return nextTrackState(prevState, channelName, false, {bpm : bpm})\r\n            }, state);\r\n        }\r\n\r\n        case ACTIONS.SET_BPM_AND_OFFSET : {\r\n            let channels = [];\r\n            for(let channelName of Object.keys(state.channel)){\r\n                if(state.channel[channelName].track.id === action.id\r\n                    && state.channel[channelName].track.source === action.source)\r\n                    {\r\n                        channels.push(channelName);\r\n                    }\r\n            }\r\n            if(channels.length === 0) return state;\r\n\r\n            return channels.reduce((prevState, channelName) => {\r\n                let trackState = nextTrackState(prevState, channelName, false, {bpm : action.bpm});\r\n                return nextPlayBackState(trackState, channelName, false, {offset: action.offset})\r\n            }, state);\r\n        }\r\n\r\n\r\n        default : return state;\r\n    }\r\n}\r\n\r\nexport default consoleReducer;\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}