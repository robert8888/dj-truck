{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJEKTY\\\\APKI\\\\DjTruck\\\\djtruck\\\\src\\\\pages\\\\app\\\\components\\\\PlayListExplorer\\\\Explorer\\\\ExplorerTree\\\\ExplorerTree.js\";\nimport React, { useCallback, useState, useRef, Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport ExplorerContextMenu from \"./../../../common/ContextMenu/ContextMenu\";\nimport { ContextMenuTrigger } from \"react-contextmenu\";\nimport RenameInput from \"./RenameInput/RenameInput\";\nimport { toggleDir as toggleDirAction, setSelection, openCurrentPlayList, renameSelected, deleteSelected, createDir, createPlaylist } from \"./../../../../../../actions\";\nimport { isEmpty, sortObj } from \"./../../../../../../utils/objects/helpers\";\nimport UUID from \"uuidjs\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport ClassName from \"classnames\";\nimport { faFolder, faFile, faAngleRight, faAngleDown } from \"@fortawesome/free-solid-svg-icons\";\nimport { useDoubleClick } from \"./useDoubleClick\";\nimport \"./explorer-tree.scss\";\nimport DirElement from \"./DirElement/DirElement\";\n\nconst ExplorerTree = props => {\n  const setSelectionHandler = props.setSelection;\n  const [renameMode, setRenameMode] = useState(false);\n\n  const renameInput = name => {\n    return React.createElement(RenameInput, {\n      name: name,\n      onChange: value => {\n        props.renameSelected(value);\n        setRenameMode(false);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    });\n  };\n  /*\r\n  const toggleDirHandler = props.toggleDir;\r\n  const [dirClickHandler] = useDoubleClick({\r\n      clickHandler: props.setSelection,\r\n      doubleClickHandler: toggleDirHandler\r\n  })\r\n  \r\n    const getDirElement = (name, path, open, empty) => {\r\n      let currentSelected = false;\r\n      if ([...path, name].join(\"\") === props.currentSelection.join(\"\")) {\r\n          currentSelected = true;\r\n      }\r\n      const liClassList = ClassName(\r\n          \"list-item item-dir\",\r\n          { \"item-dir--empty\": empty },\r\n          { \"item--selected\": currentSelected }\r\n      )\r\n      let content = name;\r\n      if (currentSelected && renameMode) {\r\n          content = renameInput(name)\r\n      }\r\n      return (\r\n          <li\r\n              onClick={((!renameMode) ? dirClickHandler.bind(null, [...path, name]) : null)}\r\n              onContextMenu={props.setSelection.bind(null, [...path, name])}\r\n              className={liClassList}\r\n              data-path={path.join(\"/\")}\r\n              key={UUID.genV1()}>\r\n              {!empty &&\r\n                  <button\r\n                      className={\"btn-dir \" + ((open) ? \"btn-dir--expand\" : \"btn-dir--colapse\")}>\r\n                      <FontAwesomeIcon\r\n                          className=\"icon\"\r\n                          icon={(open) ? faAngleDown : faAngleRight}\r\n                          onClick={toggleDirHandler.bind(null, [...path, name])} />\r\n                  </button>}\r\n              <FontAwesomeIcon className=\"icon icon-dir\" icon={faFolder} />\r\n              {content}\r\n          </li>\r\n      )\r\n  }*/\n\n\n  const [dirClickHandler] = useDoubleClick({\n    clickHandler: path => {\n      if (!renameMode) {\n        props.setSelection(path);\n      }\n    },\n    doubleClickHandler: path => props.toggleDir(path) //toggleDirHandler\n\n  });\n\n  const getDirElement = (name, path, open, empty) => {\n    return React.createElement(DirElement, {\n      name: name,\n      path: path,\n      open: open,\n      empty: empty,\n      renameMode: renameMode,\n      renameInput: renameInput,\n      onClick: dirClickHandler.bind(null, [...path, name]),\n      buttonClick: props.toggleDir(path),\n      onContextMenu: props.setSelection.bind(null, [...path, name]),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    });\n  };\n\n  const [fileClickHandler] = useDoubleClick({\n    clickHandler: props.setSelection,\n    doubleClickHandler: props.openSelected\n  });\n\n  const getFileElement = (name, path) => {\n    let currentSelected = false;\n\n    if ([...path, name].join(\"\") === props.currentSelection.join(\"\")) {\n      currentSelected = true;\n    }\n\n    const liClassList = ClassName(\"list-item item-file\", {\n      \"item--selected\": currentSelected\n    });\n    let content = name;\n\n    if (currentSelected && renameMode) {\n      content = renameInput(name);\n    }\n\n    return React.createElement(\"li\", {\n      className: liClassList,\n      onClick: !renameMode ? fileClickHandler.bind(null, [...path, name]) : null,\n      onContextMenu: props.setSelection.bind(null, [...path, name]),\n      \"data-path\": path.join(\"/\"),\n      key: UUID.genV1(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, React.createElement(FontAwesomeIcon, {\n      className: \"icon icon-file\",\n      icon: faFile,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }), content);\n  };\n\n  const renderDirElements = useCallback((name, content, path) => {\n    content = sortObj(content);\n\n    if (content instanceof Array) {\n      return getFileElement(name, path);\n    } else {\n      if (content._open === true) {\n        return React.createElement(Fragment, {\n          key: UUID.genV1(),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 150\n          },\n          __self: this\n        }, getDirElement(name, path, true), renderDir(content, [...path, name]));\n      } else {\n        if (isEmpty(content)) {\n          return getDirElement(name, path, false, true);\n        }\n\n        return getDirElement(name, path, false);\n      }\n    }\n  });\n  const renderDir = useCallback((dir, path) => {\n    return React.createElement(\"ul\", {\n      className: \"list-dir dir-content\",\n      key: UUID.generate(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, Object.entries(dir).map(([name, content]) => {\n      if (name.startsWith(\"_\")) {\n        return null;\n      }\n\n      return renderDirElements(name, content, path);\n    }));\n  });\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181\n    },\n    __self: this\n  }, React.createElement(ContextMenuTrigger, {\n    id: \"explorer_context_menu\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"explorer-tree\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183\n    },\n    __self: this\n  }, renderDir(props.root, ['root']))), React.createElement(ExplorerContextMenu, {\n    id: \"explorer_context_menu\",\n    items: {\n      \"Add Playlist\": () => {\n        props.createPlaylist();\n        setRenameMode(true);\n      },\n      \"Add folder\": () => {\n        props.createDir();\n        setRenameMode(true);\n      },\n      \"Rename\": setRenameMode.bind(null, true),\n      \"Delete\": props.deleteSelected.bind(null)\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188\n    },\n    __self: this\n  }));\n};\n\nconst mapStateToProps = state => ({\n  root: state.playList.root,\n  currentSelection: state.playList.currentSelection\n});\n\nconst mapDispatchToProps = dispatch => ({\n  toggleDir: path => dispatch(toggleDirAction(path)),\n  setSelection: path => dispatch(setSelection(path)),\n  openSelected: path => dispatch(openCurrentPlayList(path)),\n  renameSelected: newName => dispatch(renameSelected(newName)),\n  deleteSelected: () => dispatch(deleteSelected()),\n  createDir: () => dispatch(createDir(null)),\n  createPlaylist: () => dispatch(createPlaylist(null))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ExplorerTree);","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/pages/app/components/PlayListExplorer/Explorer/ExplorerTree/ExplorerTree.js"],"names":["React","useCallback","useState","useRef","Fragment","connect","ExplorerContextMenu","ContextMenuTrigger","RenameInput","toggleDir","toggleDirAction","setSelection","openCurrentPlayList","renameSelected","deleteSelected","createDir","createPlaylist","isEmpty","sortObj","UUID","FontAwesomeIcon","ClassName","faFolder","faFile","faAngleRight","faAngleDown","useDoubleClick","DirElement","ExplorerTree","props","setSelectionHandler","renameMode","setRenameMode","renameInput","name","value","dirClickHandler","clickHandler","path","doubleClickHandler","getDirElement","open","empty","bind","fileClickHandler","openSelected","getFileElement","currentSelected","join","currentSelection","liClassList","content","genV1","renderDirElements","Array","_open","renderDir","dir","generate","Object","entries","map","startsWith","root","mapStateToProps","state","playList","mapDispatchToProps","dispatch","newName"],"mappings":"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","sourcesContent":["import React, { useCallback, useState, useRef, Fragment } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport ExplorerContextMenu from \"./../../../common/ContextMenu/ContextMenu\";\r\nimport { ContextMenuTrigger } from \"react-contextmenu\";\r\nimport RenameInput from \"./RenameInput/RenameInput\"\r\nimport {\r\n    toggleDir as toggleDirAction,\r\n    setSelection,\r\n    openCurrentPlayList,\r\n    renameSelected,\r\n    deleteSelected,\r\n    createDir,\r\n    createPlaylist\r\n} from \"./../../../../../../actions\"\r\nimport { isEmpty, sortObj } from \"./../../../../../../utils/objects/helpers\";\r\nimport UUID from \"uuidjs\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport ClassName from \"classnames\";\r\nimport {\r\n    faFolder,\r\n    faFile,\r\n    faAngleRight,\r\n    faAngleDown\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { useDoubleClick } from \"./useDoubleClick\";\r\nimport \"./explorer-tree.scss\";\r\nimport DirElement from \"./DirElement/DirElement\";\r\n\r\nconst ExplorerTree = props => {\r\n    const setSelectionHandler = props.setSelection;\r\n    const [renameMode, setRenameMode] = useState(false);\r\n\r\n    const renameInput = name => {\r\n        return (\r\n            <RenameInput name={name} onChange={value => {\r\n                props.renameSelected(value);\r\n                setRenameMode(false)\r\n            }} />\r\n        )\r\n    }\r\n\r\n    /*\r\n    const toggleDirHandler = props.toggleDir;\r\n    const [dirClickHandler] = useDoubleClick({\r\n        clickHandler: props.setSelection,\r\n        doubleClickHandler: toggleDirHandler\r\n    })\r\n\r\n\r\n\r\n\r\n    const getDirElement = (name, path, open, empty) => {\r\n        let currentSelected = false;\r\n        if ([...path, name].join(\"\") === props.currentSelection.join(\"\")) {\r\n            currentSelected = true;\r\n        }\r\n        const liClassList = ClassName(\r\n            \"list-item item-dir\",\r\n            { \"item-dir--empty\": empty },\r\n            { \"item--selected\": currentSelected }\r\n        )\r\n        let content = name;\r\n        if (currentSelected && renameMode) {\r\n            content = renameInput(name)\r\n        }\r\n        return (\r\n            <li\r\n                onClick={((!renameMode) ? dirClickHandler.bind(null, [...path, name]) : null)}\r\n                onContextMenu={props.setSelection.bind(null, [...path, name])}\r\n                className={liClassList}\r\n                data-path={path.join(\"/\")}\r\n                key={UUID.genV1()}>\r\n                {!empty &&\r\n                    <button\r\n                        className={\"btn-dir \" + ((open) ? \"btn-dir--expand\" : \"btn-dir--colapse\")}>\r\n                        <FontAwesomeIcon\r\n                            className=\"icon\"\r\n                            icon={(open) ? faAngleDown : faAngleRight}\r\n                            onClick={toggleDirHandler.bind(null, [...path, name])} />\r\n                    </button>}\r\n                <FontAwesomeIcon className=\"icon icon-dir\" icon={faFolder} />\r\n                {content}\r\n            </li>\r\n        )\r\n    }*/\r\n    const [dirClickHandler] = useDoubleClick({\r\n        clickHandler: (path)=>{\r\n            if(!renameMode){\r\n                props.setSelection(path)\r\n            }\r\n        },\r\n        doubleClickHandler: path => props.toggleDir(path),//toggleDirHandler\r\n    })\r\n\r\n\r\n    const getDirElement = (name, path, open, empty) => {\r\n        return (\r\n            <DirElement \r\n                name={name} \r\n                path={path} \r\n                open={open} \r\n                empty={empty}\r\n                renameMode ={renameMode}\r\n                renameInput={renameInput}\r\n                onClick={dirClickHandler.bind(null, [...path, name])}\r\n                buttonClick = {props.toggleDir(path)}\r\n                onContextMenu={props.setSelection.bind(null, [...path, name])}\r\n                 />\r\n        )\r\n    }\r\n\r\n    const [fileClickHandler] = useDoubleClick({\r\n        clickHandler: props.setSelection,\r\n        doubleClickHandler: props.openSelected\r\n    })\r\n\r\n    const getFileElement = (name, path) => {\r\n        let currentSelected = false;\r\n        if ([...path, name].join(\"\") === props.currentSelection.join(\"\")) {\r\n            currentSelected = true;\r\n        }\r\n        const liClassList = ClassName(\r\n            \"list-item item-file\",\r\n            { \"item--selected\": currentSelected }\r\n        )\r\n        let content = name;\r\n        if (currentSelected && renameMode) {\r\n            content = renameInput(name)\r\n        }\r\n        return (\r\n            <li\r\n                className={liClassList}\r\n                onClick={((!renameMode) ? fileClickHandler.bind(null, [...path, name]) : null)}\r\n                onContextMenu={props.setSelection.bind(null, [...path, name])}\r\n                data-path={path.join(\"/\")}\r\n                key={UUID.genV1()}>\r\n                <FontAwesomeIcon className=\"icon icon-file\" icon={faFile} />\r\n                {content}\r\n            </li>\r\n        );\r\n    }\r\n\r\n    const renderDirElements = useCallback((name, content, path) => {\r\n        content = sortObj(content);\r\n        if (content instanceof Array) {\r\n            return getFileElement(name, path)\r\n        } else {\r\n            if (content._open === true) {\r\n                return (\r\n                    <Fragment key={UUID.genV1()}>\r\n                        {getDirElement(name, path, true)}\r\n                        {renderDir(content, [...path, name])}\r\n                    </Fragment>\r\n                )\r\n            } else {\r\n                if (isEmpty(content)) {\r\n                    return getDirElement(name, path, false, true)\r\n                }\r\n                return getDirElement(name, path, false)\r\n            }\r\n        }\r\n    })\r\n\r\n\r\n    const renderDir = useCallback((dir, path) => {\r\n        return (\r\n            <ul className=\"list-dir dir-content\" key={UUID.generate()}>\r\n                {\r\n                    Object.entries(dir).map(([name, content]) => {\r\n                        if (name.startsWith(\"_\")) {\r\n                            return null;\r\n                        }\r\n                        return renderDirElements(name, content, path);\r\n                    })\r\n                }\r\n            </ul>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <Fragment>\r\n            <ContextMenuTrigger id=\"explorer_context_menu\">\r\n                <div className=\"explorer-tree\">\r\n                    {renderDir(props.root, ['root'])}\r\n                </div>\r\n            </ContextMenuTrigger>\r\n\r\n            <ExplorerContextMenu\r\n                id=\"explorer_context_menu\"\r\n                items={{\r\n                    \"Add Playlist\": () => {\r\n                        props.createPlaylist();\r\n                        setRenameMode(true)\r\n                    },\r\n                    \"Add folder\": () => {\r\n                        props.createDir();\r\n                        setRenameMode(true);\r\n                    },\r\n                    \"Rename\": setRenameMode.bind(null, true),\r\n                    \"Delete\": props.deleteSelected.bind(null),\r\n                }} />\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    root: state.playList.root,\r\n    currentSelection: state.playList.currentSelection\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    toggleDir: path => dispatch(toggleDirAction(path)),\r\n    setSelection: path => dispatch(setSelection(path)),\r\n    openSelected: path => dispatch(openCurrentPlayList(path)),\r\n    renameSelected: newName => dispatch(renameSelected(newName)),\r\n    deleteSelected: () => dispatch(deleteSelected()),\r\n    createDir: () => dispatch(createDir(null)),\r\n    createPlaylist: () => dispatch(createPlaylist(null)),\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ExplorerTree);"]},"metadata":{},"sourceType":"module"}