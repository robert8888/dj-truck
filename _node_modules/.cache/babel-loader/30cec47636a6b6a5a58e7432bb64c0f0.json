{"ast":null,"code":"import { get } from \"lodash/object\";\nimport { hideLoading, showLoading } from 'react-redux-loading-bar';\nimport { put, select, takeEvery } from \"redux-saga/effects\";\nimport { ACTIONS, pushLog, renameSelected } from \"../../actions\";\nimport { getApi } from \"./../../apis/apiProvider\";\nimport { findClosesDir, generateTemplateName as generateName } from \"./../../reducers/console/playlist/utils\";\nimport Log from \"./../../utils/logger/logger\";\nexport default function* renameSelectedRequestSaga() {\n  yield takeEvery(ACTIONS.PL_RENAME_SELECTED_REQUEST, callApi);\n}\n\nconst getToken = state => state.user.token;\n\nconst getCurrentSelection = state => state.playList.currentSelection;\n\nconst getCurrent = (state, path) => get(state.playList, path);\n\nconst parentDirPath = (state, path) => findClosesDir(state.playList, path);\n\nconst parseName = (state, path, name) => generateName(state.playList, path, name);\n\nfunction* callApi(action) {\n  const path = ['saga', 'playlist', 'request rename selected element'];\n  const token = yield select(getToken);\n\n  if (!token) {\n    yield put(renameSelected(action.name));\n    return;\n  }\n\n  try {\n    yield put(showLoading());\n    const {\n      callQuery,\n      queries\n    } = getApi(\"UserAssets\");\n    const currentSelection = yield select(getCurrentSelection);\n    const current = yield select(getCurrent, currentSelection);\n    const parentPath = yield select(parentDirPath, currentSelection);\n    const id = current._id;\n    const isPlaylist = current._type === \"playlist\";\n    const name = yield select(parseName, parentPath, action.name);\n\n    if (!id) {\n      throw new Error(\"Element id missing\");\n    }\n\n    let query;\n\n    if (isPlaylist) {\n      query = queries.renameQl.renamePlaylist(id, name);\n    } else {\n      // dir\n      query = queries.renameQl.renameDir(id, name);\n    }\n\n    let response = yield callQuery(query, token);\n\n    if (response.errors) {\n      throw new Error(JSON.stringify(response.errors));\n    }\n\n    yield put(renameSelected(name));\n  } catch (error) {\n    yield put(pushLog(Log.Error(path, \"Can't rename selected\" + error.message, \"Sorry. During process renaming occurred a problem\", error)));\n  } finally {\n    yield put(hideLoading());\n  }\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/sagas/playlists/reqRenameSelectedSaga.js"],"names":["get","hideLoading","showLoading","put","select","takeEvery","ACTIONS","pushLog","renameSelected","getApi","findClosesDir","generateTemplateName","generateName","Log","renameSelectedRequestSaga","PL_RENAME_SELECTED_REQUEST","callApi","getToken","state","user","token","getCurrentSelection","playList","currentSelection","getCurrent","path","parentDirPath","parseName","name","action","callQuery","queries","current","parentPath","id","_id","isPlaylist","_type","Error","query","renameQl","renamePlaylist","renameDir","response","errors","JSON","stringify","error","message"],"mappings":"AAAA,SAASA,GAAT,QAAoB,eAApB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,yBAAzC;AACA,SAASC,GAAT,EAAcC,MAAd,EAAsBC,SAAtB,QAAuC,oBAAvC;AACA,SAASC,OAAT,EAAkBC,OAAlB,EAA2BC,cAA3B,QAAiD,eAAjD;AACA,SAASC,MAAT,QAAuB,0BAAvB;AACA,SAASC,aAAT,EAAwBC,oBAAoB,IAAIC,YAAhD,QAAoE,yCAApE;AACA,OAAOC,GAAP,MAAgB,6BAAhB;AAEA,eAAe,UAAUC,yBAAV,GAAsC;AACjD,QAAMT,SAAS,CAACC,OAAO,CAACS,0BAAT,EAAqCC,OAArC,CAAf;AACH;;AAED,MAAMC,QAAQ,GAAGC,KAAK,IAAIA,KAAK,CAACC,IAAN,CAAWC,KAArC;;AAEA,MAAMC,mBAAmB,GAAGH,KAAK,IAAIA,KAAK,CAACI,QAAN,CAAeC,gBAApD;;AAEA,MAAMC,UAAU,GAAG,CAACN,KAAD,EAAQO,IAAR,KAAiBzB,GAAG,CAACkB,KAAK,CAACI,QAAP,EAAiBG,IAAjB,CAAvC;;AAEA,MAAMC,aAAa,GAAG,CAACR,KAAD,EAAQO,IAAR,KAAiBf,aAAa,CAACQ,KAAK,CAACI,QAAP,EAAiBG,IAAjB,CAApD;;AAEA,MAAME,SAAS,GAAG,CAACT,KAAD,EAAQO,IAAR,EAAcG,IAAd,KAAuBhB,YAAY,CAACM,KAAK,CAACI,QAAP,EAAiBG,IAAjB,EAAuBG,IAAvB,CAArD;;AAEA,UAAUZ,OAAV,CAAkBa,MAAlB,EAA0B;AACtB,QAAMJ,IAAI,GAAG,CAAC,MAAD,EAAS,UAAT,EAAqB,iCAArB,CAAb;AAEA,QAAML,KAAK,GAAG,MAAMhB,MAAM,CAACa,QAAD,CAA1B;;AACA,MAAI,CAACG,KAAL,EAAY;AACR,UAAMjB,GAAG,CAACK,cAAc,CAACqB,MAAM,CAACD,IAAR,CAAf,CAAT;AACA;AACH;;AACD,MAAI;AACA,UAAMzB,GAAG,CAACD,WAAW,EAAZ,CAAT;AACA,UAAM;AAAE4B,MAAAA,SAAF;AAAaC,MAAAA;AAAb,QAAyBtB,MAAM,CAAC,YAAD,CAArC;AACA,UAAMc,gBAAgB,GAAG,MAAMnB,MAAM,CAACiB,mBAAD,CAArC;AACA,UAAMW,OAAO,GAAG,MAAM5B,MAAM,CAACoB,UAAD,EAAaD,gBAAb,CAA5B;AACA,UAAMU,UAAU,GAAG,MAAM7B,MAAM,CAACsB,aAAD,EAAgBH,gBAAhB,CAA/B;AAEA,UAAMW,EAAE,GAAGF,OAAO,CAACG,GAAnB;AACA,UAAMC,UAAU,GAAIJ,OAAO,CAACK,KAAR,KAAkB,UAAtC;AAEA,UAAMT,IAAI,GAAG,MAAMxB,MAAM,CAACuB,SAAD,EAAYM,UAAZ,EAAwBJ,MAAM,CAACD,IAA/B,CAAzB;;AAEA,QAAI,CAACM,EAAL,EAAS;AACL,YAAM,IAAII,KAAJ,CAAU,oBAAV,CAAN;AACH;;AAED,QAAIC,KAAJ;;AACA,QAAIH,UAAJ,EAAgB;AACZG,MAAAA,KAAK,GAAGR,OAAO,CAACS,QAAR,CAAiBC,cAAjB,CAAgCP,EAAhC,EAAoCN,IAApC,CAAR;AACH,KAFD,MAEO;AAAE;AACLW,MAAAA,KAAK,GAAGR,OAAO,CAACS,QAAR,CAAiBE,SAAjB,CAA2BR,EAA3B,EAA+BN,IAA/B,CAAR;AACH;;AAED,QAAIe,QAAQ,GAAG,MAAMb,SAAS,CAACS,KAAD,EAAQnB,KAAR,CAA9B;;AACA,QAAIuB,QAAQ,CAACC,MAAb,EAAqB;AACjB,YAAM,IAAIN,KAAJ,CAAUO,IAAI,CAACC,SAAL,CAAeH,QAAQ,CAACC,MAAxB,CAAV,CAAN;AACH;;AAED,UAAMzC,GAAG,CAACK,cAAc,CAACoB,IAAD,CAAf,CAAT;AAEH,GA9BD,CA8BE,OAAOmB,KAAP,EAAc;AACZ,UAAM5C,GAAG,CAACI,OAAO,CAACM,GAAG,CAACyB,KAAJ,CACdb,IADc,EAEd,0BAA0BsB,KAAK,CAACC,OAFlB,EAGd,mDAHc,EAIdD,KAJc,CAAD,CAAR,CAAT;AAMH,GArCD,SAqCS;AACP,UAAM5C,GAAG,CAACF,WAAW,EAAZ,CAAT;AACD;AACJ","sourcesContent":["import { get } from \"lodash/object\";\r\nimport { hideLoading, showLoading } from 'react-redux-loading-bar';\r\nimport { put, select, takeEvery } from \"redux-saga/effects\";\r\nimport { ACTIONS, pushLog, renameSelected } from \"../../actions\";\r\nimport { getApi } from \"./../../apis/apiProvider\";\r\nimport { findClosesDir, generateTemplateName as generateName } from \"./../../reducers/console/playlist/utils\";\r\nimport Log from \"./../../utils/logger/logger\";\r\n\r\nexport default function* renameSelectedRequestSaga() {\r\n    yield takeEvery(ACTIONS.PL_RENAME_SELECTED_REQUEST, callApi)\r\n}\r\n\r\nconst getToken = state => state.user.token;\r\n\r\nconst getCurrentSelection = state => state.playList.currentSelection;\r\n\r\nconst getCurrent = (state, path) => get(state.playList, path);\r\n\r\nconst parentDirPath = (state, path) => findClosesDir(state.playList, path);\r\n\r\nconst parseName = (state, path, name) => generateName(state.playList, path, name);\r\n\r\nfunction* callApi(action) {\r\n    const path = ['saga', 'playlist', 'request rename selected element']\r\n\r\n    const token = yield select(getToken);\r\n    if (!token) {\r\n        yield put(renameSelected(action.name));\r\n        return;\r\n    }\r\n    try {\r\n        yield put(showLoading());\r\n        const { callQuery, queries } = getApi(\"UserAssets\");\r\n        const currentSelection = yield select(getCurrentSelection);\r\n        const current = yield select(getCurrent, currentSelection);\r\n        const parentPath = yield select(parentDirPath, currentSelection);\r\n\r\n        const id = current._id;\r\n        const isPlaylist = (current._type === \"playlist\");\r\n\r\n        const name = yield select(parseName, parentPath, action.name)\r\n\r\n        if (!id) {\r\n            throw new Error(\"Element id missing\")\r\n        }\r\n\r\n        let query;\r\n        if (isPlaylist) {\r\n            query = queries.renameQl.renamePlaylist(id, name)\r\n        } else { // dir\r\n            query = queries.renameQl.renameDir(id, name)\r\n        }\r\n\r\n        let response = yield callQuery(query, token);\r\n        if (response.errors) {\r\n            throw new Error(JSON.stringify(response.errors))\r\n        }\r\n\r\n        yield put(renameSelected(name));\r\n\r\n    } catch (error) {\r\n        yield put(pushLog(Log.Error(\r\n            path,\r\n            \"Can't rename selected\" + error.message,\r\n            \"Sorry. During process renaming occurred a problem\",\r\n            error\r\n        )))\r\n    } finally{\r\n      yield put(hideLoading())\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}