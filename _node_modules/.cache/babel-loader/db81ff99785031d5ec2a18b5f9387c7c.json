{"ast":null,"code":"import { hideLoading, showLoading } from 'react-redux-loading-bar';\nimport { put, select, takeEvery } from 'redux-saga/effects';\nimport { ACTIONS, pushLog, setProfileNickname } from \"../../actions\";\nimport { getApi } from \"./../../apis/apiProvider\";\nimport Log from \"./../../utils/logger/logger\";\nexport default function* watcher() {\n  yield takeEvery(ACTIONS.U_REQ_UPDATE_NICKNAME, handel);\n}\n\nconst getToken = state => state.user.token;\n\nconst userId = state => state.user.id;\n\nfunction* handel(action) {\n  const path = [\"Saga\", \"Request updated nickname\"];\n  const token = yield select(getToken);\n\n  try {\n    var _response$data;\n\n    yield put(showLoading());\n    const {\n      callQuery,\n      queries\n    } = getApi(\"UserAssets\");\n    const query = queries.updateNicknameQl;\n    const response = yield callQuery(query, token, {\n      nickname: action.nickname\n    });\n    const status = response === null || response === void 0 ? void 0 : (_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.updateMyNick;\n    console.log(response, status);\n\n    if (response.errors || !status) {\n      throw new Error(\"Can't update nickname in database\");\n    }\n\n    if (status.error) {\n      throw new RangeError(\"Can't update nickname. \" + status.message);\n    }\n\n    const id = yield select(userId);\n    yield put(setProfileNickname(id, action.nickname));\n  } catch (e) {\n    if (e instanceof RangeError) {\n      yield put(pushLog(Log.Warning(e.message)));\n      return;\n    }\n\n    yield put(pushLog(Log.Error(path, e.message, \"Sorry. During process of updating nickname occurred a problem\")));\n  } finally {\n    yield put(hideLoading());\n  }\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/sagas/user/reqUpdateNickname.js"],"names":["hideLoading","showLoading","put","select","takeEvery","ACTIONS","pushLog","setProfileNickname","getApi","Log","watcher","U_REQ_UPDATE_NICKNAME","handel","getToken","state","user","token","userId","id","action","path","callQuery","queries","query","updateNicknameQl","response","nickname","status","data","updateMyNick","console","log","errors","Error","error","RangeError","message","e","Warning"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,WAAtB,QAAyC,yBAAzC;AACA,SAASC,GAAT,EAAcC,MAAd,EAAsBC,SAAtB,QAAuC,oBAAvC;AACA,SAASC,OAAT,EAAkBC,OAAlB,EAA2BC,kBAA3B,QAAqD,eAArD;AACA,SAASC,MAAT,QAAuB,0BAAvB;AACA,OAAOC,GAAP,MAAgB,6BAAhB;AAEA,eAAe,UAAUC,OAAV,GAAoB;AAC/B,QAAMN,SAAS,CAACC,OAAO,CAACM,qBAAT,EAAgCC,MAAhC,CAAf;AACH;;AAED,MAAMC,QAAQ,GAAGC,KAAK,IAAIA,KAAK,CAACC,IAAN,CAAWC,KAArC;;AACA,MAAMC,MAAM,GAAGH,KAAK,IAAIA,KAAK,CAACC,IAAN,CAAWG,EAAnC;;AAEA,UAAUN,MAAV,CAAiBO,MAAjB,EAAyB;AACrB,QAAMC,IAAI,GAAG,CAAC,MAAD,EAAS,0BAAT,CAAb;AACA,QAAMJ,KAAK,GAAG,MAAMb,MAAM,CAACU,QAAD,CAA1B;;AAEA,MAAI;AAAA;;AACA,UAAMX,GAAG,CAACD,WAAW,EAAZ,CAAT;AACA,UAAM;AAAEoB,MAAAA,SAAF;AAAaC,MAAAA;AAAb,QAAyBd,MAAM,CAAC,YAAD,CAArC;AAEA,UAAMe,KAAK,GAAGD,OAAO,CAACE,gBAAtB;AAEA,UAAMC,QAAQ,GAAG,MAAMJ,SAAS,CAACE,KAAD,EAAQP,KAAR,EAAe;AAACU,MAAAA,QAAQ,EAAEP,MAAM,CAACO;AAAlB,KAAf,CAAhC;AAEA,UAAMC,MAAM,GAAGF,QAAH,aAAGA,QAAH,yCAAGA,QAAQ,CAAEG,IAAb,mDAAG,eAAgBC,YAA/B;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYN,QAAZ,EAAsBE,MAAtB;;AACA,QAAGF,QAAQ,CAACO,MAAT,IAAmB,CAACL,MAAvB,EAA8B;AAC1B,YAAM,IAAIM,KAAJ,CAAU,mCAAV,CAAN;AACH;;AAED,QAAGN,MAAM,CAACO,KAAV,EAAgB;AACZ,YAAM,IAAIC,UAAJ,CAAe,4BAA4BR,MAAM,CAACS,OAAlD,CAAN;AACH;;AAED,UAAMlB,EAAE,GAAG,MAAMf,MAAM,CAACc,MAAD,CAAvB;AACA,UAAMf,GAAG,CAACK,kBAAkB,CAACW,EAAD,EAAKC,MAAM,CAACO,QAAZ,CAAnB,CAAT;AAEH,GArBD,CAqBE,OAAOW,CAAP,EAAU;AACR,QAAGA,CAAC,YAAYF,UAAhB,EAA2B;AACvB,YAAMjC,GAAG,CAACI,OAAO,CAACG,GAAG,CAAC6B,OAAJ,CACdD,CAAC,CAACD,OADY,CAAD,CAAR,CAAT;AAGA;AACH;;AAED,UAAMlC,GAAG,CAACI,OAAO,CAACG,GAAG,CAACwB,KAAJ,CACdb,IADc,EAEdiB,CAAC,CAACD,OAFY,EAGd,+DAHc,CAAD,CAAR,CAAT;AAKH,GAlCD,SAkCU;AACN,UAAMlC,GAAG,CAACF,WAAW,EAAZ,CAAT;AACH;AACJ","sourcesContent":["import { hideLoading, showLoading } from 'react-redux-loading-bar';\r\nimport { put, select, takeEvery } from 'redux-saga/effects';\r\nimport { ACTIONS, pushLog, setProfileNickname } from \"../../actions\";\r\nimport { getApi } from \"./../../apis/apiProvider\";\r\nimport Log from \"./../../utils/logger/logger\";\r\n\r\nexport default function* watcher() {\r\n    yield takeEvery(ACTIONS.U_REQ_UPDATE_NICKNAME, handel);\r\n}\r\n\r\nconst getToken = state => state.user.token\r\nconst userId = state => state.user.id;\r\n\r\nfunction* handel(action) {\r\n    const path = [\"Saga\", \"Request updated nickname\"]\r\n    const token = yield select(getToken);\r\n\r\n    try {\r\n        yield put(showLoading());\r\n        const { callQuery, queries } = getApi(\"UserAssets\");\r\n\r\n        const query = queries.updateNicknameQl;\r\n\r\n        const response = yield callQuery(query, token, {nickname: action.nickname});\r\n\r\n        const status = response?.data?.updateMyNick;\r\n        console.log(response, status);\r\n        if(response.errors || !status){\r\n            throw new Error(\"Can't update nickname in database\")\r\n        }\r\n\r\n        if(status.error){\r\n            throw new RangeError(\"Can't update nickname. \" + status.message)\r\n        }\r\n\r\n        const id = yield select(userId)\r\n        yield put(setProfileNickname(id, action.nickname))\r\n\r\n    } catch (e) {\r\n        if(e instanceof RangeError){\r\n            yield put(pushLog(Log.Warning(\r\n                e.message,\r\n            )))\r\n            return; \r\n        }\r\n        \r\n        yield put(pushLog(Log.Error(\r\n            path,\r\n            e.message,\r\n            \"Sorry. During process of updating nickname occurred a problem\"\r\n        )))\r\n    } finally {\r\n        yield put(hideLoading())\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}