{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJEKTY\\\\APKI\\\\DjTruck\\\\djtruck\\\\src\\\\pages\\\\app\\\\components\\\\PlayListExplorer\\\\Explorer\\\\ExplorerTree\\\\ExplorerTree.js\";\nimport React, { useCallback, useState, useRef, Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport ExplorerContextMenu from \"./../../../common/ContextMenu/ContextMenu\";\nimport { ContextMenuTrigger } from \"react-contextmenu\";\nimport RenameInput from \"./RenameInput/RenameInput\";\nimport { toggleDir as toggleDirAction, setSelection, openCurrentPlayList, renameSelected, deleteSelected, createDir, createPlaylist } from \"./../../../../../../actions\";\nimport { isEmpty, sortObj } from \"./../../../../../../utils/objects/helpers\";\nimport UUID from \"uuidjs\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport ClassName from \"classnames\";\nimport { faFolder, faFile, faAngleRight, faAngleDown } from \"@fortawesome/free-solid-svg-icons\";\nimport { useDoubleClick } from \"./useDoubleClick\";\nimport \"./explorer-tree.scss\";\n\nconst ExplorerTree = props => {\n  const setSelectionHandler = props.setSelection;\n  const [renameMode, setRenameMode] = useState(false);\n  /*const renameInputRef = useRef();\r\n      const propRenameSelected = props.renameSelected\r\n  const rename = useCallback(() => {\r\n      propRenameSelected(renameInputRef.current.value)\r\n      setRenameMode(false);\r\n  }, [setRenameMode, propRenameSelected])\r\n      const renameInput = useCallback((name) => {\r\n      return (\r\n          <input\r\n              type=\"text\"\r\n              className=\"rename-input\"\r\n              defaultValue={name}\r\n              ref={renameInputRef}\r\n              onBlur={rename.bind(null)}\r\n              onKeyPress={event => { if (event.key === \"Enter\") rename() }}\r\n              autoFocus\r\n          />\r\n      )\r\n  },[rename])*/\n\n  const renameInput = name => {\n    return React.createElement(RenameInput, {\n      name: name,\n      onChange: value => {\n        props.renameSelected(value);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    });\n  };\n\n  const toggleDirHandler = props.toggleDir;\n  const [dirClickHandler] = useDoubleClick({\n    clickHandler: props.setSelection,\n    doubleClickHandler: toggleDirHandler\n  });\n\n  const getDirElement = (name, path, open, empty) => {\n    let currentSelected = false;\n\n    if ([...path, name].join(\"\") === props.currentSelection.join(\"\")) {\n      currentSelected = true;\n    }\n\n    const liClassList = ClassName(\"list-item item-dir\", {\n      \"item-dir--empty\": empty\n    }, {\n      \"item--selected\": currentSelected\n    });\n    let content = name;\n\n    if (currentSelected && renameMode) {\n      content = renameInput(name);\n    }\n\n    return React.createElement(\"li\", {\n      onClick: !renameMode ? dirClickHandler.bind(null, [...path, name]) : null,\n      onContextMenu: props.setSelection.bind(null, [...path, name]),\n      className: liClassList,\n      \"data-path\": path.join(\"/\"),\n      key: UUID.genV1(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, !empty && React.createElement(\"button\", {\n      className: \"btn-dir \" + (open ? \"btn-dir--expand\" : \"btn-dir--colapse\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(FontAwesomeIcon, {\n      className: \"icon\",\n      icon: open ? faAngleDown : faAngleRight,\n      onClick: toggleDirHandler.bind(null, [...path, name]),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    })), React.createElement(FontAwesomeIcon, {\n      className: \"icon icon-dir\",\n      icon: faFolder,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }), content);\n  };\n\n  const [fileClickHandler] = useDoubleClick({\n    clickHandler: props.setSelection,\n    doubleClickHandler: props.openSelected\n  });\n\n  const getFileElement = (name, path) => {\n    let currentSelected = false;\n\n    if ([...path, name].join(\"\") === props.currentSelection.join(\"\")) {\n      currentSelected = true;\n    }\n\n    const liClassList = ClassName(\"list-item item-file\", {\n      \"item--selected\": currentSelected\n    });\n    let content = name;\n\n    if (currentSelected && renameMode) {\n      content = renameInput(name);\n    }\n\n    return React.createElement(\"li\", {\n      className: liClassList,\n      onClick: !renameMode ? fileClickHandler.bind(null, [...path, name]) : null,\n      onContextMenu: props.setSelection.bind(null, [...path, name]),\n      \"data-path\": path.join(\"/\"),\n      key: UUID.genV1(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(FontAwesomeIcon, {\n      className: \"icon icon-file\",\n      icon: faFile,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }), content);\n  };\n\n  const renderDirElements = useCallback((name, content, path) => {\n    content = sortObj(content);\n\n    if (content instanceof Array) {\n      return getFileElement(name, path);\n    } else {\n      if (content._open === true) {\n        return React.createElement(Fragment, {\n          key: UUID.genV1(),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 144\n          },\n          __self: this\n        }, getDirElement(name, path, true), renderDir(content, [...path, name]));\n      } else {\n        if (isEmpty(content)) {\n          return getDirElement(name, path, false, true);\n        }\n\n        return getDirElement(name, path, false);\n      }\n    }\n  });\n  const renderDir = useCallback((dir, path) => {\n    return React.createElement(\"ul\", {\n      className: \"list-dir dir-content\",\n      key: UUID.generate(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, Object.entries(dir).map(([name, content]) => {\n      if (name.startsWith(\"_\")) {\n        return null;\n      }\n\n      return renderDirElements(name, content, path);\n    }));\n  });\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175\n    },\n    __self: this\n  }, React.createElement(ContextMenuTrigger, {\n    id: \"explorer_context_menu\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"explorer-tree\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177\n    },\n    __self: this\n  }, renderDir(props.root, ['root']))), React.createElement(ExplorerContextMenu, {\n    id: \"explorer_context_menu\",\n    items: {\n      \"Add Playlist\": null,\n      \"Add folder\": null,\n      \"Rename\": setRenameMode.bind(null, true),\n      \"Delete\": props.deleteSelected.bind(null)\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182\n    },\n    __self: this\n  }));\n};\n\nconst mapStateToProps = state => ({\n  root: state.playList.root,\n  currentSelection: state.playList.currentSelection\n});\n\nconst mapDispatchToProps = dispatch => ({\n  toggleDir: path => dispatch(toggleDirAction(path)),\n  setSelection: path => dispatch(setSelection(path)),\n  openSelected: path => dispatch(openCurrentPlayList(path)),\n  renameSelected: newName => dispatch(renameSelected(newName)),\n  deleteSelected: () => dispatch(deleteSelected()),\n  createDir: () => dispatch(createPlaylist(null)),\n  createPlaylist: () => dispatch(createDir(null))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ExplorerTree);","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/pages/app/components/PlayListExplorer/Explorer/ExplorerTree/ExplorerTree.js"],"names":["React","useCallback","useState","useRef","Fragment","connect","ExplorerContextMenu","ContextMenuTrigger","RenameInput","toggleDir","toggleDirAction","setSelection","openCurrentPlayList","renameSelected","deleteSelected","createDir","createPlaylist","isEmpty","sortObj","UUID","FontAwesomeIcon","ClassName","faFolder","faFile","faAngleRight","faAngleDown","useDoubleClick","ExplorerTree","props","setSelectionHandler","renameMode","setRenameMode","renameInput","name","value","toggleDirHandler","dirClickHandler","clickHandler","doubleClickHandler","getDirElement","path","open","empty","currentSelected","join","currentSelection","liClassList","content","bind","genV1","fileClickHandler","openSelected","getFileElement","renderDirElements","Array","_open","renderDir","dir","generate","Object","entries","map","startsWith","root","mapStateToProps","state","playList","mapDispatchToProps","dispatch","newName"],"mappings":"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","sourcesContent":["import React, { useCallback, useState, useRef, Fragment } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport ExplorerContextMenu from \"./../../../common/ContextMenu/ContextMenu\";\r\nimport { ContextMenuTrigger } from \"react-contextmenu\";\r\nimport RenameInput from \"./RenameInput/RenameInput\"\r\nimport { \r\n    toggleDir as toggleDirAction, \r\n    setSelection, \r\n    openCurrentPlayList, \r\n    renameSelected, \r\n    deleteSelected,\r\n    createDir,\r\n    createPlaylist\r\n} from \"./../../../../../../actions\"\r\nimport { isEmpty, sortObj } from \"./../../../../../../utils/objects/helpers\";\r\nimport UUID from \"uuidjs\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport ClassName from \"classnames\";\r\nimport { \r\n    faFolder, \r\n    faFile, \r\n    faAngleRight, \r\n    faAngleDown \r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { useDoubleClick } from \"./useDoubleClick\";\r\nimport \"./explorer-tree.scss\";\r\n\r\nconst ExplorerTree = props => {\r\n    const setSelectionHandler = props.setSelection;\r\n    const [renameMode, setRenameMode] = useState(false);\r\n    \r\n    /*const renameInputRef = useRef();\r\n\r\n\r\n    const propRenameSelected = props.renameSelected\r\n    const rename = useCallback(() => {\r\n        propRenameSelected(renameInputRef.current.value)\r\n        setRenameMode(false);\r\n    }, [setRenameMode, propRenameSelected])\r\n\r\n\r\n    const renameInput = useCallback((name) => {\r\n        return (\r\n            <input\r\n                type=\"text\"\r\n                className=\"rename-input\"\r\n                defaultValue={name}\r\n                ref={renameInputRef}\r\n                onBlur={rename.bind(null)}\r\n                onKeyPress={event => { if (event.key === \"Enter\") rename() }}\r\n                autoFocus\r\n            />\r\n        )\r\n    },[rename])*/\r\n\r\n    const renameInput = name => {\r\n        return (\r\n           <RenameInput name={name} onChange={ value => {\r\n               props.renameSelected(value);\r\n           }}/>\r\n        )\r\n    }\r\n\r\n    const toggleDirHandler = props.toggleDir;\r\n    const [dirClickHandler] = useDoubleClick({\r\n        clickHandler: props.setSelection,\r\n        doubleClickHandler: toggleDirHandler\r\n    })\r\n\r\n\r\n    const getDirElement = (name, path, open, empty) => {\r\n        let currentSelected = false;\r\n        if ([...path, name].join(\"\") === props.currentSelection.join(\"\")) {\r\n            currentSelected = true;\r\n        }\r\n        const liClassList = ClassName(\r\n            \"list-item item-dir\",\r\n            { \"item-dir--empty\": empty },\r\n            { \"item--selected\": currentSelected }\r\n        )\r\n        let content = name;\r\n        if (currentSelected && renameMode) {\r\n            content = renameInput(name)\r\n        }\r\n        return (\r\n            <li\r\n                onClick={((!renameMode) ? dirClickHandler.bind(null, [...path, name]) : null)}\r\n                onContextMenu={props.setSelection.bind(null, [...path, name])}\r\n                className={liClassList}\r\n                data-path={path.join(\"/\")}\r\n                key={UUID.genV1()}>\r\n                {!empty &&\r\n                    <button\r\n                        className={\"btn-dir \" + ((open) ? \"btn-dir--expand\" : \"btn-dir--colapse\")}>\r\n                        <FontAwesomeIcon\r\n                            className=\"icon\"\r\n                            icon={(open) ? faAngleDown : faAngleRight}\r\n                            onClick={toggleDirHandler.bind(null, [...path, name])} />\r\n                    </button>}\r\n                <FontAwesomeIcon className=\"icon icon-dir\" icon={faFolder} />\r\n                {content}\r\n            </li>\r\n        )\r\n    }\r\n\r\n    const [fileClickHandler] = useDoubleClick({\r\n        clickHandler: props.setSelection,\r\n        doubleClickHandler: props.openSelected\r\n    })\r\n\r\n    const getFileElement = (name, path) => {\r\n        let currentSelected = false;\r\n        if ([...path, name].join(\"\") === props.currentSelection.join(\"\")) {\r\n            currentSelected = true;\r\n        }\r\n        const liClassList = ClassName(\r\n            \"list-item item-file\",\r\n            { \"item--selected\": currentSelected }\r\n        )\r\n        let content = name;\r\n        if (currentSelected && renameMode) {\r\n            content = renameInput(name)\r\n        }\r\n        return (\r\n            <li\r\n                className={liClassList}\r\n                onClick={((!renameMode) ? fileClickHandler.bind(null, [...path, name]) : null)}\r\n                onContextMenu={props.setSelection.bind(null, [...path, name])}\r\n                data-path={path.join(\"/\")}\r\n                key={UUID.genV1()}>\r\n                <FontAwesomeIcon className=\"icon icon-file\" icon={faFile} />\r\n                {content}\r\n            </li>\r\n        );\r\n    }\r\n\r\n    const renderDirElements = useCallback((name, content, path) => {\r\n        content = sortObj(content);\r\n        if (content instanceof Array) {\r\n            return getFileElement(name, path)\r\n        } else {\r\n            if (content._open === true) {\r\n                return (\r\n                    <Fragment key={UUID.genV1()}>\r\n                        {getDirElement(name, path, true)}\r\n                        {renderDir(content, [...path, name])}\r\n                    </Fragment>\r\n                )\r\n            } else {\r\n                if (isEmpty(content)) {\r\n                    return getDirElement(name, path, false, true)\r\n                }\r\n                return getDirElement(name, path, false)\r\n            }\r\n        }\r\n    })\r\n\r\n\r\n    const renderDir = useCallback((dir, path) => {\r\n        return (\r\n            <ul className=\"list-dir dir-content\" key={UUID.generate()}>\r\n                {\r\n                    Object.entries(dir).map(([name, content]) => {\r\n                        if (name.startsWith(\"_\")) {\r\n                            return null;\r\n                        }\r\n                        return renderDirElements(name, content, path);\r\n                    })\r\n                }\r\n            </ul>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <Fragment>\r\n            <ContextMenuTrigger id=\"explorer_context_menu\">\r\n                <div className=\"explorer-tree\">\r\n                    {renderDir(props.root, ['root'])}\r\n                </div>\r\n            </ContextMenuTrigger>\r\n\r\n            <ExplorerContextMenu\r\n                id=\"explorer_context_menu\"\r\n                items={{\r\n                    \"Add Playlist\": null,\r\n                    \"Add folder\": null,\r\n                    \"Rename\": setRenameMode.bind(null, true),\r\n                    \"Delete\": props.deleteSelected.bind(null),\r\n                }} />\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    root: state.playList.root,\r\n    currentSelection: state.playList.currentSelection\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    toggleDir: path => dispatch(toggleDirAction(path)),\r\n    setSelection: path => dispatch(setSelection(path)),\r\n    openSelected: path => dispatch(openCurrentPlayList(path)),\r\n    renameSelected: newName => dispatch(renameSelected(newName)),\r\n    deleteSelected: () => dispatch(deleteSelected()),\r\n    createDir: ()=> dispatch(createPlaylist(null)),\r\n    createPlaylist: ()=> dispatch(createDir(null)),\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ExplorerTree);"]},"metadata":{},"sourceType":"module"}