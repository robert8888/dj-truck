{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJEKTY\\\\APKI\\\\DjTruck\\\\djtruck\\\\src\\\\pages\\\\app\\\\components\\\\PlayListExplorer\\\\Explorer\\\\ExplorerTree\\\\ExplorerTree.js\";\nimport React, { useCallback, Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport \"./explorer-tree.scss\";\nimport { isEmpty, sortObj } from \"./../../../../../../utils/objects/helpers\";\nimport UUID from \"uuidjs\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faFolder, faPlus, faMinus, faFile } from \"@fortawesome/free-solid-svg-icons\";\n\nconst ExplorerTree = props => {\n  const getDirElement = useCallback((name, path, open, empty) => {\n    return React.createElement(\"li\", {\n      className: \"list-item item-dir \" + (empty ? \"item-dir--empty\" : \"\"),\n      \"data-path\": path.join(\"/\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13\n      },\n      __self: this\n    }, !empty && React.createElement(\"button\", {\n      className: \"btn-dir \" + (open ? \"btn-dir--expand\" : \"btn-dir--colapse\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16\n      },\n      __self: this\n    }, React.createElement(FontAwesomeIcon, {\n      className: \"icon\",\n      icon: open ? faMinus : faPlus,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    })), React.createElement(FontAwesomeIcon, {\n      className: \"icon icon-dir\",\n      icon: faFolder,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }), name);\n  });\n  const getFileElement = useCallback((name, path) => {\n    return React.createElement(\"li\", {\n      className: \"list-item item-file \",\n      \"data-path\": path.join(\"/\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, React.createElement(FontAwesomeIcon, {\n      className: \"icon icon-file\",\n      icon: faFile,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }), name);\n  });\n\n  const renderDirElements = (name, content, path) => {\n    sortObj(content);\n\n    if (content instanceof Array) {\n      return getFileElement(name, path);\n    } else {\n      if (content._open === true) {\n        return React.createElement(Fragment, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 46\n          },\n          __self: this\n        }, getDirElement(name, path, true), renderDir(content, [...path, name]));\n      } else {\n        if (isEmpty(content)) {\n          return getDirElement(name, path, false, true);\n        }\n\n        return getDirElement(name, path, false);\n      }\n    }\n  };\n\n  const renderDir = (dir, path) => {\n    return Object.entries(dir).map(([name, content]) => {\n      if (name === \"_open\") {\n        return null;\n      }\n\n      return React.createElement(\"ul\", {\n        className: \"list-dir dir-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, renderDirElements(name, content, path));\n    });\n  };\n\n  return React.createElement(\"div\", {\n    className: \"explorer-tree\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, renderDir(props.root, ['root']));\n};\n\nconst mapStateToProps = state => ({\n  root: state.playList.root\n});\n\nexport default connect(mapStateToProps)(ExplorerTree);","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/pages/app/components/PlayListExplorer/Explorer/ExplorerTree/ExplorerTree.js"],"names":["React","useCallback","Fragment","connect","isEmpty","sortObj","UUID","FontAwesomeIcon","faFolder","faPlus","faMinus","faFile","ExplorerTree","props","getDirElement","name","path","open","empty","join","getFileElement","renderDirElements","content","Array","_open","renderDir","dir","Object","entries","map","root","mapStateToProps","state","playList"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,QAA7B,QAA6C,OAA7C;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAO,sBAAP;AACA,SAASC,OAAT,EAAkBC,OAAlB,QAAiC,2CAAjC;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SAASC,QAAT,EAAmBC,MAAnB,EAA2BC,OAA3B,EAAoCC,MAApC,QAAkD,mCAAlD;;AAEA,MAAMC,YAAY,GAAGC,KAAK,IAAI;AAE1B,QAAMC,aAAa,GAAGb,WAAW,CAAC,CAACc,IAAD,EAAOC,IAAP,EAAaC,IAAb,EAAmBC,KAAnB,KAA6B;AAC3D,WACI;AACI,MAAA,SAAS,EAAE,yBAA0BA,KAAD,GAAU,iBAAV,GAA8B,EAAvD,CADf;AAEI,mBAAWF,IAAI,CAACG,IAAL,CAAU,GAAV,CAFf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGK,CAACD,KAAD,IAAU;AACP,MAAA,SAAS,EAAE,cACLD,IAAD,GAAS,iBAAT,GAA6B,kBADvB,CADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGP,oBAAC,eAAD;AAAiB,MAAA,SAAS,EAAC,MAA3B;AAAkC,MAAA,IAAI,EAAGA,IAAD,GAASP,OAAT,GAAmBD,MAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHO,CAHf,EASI,oBAAC,eAAD;AAAiB,MAAA,SAAS,EAAC,eAA3B;AAA2C,MAAA,IAAI,EAAED,QAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MATJ,EAUKO,IAVL,CADJ;AAcH,GAfgC,CAAjC;AAiBA,QAAMK,cAAc,GAAGnB,WAAW,CAAC,CAACc,IAAD,EAAOC,IAAP,KAAgB;AAC/C,WACI;AACI,MAAA,SAAS,EAAC,sBADd;AAEI,mBAAWA,IAAI,CAACG,IAAL,CAAU,GAAV,CAFf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGI,oBAAC,eAAD;AAAiB,MAAA,SAAS,EAAC,gBAA3B;AAA4C,MAAA,IAAI,EAAER,MAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ,EAISI,IAJT,CADJ;AAQH,GATiC,CAAlC;;AAWA,QAAMM,iBAAiB,GAAG,CAACN,IAAD,EAAOO,OAAP,EAAgBN,IAAhB,KAAyB;AAC/CX,IAAAA,OAAO,CAACiB,OAAD,CAAP;;AACA,QAAIA,OAAO,YAAYC,KAAvB,EAA8B;AAC1B,aAAOH,cAAc,CAACL,IAAD,EAAOC,IAAP,CAArB;AACH,KAFD,MAEO;AACH,UAAIM,OAAO,CAACE,KAAR,KAAkB,IAAtB,EAA4B;AACxB,eACI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACKV,aAAa,CAACC,IAAD,EAAOC,IAAP,EAAa,IAAb,CADlB,EAEKS,SAAS,CAACH,OAAD,EAAU,CAAC,GAAGN,IAAJ,EAAUD,IAAV,CAAV,CAFd,CADJ;AAMH,OAPD,MAOO;AACH,YAAIX,OAAO,CAACkB,OAAD,CAAX,EAAsB;AAClB,iBAAOR,aAAa,CAACC,IAAD,EAAOC,IAAP,EAAa,KAAb,EAAoB,IAApB,CAApB;AACH;;AACD,eAAOF,aAAa,CAACC,IAAD,EAAOC,IAAP,EAAa,KAAb,CAApB;AACH;AACJ;AACJ,GAnBD;;AAsBJ,QAAMS,SAAS,GAAG,CAACC,GAAD,EAAMV,IAAN,KAAe;AAC7B,WAAOW,MAAM,CAACC,OAAP,CAAeF,GAAf,EAAoBG,GAApB,CAAwB,CAAC,CAACd,IAAD,EAAOO,OAAP,CAAD,KAAqB;AAChD,UAAIP,IAAI,KAAK,OAAb,EAAsB;AAClB,eAAO,IAAP;AACH;;AACD,aACI;AAAI,QAAA,SAAS,EAAC,sBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKM,iBAAiB,CAACN,IAAD,EAAOO,OAAP,EAAgBN,IAAhB,CADtB,CADJ;AAKH,KATM,CAAP;AAUH,GAXD;;AAcA,SACI;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKS,SAAS,CAACZ,KAAK,CAACiB,IAAP,EAAa,CAAC,MAAD,CAAb,CADd,CADJ;AAKC,CAvED;;AAyEA,MAAMC,eAAe,GAAGC,KAAK,KAAK;AAC9BF,EAAAA,IAAI,EAAEE,KAAK,CAACC,QAAN,CAAeH;AADS,CAAL,CAA7B;;AAIA,eAAe3B,OAAO,CAAC4B,eAAD,CAAP,CAAyBnB,YAAzB,CAAf","sourcesContent":["import React, { useCallback, Fragment } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport \"./explorer-tree.scss\";\r\nimport { isEmpty, sortObj } from \"./../../../../../../utils/objects/helpers\";\r\nimport UUID from \"uuidjs\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faFolder, faPlus, faMinus, faFile } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst ExplorerTree = props => {\r\n\r\n    const getDirElement = useCallback((name, path, open, empty) => {\r\n        return (\r\n            <li\r\n                className={\"list-item item-dir \" + ((empty) ? \"item-dir--empty\" : \"\")}\r\n                data-path={path.join(\"/\")}>\r\n                {!empty && <button\r\n                    className={\"btn-dir \" +\r\n                        ((open) ? \"btn-dir--expand\" : \"btn-dir--colapse\")}>\r\n                    <FontAwesomeIcon className=\"icon\" icon={(open) ? faMinus : faPlus} />\r\n                </button>}\r\n\r\n                <FontAwesomeIcon className=\"icon icon-dir\" icon={faFolder} />\r\n                {name}\r\n            </li>\r\n        )\r\n    })\r\n\r\n    const getFileElement = useCallback((name, path) => {\r\n        return (\r\n            <li\r\n                className=\"list-item item-file \"\r\n                data-path={path.join(\"/\")}>\r\n                <FontAwesomeIcon className=\"icon icon-file\" icon={faFile} />\r\n                    {name}\r\n            </li>\r\n        );\r\n    })\r\n\r\n    const renderDirElements = (name, content, path) => {\r\n        sortObj(content);\r\n        if (content instanceof Array) {\r\n            return getFileElement(name, path)\r\n        } else {\r\n            if (content._open === true) {\r\n                return (\r\n                    <Fragment>\r\n                        {getDirElement(name, path, true)}\r\n                        {renderDir(content, [...path, name])}\r\n                    </Fragment>\r\n                )\r\n            } else {\r\n                if (isEmpty(content)) {\r\n                    return getDirElement(name, path, false, true)\r\n                }\r\n                return getDirElement(name, path, false)\r\n            }\r\n        } \r\n    }\r\n\r\n\r\nconst renderDir = (dir, path) => {\r\n    return Object.entries(dir).map(([name, content]) => {\r\n        if (name === \"_open\") {\r\n            return null;\r\n        }\r\n        return (\r\n            <ul className=\"list-dir dir-content\">\r\n                {renderDirElements(name, content, path)}\r\n            </ul>\r\n        )\r\n    })\r\n}\r\n\r\n\r\nreturn (\r\n    <div className=\"explorer-tree\">\r\n        {renderDir(props.root, ['root'])}\r\n    </div>\r\n)\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    root: state.playList.root,\r\n})\r\n\r\nexport default connect(mapStateToProps)(ExplorerTree);"]},"metadata":{},"sourceType":"module"}