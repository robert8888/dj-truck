{"ast":null,"code":"import { put, select, takeEvery } from \"redux-saga/effects\";\nimport { ACTIONS, loadRecords, pushLog, recReqFails } from \"../../actions\";\nimport { getApi } from \"./../../apis/apiProvider\";\nimport { Log } from \"./../../utils/logger/logger\";\nimport errorParser from \"./../../utils/serverErrorParser/errorParser\";\nexport default function* requestUserRecords() {\n  yield takeEvery(ACTIONS.RECS_REQ_RECS, handel);\n}\n\nconst getToken = state => state.user.token;\n\nfunction* handel(action) {\n  const token = yield select(getToken);\n\n  try {\n    var _result$data, _result$data$records, _result$data2, _result$data2$records;\n\n    const {\n      callQuery,\n      queries\n    } = getApi(\"UserAssets\");\n    const variables = { ...action.where\n    };\n    variables.pageSize = action.pageSize;\n    variables.page = action.page;\n    const query = queries.recordsQl;\n    const result = yield callQuery(query, token, variables);\n    const records = result === null || result === void 0 ? void 0 : (_result$data = result.data) === null || _result$data === void 0 ? void 0 : (_result$data$records = _result$data.records) === null || _result$data$records === void 0 ? void 0 : _result$data$records.records;\n    const countAll = result === null || result === void 0 ? void 0 : (_result$data2 = result.data) === null || _result$data2 === void 0 ? void 0 : (_result$data2$records = _result$data2.records) === null || _result$data2$records === void 0 ? void 0 : _result$data2$records.countAll;\n\n    if (result.errors) {\n      throw new Error(\"Server response contains errors\" + errorParser(response.errors));\n    }\n\n    if (!records) {\n      throw new Error(\"Can't load reacords from database, response don't contains records object\");\n    }\n\n    yield put(loadRecords(records, countAll));\n    yield put(pushLog(new Log(`Records successfully downloaded from database parameters: \\n ${JSON.stringify(variables)}`)));\n  } catch (error) {\n    yield put(recReqFails(error.message));\n    yield pushLog(Log.Error(['saga', 'records', 'request records'], \"Can't load records from database \" + error.message, error));\n  }\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/sagas/records/reqRecords.js"],"names":["put","select","takeEvery","ACTIONS","loadRecords","pushLog","recReqFails","getApi","Log","errorParser","requestUserRecords","RECS_REQ_RECS","handel","getToken","state","user","token","action","callQuery","queries","variables","where","pageSize","page","query","recordsQl","result","records","data","countAll","errors","Error","response","JSON","stringify","error","message"],"mappings":"AAAA,SAASA,GAAT,EAAcC,MAAd,EAAsBC,SAAtB,QAAuC,oBAAvC;AACA,SAASC,OAAT,EAAkBC,WAAlB,EAA+BC,OAA/B,EAAwCC,WAAxC,QAA2D,eAA3D;AACA,SAASC,MAAT,QAAuB,0BAAvB;AACA,SAASC,GAAT,QAAoB,6BAApB;AACA,OAAOC,WAAP,MAAwB,6CAAxB;AAEA,eAAe,UAAUC,kBAAV,GAA+B;AAE1C,QAAMR,SAAS,CAACC,OAAO,CAACQ,aAAT,EAAwBC,MAAxB,CAAf;AACH;;AAED,MAAMC,QAAQ,GAAGC,KAAK,IAAIA,KAAK,CAACC,IAAN,CAAWC,KAArC;;AAEA,UAAUJ,MAAV,CAAiBK,MAAjB,EAAyB;AACrB,QAAMD,KAAK,GAAG,MAAMf,MAAM,CAACY,QAAD,CAA1B;;AAEA,MAAI;AAAA;;AACA,UAAM;AAAEK,MAAAA,SAAF;AAAaC,MAAAA;AAAb,QAAyBZ,MAAM,CAAC,YAAD,CAArC;AACA,UAAMa,SAAS,GAAG,EAAC,GAAGH,MAAM,CAACI;AAAX,KAAlB;AACAD,IAAAA,SAAS,CAACE,QAAV,GAAqBL,MAAM,CAACK,QAA5B;AACAF,IAAAA,SAAS,CAACG,IAAV,GAAiBN,MAAM,CAACM,IAAxB;AACA,UAAMC,KAAK,GAAGL,OAAO,CAACM,SAAtB;AACA,UAAMC,MAAM,GAAG,MAAMR,SAAS,CAACM,KAAD,EAAQR,KAAR,EAAeI,SAAf,CAA9B;AACA,UAAMO,OAAO,GAAGD,MAAH,aAAGA,MAAH,uCAAGA,MAAM,CAAEE,IAAX,yEAAG,aAAcD,OAAjB,yDAAG,qBAAuBA,OAAvC;AACA,UAAME,QAAQ,GAAGH,MAAH,aAAGA,MAAH,wCAAGA,MAAM,CAAEE,IAAX,2EAAG,cAAcD,OAAjB,0DAAG,sBAAuBE,QAAxC;;AAEA,QAAGH,MAAM,CAACI,MAAV,EAAiB;AACb,YAAM,IAAIC,KAAJ,CAAU,oCAAsCtB,WAAW,CAACuB,QAAQ,CAACF,MAAV,CAA3D,CAAN;AACH;;AACD,QAAG,CAACH,OAAJ,EAAY;AACR,YAAM,IAAII,KAAJ,CAAU,2EAAV,CAAN;AACH;;AAED,UAAM/B,GAAG,CAACI,WAAW,CAACuB,OAAD,EAAUE,QAAV,CAAZ,CAAT;AAEA,UAAM7B,GAAG,CAACK,OAAO,CAAC,IAAIG,GAAJ,CAAS,gEAA+DyB,IAAI,CAACC,SAAL,CAAed,SAAf,CAA0B,EAAlG,CAAD,CAAR,CAAT;AACH,GApBD,CAoBE,OAAOe,KAAP,EAAc;AACZ,UAAMnC,GAAG,CAACM,WAAW,CAAC6B,KAAK,CAACC,OAAP,CAAZ,CAAT;AACA,UAAM/B,OAAO,CAACG,GAAG,CAACuB,KAAJ,CACV,CAAC,MAAD,EAAS,SAAT,EAAoB,iBAApB,CADU,EAEV,sCAAsCI,KAAK,CAACC,OAFlC,EAGVD,KAHU,CAAD,CAAb;AAKH;AACJ","sourcesContent":["import { put, select, takeEvery } from \"redux-saga/effects\";\r\nimport { ACTIONS, loadRecords, pushLog, recReqFails } from \"../../actions\";\r\nimport { getApi } from \"./../../apis/apiProvider\";\r\nimport { Log } from \"./../../utils/logger/logger\";\r\nimport errorParser from \"./../../utils/serverErrorParser/errorParser\";\r\n\r\nexport default function* requestUserRecords() {\r\n\r\n    yield takeEvery(ACTIONS.RECS_REQ_RECS, handel)\r\n}\r\n\r\nconst getToken = state => state.user.token\r\n\r\nfunction* handel(action) {\r\n    const token = yield select(getToken);\r\n\r\n    try {\r\n        const { callQuery, queries } = getApi(\"UserAssets\");\r\n        const variables = {...action.where};\r\n        variables.pageSize = action.pageSize;\r\n        variables.page = action.page;\r\n        const query = queries.recordsQl;\r\n        const result = yield callQuery(query, token, variables);\r\n        const records = result?.data?.records?.records;\r\n        const countAll = result?.data?.records?.countAll;\r\n\r\n        if(result.errors){\r\n            throw new Error(\"Server response contains errors\"  +  errorParser(response.errors));\r\n        }\r\n        if(!records){\r\n            throw new Error(\"Can't load reacords from database, response don't contains records object\")\r\n        }\r\n\r\n        yield put(loadRecords(records, countAll))\r\n\r\n        yield put(pushLog(new Log(`Records successfully downloaded from database parameters: \\n ${JSON.stringify(variables)}`)))\r\n    } catch (error) {\r\n        yield put(recReqFails(error.message))\r\n        yield pushLog(Log.Error(\r\n            ['saga', 'records', 'request records'],\r\n            \"Can't load records from database \" + error.message,\r\n            error\r\n        ))\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}