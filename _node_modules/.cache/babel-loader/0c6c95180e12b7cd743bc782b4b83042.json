{"ast":null,"code":"var ACTIONS={R_CREATE_RECORD_REQEST:\"Create recording metada\",R_START_RECORDING:\"Start prepering ws recorder conection\",R_END_RECORDING:\"Stop recording\",R_RECORDING:\"Is recording\",R_RECORDING_FAIL:\"indicates error during connections or creating objects\",R_ROLLBACk_REC:\"removing rec metada in resopones comporesing or sending to database error\",R_REC_FINAL_UPDATE:\"Set peaks array and time to recording\",R_PUSH_TO_TRACKLIST:'push track to end of current playlist',R_UPDATE_START:'update start time of track on tracklist - after start playling',R_UPDATE_END:'update end position of track after end playing or force load new'};export{ACTIONS as RECORDER_ACTIONS};export function createRecordinRequest(recName){return{type:ACTIONS.R_CREATE_RECORD_REQEST,recName:recName};}export function startRecording(recName,id,initTracklist){return{type:ACTIONS.R_START_RECORDING,recName:recName,id:id,initTracklist:initTracklist};}export function endRecording(){return{type:ACTIONS.R_END_RECORDING};}export function recording(){return{type:ACTIONS.R_RECORDING};}export function recordingRquestFail(){return{type:ACTIONS.R_RECORDING_FAIL};}export function recordFinalUpdate(id,peaks,duration,fileSize){return{type:ACTIONS.R_REC_FINAL_UPDATE,id:id,peaks:peaks,duration:duration,fileSize:fileSize};}export function roolbackRecord(id){return{type:ACTIONS.R_ROLLBACk_REC,id:id};}export function pushToTracklist(track){return{type:ACTIONS.R_PUSH_TO_TRACKLIST,track:track};}export function updateStartTime(id){return{type:ACTIONS.R_UPDATE_START,id:id};}export function updateEndTime(id){return{type:ACTIONS.R_UPDATE_END,id:id};}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/actions/console/recorder.js"],"names":["ACTIONS","R_CREATE_RECORD_REQEST","R_START_RECORDING","R_END_RECORDING","R_RECORDING","R_RECORDING_FAIL","R_ROLLBACk_REC","R_REC_FINAL_UPDATE","R_PUSH_TO_TRACKLIST","R_UPDATE_START","R_UPDATE_END","RECORDER_ACTIONS","createRecordinRequest","recName","type","startRecording","id","initTracklist","endRecording","recording","recordingRquestFail","recordFinalUpdate","peaks","duration","fileSize","roolbackRecord","pushToTracklist","track","updateStartTime","updateEndTime"],"mappings":"AAAA,GAAMA,CAAAA,OAAO,CAAG,CACZC,sBAAsB,CAAG,yBADb,CAEZC,iBAAiB,CAAG,uCAFR,CAGZC,eAAe,CAAE,gBAHL,CAIZC,WAAW,CAAE,cAJD,CAKZC,gBAAgB,CAAE,wDALN,CAMZC,cAAc,CAAE,2EANJ,CAQZC,kBAAkB,CAAG,uCART,CAWZC,mBAAmB,CAAG,uCAXV,CAYZC,cAAc,CAAE,gEAZJ,CAaZC,YAAY,CAAE,kEAbF,CAAhB,CAeA,OAAQV,OAAO,GAAIW,CAAAA,gBAAnB,EAEA,MAAO,SAASC,CAAAA,qBAAT,CAA+BC,OAA/B,CAAuC,CAC1C,MAAO,CAAEC,IAAI,CAAEd,OAAO,CAACC,sBAAhB,CAAwCY,OAAO,CAAPA,OAAxC,CAAP,CACH,CAED,MAAO,SAASE,CAAAA,cAAT,CAAwBF,OAAxB,CAAiCG,EAAjC,CAAqCC,aAArC,CAAmD,CACtD,MAAO,CAAEH,IAAI,CAAEd,OAAO,CAACE,iBAAhB,CAAmCW,OAAO,CAAPA,OAAnC,CAA4CG,EAAE,CAAFA,EAA5C,CAAgDC,aAAa,CAAbA,aAAhD,CAAP,CACH,CAED,MAAO,SAASC,CAAAA,YAAT,EAAuB,CAC1B,MAAO,CAAEJ,IAAI,CAAEd,OAAO,CAACG,eAAhB,CAAP,CACH,CAED,MAAO,SAASgB,CAAAA,SAAT,EAAoB,CACvB,MAAO,CAACL,IAAI,CAAEd,OAAO,CAACI,WAAf,CAAP,CACH,CAED,MAAO,SAASgB,CAAAA,mBAAT,EAA8B,CACjC,MAAO,CAACN,IAAI,CAAEd,OAAO,CAACK,gBAAf,CAAP,CACH,CAED,MAAO,SAASgB,CAAAA,iBAAT,CAA2BL,EAA3B,CAA+BM,KAA/B,CAAsCC,QAAtC,CAAgDC,QAAhD,CAAyD,CAC5D,MAAO,CAACV,IAAI,CAAEd,OAAO,CAACO,kBAAf,CAAmCS,EAAE,CAAFA,EAAnC,CAAuCM,KAAK,CAALA,KAAvC,CAA8CC,QAAQ,CAARA,QAA9C,CAAwDC,QAAQ,CAARA,QAAxD,CAAP,CACH,CAED,MAAO,SAASC,CAAAA,cAAT,CAAwBT,EAAxB,CAA2B,CAC9B,MAAO,CAACF,IAAI,CAAEd,OAAO,CAACM,cAAf,CAA+BU,EAAE,CAAFA,EAA/B,CAAP,CACH,CAGD,MAAO,SAASU,CAAAA,eAAT,CAAyBC,KAAzB,CAA+B,CAClC,MAAO,CAACb,IAAI,CAAEd,OAAO,CAACQ,mBAAf,CAAoCmB,KAAK,CAALA,KAApC,CAAP,CACH,CAED,MAAO,SAASC,CAAAA,eAAT,CAAyBZ,EAAzB,CAA4B,CAC/B,MAAO,CAACF,IAAI,CAAEd,OAAO,CAACS,cAAf,CAA+BO,EAAE,CAAFA,EAA/B,CAAP,CACH,CAED,MAAO,SAASa,CAAAA,aAAT,CAAuBb,EAAvB,CAA0B,CAC7B,MAAO,CAACF,IAAI,CAAEd,OAAO,CAACU,YAAf,CAA6BM,EAAE,CAAFA,EAA7B,CAAP,CACH","sourcesContent":["const ACTIONS = {\r\n    R_CREATE_RECORD_REQEST : \"Create recording metada\",\r\n    R_START_RECORDING : \"Start prepering ws recorder conection\",\r\n    R_END_RECORDING: \"Stop recording\",\r\n    R_RECORDING: \"Is recording\",\r\n    R_RECORDING_FAIL: \"indicates error during connections or creating objects\",\r\n    R_ROLLBACk_REC: \"removing rec metada in resopones comporesing or sending to database error\",\r\n\r\n    R_REC_FINAL_UPDATE : \"Set peaks array and time to recording\",\r\n\r\n\r\n    R_PUSH_TO_TRACKLIST:  'push track to end of current playlist',\r\n    R_UPDATE_START: 'update start time of track on tracklist - after start playling',\r\n    R_UPDATE_END: 'update end position of track after end playing or force load new',\r\n}\r\nexport {ACTIONS as RECORDER_ACTIONS};\r\n\r\nexport function createRecordinRequest(recName){\r\n    return { type: ACTIONS.R_CREATE_RECORD_REQEST, recName }\r\n}\r\n\r\nexport function startRecording(recName, id, initTracklist){\r\n    return { type: ACTIONS.R_START_RECORDING, recName, id, initTracklist }\r\n}\r\n\r\nexport function endRecording(){\r\n    return { type: ACTIONS.R_END_RECORDING}\r\n}\r\n\r\nexport function recording(){\r\n    return {type: ACTIONS.R_RECORDING}\r\n}\r\n\r\nexport function recordingRquestFail(){\r\n    return {type: ACTIONS.R_RECORDING_FAIL}\r\n}\r\n\r\nexport function recordFinalUpdate(id, peaks, duration, fileSize){\r\n    return {type: ACTIONS.R_REC_FINAL_UPDATE, id, peaks, duration, fileSize}\r\n}\r\n\r\nexport function roolbackRecord(id){\r\n    return {type: ACTIONS.R_ROLLBACk_REC, id}\r\n}\r\n\r\n\r\nexport function pushToTracklist(track){\r\n    return {type: ACTIONS.R_PUSH_TO_TRACKLIST, track}\r\n}\r\n\r\nexport function updateStartTime(id){\r\n    return {type: ACTIONS.R_UPDATE_START, id}\r\n}\r\n\r\nexport function updateEndTime(id){\r\n    return {type: ACTIONS.R_UPDATE_END, id}\r\n}\r\n"]},"metadata":{},"sourceType":"module"}