{"ast":null,"code":"import{formatRelative as DateFormatRelative,toDate}from\"date-fns\";import*as locales from'date-fns/locale';import{useCallback,useMemo}from\"react\";export function useFormatRelative(){var timezoneOffset=useMemo(function(){return new Date().getTimezoneOffset()*1000;},[]);var getLocal=useCallback(function(){var lang=\"\";if(navigator.languages!==undefined){lang=navigator.languages[0];}else{lang=navigator.language;}lang=lang.substr(0,2);return locales[lang];},[]);var formatRelative=useCallback(function(timestamp){var _ref=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{},timezone=_ref.timezone,local=_ref.local;var time=timezone?timestamp-timezoneOffset:timestamp;var opt=local?{locale:getLocal()}:{};var now=new Date();var formated=\"\";try{formated=DateFormatRelative(toDate(time),now,opt);}catch(err){console.log(\"Can't format time in relative way\");}return formated;},[timezoneOffset,getLocal]);return[formatRelative];}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/pages/common/Hooks/useFormatDate.js"],"names":["formatRelative","DateFormatRelative","toDate","locales","useCallback","useMemo","useFormatRelative","timezoneOffset","Date","getTimezoneOffset","getLocal","lang","navigator","languages","undefined","language","substr","timestamp","timezone","local","time","opt","locale","now","formated","err","console","log"],"mappings":"AAAA,OAASA,cAAc,GAAIC,CAAAA,kBAA3B,CAA+CC,MAA/C,KAA6D,UAA7D,CACA,MAAO,GAAKC,CAAAA,OAAZ,KAAyB,iBAAzB,CACA,OAASC,WAAT,CAAsBC,OAAtB,KAAqC,OAArC,CAEA,MAAO,SAASC,CAAAA,iBAAT,EAA6B,CAEhC,GAAMC,CAAAA,cAAc,CAAGF,OAAO,CAAC,UAAM,CACjC,MAAO,IAAIG,CAAAA,IAAJ,GAAWC,iBAAX,GAAiC,IAAxC,CACH,CAF6B,CAE3B,EAF2B,CAA9B,CAIA,GAAMC,CAAAA,QAAQ,CAAGN,WAAW,CAAC,UAAM,CAC/B,GAAIO,CAAAA,IAAI,CAAG,EAAX,CAEA,GAAIC,SAAS,CAACC,SAAV,GAAwBC,SAA5B,CAAsC,CAClCH,IAAI,CAAIC,SAAS,CAACC,SAAV,CAAoB,CAApB,CAAR,CACH,CAFD,IAGI,CACAF,IAAI,CAAIC,SAAS,CAACG,QAAlB,CACH,CAEDJ,IAAI,CAAGA,IAAI,CAACK,MAAL,CAAY,CAAZ,CAAc,CAAd,CAAP,CACA,MAAOb,CAAAA,OAAO,CAACQ,IAAD,CAAd,CACH,CAZ2B,CAYzB,EAZyB,CAA5B,CAcA,GAAMX,CAAAA,cAAc,CAAGI,WAAW,CAAC,SAACa,SAAD,CAAyC,oEAAP,EAAO,CAA3BC,QAA2B,MAA3BA,QAA2B,CAAjBC,KAAiB,MAAjBA,KAAiB,CACxE,GAAMC,CAAAA,IAAI,CAAGF,QAAQ,CAAGD,SAAS,CAAGV,cAAf,CAAgCU,SAArD,CACA,GAAMI,CAAAA,GAAG,CAAGF,KAAK,CAAG,CAACG,MAAM,CAAEZ,QAAQ,EAAjB,CAAH,CAA0B,EAA3C,CACA,GAAMa,CAAAA,GAAG,CAAG,GAAIf,CAAAA,IAAJ,EAAZ,CACA,GAAIgB,CAAAA,QAAQ,CAAG,EAAf,CACA,GAAG,CACCA,QAAQ,CAAGvB,kBAAkB,CAACC,MAAM,CAACkB,IAAD,CAAP,CAAeG,GAAf,CAAqBF,GAArB,CAA7B,CACH,CAAC,MAAMI,GAAN,CAAU,CACRC,OAAO,CAACC,GAAR,CAAY,mCAAZ,EACH,CACD,MAAOH,CAAAA,QAAP,CACH,CAXiC,CAWhC,CAACjB,cAAD,CAAiBG,QAAjB,CAXgC,CAAlC,CAaA,MAAO,CAACV,cAAD,CAAP,CACH","sourcesContent":["import { formatRelative as DateFormatRelative, toDate } from \"date-fns\";\r\nimport * as locales from 'date-fns/locale';\r\nimport { useCallback, useMemo } from \"react\";\r\n\r\nexport function useFormatRelative() {\r\n\r\n    const timezoneOffset = useMemo(() => {\r\n        return new Date().getTimezoneOffset() * 1000;\r\n    }, [])\r\n\r\n    const getLocal = useCallback(() => {\r\n        let lang = \"\";\r\n\r\n        if (navigator.languages !== undefined){\r\n            lang =  navigator.languages[0];\r\n        }\r\n        else{\r\n            lang =  navigator.language;\r\n        }\r\n        \r\n        lang = lang.substr(0,2);\r\n        return locales[lang];\r\n    }, [])\r\n\r\n    const formatRelative = useCallback((timestamp, { timezone, local } = {}) => {\r\n        const time = timezone ? timestamp - timezoneOffset : timestamp;\r\n        const opt = local ? {locale: getLocal()} : {};\r\n        const now = new Date();\r\n        let formated = \"\";\r\n        try{\r\n            formated = DateFormatRelative(toDate(time), now , opt);\r\n        } catch(err){\r\n            console.log(\"Can't format time in relative way\")\r\n        }\r\n        return formated;\r\n    },[timezoneOffset, getLocal])\r\n\r\n    return [formatRelative]\r\n}"]},"metadata":{},"sourceType":"module"}