{"ast":null,"code":"import store from \"./../../../store\";\nexport default class Mixer {\n  constructor(channels) {\n    this.config = store.getState().configuration.mixer;\n    this.channels = channels;\n    this.audioNodes = {\n      channels: {}\n    };\n\n    for (let channelName of this.channels.getChannelNames()) {\n      this.audioNodes.channels = { ...this.audioNodes.channels,\n        [channelName]: {}\n      };\n    }\n  }\n\n  setUpAudioNodes(channelName) {\n    let audioCtx = this.channels.getChannel(channelName).backend.ac;\n    this.audioNodes.channels[channelName] = {\n      gainNode: audioCtx.createGain(),\n      faderVolumeNode: audioCtx.createGain(),\n      eqHiFilterNode: audioCtx.createBiquadFilter(),\n      eqMidFilterNode: audioCtx.createBiquadFilter(),\n      eqLowFilterNode: audioCtx.createBiquadFilter()\n    };\n    const channel = this.audioNodes.channels[channelName]; //\n\n    channel.eqLowFilterNode.type = \"lowshelf\";\n    channel.eqLowFilterNode.frequency.setValueAtTime(this.config.low.frequency, audioCtx.currentTime);\n    channel.eqHiFilterNode.type = \"highshelf\";\n    channel.eqHiFilterNode.frequency.setValueAtTime(this.config.hi.frequency, audioCtx.currentTime);\n    channel.eqMidFilterNode.type = \"peaking\";\n    channel.eqMidFilterNode.frequency.setValueAtTime(this.config.mid.frequency, audioCtx.currentTime);\n    channel.eqMidFilterNode.Q.setValueAtTime(this.config.mid.Q, audioCtx.currentTime);\n    this.channels.getChannel(channelName).backend.setFilters([channel.eqLowFilterNode, channel.eqMidFilterNode, channel.eqHiFilterNode, channel.gainNode, channel.faderVolumeNode]);\n    console.log(this.channels.getChannel(channelName).getFilters());\n  }\n\n  setGainValue(channelName, knobValue, nodeName) {\n    let gain = 1 + knobValue / 100;\n    let audioCtx = this.channels.getChannel(channelName).backend.ac;\n    let channel = this.audioNodes.channels[channelName];\n    channel[nodeName].gain.setValueAtTime(parseFloat(gain), audioCtx.currentTime);\n  }\n\n  setFilterValue(channelName, knobValue, nodeName) {\n    let audioCtx = this.channels.getChannel(channelName).backend.ac;\n    let channel = this.audioNodes.channels[channelName];\n    channel[nodeName].gain.setValueAtTime(knobValue, audioCtx.currentTime);\n  }\n\n  setGain(channelName, knobValue) {\n    this.setGainValue(channelName, knobValue, 'gainNode');\n  }\n\n  setEqHigh(channelName, knobValue) {\n    this.setFilterValue(channelName, knobValue, 'eqHiFilterNode');\n  }\n\n  setEqMid(channelName, knobValue) {\n    this.setFilterValue(channelName, knobValue, 'eqMidFilterNode');\n  }\n\n  setEqLow(channelName, knobValue) {\n    this.setFilterValue(channelName, knobValue, 'eqLowFilterNode');\n  }\n\n  setFader(value) {\n    //in procetn from -50%  to + 50%\n    let faderVolumeNodeA = this.audioNodes.channels[\"A\"].faderVolumeNode;\n    let faderVolumeNodeB = this.audioNodes.channels[\"B\"].faderVolumeNode;\n    let audioCtxA = this.channels.getChannel(\"A\").backend.ac;\n    let audioCtxB = this.channels.getChannel(\"B\").backend.ac;\n\n    if (!faderVolumeNodeA || !faderVolumeNodeB || !audioCtxA || !audioCtxB) {\n      throw new Error(\"Fased value not set checkout funtion setFader in mixer object\");\n    }\n\n    let percent = (value + 50) / 100;\n    let volA = Math.cos(percent * 0.5 * Math.PI);\n    let volB = Math.cos((1 - percent) * 0.5 * Math.PI);\n    faderVolumeNodeA.gain.setTargetAtTime(volA, audioCtxA.currentTime);\n    faderVolumeNodeB.gain.setTargetAtTime(volB, audioCtxB.currentTime);\n    /*\r\n            channelA.setVolume(volA);\r\n            channelB.setVolume(volB);*/\n  }\n\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/core/console/mixer/mixer.js"],"names":["store","Mixer","constructor","channels","config","getState","configuration","mixer","audioNodes","channelName","getChannelNames","setUpAudioNodes","audioCtx","getChannel","backend","ac","gainNode","createGain","faderVolumeNode","eqHiFilterNode","createBiquadFilter","eqMidFilterNode","eqLowFilterNode","channel","type","frequency","setValueAtTime","low","currentTime","hi","mid","Q","setFilters","console","log","getFilters","setGainValue","knobValue","nodeName","gain","parseFloat","setFilterValue","setGain","setEqHigh","setEqMid","setEqLow","setFader","value","faderVolumeNodeA","faderVolumeNodeB","audioCtxA","audioCtxB","Error","percent","volA","Math","cos","PI","volB","setTargetAtTime"],"mappings":"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","sourcesContent":["import store from \"./../../../store\";\r\n\r\n\r\nexport default class Mixer{\r\n    constructor(channels){\r\n        this.config = store.getState().configuration.mixer;\r\n        this.channels = channels;\r\n        this.audioNodes = {\r\n            channels : {\r\n            }\r\n        }\r\n\r\n        for(let channelName of this.channels.getChannelNames()){\r\n            this.audioNodes.channels = { \r\n                ...this.audioNodes.channels,\r\n                [channelName] : {},\r\n            }\r\n        }\r\n    }\r\n\r\n    setUpAudioNodes(channelName){\r\n        let audioCtx = this.channels.getChannel(channelName).backend.ac;\r\n\r\n        this.audioNodes.channels[channelName] = {\r\n            gainNode : audioCtx.createGain(),\r\n            faderVolumeNode : audioCtx.createGain(),\r\n            eqHiFilterNode : audioCtx.createBiquadFilter(),\r\n            eqMidFilterNode : audioCtx.createBiquadFilter(),\r\n            eqLowFilterNode : audioCtx.createBiquadFilter(),\r\n        }\r\n        const channel = this.audioNodes.channels[channelName];\r\n        //\r\n        channel.eqLowFilterNode.type = \"lowshelf\";\r\n        channel.eqLowFilterNode.frequency.setValueAtTime(this.config.low.frequency, audioCtx.currentTime);\r\n\r\n        channel.eqHiFilterNode.type = \"highshelf\";\r\n        channel.eqHiFilterNode.frequency.setValueAtTime(this.config.hi.frequency, audioCtx.currentTime);\r\n\r\n        channel.eqMidFilterNode.type = \"peaking\";\r\n        channel.eqMidFilterNode.frequency.setValueAtTime(this.config.mid.frequency, audioCtx.currentTime);\r\n        channel.eqMidFilterNode.Q.setValueAtTime(this.config.mid.Q, audioCtx.currentTime);  \r\n\r\n        this.channels.getChannel(channelName).backend.setFilters([\r\n            channel.eqLowFilterNode, \r\n            channel.eqMidFilterNode, \r\n            channel.eqHiFilterNode, \r\n            channel.gainNode,\r\n            channel.faderVolumeNode ])\r\n\r\n        console.log(this.channels.getChannel(channelName).getFilters());\r\n    }\r\n\r\n    setGainValue(channelName, knobValue, nodeName){\r\n        let gain = 1 + knobValue / 100 ;\r\n        let audioCtx = this.channels.getChannel(channelName).backend.ac;\r\n\r\n        let channel = this.audioNodes.channels[channelName];\r\n        channel[nodeName].gain.setValueAtTime( parseFloat(gain) , audioCtx.currentTime);\r\n    }\r\n\r\n    setFilterValue(channelName, knobValue, nodeName){\r\n        let audioCtx = this.channels.getChannel(channelName).backend.ac;\r\n\r\n        let channel = this.audioNodes.channels[channelName];\r\n        channel[nodeName].gain.setValueAtTime( knobValue , audioCtx.currentTime);\r\n    }\r\n\r\n\r\n    setGain(channelName, knobValue){\r\n        this.setGainValue(channelName, knobValue, 'gainNode');\r\n    }\r\n\r\n    setEqHigh(channelName, knobValue){\r\n        this.setFilterValue(channelName, knobValue, 'eqHiFilterNode');\r\n    }\r\n\r\n    setEqMid(channelName, knobValue){\r\n        this.setFilterValue(channelName, knobValue, 'eqMidFilterNode');\r\n    }\r\n\r\n    setEqLow(channelName, knobValue){\r\n        this.setFilterValue(channelName, knobValue, 'eqLowFilterNode');\r\n    }\r\n\r\n    setFader(value){//in procetn from -50%  to + 50%\r\n        let faderVolumeNodeA = this.audioNodes.channels[\"A\"].faderVolumeNode;\r\n        let faderVolumeNodeB = this.audioNodes.channels[\"B\"].faderVolumeNode;\r\n        let audioCtxA = this.channels.getChannel(\"A\").backend.ac;\r\n        let audioCtxB = this.channels.getChannel(\"B\").backend.ac;\r\n        if(!faderVolumeNodeA || !faderVolumeNodeB || !audioCtxA || !audioCtxB){\r\n            throw new Error(\"Fased value not set checkout funtion setFader in mixer object\");\r\n        }\r\n\r\n        let percent = (value + 50)/100;\r\n        let volA = Math.cos(percent * 0.5 * Math.PI);\r\n        let volB = Math.cos((1 - percent) * 0.5 * Math.PI);\r\n\r\n        faderVolumeNodeA.gain.setTargetAtTime(volA, audioCtxA.currentTime);\r\n        faderVolumeNodeB.gain.setTargetAtTime(volB, audioCtxB.currentTime);\r\n/*\r\n        channelA.setVolume(volA);\r\n        channelB.setVolume(volB);*/\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}