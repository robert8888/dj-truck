{"ast":null,"code":"export const createIsSupportedPromise = async (cacheTestResult, testAudioBufferCopyChannelMethodsSubarraySupport, testAudioContextCloseMethodSupport, testAudioContextDecodeAudioDataMethodTypeErrorSupport, testAudioContextOptionsSupport, testAudioNodeConnectMethodSupport, testAudioWorkletProcessorNoOutputsSupport, testChannelMergerNodeChannelCountSupport, testConstantSourceNodeAccurateSchedulingSupport, testConvolverNodeBufferReassignabilitySupport, testIsSecureContextSupport, testMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport, testStereoPannerNodeDefaultValueSupport, testTransferablesSupport) => {\n  if (cacheTestResult(testAudioBufferCopyChannelMethodsSubarraySupport, testAudioBufferCopyChannelMethodsSubarraySupport) && cacheTestResult(testAudioContextCloseMethodSupport, testAudioContextCloseMethodSupport) && cacheTestResult(testAudioContextOptionsSupport, testAudioContextOptionsSupport) && cacheTestResult(testAudioNodeConnectMethodSupport, testAudioNodeConnectMethodSupport) && cacheTestResult(testChannelMergerNodeChannelCountSupport, testChannelMergerNodeChannelCountSupport) && cacheTestResult(testConstantSourceNodeAccurateSchedulingSupport, testConstantSourceNodeAccurateSchedulingSupport) && cacheTestResult(testConvolverNodeBufferReassignabilitySupport, testConvolverNodeBufferReassignabilitySupport) && cacheTestResult(testIsSecureContextSupport, testIsSecureContextSupport) && cacheTestResult(testMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport, testMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport)) {\n    const results = await Promise.all([cacheTestResult(testAudioContextDecodeAudioDataMethodTypeErrorSupport, testAudioContextDecodeAudioDataMethodTypeErrorSupport), cacheTestResult(testAudioWorkletProcessorNoOutputsSupport, testAudioWorkletProcessorNoOutputsSupport), cacheTestResult(testStereoPannerNodeDefaultValueSupport, testStereoPannerNodeDefaultValueSupport), cacheTestResult(testTransferablesSupport, testTransferablesSupport)]);\n    return results.every(result => result);\n  }\n\n  return false;\n};","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/node_modules/standardized-audio-context/build/es2019/factories/is-supported-promise.js"],"names":["createIsSupportedPromise","cacheTestResult","testAudioBufferCopyChannelMethodsSubarraySupport","testAudioContextCloseMethodSupport","testAudioContextDecodeAudioDataMethodTypeErrorSupport","testAudioContextOptionsSupport","testAudioNodeConnectMethodSupport","testAudioWorkletProcessorNoOutputsSupport","testChannelMergerNodeChannelCountSupport","testConstantSourceNodeAccurateSchedulingSupport","testConvolverNodeBufferReassignabilitySupport","testIsSecureContextSupport","testMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport","testStereoPannerNodeDefaultValueSupport","testTransferablesSupport","results","Promise","all","every","result"],"mappings":"AAAA,OAAO,MAAMA,wBAAwB,GAAG,OAAOC,eAAP,EAAwBC,gDAAxB,EAA0EC,kCAA1E,EAA8GC,qDAA9G,EAAqKC,8BAArK,EAAqMC,iCAArM,EAAwOC,yCAAxO,EAAmRC,wCAAnR,EAA6TC,+CAA7T,EAA8WC,6CAA9W,EAA6ZC,0BAA7Z,EAAybC,iEAAzb,EAA4fC,uCAA5f,EAAqiBC,wBAAriB,KAAkkB;AACtmB,MAAIb,eAAe,CAACC,gDAAD,EAAmDA,gDAAnD,CAAf,IACGD,eAAe,CAACE,kCAAD,EAAqCA,kCAArC,CADlB,IAEGF,eAAe,CAACI,8BAAD,EAAiCA,8BAAjC,CAFlB,IAGGJ,eAAe,CAACK,iCAAD,EAAoCA,iCAApC,CAHlB,IAIGL,eAAe,CAACO,wCAAD,EAA2CA,wCAA3C,CAJlB,IAKGP,eAAe,CAACQ,+CAAD,EAAkDA,+CAAlD,CALlB,IAMGR,eAAe,CAACS,6CAAD,EAAgDA,6CAAhD,CANlB,IAOGT,eAAe,CAACU,0BAAD,EAA6BA,0BAA7B,CAPlB,IAQGV,eAAe,CAACW,iEAAD,EAAoEA,iEAApE,CARtB,EAQ8J;AAC1J,UAAMG,OAAO,GAAG,MAAMC,OAAO,CACxBC,GADiB,CACb,CACLhB,eAAe,CAACG,qDAAD,EAAwDA,qDAAxD,CADV,EAELH,eAAe,CAACM,yCAAD,EAA4CA,yCAA5C,CAFV,EAGLN,eAAe,CAACY,uCAAD,EAA0CA,uCAA1C,CAHV,EAILZ,eAAe,CAACa,wBAAD,EAA2BA,wBAA3B,CAJV,CADa,CAAtB;AAOA,WAAOC,OAAO,CAACG,KAAR,CAAeC,MAAD,IAAYA,MAA1B,CAAP;AACH;;AACD,SAAO,KAAP;AACH,CApBM","sourcesContent":["export const createIsSupportedPromise = async (cacheTestResult, testAudioBufferCopyChannelMethodsSubarraySupport, testAudioContextCloseMethodSupport, testAudioContextDecodeAudioDataMethodTypeErrorSupport, testAudioContextOptionsSupport, testAudioNodeConnectMethodSupport, testAudioWorkletProcessorNoOutputsSupport, testChannelMergerNodeChannelCountSupport, testConstantSourceNodeAccurateSchedulingSupport, testConvolverNodeBufferReassignabilitySupport, testIsSecureContextSupport, testMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport, testStereoPannerNodeDefaultValueSupport, testTransferablesSupport) => {\n    if (cacheTestResult(testAudioBufferCopyChannelMethodsSubarraySupport, testAudioBufferCopyChannelMethodsSubarraySupport)\n        && cacheTestResult(testAudioContextCloseMethodSupport, testAudioContextCloseMethodSupport)\n        && cacheTestResult(testAudioContextOptionsSupport, testAudioContextOptionsSupport)\n        && cacheTestResult(testAudioNodeConnectMethodSupport, testAudioNodeConnectMethodSupport)\n        && cacheTestResult(testChannelMergerNodeChannelCountSupport, testChannelMergerNodeChannelCountSupport)\n        && cacheTestResult(testConstantSourceNodeAccurateSchedulingSupport, testConstantSourceNodeAccurateSchedulingSupport)\n        && cacheTestResult(testConvolverNodeBufferReassignabilitySupport, testConvolverNodeBufferReassignabilitySupport)\n        && cacheTestResult(testIsSecureContextSupport, testIsSecureContextSupport)\n        && cacheTestResult(testMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport, testMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport)) {\n        const results = await Promise\n            .all([\n            cacheTestResult(testAudioContextDecodeAudioDataMethodTypeErrorSupport, testAudioContextDecodeAudioDataMethodTypeErrorSupport),\n            cacheTestResult(testAudioWorkletProcessorNoOutputsSupport, testAudioWorkletProcessorNoOutputsSupport),\n            cacheTestResult(testStereoPannerNodeDefaultValueSupport, testStereoPannerNodeDefaultValueSupport),\n            cacheTestResult(testTransferablesSupport, testTransferablesSupport)\n        ]);\n        return results.every((result) => result);\n    }\n    return false;\n};\n//# sourceMappingURL=/build/es2019/factories/is-supported-promise.js.map"]},"metadata":{},"sourceType":"module"}