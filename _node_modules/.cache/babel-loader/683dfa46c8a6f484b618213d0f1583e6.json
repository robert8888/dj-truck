{"ast":null,"code":"import { ACTIONS, loadRecords, recReqFails } from \"../../actions\";\nimport { takeEvery, select, put } from \"redux-saga/effects\";\nimport { getApi } from \"./../../apis/apiProvider\";\nexport default function* requestUserRecords() {\n  console.log(\"handle request\");\n  yield takeEvery(ACTIONS.RECS_REQ_RECS, handel);\n}\n\nconst getToken = state => state.user.token;\n\nfunction* handel(action) {\n  const token = yield select(getToken);\n\n  try {\n    var _result$data, _result$data$records, _result$data2, _result$data2$records;\n\n    const {\n      callQuery,\n      queries\n    } = getApi(\"UserAssets\");\n    const vars = { ...action.where\n    };\n    vars.pageSize = action.pageSize;\n    vars.page = action.page;\n    console.log(\"var\", vars);\n    const query = queries.recordsQl;\n    const result = yield callQuery(query, token, vars);\n    console.log(result);\n    const records = result === null || result === void 0 ? void 0 : (_result$data = result.data) === null || _result$data === void 0 ? void 0 : (_result$data$records = _result$data.records) === null || _result$data$records === void 0 ? void 0 : _result$data$records.records;\n    const countAll = result === null || result === void 0 ? void 0 : (_result$data2 = result.data) === null || _result$data2 === void 0 ? void 0 : (_result$data2$records = _result$data2.records) === null || _result$data2$records === void 0 ? void 0 : _result$data2$records.countAll;\n\n    if (!result.errors && records) {\n      yield put(loadRecords(records, countAll));\n    } else {\n      throw new Error(\"Can't load reacords from database\");\n    }\n  } catch (e) {\n    yield put(recReqFails(e.message));\n  }\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/sagas/records/reqRecords.js"],"names":["ACTIONS","loadRecords","recReqFails","takeEvery","select","put","getApi","requestUserRecords","console","log","RECS_REQ_RECS","handel","getToken","state","user","token","action","callQuery","queries","vars","where","pageSize","page","query","recordsQl","result","records","data","countAll","errors","Error","e","message"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,WAAlB,EAA+BC,WAA/B,QAAkD,eAAlD;AACA,SAASC,SAAT,EAAoBC,MAApB,EAA4BC,GAA5B,QAAwC,oBAAxC;AACA,SAASC,MAAT,QAAuB,0BAAvB;AAEA,eAAe,UAAUC,kBAAV,GAA+B;AAC1CC,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACA,QAAMN,SAAS,CAACH,OAAO,CAACU,aAAT,EAAwBC,MAAxB,CAAf;AACH;;AAED,MAAMC,QAAQ,GAAGC,KAAK,IAAIA,KAAK,CAACC,IAAN,CAAWC,KAArC;;AAEA,UAAUJ,MAAV,CAAiBK,MAAjB,EAAyB;AACrB,QAAMD,KAAK,GAAG,MAAMX,MAAM,CAACQ,QAAD,CAA1B;;AAEA,MAAI;AAAA;;AACA,UAAM;AAAEK,MAAAA,SAAF;AAAaC,MAAAA;AAAb,QAAyBZ,MAAM,CAAC,YAAD,CAArC;AACA,UAAMa,IAAI,GAAG,EAAC,GAAGH,MAAM,CAACI;AAAX,KAAb;AACAD,IAAAA,IAAI,CAACE,QAAL,GAAgBL,MAAM,CAACK,QAAvB;AACAF,IAAAA,IAAI,CAACG,IAAL,GAAYN,MAAM,CAACM,IAAnB;AAEAd,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBU,IAAnB;AACA,UAAMI,KAAK,GAAGL,OAAO,CAACM,SAAtB;AACA,UAAMC,MAAM,GAAG,MAAMR,SAAS,CAACM,KAAD,EAAQR,KAAR,EAAeI,IAAf,CAA9B;AACAX,IAAAA,OAAO,CAACC,GAAR,CAAYgB,MAAZ;AACA,UAAMC,OAAO,GAAGD,MAAH,aAAGA,MAAH,uCAAGA,MAAM,CAAEE,IAAX,yEAAG,aAAcD,OAAjB,yDAAG,qBAAuBA,OAAvC;AACA,UAAME,QAAQ,GAAGH,MAAH,aAAGA,MAAH,wCAAGA,MAAM,CAAEE,IAAX,2EAAG,cAAcD,OAAjB,0DAAG,sBAAuBE,QAAxC;;AACA,QAAI,CAACH,MAAM,CAACI,MAAR,IAAkBH,OAAtB,EAA+B;AAC3B,YAAMrB,GAAG,CAACJ,WAAW,CAACyB,OAAD,EAAUE,QAAV,CAAZ,CAAT;AACH,KAFD,MAEO;AACH,YAAM,IAAIE,KAAJ,CAAU,mCAAV,CAAN;AACH;AACJ,GAjBD,CAiBE,OAAOC,CAAP,EAAU;AACR,UAAM1B,GAAG,CAACH,WAAW,CAAC6B,CAAC,CAACC,OAAH,CAAZ,CAAT;AACH;AAIJ","sourcesContent":["import { ACTIONS, loadRecords, recReqFails } from \"../../actions\";\r\nimport { takeEvery, select, put, } from \"redux-saga/effects\";\r\nimport { getApi } from \"./../../apis/apiProvider\";\r\n\r\nexport default function* requestUserRecords() {\r\n    console.log(\"handle request\")\r\n    yield takeEvery(ACTIONS.RECS_REQ_RECS, handel)\r\n}\r\n\r\nconst getToken = state => state.user.token\r\n\r\nfunction* handel(action) {\r\n    const token = yield select(getToken);\r\n\r\n    try {\r\n        const { callQuery, queries } = getApi(\"UserAssets\");\r\n        const vars = {...action.where};\r\n        vars.pageSize = action.pageSize;\r\n        vars.page = action.page;\r\n\r\n        console.log(\"var\", vars)\r\n        const query = queries.recordsQl;\r\n        const result = yield callQuery(query, token, vars);\r\n        console.log(result)\r\n        const records = result?.data?.records?.records;\r\n        const countAll = result?.data?.records?.countAll;\r\n        if (!result.errors && records) {\r\n            yield put(loadRecords(records, countAll))\r\n        } else {\r\n            throw new Error(\"Can't load reacords from database\")\r\n        }\r\n    } catch (e) {\r\n        yield put(recReqFails(e.message))\r\n    }\r\n\r\n    \r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}