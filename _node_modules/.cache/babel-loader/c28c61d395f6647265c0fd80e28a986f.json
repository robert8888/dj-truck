{"ast":null,"code":"import { fork, select, takeEvery } from \"redux-saga/effects\";\nimport { ACTIONS, pushLog } from \"../../actions\";\nimport { getApi } from \"./../../apis/apiProvider\";\nimport Log from \"./../../utils/logger/logger\";\nexport default function* renameSelectedRequestSaga() {\n  yield takeEvery(ACTIONS.PL_SET_BPM_AND_OFFSET, handel);\n}\n\nfunction* handel(action) {\n  if (typeof action.bpm === \"number\") {\n    yield fork(sendDataToApi, action);\n  }\n}\n\nconst getToken = state => state.user.token;\n\nfunction* sendDataToApi(action) {\n  const path = ['saga', 'playlist', 'request updated bpm and offset'];\n  const token = yield select(getToken);\n\n  if (token) {\n    try {\n      const {\n        callQuery,\n        queries\n      } = getApi(\"UserAssets\");\n      const variables = {\n        id: action.id,\n        bpm: action.bpm,\n        offset: action.offset\n      };\n      const result = yield callQuery(queries.updateTrackQl, token, variables);\n\n      if (result.errors) {\n        throw new Error(result.errors);\n      }\n\n      yield put(pushLog(new Log(\"Track bpm and offset updated id:\" + action.id, path)));\n    } catch (error) {\n      yield put(pushLog(Log.Error(path, \"Can't update bpm and offset\" + error.message, \"Sorry. During process of updating track bpm occurred a problem\", error)));\n    }\n  }\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/sagas/playlists/reqUpdateBpmSaga.js"],"names":["fork","select","takeEvery","ACTIONS","pushLog","getApi","Log","renameSelectedRequestSaga","PL_SET_BPM_AND_OFFSET","handel","action","bpm","sendDataToApi","getToken","state","user","token","path","callQuery","queries","variables","id","offset","result","updateTrackQl","errors","Error","put","error","message"],"mappings":"AAAA,SAASA,IAAT,EAAeC,MAAf,EAAuBC,SAAvB,QAAwC,oBAAxC;AACA,SAASC,OAAT,EAAkBC,OAAlB,QAAiC,eAAjC;AACA,SAASC,MAAT,QAAuB,0BAAvB;AACA,OAAOC,GAAP,MAAgB,6BAAhB;AAEA,eAAe,UAAUC,yBAAV,GAAsC;AACjD,QAAML,SAAS,CAACC,OAAO,CAACK,qBAAT,EAAgCC,MAAhC,CAAf;AACH;;AAED,UAAUA,MAAV,CAAiBC,MAAjB,EAAwB;AACpB,MAAG,OAAOA,MAAM,CAACC,GAAd,KAAsB,QAAzB,EAAkC;AAC9B,UAAMX,IAAI,CAACY,aAAD,EAAgBF,MAAhB,CAAV;AACH;AACJ;;AAED,MAAMG,QAAQ,GAAGC,KAAK,IAAIA,KAAK,CAACC,IAAN,CAAWC,KAArC;;AAEA,UAAUJ,aAAV,CAAwBF,MAAxB,EAAgC;AAC5B,QAAMO,IAAI,GAAG,CAAC,MAAD,EAAS,UAAT,EAAqB,gCAArB,CAAb;AACA,QAAMD,KAAK,GAAG,MAAMf,MAAM,CAACY,QAAD,CAA1B;;AACA,MAAGG,KAAH,EAAS;AACL,QAAG;AACC,YAAM;AAAEE,QAAAA,SAAF;AAAcC,QAAAA;AAAd,UAA0Bd,MAAM,CAAC,YAAD,CAAtC;AACA,YAAMe,SAAS,GAAG;AACdC,QAAAA,EAAE,EAAEX,MAAM,CAACW,EADG;AAEdV,QAAAA,GAAG,EAAED,MAAM,CAACC,GAFE;AAGdW,QAAAA,MAAM,EAAEZ,MAAM,CAACY;AAHD,OAAlB;AAMA,YAAMC,MAAM,GAAG,MAAML,SAAS,CAACC,OAAO,CAACK,aAAT,EAAwBR,KAAxB,EAA+BI,SAA/B,CAA9B;;AACA,UAAGG,MAAM,CAACE,MAAV,EAAiB;AACb,cAAM,IAAIC,KAAJ,CAAUH,MAAM,CAACE,MAAjB,CAAN;AACH;;AAED,YAAME,GAAG,CAACvB,OAAO,CAAC,IAAIE,GAAJ,CAAQ,qCAAqCI,MAAM,CAACW,EAApD,EAAwDJ,IAAxD,CAAD,CAAR,CAAT;AACH,KAdD,CAcE,OAAOW,KAAP,EAAa;AACX,YAAMD,GAAG,CAACvB,OAAO,CAACE,GAAG,CAACoB,KAAJ,CACdT,IADc,EAEd,gCAAgCW,KAAK,CAACC,OAFxB,EAGd,gEAHc,EAIdD,KAJc,CAAD,CAAR,CAAT;AAMH;AACJ;AACJ","sourcesContent":["import { fork, select, takeEvery } from \"redux-saga/effects\";\r\nimport { ACTIONS, pushLog } from \"../../actions\";\r\nimport { getApi } from \"./../../apis/apiProvider\";\r\nimport Log from \"./../../utils/logger/logger\";\r\n\r\nexport default function* renameSelectedRequestSaga() {\r\n    yield takeEvery(ACTIONS.PL_SET_BPM_AND_OFFSET, handel)\r\n}\r\n\r\nfunction* handel(action){\r\n    if(typeof action.bpm === \"number\"){\r\n        yield fork(sendDataToApi, action)\r\n    }\r\n}\r\n\r\nconst getToken = state => state.user.token;\r\n\r\nfunction* sendDataToApi(action) {\r\n    const path = ['saga', 'playlist', 'request updated bpm and offset']\r\n    const token = yield select(getToken);\r\n    if(token){\r\n        try{\r\n            const { callQuery , queries } = getApi(\"UserAssets\");\r\n            const variables = {\r\n                id: action.id,\r\n                bpm: action.bpm,\r\n                offset: action.offset\r\n            };\r\n            \r\n            const result = yield callQuery(queries.updateTrackQl, token, variables);\r\n            if(result.errors){\r\n                throw new Error(result.errors);\r\n            }\r\n            \r\n            yield put(pushLog(new Log(\"Track bpm and offset updated id:\" + action.id, path)))\r\n        } catch (error){\r\n            yield put(pushLog(Log.Error(\r\n                path,\r\n                \"Can't update bpm and offset\" + error.message,\r\n                \"Sorry. During process of updating track bpm occurred a problem\",\r\n                error\r\n            )))\r\n        }\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}