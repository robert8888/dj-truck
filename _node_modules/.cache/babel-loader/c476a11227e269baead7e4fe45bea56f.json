{"ast":null,"code":"import { analyze, guess } from 'web-audio-beat-detector';\nexport default function calcBpm(url) {\n  //audioContext.decodeAudioData(arrayBuffer, (audioBuffer) =\n  return fetch(url).then(response => response.blob()).then(blop => {\n    return new Promise(resolve => {\n      const fr = new FileReader();\n\n      fr.onload = () => {\n        resolve(fr.result);\n      };\n\n      fr.readAsArrayBuffer(blop);\n    });\n  }).then(arrayBuffer => {\n    console.log(typeof arrayBuffer);\n    const audioCtx = new AudioContext(); //return audioCtx.decodeAudioData(blop);\n  }); //.then( audioBuffer => analyze(audioBuffer))\n  //.then(bpm => bpm)\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/utils/bpm/analyzer.js"],"names":["analyze","guess","calcBpm","url","fetch","then","response","blob","blop","Promise","resolve","fr","FileReader","onload","result","readAsArrayBuffer","arrayBuffer","console","log","audioCtx","AudioContext"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,KAAlB,QAA+B,yBAA/B;AAGA,eAAe,SAASC,OAAT,CAAiBC,GAAjB,EAAqB;AAChC;AACA,SAAOC,KAAK,CAACD,GAAD,CAAL,CACNE,IADM,CACDC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADX,EAENF,IAFM,CAEDG,IAAI,IAAI;AAAE,WAAO,IAAIC,OAAJ,CAAaC,OAAO,IAAI;AACvC,YAAMC,EAAE,GAAG,IAAIC,UAAJ,EAAX;;AACAD,MAAAA,EAAE,CAACE,MAAH,GAAY,MAAM;AACdH,QAAAA,OAAO,CAACC,EAAE,CAACG,MAAJ,CAAP;AACH,OAFD;;AAGAH,MAAAA,EAAE,CAACI,iBAAH,CAAqBP,IAArB;AACH,KANkB,CAAP;AAOf,GATM,EAUNH,IAVM,CAUDW,WAAW,IAAI;AACjBC,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAOF,WAAnB;AACA,UAAMG,QAAQ,GAAG,IAAIC,YAAJ,EAAjB,CAFiB,CAGjB;AACH,GAdM,CAAP,CAFgC,CAgB9B;AACF;AACH","sourcesContent":["import { analyze, guess } from 'web-audio-beat-detector';\r\n\r\n\r\nexport default function calcBpm(url){\r\n    //audioContext.decodeAudioData(arrayBuffer, (audioBuffer) =\r\n    return fetch(url)\r\n    .then(response => response.blob())\r\n    .then(blop => { return new Promise( resolve => {\r\n            const fr = new FileReader();\r\n            fr.onload = () => {\r\n                resolve(fr.result)\r\n            }\r\n            fr.readAsArrayBuffer(blop);\r\n        })\r\n    })\r\n    .then(arrayBuffer => {\r\n        console.log(typeof arrayBuffer)\r\n        const audioCtx = new AudioContext();\r\n        //return audioCtx.decodeAudioData(blop);\r\n    })//.then( audioBuffer => analyze(audioBuffer))\r\n    //.then(bpm => bpm)\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}