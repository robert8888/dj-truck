{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\src\\\\pages\\\\common\\\\components\\\\PlaybackButton\\\\PlaybackButton.js\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport classNames from \"classnames\";\nimport React, { useCallback, useEffect, useMemo } from \"react\";\nimport usePlaybackState, { PLAYBACK_STATE } from \"./../../Hooks/usePlabackState\";\nimport BinaryButton from \"./../BinnaryButton/BinnaryButton\";\nimport \"./playback-button.scss\";\n\nconst PlaybackButton = ({\n  playback,\n  id,\n  player,\n  source = \"RecordsStore\",\n  ...props\n}) => {\n  const onChange = useCallback(state => {\n    if (playback) {\n      playback(id, state, source);\n    }\n  }, [playback, id, source]);\n  const [state, icon, toggleHandler, setState] = usePlaybackState(onChange);\n  useEffect(() => {\n    if (!player) {\n      return;\n    }\n\n    player.subscribePlayback(id, s => setState(s));\n    const current = player.getCurrent();\n\n    if (current.id === id && current.source === source) {\n      setState(player.getCurrent().state);\n    }\n\n    return () => {\n      player.unSubscribePlayback(id);\n    };\n  }, [player, id, source, setState]);\n  const btnClassNames = useMemo(() => {\n    return classNames(\"playback-button\", {\n      \"playback-button--active\": state === PLAYBACK_STATE.PLAY\n    });\n  }, [state]);\n  return React.createElement(\"div\", {\n    className: \"playback-button-container\" + props.className,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, React.createElement(BinaryButton, {\n    className: btnClassNames,\n    onChange: toggleHandler,\n    value: state === PLAYBACK_STATE.PLAY,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, React.createElement(FontAwesomeIcon, {\n    icon: icon,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  })));\n};\n\nexport default PlaybackButton;","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/pages/common/components/PlaybackButton/PlaybackButton.js"],"names":["FontAwesomeIcon","classNames","React","useCallback","useEffect","useMemo","usePlaybackState","PLAYBACK_STATE","BinaryButton","PlaybackButton","playback","id","player","source","props","onChange","state","icon","toggleHandler","setState","subscribePlayback","s","current","getCurrent","unSubscribePlayback","btnClassNames","PLAY","className"],"mappings":";AAAA,SAASA,eAAT,QAAgC,gCAAhC;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,KAAP,IAAgBC,WAAhB,EAA6BC,SAA7B,EAAwCC,OAAxC,QAAuD,OAAvD;AACA,OAAOC,gBAAP,IAA2BC,cAA3B,QAAiD,+BAAjD;AACA,OAAOC,YAAP,MAAyB,kCAAzB;AACA,OAAO,wBAAP;;AAEA,MAAMC,cAAc,GAAG,CAAC;AAACC,EAAAA,QAAD;AAAWC,EAAAA,EAAX;AAAeC,EAAAA,MAAf;AAAuBC,EAAAA,MAAM,GAAG,cAAhC;AAAgD,KAAGC;AAAnD,CAAD,KAA+D;AAClF,QAAMC,QAAQ,GAAGZ,WAAW,CAAEa,KAAD,IAAU;AACnC,QAAGN,QAAH,EAAY;AACRA,MAAAA,QAAQ,CAACC,EAAD,EAAMK,KAAN,EAAaH,MAAb,CAAR;AACH;AACJ,GAJ2B,EAIzB,CAACH,QAAD,EAAWC,EAAX,EAAeE,MAAf,CAJyB,CAA5B;AAMA,QAAM,CAACG,KAAD,EAAQC,IAAR,EAAcC,aAAd,EAA6BC,QAA7B,IAAyCb,gBAAgB,CAACS,QAAD,CAA/D;AAEAX,EAAAA,SAAS,CAAC,MAAI;AACV,QAAG,CAACQ,MAAJ,EAAW;AACP;AACH;;AACDA,IAAAA,MAAM,CAACQ,iBAAP,CAAyBT,EAAzB,EAA8BU,CAAD,IAAOF,QAAQ,CAACE,CAAD,CAA5C;AAEA,UAAMC,OAAO,GAAGV,MAAM,CAACW,UAAP,EAAhB;;AACA,QAAGD,OAAO,CAACX,EAAR,KAAeA,EAAf,IAAqBW,OAAO,CAACT,MAAR,KAAmBA,MAA3C,EAAkD;AAC9CM,MAAAA,QAAQ,CAACP,MAAM,CAACW,UAAP,GAAoBP,KAArB,CAAR;AACH;;AAED,WAAO,MAAM;AACTJ,MAAAA,MAAM,CAACY,mBAAP,CAA2Bb,EAA3B;AACH,KAFD;AAIH,GAfQ,EAeN,CAACC,MAAD,EAASD,EAAT,EAAaE,MAAb,EAAqBM,QAArB,CAfM,CAAT;AAiBA,QAAMM,aAAa,GAAGpB,OAAO,CAAC,MAAI;AAC9B,WAAOJ,UAAU,CACb,iBADa,EAEb;AACI,iCAA4Be,KAAK,KAAKT,cAAc,CAACmB;AADzD,KAFa,CAAjB;AAMH,GAP4B,EAO1B,CAACV,KAAD,CAP0B,CAA7B;AASA,SACI;AAAK,IAAA,SAAS,EAAE,8BAA8BF,KAAK,CAACa,SAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,YAAD;AAAc,IAAA,SAAS,EAAEF,aAAzB;AAAwC,IAAA,QAAQ,EAAEP,aAAlD;AAAiE,IAAA,KAAK,EAAGF,KAAK,KAAGT,cAAc,CAACmB,IAAhG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,eAAD;AAAiB,IAAA,IAAI,EAAET,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ,CADJ;AAOH,CA1CD;;AA4CA,eAAeR,cAAf","sourcesContent":["import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport classNames from \"classnames\";\r\nimport React, { useCallback, useEffect, useMemo } from \"react\";\r\nimport usePlaybackState, { PLAYBACK_STATE } from \"./../../Hooks/usePlabackState\";\r\nimport BinaryButton from \"./../BinnaryButton/BinnaryButton\";\r\nimport \"./playback-button.scss\";\r\n\r\nconst PlaybackButton = ({playback, id, player, source = \"RecordsStore\", ...props}) => {\r\n    const onChange = useCallback((state)=> {\r\n        if(playback){\r\n            playback(id , state, source);\r\n        }\r\n    }, [playback, id, source])\r\n\r\n    const [state, icon, toggleHandler, setState] = usePlaybackState(onChange);\r\n\r\n    useEffect(()=>{\r\n        if(!player){\r\n            return;\r\n        }\r\n        player.subscribePlayback(id, (s) => setState(s))\r\n\r\n        const current = player.getCurrent();\r\n        if(current.id === id && current.source === source){\r\n            setState(player.getCurrent().state);\r\n        }\r\n\r\n        return () => {\r\n            player.unSubscribePlayback(id);\r\n        }\r\n        \r\n    }, [player, id, source, setState])\r\n\r\n    const btnClassNames = useMemo(()=>{\r\n        return classNames(\r\n            \"playback-button\",\r\n            {\r\n                \"playback-button--active\": (state === PLAYBACK_STATE.PLAY)\r\n            }\r\n        )\r\n    }, [state])\r\n\r\n    return (\r\n        <div className={\"playback-button-container\" + props.className}>\r\n            <BinaryButton className={btnClassNames} onChange={toggleHandler} value={(state===PLAYBACK_STATE.PLAY)}>\r\n                <FontAwesomeIcon icon={icon}/>\r\n            </BinaryButton>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PlaybackButton"]},"metadata":{},"sourceType":"module"}