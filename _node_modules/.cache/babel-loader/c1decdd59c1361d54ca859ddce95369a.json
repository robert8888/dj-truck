{"ast":null,"code":"import React, { useMemo, useState, useEffect, useCallback, useContext } from \"react\";\nimport { getApi } from \"./../../../../apis/apiProvider\";\nimport { PLAYBACK_STATE } from \"./ListItem/PlaybackButton/PlaybackButton\"; //getRecordUrl\n\nexport const PlayerContext = React.createContext({\n  btnStateHandlers: {},\n  playerSetProgressHandlers: [],\n\n  setBtnCtrlHandler(id, handler) {\n    this.btnStateHandlers[id] = handler;\n  },\n\n  setBtnState(id, state) {\n    this.btnStateHandlers[id](state);\n  },\n\n  setProgressHandler(id, handler) {\n    if (this.playerSetProgressHandlers[id]) {\n      this.playerSetProgressHandlers[id].push(handler);\n    }\n\n    this.playerSetProgressHandlers[id] = [handler];\n  },\n\n  setProgress(id, progress) {\n    for (let handler of this.playerSetProgressHandlers[id]) {\n      handler(progress);\n    }\n  },\n\n  setProgressDataHandler(id, handler) {}\n\n});\nexport function useRecordPlayer() {\n  const [mediaElement, setMediaElement] = useState(null);\n  const [current, setCurrent] = useState(null); // const [progressUpdater, setProgressUpdate] = useState(null);\n\n  const ctrContext = useContext(PlayerContext);\n  const api = useMemo(() => {\n    return getApi('RecordsStore');\n  }, [getApi]);\n  useEffect(() => {\n    const medEl = document.createElement('audio');\n    medEl.autoplay = true;\n    medEl.preload = 'metadata';\n    setMediaElement(medEl);\n  }, [setMediaElement]);\n  const playback = useCallback((id, pbState) => {\n    if (pbState === PLAYBACK_STATE.PLAY) {\n      mediaElement.src = api.getRecordUrl(id);\n      mediaElement.play();\n\n      if (current) {\n        ctrContext.setBtnState(current, PLAYBACK_STATE.PAUSE);\n      }\n\n      setCurrent(id);\n    } else if (pbState === PLAYBACK_STATE.PAUSE) {\n      mediaElement.pause();\n    }\n\n    console.log(id, pbState);\n  }, [mediaElement, api]);\n\n  function seek({\n    id,\n    filePosition,\n    progress,\n    duration\n  }) {\n    mediaElement.src = api.getRecordUrl(id, filePosition);\n    ctrContext.setBtnState(id, PLAYBACK_STATE.PLAY);\n    setCurrent(id); // console.log(\"seek \", id , position)\n  }\n\n  return [playback, seek];\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/pages/common/components/RecordList/useRecordPlayer.js"],"names":["React","useMemo","useState","useEffect","useCallback","useContext","getApi","PLAYBACK_STATE","PlayerContext","createContext","btnStateHandlers","playerSetProgressHandlers","setBtnCtrlHandler","id","handler","setBtnState","state","setProgressHandler","push","setProgress","progress","setProgressDataHandler","useRecordPlayer","mediaElement","setMediaElement","current","setCurrent","ctrContext","api","medEl","document","createElement","autoplay","preload","playback","pbState","PLAY","src","getRecordUrl","play","PAUSE","pause","console","log","seek","filePosition","duration"],"mappings":"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","sourcesContent":["import React, { useMemo, useState, useEffect, useCallback, useContext } from \"react\"\r\nimport { getApi } from \"./../../../../apis/apiProvider\";\r\nimport {PLAYBACK_STATE} from \"./ListItem/PlaybackButton/PlaybackButton\";\r\n\r\n//getRecordUrl\r\nexport const PlayerContext = React.createContext({\r\n    btnStateHandlers: {},\r\n    playerSetProgressHandlers:[],\r\n\r\n    setBtnCtrlHandler(id, handler){\r\n        this.btnStateHandlers[id] = handler;\r\n    },\r\n\r\n    setBtnState(id, state){\r\n        this.btnStateHandlers[id](state)\r\n    },\r\n\r\n    setProgressHandler(id, handler){\r\n        if(this.playerSetProgressHandlers[id]){\r\n            this.playerSetProgressHandlers[id].push(handler);\r\n        }\r\n        this.playerSetProgressHandlers[id] = [handler];\r\n    },\r\n\r\n    setProgress(id, progress){\r\n        for(let handler of this.playerSetProgressHandlers[id]){\r\n            handler(progress)\r\n        }\r\n    },\r\n  \r\n    setProgressDataHandler(id, handler){\r\n\r\n    }\r\n})\r\n\r\nexport function useRecordPlayer(){\r\n    const [mediaElement, setMediaElement] = useState(null);\r\n    const [current, setCurrent] = useState(null);\r\n    // const [progressUpdater, setProgressUpdate] = useState(null);\r\n    const ctrContext = useContext(PlayerContext);\r\n\r\n    const api = useMemo(()=>{\r\n        return getApi('RecordsStore');\r\n    }, [getApi])\r\n\r\n    useEffect(()=>{\r\n        const medEl = document.createElement('audio');\r\n        medEl.autoplay = true;\r\n        medEl.preload = 'metadata'\r\n        setMediaElement(medEl)\r\n    }, [setMediaElement])\r\n\r\n    const playback = useCallback((id, pbState)=>{\r\n        if(pbState === PLAYBACK_STATE.PLAY){\r\n            mediaElement.src = api.getRecordUrl(id);\r\n            mediaElement.play();\r\n            if(current){\r\n                ctrContext.setBtnState(current, PLAYBACK_STATE.PAUSE)\r\n            } \r\n            setCurrent(id);\r\n        } else if(pbState === PLAYBACK_STATE.PAUSE){\r\n            mediaElement.pause(); \r\n        }\r\n        console.log(id, pbState);\r\n    }, [mediaElement, api])\r\n\r\n    function seek({id, filePosition, progress, duration}){\r\n\r\n        mediaElement.src = api.getRecordUrl(id, filePosition);\r\n        ctrContext.setBtnState(id, PLAYBACK_STATE.PLAY);\r\n        setCurrent(id);\r\n        // console.log(\"seek \", id , position)\r\n    }\r\n\r\n\r\n\r\n    return [playback, seek ]\r\n}"]},"metadata":{},"sourceType":"module"}