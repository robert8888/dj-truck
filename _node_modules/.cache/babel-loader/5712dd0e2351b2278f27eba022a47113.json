{"ast":null,"code":"import config from \"./../../../../components/Deck/Player/configuration\";\nimport WaveSurfer from \"wavesurfer\";\nimport { getBeatLength } from \"./../../../utils/bpm/converter\";\nimport { setChannelReady, setLoadingProgress, setTimeLeft } from \"./../../../../actions\";\nimport store from \"./../../../../store\";\nexport default class ChannelBuilder {\n  constructor() {\n    this.startSync = channel => {\n      channel.syncHandle = setInterval(() => {\n        channel.slave.drawer.progress(channel.master.getCurrentTime() / this.currentDuration);\n      }, 100);\n    };\n\n    this.dispatch = store.dispatch;\n  }\n\n  create(channelName, masterContainer, slaveContainer) {\n    let channel = {\n      channelName,\n      masterContainer,\n      slaveContainer\n    };\n    channel.masterConfig = config.master(masterContainer, channelName);\n    channel.slaveConfig = config.slave(slaveContainer, channelName);\n    channel.master = WaveSurfer.create(channel.masterConfig);\n\n    channel.master.__proto__.loadWithEvent = function (...args) {\n      this.fireEvent(\"load\");\n      this.load(...args);\n    };\n\n    channel.slave = WaveSurfer.create(channel.slaveConfig);\n    this.attachEvents(channel);\n    return channel;\n  }\n\n  attachEvents(channel) {\n    channel.master.on(\"load\", () => {\n      this.clearState(channel);\n    });\n    channel.master.on(\"loading\", progress => {\n      this.dispatch(setLoadingProgress(channel.channelName, progress));\n    });\n    channel.master.on(\"ready\", () => {\n      channel.currentDuration = channel.master.getDuration();\n      let resolution = 430;\n      channel.slave.load(null, channel.master.backend.getPeaks(resolution, 0, resolution));\n      this.dispatch(setLoadingProgress(channel.channelName, 100));\n      this.dispatch(setChannelReady(true, channel.channelName));\n      this.startSync(channel);\n    });\n    channel.slave.on(\"seek\", progress => {\n      const wasPlaying = channel.master.isPlaying();\n      channel.master.backend.seekTo(progress * channel.currentDuration);\n      channel.master.drawer.progress(progress);\n      channel.master.fireEvent(\"seek\", progress);\n      channel.slave.drawer.progress(progress);\n      const timeLeft = channel.master.getDuration() - channel.master.getDuration() * progress;\n      this.dispatch(setTimeLeft(channel.channelName, timeLeft));\n\n      if (wasPlaying) {\n        channel.master.play();\n      }\n    });\n  }\n\n  clearState(channel) {\n    channel.slave.load(null, []);\n\n    if (channel.barsElements) {\n      channel.barsElements.forEach(htmlElement => htmlElement.remove());\n    }\n  }\n\n  createBars(channel, {\n    bpm,\n    offset\n  }) {\n    let wrapper = channel.master.drawer.wrapper;\n    let styleApply = WaveSurfer.Drawer.style;\n    let minPxPerSec = config.master().minPxPerSec;\n    let bitLength = getBeatLength(bpm);\n    let barPostions = [];\n\n    for (let i = offset; i < this.master.getDuration(); i += bitLength) {\n      barPostions.push(i);\n    }\n\n    let barStyle = position => ({\n      position: \"absolute\",\n      left: position + \"px\",\n      top: \"0px\",\n      width: \"1px\",\n      maxWidth: \"1px\",\n      height: \"100%\",\n      background: \"rgba(255,255,255, 0.5)\"\n    });\n\n    channel.barsElements = [];\n    barPostions.forEach(position => {\n      let bar = document.createElement(\"div\");\n      let style = barStyle(minPxPerSec * position);\n      styleApply(bar, style);\n      wrapper.appendChild(bar);\n      channel.barsElements.push(bar);\n    });\n  }\n\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/core/console/channels/channelBuilder/channelBuilder.js"],"names":["config","WaveSurfer","getBeatLength","setChannelReady","setLoadingProgress","setTimeLeft","store","ChannelBuilder","constructor","startSync","channel","syncHandle","setInterval","slave","drawer","progress","master","getCurrentTime","currentDuration","dispatch","create","channelName","masterContainer","slaveContainer","masterConfig","slaveConfig","__proto__","loadWithEvent","args","fireEvent","load","attachEvents","on","clearState","getDuration","resolution","backend","getPeaks","wasPlaying","isPlaying","seekTo","timeLeft","play","barsElements","forEach","htmlElement","remove","createBars","bpm","offset","wrapper","styleApply","Drawer","style","minPxPerSec","bitLength","barPostions","i","push","barStyle","position","left","top","width","maxWidth","height","background","bar","document","createElement","appendChild"],"mappings":"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","sourcesContent":["import config from \"./../../../../components/Deck/Player/configuration\";\r\nimport WaveSurfer from \"wavesurfer\";\r\nimport { getBeatLength } from \"./../../../utils/bpm/converter\";\r\nimport {\r\n  setChannelReady,\r\n  setLoadingProgress,\r\n  setTimeLeft\r\n} from \"./../../../../actions\";\r\nimport store from \"./../../../../store\";\r\n\r\nexport default class ChannelBuilder {\r\n  constructor() {\r\n    this.dispatch = store.dispatch;\r\n  }\r\n\r\n  create(channelName, masterContainer, slaveContainer) {\r\n    let channel = {channelName, masterContainer, slaveContainer};\r\n\r\n    channel.masterConfig = config.master(masterContainer, channelName);\r\n    channel.slaveConfig = config.slave(slaveContainer, channelName);\r\n\r\n    channel.master = WaveSurfer.create(channel.masterConfig);\r\n    channel.master.__proto__.loadWithEvent = function(...args) {\r\n      this.fireEvent(\"load\");\r\n      this.load(...args);\r\n    };\r\n    channel.slave = WaveSurfer.create(channel.slaveConfig);\r\n\r\n    this.attachEvents(channel);\r\n\r\n    return channel;\r\n  }\r\n\r\n  attachEvents(channel) {\r\n    channel.master.on(\"load\", () => {\r\n      this.clearState(channel);\r\n    });\r\n\r\n    channel.master.on(\"loading\", progress => {\r\n      this.dispatch(setLoadingProgress(channel.channelName, progress));\r\n    });\r\n\r\n    channel.master.on(\"ready\", () => {\r\n      channel.currentDuration = channel.master.getDuration();\r\n      let resolution = 430;\r\n      channel.slave.load(\r\n        null,\r\n        channel.master.backend.getPeaks(resolution, 0, resolution)\r\n      );\r\n      this.dispatch(setLoadingProgress(channel.channelName, 100));\r\n\r\n      this.dispatch(setChannelReady(true, channel.channelName));\r\n      this.startSync(channel);\r\n    });\r\n\r\n    channel.slave.on(\"seek\", progress => {\r\n      const wasPlaying = channel.master.isPlaying();\r\n\r\n      channel.master.backend.seekTo(progress * channel.currentDuration);\r\n      channel.master.drawer.progress(progress);\r\n      channel.master.fireEvent(\"seek\", progress);\r\n\r\n      channel.slave.drawer.progress(progress);\r\n\r\n      const timeLeft =\r\n        channel.master.getDuration() - channel.master.getDuration() * progress;\r\n      this.dispatch(setTimeLeft(channel.channelName, timeLeft));\r\n      if (wasPlaying) {\r\n        channel.master.play();\r\n      }\r\n    });\r\n  }\r\n\r\n  clearState(channel) {\r\n    channel.slave.load(null, []);\r\n    if (channel.barsElements) {\r\n      channel.barsElements.forEach(htmlElement => htmlElement.remove());\r\n    }\r\n  }\r\n\r\n  startSync = channel => {\r\n    channel.syncHandle = setInterval(() => {\r\n      channel.slave.drawer.progress(\r\n        channel.master.getCurrentTime() / this.currentDuration\r\n      );\r\n    }, 100);\r\n  };\r\n\r\n\r\n  createBars(channel, {bpm, offset}){\r\n    let wrapper = channel.master.drawer.wrapper;\r\n    let styleApply = WaveSurfer.Drawer.style;\r\n    let minPxPerSec = config.master().minPxPerSec;\r\n    let bitLength = getBeatLength(bpm);\r\n\r\n    let barPostions = [];\r\n\r\n    for (let i = offset; i < this.master.getDuration(); i += bitLength) {\r\n      barPostions.push(i);\r\n    }\r\n\r\n    let barStyle = position => ({\r\n      position: \"absolute\",\r\n      left: position + \"px\",\r\n      top: \"0px\",\r\n      width: \"1px\",\r\n      maxWidth: \"1px\",\r\n      height: \"100%\",\r\n      background: \"rgba(255,255,255, 0.5)\"\r\n    });\r\n\r\n    channel.barsElements = [];\r\n    barPostions.forEach(position => {\r\n      let bar = document.createElement(\"div\");\r\n      let style = barStyle(minPxPerSec * position);\r\n      styleApply(bar, style);\r\n      wrapper.appendChild(bar);\r\n      channel.barsElements.push(bar);\r\n    });\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}