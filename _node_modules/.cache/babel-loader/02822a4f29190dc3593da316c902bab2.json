{"ast":null,"code":"import { useMemo, useState, useEffect, useCallback } from \"react\";\nimport { getApi } from \"./../../../apis/apiProvider\";\nimport { PLAYBACK_STATE } from \"./usePlabackState\"; //getRecordUrl\n\nclass Player {\n  constructor() {\n    this.progressUpdaterHandler = null;\n    this.current = {\n      id: null,\n      start: 0,\n      duration: 0,\n      progress: 0,\n      state: null,\n      buffered: 0\n    };\n    this.btnStateHandlers = {};\n    this.progressSubscribers = {};\n    this.bufferedSubscribers = [];\n    this.progressProviders = {};\n    this.currentSubscribers = [];\n  }\n\n  setCurrent(nextCurrent) {\n    this.current = nextCurrent;\n    this.spreadCurrentChange();\n  }\n\n  subscribeCurrent(handler) {\n    this.currentSubscribers.push(handler);\n  }\n\n  unSubscribeCurrent(handler) {\n    this.currentSubscribers = this.currentSubscribers.filter(fun => !fun === handler);\n  }\n\n  spreadCurrentChange() {\n    for (let handler of this.currentSubscribers) {\n      handler(this.current);\n    }\n  }\n\n  addBtnCtrlHandler(id, handler) {\n    this.btnStateHandlers[id] = handler;\n  }\n\n  setBtnState(id, state) {\n    this.btnStateHandlers[id](state);\n  }\n\n  subscribeProgress(id, handler) {\n    if (this.progressSubscribers[id]) {\n      this.progressSubscribers[id].push(handler);\n    } else {\n      this.progressSubscribers[id] = [handler];\n    }\n  }\n\n  unSubscribeProgress(id) {\n    delete this.progressSubscribers[id];\n  }\n\n  setProgress(id, progress) {\n    let subscribers = [];\n\n    if (this.progressSubscribers[id]) {\n      subscribers = [...this.progressSubscribers[id]];\n    }\n\n    if (this.progressSubscribers['#']) {\n      subscribers = [...subscribers, ...this.progressSubscribers[\"#\"]];\n    }\n\n    console.log(id, subscribers);\n\n    for (let handler of subscribers) {\n      handler(progress);\n    }\n\n    this.current.progress = progress;\n  }\n\n  addProgressProvider(id, handler) {\n    this.progressProviders[id] = handler;\n  }\n\n  removeProgressProvider(id) {\n    delete this.progressProviders[id];\n  }\n\n  getProgress(id) {\n    if (!id) {\n      return this.getProgress(this.current.id);\n    }\n\n    return this.progressProviders[id]();\n  }\n\n  setBuffered(buffered) {\n    if (this.current.id) {\n      this.current.buffered = buffered;\n    }\n\n    this.spreadBufferChanges();\n  }\n\n  subscribeBuffred(handel) {\n    this.bufferedSubscribers.push(handel);\n  }\n\n  unSubscribeBuffered(handler) {\n    this.bufferedSubscribers = this.bufferedSubscribers.filter(fun => !fun === handler);\n  }\n\n  spreadBufferChanges() {\n    for (let handler of this.bufferedSubscribers) {\n      handler(this.current.buffered);\n    }\n  }\n\n}\n\nexport function useRecordPlayer() {\n  const [media, setMediaElement] = useState(null);\n  const [player] = useState(new Player());\n  const api = useMemo(() => {\n    return getApi('RecordsStore');\n  }, []);\n  useEffect(() => {\n    const medEl = document.createElement('audio');\n    setMediaElement(medEl);\n    player.mediaElement = medEl;\n  }, [setMediaElement, player]);\n  const startUpdateProg = useCallback(() => {\n    const handler = setInterval(() => {\n      const mediaEl = media || player.mediaElement;\n      const progress = mediaEl.currentTime / (player.current.duration / 1000);\n      player.setProgress(player.current.id, progress); //--\n\n      const bufferdTimeRanges = mediaEl.buffered;\n\n      if (bufferdTimeRanges.length) {\n        const end = bufferdTimeRanges.end(bufferdTimeRanges.length - 1);\n        player.setBuffered(end / (player.current.duration / 1000));\n      }\n    }, 200);\n    player.progressUpdaterHandler = handler;\n  }, [media, player]);\n  const stopUpdateProg = useCallback(() => {\n    clearInterval(player.progressUpdaterHandler);\n  }, [player]);\n  useEffect(() => {\n    if (media) {\n      media.addEventListener(\"ended\", () => {\n        if (player.current.state === PLAYBACK_STATE.PLAY) {\n          player.setCurrent({ ...player.current,\n            state: PLAYBACK_STATE.PAUSE\n          });\n          player.setBtnState(player.current.id, PLAYBACK_STATE.PAUSE);\n        }\n\n        stopUpdateProg();\n      });\n      media.addEventListener('progress', () => {\n        const bufferdTimeRanges = media.buffered;\n\n        if (bufferdTimeRanges.length) {\n          const end = bufferdTimeRanges.end(bufferdTimeRanges.length - 1);\n          player.setBuffered(end / (player.current.duration / 1000));\n        }\n      });\n    }\n  }, [media, player, stopUpdateProg]);\n  const playback = useCallback((id, pbState) => {\n    const current = id ? false : true;\n    id = id || player.current.id;\n\n    if (!id) {\n      return;\n    }\n\n    if (pbState === PLAYBACK_STATE.PLAY) {\n      const {\n        progress,\n        duration\n      } = player.getProgress(id);\n      const position = duration / 1000 * progress;\n      media.src = api.getRecordUrl(id);\n      media.currentTime = position;\n      media.play().catch(err => console.log('Play action was aborded'));\n\n      if (player.current.id && !current) {\n        player.setBtnState(player.current.id, PLAYBACK_STATE.PAUSE);\n      }\n\n      player.setCurrent({\n        id,\n        duration,\n        progress: progress,\n        buffered: 0,\n        state: PLAYBACK_STATE.PLAY\n      });\n      startUpdateProg();\n    } else if (pbState === PLAYBACK_STATE.PAUSE) {\n      if (media.readyState >= 2) {\n        media.pause();\n      } else {\n        media.load();\n      }\n\n      player.setCurrent({ ...player.current,\n        state: PLAYBACK_STATE.PAUSE\n      });\n      stopUpdateProg();\n    }\n\n    if (current) {\n      player.setBtnState(id, pbState);\n    }\n  }, [media, api, player, stopUpdateProg, startUpdateProg]);\n  const seek = useCallback(({\n    id = player.current.id,\n    progress,\n    duration = player.current.duration\n  }) => {\n    const mediaEl = media || player.mediaElement;\n\n    if (!id || !duration) {\n      return;\n    }\n\n    if (player.current.id && player.current.id !== id) {\n      player.setBtnState(player.current.id, PLAYBACK_STATE.PAUSE);\n    }\n\n    const position = duration / 1000 * progress;\n\n    if (isNaN(position)) {\n      return;\n    }\n\n    stopUpdateProg();\n\n    if (player.current.id !== id) {\n      mediaEl.src = api.getRecordUrl(id);\n      mediaEl.currentTime = position;\n      player.setBtnState(id, PLAYBACK_STATE.PLAY);\n      player.setProgress(id, progress);\n      player.setCurrent({ ...player.current,\n        id,\n        duration,\n        state: PLAYBACK_STATE.PLAY\n      });\n    }\n\n    mediaEl.currentTime = position;\n\n    if (mediaEl.pause) {\n      mediaEl.play();\n      player.setBtnState(player.current.id, PLAYBACK_STATE.PLAY);\n      player.setCurrent({ ...player.current,\n        state: PLAYBACK_STATE.PLAY\n      });\n    }\n\n    startUpdateProg();\n  }, [player, api, media, stopUpdateProg, startUpdateProg]);\n  const setVolume = useCallback(level => {\n    const mediaElement = media || player.mediaElement;\n\n    if (!mediaElement) {\n      return;\n    }\n\n    mediaElement.volume = level;\n  }, [player, media]);\n  const stop = useCallback(() => {\n    const mediaElement = media || player.mediaElement;\n    mediaElement.load();\n  }, [media, player]);\n  const controls = {\n    playback,\n    seek,\n    setVolume,\n    stop\n  };\n  return [controls, player];\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/pages/common/Hooks/useRecordPlayer.js"],"names":["useMemo","useState","useEffect","useCallback","getApi","PLAYBACK_STATE","Player","progressUpdaterHandler","current","id","start","duration","progress","state","buffered","btnStateHandlers","progressSubscribers","bufferedSubscribers","progressProviders","currentSubscribers","setCurrent","nextCurrent","spreadCurrentChange","subscribeCurrent","handler","push","unSubscribeCurrent","filter","fun","addBtnCtrlHandler","setBtnState","subscribeProgress","unSubscribeProgress","setProgress","subscribers","console","log","addProgressProvider","removeProgressProvider","getProgress","setBuffered","spreadBufferChanges","subscribeBuffred","handel","unSubscribeBuffered","useRecordPlayer","media","setMediaElement","player","api","medEl","document","createElement","mediaElement","startUpdateProg","setInterval","mediaEl","currentTime","bufferdTimeRanges","length","end","stopUpdateProg","clearInterval","addEventListener","PLAY","PAUSE","playback","pbState","position","src","getRecordUrl","play","catch","err","readyState","pause","load","seek","isNaN","setVolume","level","volume","stop","controls"],"mappings":"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","sourcesContent":["import { useMemo, useState, useEffect, useCallback } from \"react\"\r\nimport { getApi } from \"./../../../apis/apiProvider\";\r\nimport { PLAYBACK_STATE } from \"./usePlabackState\";\r\n\r\n//getRecordUrl\r\nclass Player {\r\n    progressUpdaterHandler = null;\r\n\r\n    current = {\r\n        id: null,\r\n        start: 0,\r\n        duration: 0,\r\n        progress: 0,\r\n        state: null,\r\n        buffered: 0,\r\n    };\r\n\r\n    btnStateHandlers = {}\r\n    progressSubscribers = {}\r\n    bufferedSubscribers = []\r\n    progressProviders = {};\r\n    currentSubscribers = [];\r\n\r\n    setCurrent(nextCurrent){\r\n        this.current = nextCurrent;\r\n        this.spreadCurrentChange();\r\n    }\r\n\r\n    subscribeCurrent(handler){\r\n        this.currentSubscribers.push(handler)\r\n    }\r\n\r\n    unSubscribeCurrent(handler){\r\n        this.currentSubscribers = this.currentSubscribers.filter( fun => ! fun === handler);\r\n    }\r\n\r\n    spreadCurrentChange(){\r\n        for(let handler of this.currentSubscribers){\r\n            handler(this.current);\r\n        }\r\n    }\r\n\r\n    addBtnCtrlHandler(id, handler) {\r\n        this.btnStateHandlers[id] = handler;\r\n    }\r\n\r\n    setBtnState(id, state) {\r\n        this.btnStateHandlers[id](state)\r\n    }\r\n\r\n    subscribeProgress(id, handler) {\r\n        if (this.progressSubscribers[id]) {\r\n            this.progressSubscribers[id].push(handler);\r\n            \r\n        } else{\r\n            this.progressSubscribers[id] = [handler];\r\n        }\r\n    }\r\n\r\n    unSubscribeProgress(id){\r\n        delete this.progressSubscribers[id];\r\n    }\r\n\r\n    setProgress(id, progress) {\r\n        let subscribers = [];\r\n        if(this.progressSubscribers[id]){\r\n            subscribers = [...this.progressSubscribers[id]]\r\n        }\r\n        if(this.progressSubscribers['#']){\r\n            subscribers = [...subscribers, ...this.progressSubscribers[\"#\"]]\r\n        }\r\n        console.log(id, subscribers)\r\n        for (let handler of subscribers) {\r\n            handler(progress)\r\n        }\r\n        this.current.progress = progress;\r\n    }\r\n\r\n    addProgressProvider(id, handler) {\r\n        this.progressProviders[id] = handler;\r\n    }\r\n\r\n    removeProgressProvider(id){\r\n        delete this.progressProviders[id];\r\n    }\r\n\r\n    getProgress(id) {\r\n        if(!id){\r\n            return this.getProgress(this.current.id);\r\n        }\r\n        return this.progressProviders[id]();\r\n    }\r\n\r\n    setBuffered(buffered){\r\n        if(this.current.id){\r\n            this.current.buffered = buffered;\r\n        }\r\n        this.spreadBufferChanges();\r\n    }\r\n\r\n    subscribeBuffred(handel){\r\n        this.bufferedSubscribers.push(handel)\r\n    }\r\n\r\n    unSubscribeBuffered(handler){\r\n        this.bufferedSubscribers = this.bufferedSubscribers.filter( fun => \r\n                ! fun === handler\r\n            );\r\n    }\r\n\r\n    spreadBufferChanges(){\r\n        for(let handler of this.bufferedSubscribers){\r\n            handler(this.current.buffered);\r\n        }\r\n    }\r\n}\r\n\r\nexport function useRecordPlayer() {\r\n    const [media, setMediaElement] = useState(null);\r\n    const [player, ] = useState(new Player())\r\n\r\n    const api = useMemo(() => {\r\n        return getApi('RecordsStore');\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        const medEl = document.createElement('audio');\r\n        setMediaElement(medEl);\r\n        player.mediaElement = medEl;\r\n    }, [setMediaElement, player])\r\n\r\n    const startUpdateProg = useCallback(() => {\r\n        const handler = setInterval(() => {\r\n            const mediaEl = media || player.mediaElement;\r\n            const progress = mediaEl.currentTime / (player.current.duration / 1000);\r\n            player.setProgress(player.current.id, progress);\r\n            //--\r\n            const bufferdTimeRanges = mediaEl.buffered;\r\n            if(bufferdTimeRanges.length){\r\n                const end = bufferdTimeRanges.end(bufferdTimeRanges.length-1);\r\n                player.setBuffered(end / (player.current.duration / 1000))\r\n            } \r\n        }, 200)\r\n        player.progressUpdaterHandler = handler;\r\n    }, [media, player])\r\n\r\n    const stopUpdateProg = useCallback(() => {\r\n        clearInterval(player.progressUpdaterHandler);\r\n    }, [player])\r\n\r\n    useEffect(()=>{\r\n        if(media){\r\n            media.addEventListener(\"ended\", ()=>{\r\n                if(player.current.state === PLAYBACK_STATE.PLAY){\r\n                    player.setCurrent({\r\n                        ...player.current,\r\n                        state : PLAYBACK_STATE.PAUSE,\r\n                    })\r\n                    player.setBtnState(player.current.id, PLAYBACK_STATE.PAUSE)\r\n                }\r\n                stopUpdateProg();\r\n            })\r\n            media.addEventListener('progress', ()=>{\r\n                const bufferdTimeRanges = media.buffered;\r\n                if(bufferdTimeRanges.length){\r\n                    const end = bufferdTimeRanges.end(bufferdTimeRanges.length-1);\r\n                    player.setBuffered(end / (player.current.duration / 1000))\r\n                } \r\n            })\r\n        }\r\n    }, [media, player, stopUpdateProg])\r\n\r\n    const playback = useCallback((id, pbState) => {\r\n        const current = (id) ? false : true;\r\n        id = id || player.current.id;\r\n        if(!id){\r\n            return;\r\n        }\r\n        if (pbState === PLAYBACK_STATE.PLAY) {\r\n            const { progress, duration } = player.getProgress(id);\r\n            const position = (duration / 1000) * progress;\r\n            media.src = api.getRecordUrl(id);\r\n            media.currentTime = position;\r\n            media.play().catch( err => console.log('Play action was aborded'));\r\n            if (player.current.id && !current) {\r\n                player.setBtnState(player.current.id, PLAYBACK_STATE.PAUSE)\r\n            }\r\n            player.setCurrent({\r\n                id,\r\n                duration,\r\n                progress: progress,\r\n                buffered: 0,\r\n                state: PLAYBACK_STATE.PLAY,\r\n            })\r\n            startUpdateProg()\r\n        } else if (pbState === PLAYBACK_STATE.PAUSE) {\r\n            if(media.readyState >= 2){\r\n                media.pause();\r\n            } else {\r\n                media.load();\r\n            }\r\n\r\n            player.setCurrent({\r\n                ...player.current,\r\n                state: PLAYBACK_STATE.PAUSE\r\n            })\r\n            stopUpdateProg();\r\n        }\r\n        if(current){\r\n            player.setBtnState(id, pbState)\r\n        }\r\n    }, [\r\n        media,\r\n        api,\r\n        player,\r\n        stopUpdateProg,\r\n        startUpdateProg,\r\n    ])\r\n\r\n    const seek = useCallback(({ \r\n            id = player.current.id, \r\n            progress, \r\n            duration = player.current.duration \r\n        }) => {\r\n        const mediaEl = media || player.mediaElement;\r\n\r\n        if(!id || !duration){\r\n            return;\r\n        }\r\n\r\n        if (player.current.id && player.current.id !== id) {\r\n            player.setBtnState(player.current.id, PLAYBACK_STATE.PAUSE);\r\n        }\r\n        const position = (duration / 1000) * progress;\r\n\r\n        if(isNaN(position)){\r\n            return;\r\n        }\r\n\r\n        stopUpdateProg();\r\n        if (player.current.id !== id) {\r\n            mediaEl.src = api.getRecordUrl(id);\r\n            mediaEl.currentTime = position;\r\n            player.setBtnState(id, PLAYBACK_STATE.PLAY);\r\n            player.setProgress(id, progress);\r\n            player.setCurrent({\r\n                ...player.current,\r\n                id,\r\n                duration,\r\n                state: PLAYBACK_STATE.PLAY\r\n            })\r\n        }\r\n\r\n        mediaEl.currentTime = position;\r\n        if (mediaEl.pause) {\r\n            mediaEl.play();\r\n            player.setBtnState(player.current.id, PLAYBACK_STATE.PLAY);\r\n            player.setCurrent({\r\n                ...player.current,\r\n                state: PLAYBACK_STATE.PLAY\r\n            })\r\n        }\r\n        startUpdateProg();\r\n    }, [player, api, media, stopUpdateProg, startUpdateProg])\r\n\r\n    const setVolume = useCallback((level)=>{\r\n        const mediaElement = media || player.mediaElement;\r\n        if(!mediaElement){\r\n            return;\r\n        }\r\n        mediaElement.volume = level;\r\n    }, [player, media])\r\n\r\n    const stop = useCallback(()=>{\r\n        const mediaElement = media || player.mediaElement;\r\n        mediaElement.load();\r\n    }, [media, player])\r\n\r\n    const controls = {\r\n        playback,\r\n        seek,\r\n        setVolume,\r\n        stop,\r\n    }\r\n\r\n    return [\r\n        controls,\r\n        player\r\n    ]\r\n}"]},"metadata":{},"sourceType":"module"}