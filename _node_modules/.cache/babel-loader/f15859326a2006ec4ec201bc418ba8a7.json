{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\src\\\\pages\\\\common\\\\components\\\\RecordComments\\\\RecordComments.js\";\nimport React, { useState, useCallback } from \"react\";\nimport { reqPostComment } from \"./../../../../actions\";\nimport { connect } from \"react-redux\";\nimport CommentContent from \"./Comment/Comment\";\nimport { useRecordPlayer } from \"./../../Hooks/useRecordPlayer\";\nimport \"./record-comments.scss\";\n\nconst RecordComments = ({\n  userId,\n  record,\n  postComment\n}) => {\n  const [, player] = useRecordPlayer();\n  const post = useCallback(text => {\n    if (!postComment || !record || !userId) return;\n    const timeOfComment = 0;\n    const currentPlayback = player.getCurrent();\n\n    if (currentPlayback.id === record.id) {\n      timeOfComment = currentPlayback.progress * currentPlayback.duration;\n    }\n\n    const commentData = {\n      recordId: record.id,\n      userId: userId,\n      text: text,\n      time: timeOfComment\n    };\n    console.log(commentData);\n    postComment(commentData);\n  }, [postComment]);\n  const onCommentChange = useCallback(text => {\n    console.log(text); // setComment(\"\")\n    // setShowButton(false)\n  }, [postComment]);\n  const onChange = useCallback((content, id) => {}, []);\n  return React.createElement(\"div\", {\n    className: \"record-comments\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, userId && React.createElement(\"div\", {\n    className: \"comment-post-form\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, React.createElement(CommentContent, {\n    header: \"Post your comment:\",\n    creationMode: true,\n    onChange: onCommentChange.bind(null),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  })));\n};\n\nconst mapStateToProps = state => ({\n  record: state.records.currentRecord,\n  userId: state.user.dbId\n});\n\nconst mapDispatchToProps = dispatch => ({\n  postComment: data => dispatch(reqPostComment(data)) // deleteComment: (id) => dispatch(null),\n  // editComment : (id, comment) => dispatch(null)\n\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RecordComments);","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/pages/common/components/RecordComments/RecordComments.js"],"names":["React","useState","useCallback","reqPostComment","connect","CommentContent","useRecordPlayer","RecordComments","userId","record","postComment","player","post","text","timeOfComment","currentPlayback","getCurrent","id","progress","duration","commentData","recordId","time","console","log","onCommentChange","onChange","content","bind","mapStateToProps","state","records","currentRecord","user","dbId","mapDispatchToProps","dispatch","data"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,WAA1B,QAA6C,OAA7C;AACA,SAAQC,cAAR,QAA6B,uBAA7B;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,OAAOC,cAAP,MAA2B,mBAA3B;AAEA,SAAQC,eAAR,QAA8B,+BAA9B;AACA,OAAO,wBAAP;;AAGA,MAAMC,cAAc,GAAG,CAAC;AAChBC,EAAAA,MADgB;AAEhBC,EAAAA,MAFgB;AAGhBC,EAAAA;AAHgB,CAAD,KAId;AACL,QAAM,GAAGC,MAAH,IAAaL,eAAe,EAAlC;AAEA,QAAMM,IAAI,GAAGV,WAAW,CAAEW,IAAD,IAAU;AAC/B,QAAG,CAACH,WAAD,IAAgB,CAACD,MAAjB,IAA2B,CAACD,MAA/B,EAAuC;AAEvC,UAAMM,aAAa,GAAG,CAAtB;AACA,UAAMC,eAAe,GAAGJ,MAAM,CAACK,UAAP,EAAxB;;AACA,QAAGD,eAAe,CAACE,EAAhB,KAAuBR,MAAM,CAACQ,EAAjC,EAAoC;AAChCH,MAAAA,aAAa,GAAGC,eAAe,CAACG,QAAhB,GAA2BH,eAAe,CAACI,QAA3D;AACH;;AAED,UAAMC,WAAW,GAAG;AAChBC,MAAAA,QAAQ,EAAGZ,MAAM,CAACQ,EADF;AAEhBT,MAAAA,MAAM,EAAEA,MAFQ;AAGhBK,MAAAA,IAAI,EAAEA,IAHU;AAIhBS,MAAAA,IAAI,EAAER;AAJU,KAApB;AAMAS,IAAAA,OAAO,CAACC,GAAR,CAAYJ,WAAZ;AACAV,IAAAA,WAAW,CAACU,WAAD,CAAX;AACH,GAjBuB,EAiBtB,CAACV,WAAD,CAjBsB,CAAxB;AAmBA,QAAMe,eAAe,GAAGvB,WAAW,CAAEW,IAAD,IAAU;AAC1CU,IAAAA,OAAO,CAACC,GAAR,CAAYX,IAAZ,EAD0C,CAG1C;AACA;AACH,GALkC,EAKjC,CAAEH,WAAF,CALiC,CAAnC;AAQA,QAAMgB,QAAQ,GAAGxB,WAAW,CAAC,CAACyB,OAAD,EAAUV,EAAV,KAAiB,CAE7C,CAF2B,EAEzB,EAFyB,CAA5B;AAIA,SACI;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKT,MAAM,IAAI;AAAK,IAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEP,oBAAC,cAAD;AACI,IAAA,MAAM,EAAC,oBADX;AAEI,IAAA,YAAY,MAFhB;AAGI,IAAA,QAAQ,EAAGiB,eAAe,CAACG,IAAhB,CAAqB,IAArB,CAHf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFO,CADf,CADJ;AAaH,CAnDD;;AAoDA,MAAMC,eAAe,GAAGC,KAAK,KAAK;AAC9BrB,EAAAA,MAAM,EAAEqB,KAAK,CAACC,OAAN,CAAcC,aADQ;AAE9BxB,EAAAA,MAAM,EAAEsB,KAAK,CAACG,IAAN,CAAWC;AAFW,CAAL,CAA7B;;AAKA,MAAMC,kBAAkB,GAAGC,QAAQ,KAAK;AACpC1B,EAAAA,WAAW,EAAG2B,IAAD,IAAUD,QAAQ,CAACjC,cAAc,CAACkC,IAAD,CAAf,CADK,CAEpC;AACA;;AAHoC,CAAL,CAAnC;;AAMA,eAAejC,OAAO,CAACyB,eAAD,EAAkBM,kBAAlB,CAAP,CAA6C5B,cAA7C,CAAf","sourcesContent":["import React, { useState, useCallback } from \"react\";\r\nimport {reqPostComment} from \"./../../../../actions\";\r\nimport {connect} from \"react-redux\";\r\nimport CommentContent from \"./Comment/Comment\";\r\n\r\nimport {useRecordPlayer} from \"./../../Hooks/useRecordPlayer\";\r\nimport \"./record-comments.scss\";\r\n\r\n\r\nconst RecordComments = ({\r\n        userId,\r\n        record, \r\n        postComment, \r\n    }) =>{\r\n    const [, player] = useRecordPlayer();\r\n\r\n    const post = useCallback((text) => {\r\n        if(!postComment || !record || !userId) return;\r\n\r\n        const timeOfComment = 0;\r\n        const currentPlayback = player.getCurrent();\r\n        if(currentPlayback.id === record.id){\r\n            timeOfComment = currentPlayback.progress * currentPlayback.duration;\r\n        }\r\n\r\n        const commentData = {\r\n            recordId : record.id,\r\n            userId: userId,\r\n            text: text,\r\n            time: timeOfComment,\r\n        }\r\n        console.log(commentData);\r\n        postComment(commentData)\r\n    },[postComment])\r\n\r\n    const onCommentChange = useCallback((text) => {\r\n        console.log(text)\r\n\r\n        // setComment(\"\")\r\n        // setShowButton(false)\r\n    },[ postComment, ])\r\n\r\n\r\n    const onChange = useCallback((content, id) => {\r\n\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"record-comments\">\r\n            {userId && <div className=\"comment-post-form\">\r\n\r\n                <CommentContent \r\n                    header=\"Post your comment:\" \r\n                    creationMode\r\n                    onChange={ onCommentChange.bind(null)}/>\r\n            </div>}\r\n\r\n                       \r\n        </div>\r\n    )\r\n}\r\nconst mapStateToProps = state => ({\r\n    record: state.records.currentRecord,\r\n    userId: state.user.dbId,\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    postComment: (data) => dispatch(reqPostComment(data)),\r\n    // deleteComment: (id) => dispatch(null),\r\n    // editComment : (id, comment) => dispatch(null)\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(RecordComments)"]},"metadata":{},"sourceType":"module"}