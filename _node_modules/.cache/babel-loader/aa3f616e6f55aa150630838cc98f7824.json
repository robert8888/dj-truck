{"ast":null,"code":"import { get } from \"lodash/object\";\nimport { hideLoading, showLoading } from 'react-redux-loading-bar';\nimport { put, select, takeEvery } from \"redux-saga/effects\";\nimport { ACTIONS, pushDirContent, pushLog } from \"../../actions\";\nimport { getApi } from \"./../../apis/apiProvider\";\nimport { Log } from \"./../../utils/logger/logger\";\nimport errorParser from \"./../../utils/serverErrorParser/errorParser\";\nexport default function* readDirRequest() {\n  yield takeEvery(ACTIONS.PL_LOAD_DIR_REQUEST, handle);\n}\n\nconst getToken = state => state.user.token;\n\nconst getCurrentSelection = state => state.playList.currentSelection;\n\nconst getCurrent = (state, path) => get(state.playList, path);\n\nexport function* handle(action) {\n  const path = ['saga', 'playlist', 'request read dir'];\n  const token = yield select(getToken);\n  const currentSelection = yield select(getCurrentSelection);\n  const current = yield select(getCurrent, currentSelection);\n\n  if (!current._loaded && token) {\n    try {\n      yield put(showLoading());\n      const {\n        callQuery,\n        queries\n      } = getApi(\"UserAssets\");\n      let response = yield callQuery(queries.loadDirContentQl(current._id), token);\n\n      if (response.errors) {\n        throw new Error('Server response contains errors ' + errorParser(response.errors));\n      }\n\n      if (!response.data.dir) {\n        return;\n      }\n\n      const dir = response.data.dir;\n      const isRoot = false;\n      yield put(pushDirContent(dir, isRoot, action.path, action.open));\n      yield put(pushLog(new Log(\"Dir sucessful readed from database\", path)));\n    } catch (error) {\n      yield put(pushLog(Log.Error(path, \"Can't read dir\" + error.message, \"Sorry. During process reading dir content occurred a problem\", error)));\n    } finally {\n      yield put(hideLoading());\n    }\n  }\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/sagas/playlists/reqReadDirSaga.js"],"names":["get","hideLoading","showLoading","put","select","takeEvery","ACTIONS","pushDirContent","pushLog","getApi","Log","errorParser","readDirRequest","PL_LOAD_DIR_REQUEST","handle","getToken","state","user","token","getCurrentSelection","playList","currentSelection","getCurrent","path","action","current","_loaded","callQuery","queries","response","loadDirContentQl","_id","errors","Error","data","dir","isRoot","open","error","message"],"mappings":"AAAA,SAASA,GAAT,QAAoB,eAApB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,yBAAzC;AACA,SAASC,GAAT,EAAcC,MAAd,EAAsBC,SAAtB,QAAuC,oBAAvC;AACA,SAASC,OAAT,EAAkBC,cAAlB,EAAkCC,OAAlC,QAAiD,eAAjD;AACA,SAASC,MAAT,QAAuB,0BAAvB;AACA,SAASC,GAAT,QAAoB,6BAApB;AACA,OAAOC,WAAP,MAAwB,6CAAxB;AAEA,eAAe,UAAUC,cAAV,GAA2B;AACtC,QAAMP,SAAS,CAACC,OAAO,CAACO,mBAAT,EAA8BC,MAA9B,CAAf;AACH;;AAED,MAAMC,QAAQ,GAAGC,KAAK,IAAIA,KAAK,CAACC,IAAN,CAAWC,KAArC;;AAEA,MAAMC,mBAAmB,GAAGH,KAAK,IAAIA,KAAK,CAACI,QAAN,CAAeC,gBAApD;;AAEA,MAAMC,UAAU,GAAG,CAACN,KAAD,EAAQO,IAAR,KAAiBvB,GAAG,CAACgB,KAAK,CAACI,QAAP,EAAiBG,IAAjB,CAAvC;;AAEA,OAAO,UAAUT,MAAV,CAAiBU,MAAjB,EAAyB;AAC5B,QAAMD,IAAI,GAAG,CAAC,MAAD,EAAS,UAAT,EAAqB,kBAArB,CAAb;AAEA,QAAML,KAAK,GAAG,MAAMd,MAAM,CAACW,QAAD,CAA1B;AACA,QAAMM,gBAAgB,GAAG,MAAMjB,MAAM,CAACe,mBAAD,CAArC;AACA,QAAMM,OAAO,GAAG,MAAMrB,MAAM,CAACkB,UAAD,EAAaD,gBAAb,CAA5B;;AAEA,MAAI,CAACI,OAAO,CAACC,OAAT,IAAoBR,KAAxB,EAA+B;AAC3B,QAAI;AACA,YAAMf,GAAG,CAACD,WAAW,EAAZ,CAAT;AACA,YAAM;AAAEyB,QAAAA,SAAF;AAAaC,QAAAA;AAAb,UAAyBnB,MAAM,CAAC,YAAD,CAArC;AACA,UAAIoB,QAAQ,GAAG,MAAMF,SAAS,CAACC,OAAO,CAACE,gBAAR,CAAyBL,OAAO,CAACM,GAAjC,CAAD,EAAwCb,KAAxC,CAA9B;;AAEA,UAAGW,QAAQ,CAACG,MAAZ,EAAmB;AACf,cAAM,IAAIC,KAAJ,CAAU,qCAAoCtB,WAAW,CAACkB,QAAQ,CAACG,MAAV,CAAzD,CAAN;AACH;;AAED,UAAI,CAACH,QAAQ,CAACK,IAAT,CAAcC,GAAnB,EAAwB;AACpB;AACH;;AAED,YAAMA,GAAG,GAAGN,QAAQ,CAACK,IAAT,CAAcC,GAA1B;AACA,YAAMC,MAAM,GAAG,KAAf;AAEA,YAAMjC,GAAG,CAACI,cAAc,CAAC4B,GAAD,EAAMC,MAAN,EAAcZ,MAAM,CAACD,IAArB,EAA2BC,MAAM,CAACa,IAAlC,CAAf,CAAT;AAEA,YAAMlC,GAAG,CAACK,OAAO,CAAC,IAAIE,GAAJ,CAAQ,oCAAR,EAA8Ca,IAA9C,CAAD,CAAR,CAAT;AACH,KAnBD,CAmBE,OAAOe,KAAP,EAAc;AACZ,YAAMnC,GAAG,CAACK,OAAO,CAACE,GAAG,CAACuB,KAAJ,CACdV,IADc,EAEd,mBAAmBe,KAAK,CAACC,OAFX,EAGd,8DAHc,EAIdD,KAJc,CAAD,CAAR,CAAT;AAMH,KA1BD,SA0BU;AACN,YAAMnC,GAAG,CAACF,WAAW,EAAZ,CAAT;AACH;AACJ;AACJ","sourcesContent":["import { get } from \"lodash/object\";\r\nimport { hideLoading, showLoading } from 'react-redux-loading-bar';\r\nimport { put, select, takeEvery } from \"redux-saga/effects\";\r\nimport { ACTIONS, pushDirContent, pushLog } from \"../../actions\";\r\nimport { getApi } from \"./../../apis/apiProvider\";\r\nimport { Log } from \"./../../utils/logger/logger\";\r\nimport errorParser from \"./../../utils/serverErrorParser/errorParser\";\r\n\r\nexport default function* readDirRequest() {\r\n    yield takeEvery(ACTIONS.PL_LOAD_DIR_REQUEST, handle)\r\n}\r\n\r\nconst getToken = state => state.user.token;\r\n\r\nconst getCurrentSelection = state => state.playList.currentSelection;\r\n\r\nconst getCurrent = (state, path) => get(state.playList, path);\r\n\r\nexport function* handle(action) {\r\n    const path = ['saga', 'playlist', 'request read dir'];\r\n\r\n    const token = yield select(getToken);\r\n    const currentSelection = yield select(getCurrentSelection);\r\n    const current = yield select(getCurrent, currentSelection);\r\n\r\n    if (!current._loaded && token) {\r\n        try {\r\n            yield put(showLoading());\r\n            const { callQuery, queries } = getApi(\"UserAssets\");\r\n            let response = yield callQuery(queries.loadDirContentQl(current._id), token);\r\n\r\n            if(response.errors){\r\n                throw new Error('Server response contains errors '+ errorParser(response.errors))\r\n            }\r\n\r\n            if (!response.data.dir) {\r\n                return;\r\n            }\r\n\r\n            const dir = response.data.dir;\r\n            const isRoot = false;\r\n\r\n            yield put(pushDirContent(dir, isRoot, action.path, action.open));\r\n\r\n            yield put(pushLog(new Log(\"Dir sucessful readed from database\", path)))\r\n        } catch (error) {\r\n            yield put(pushLog(Log.Error(\r\n                path,\r\n                \"Can't read dir\" + error.message,\r\n                \"Sorry. During process reading dir content occurred a problem\",\r\n                error\r\n            )))\r\n        } finally {\r\n            yield put(hideLoading())\r\n        }\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}