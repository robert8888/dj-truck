{"ast":null,"code":"import { put, select, takeEvery } from \"redux-saga/effects\";\nimport { ACTIONS, pushLog, updateEndTime, updateStartTime } from \"../../../actions\";\nimport RECORD_STATE from \"./../../../reducers/console/recorder/stateDef\";\nimport { Log } from \"./../../../utils/logger/logger\";\nexport default function* interceptPlayback() {\n  yield takeEvery(ACTIONS.TOGGLE_PLAY, handel);\n}\n\nconst getChannelState = (state, channel) => state.console.channel[channel];\n\nconst isRecording = state => state.recorder.recordingState === RECORD_STATE.RECORDING;\n\nfunction* handel(action) {\n  try {\n    const channel = action.destination;\n    const channelState = yield select(getChannelState, channel);\n    const recording = yield select(isRecording);\n    if (!recording) return;\n    const paused = !channelState.playBackState.paused;\n\n    if (paused) {\n      yield put(updateStartTime(channelState.track.id));\n    } else {\n      yield put(updateEndTime(channelState.track.id));\n    }\n  } catch (error) {\n    yield put(pushLog(Log.Error(['saga', 'recorder', 'tracklis', 'intercept toggle play action'], \"Can't updated start / end time :\" + error.message, error)));\n  }\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/sagas/recorder/tracklist/playback.js"],"names":["put","select","takeEvery","ACTIONS","pushLog","updateEndTime","updateStartTime","RECORD_STATE","Log","interceptPlayback","TOGGLE_PLAY","handel","getChannelState","state","channel","console","isRecording","recorder","recordingState","RECORDING","action","destination","channelState","recording","paused","playBackState","track","id","error","Error","message"],"mappings":"AAAA,SAASA,GAAT,EAAcC,MAAd,EAAsBC,SAAtB,QAAuC,oBAAvC;AACA,SAASC,OAAT,EAAkBC,OAAlB,EAA2BC,aAA3B,EAA0CC,eAA1C,QAAiE,kBAAjE;AACA,OAAOC,YAAP,MAAyB,+CAAzB;AACA,SAASC,GAAT,QAAoB,gCAApB;AAEA,eAAe,UAAUC,iBAAV,GAA8B;AACzC,QAAMP,SAAS,CAACC,OAAO,CAACO,WAAT,EAAsBC,MAAtB,CAAf;AACH;;AAED,MAAMC,eAAe,GAAG,CAACC,KAAD,EAAQC,OAAR,KAAoBD,KAAK,CAACE,OAAN,CAAcD,OAAd,CAAsBA,OAAtB,CAA5C;;AAEA,MAAME,WAAW,GAAGH,KAAK,IAAIA,KAAK,CAACI,QAAN,CAAeC,cAAf,KAAkCX,YAAY,CAACY,SAA5E;;AAEA,UAAUR,MAAV,CAAiBS,MAAjB,EAAwB;AACpB,MAAG;AACC,UAAMN,OAAO,GAAGM,MAAM,CAACC,WAAvB;AACA,UAAMC,YAAY,GAAG,MAAMrB,MAAM,CAACW,eAAD,EAAkBE,OAAlB,CAAjC;AAEA,UAAMS,SAAS,GAAG,MAAMtB,MAAM,CAACe,WAAD,CAA9B;AACA,QAAG,CAACO,SAAJ,EAAe;AAEf,UAAMC,MAAM,GAAG,CAACF,YAAY,CAACG,aAAb,CAA2BD,MAA3C;;AACA,QAAGA,MAAH,EAAU;AACN,YAAMxB,GAAG,CAACM,eAAe,CAACgB,YAAY,CAACI,KAAb,CAAmBC,EAApB,CAAhB,CAAT;AACH,KAFD,MAEO;AACH,YAAM3B,GAAG,CAACK,aAAa,CAACiB,YAAY,CAACI,KAAb,CAAmBC,EAApB,CAAd,CAAT;AACH;AACJ,GAbD,CAaE,OAAMC,KAAN,EAAY;AACV,UAAM5B,GAAG,CAACI,OAAO,CAACI,GAAG,CAACqB,KAAJ,CACd,CAAC,MAAD,EAAS,UAAT,EAAqB,UAArB,EAAiC,8BAAjC,CADc,EAEd,qCAAqCD,KAAK,CAACE,OAF7B,EAGdF,KAHc,CAAD,CAAR,CAAT;AAKH;AACJ","sourcesContent":["import { put, select, takeEvery } from \"redux-saga/effects\";\r\nimport { ACTIONS, pushLog, updateEndTime, updateStartTime } from \"../../../actions\";\r\nimport RECORD_STATE from \"./../../../reducers/console/recorder/stateDef\";\r\nimport { Log } from \"./../../../utils/logger/logger\";\r\n\r\nexport default function* interceptPlayback() {\r\n    yield takeEvery(ACTIONS.TOGGLE_PLAY, handel);\r\n}\r\n\r\nconst getChannelState = (state, channel) => state.console.channel[channel];\r\n\r\nconst isRecording = state => state.recorder.recordingState === RECORD_STATE.RECORDING; \r\n\r\nfunction* handel(action){   \r\n    try{\r\n        const channel = action.destination;\r\n        const channelState = yield select(getChannelState, channel)\r\n    \r\n        const recording = yield select(isRecording);\r\n        if(!recording) return;\r\n    \r\n        const paused = !channelState.playBackState.paused;\r\n        if(paused){\r\n            yield put(updateStartTime(channelState.track.id))\r\n        } else {\r\n            yield put(updateEndTime(channelState.track.id))\r\n        }\r\n    } catch(error){\r\n        yield put(pushLog(Log.Error(\r\n            ['saga', 'recorder', 'tracklis', 'intercept toggle play action'],\r\n            \"Can't updated start / end time :\" + error.message,\r\n            error\r\n        )))\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}