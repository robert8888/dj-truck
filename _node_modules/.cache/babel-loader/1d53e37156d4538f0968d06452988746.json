{"ast":null,"code":"import { ACTIONS, updateRec, updateRecFail } from \"../../actions\";\nimport { takeEvery, select, put } from \"redux-saga/effects\";\nimport { getApi } from \"./../../apis/apiProvider\";\nexport default function* requestRecordUpdate() {\n  yield takeEvery(ACTIONS.RECS_REQ_UPDATE, handel);\n}\n\nconst getToken = state => state.user.token; //recordId,  recordChanges\n\n\nfunction* handel(action) {\n  const token = yield select(getToken);\n\n  if (token) {\n    try {\n      const {\n        callQuery,\n        queries\n      } = getApi(\"UserAssets\");\n      const {\n        recordId: id,\n        recordChanges: data\n      } = action;\n      const vars = data;\n      vars.id = id;\n      const query = queries.updateRecordMetaQl;\n      const result = yield callQuery(query, token, vars);\n      const success = result === null || result === void 0 ? void 0 : result.data;\n\n      if (!result.errors && success) {\n        yield put(updateRec(id, data));\n      } else {\n        throw new Error(\"Can't load reacords from database\");\n      }\n    } catch (e) {\n      yield put(updateRecFail(action.recordChanges.title, e.message));\n    }\n  }\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/sagas/records/reqUpdateRecord.js"],"names":["ACTIONS","updateRec","updateRecFail","takeEvery","select","put","getApi","requestRecordUpdate","RECS_REQ_UPDATE","handel","getToken","state","user","token","action","callQuery","queries","recordId","id","recordChanges","data","vars","query","updateRecordMetaQl","result","success","errors","Error","e","title","message"],"mappings":"AACA,SAASA,OAAT,EAAkBC,SAAlB,EAA6BC,aAA7B,QAAkD,eAAlD;AACA,SAASC,SAAT,EAAoBC,MAApB,EAA4BC,GAA5B,QAAwC,oBAAxC;AACA,SAASC,MAAT,QAAuB,0BAAvB;AAEA,eAAe,UAAUC,mBAAV,GAAgC;AAE3C,QAAMJ,SAAS,CAACH,OAAO,CAACQ,eAAT,EAA0BC,MAA1B,CAAf;AACH;;AAED,MAAMC,QAAQ,GAAGC,KAAK,IAAIA,KAAK,CAACC,IAAN,CAAWC,KAArC,C,CACA;;;AACA,UAAUJ,MAAV,CAAiBK,MAAjB,EAAyB;AACrB,QAAMD,KAAK,GAAG,MAAMT,MAAM,CAACM,QAAD,CAA1B;;AAEA,MAAIG,KAAJ,EAAW;AACP,QAAI;AACA,YAAM;AAAEE,QAAAA,SAAF;AAAaC,QAAAA;AAAb,UAAyBV,MAAM,CAAC,YAAD,CAArC;AACA,YAAM;AAACW,QAAAA,QAAQ,EAAEC,EAAX;AAAeC,QAAAA,aAAa,EAACC;AAA7B,UAAqCN,MAA3C;AACA,YAAMO,IAAI,GAAGD,IAAb;AACAC,MAAAA,IAAI,CAACH,EAAL,GAAUA,EAAV;AAEA,YAAMI,KAAK,GAAGN,OAAO,CAACO,kBAAtB;AACA,YAAMC,MAAM,GAAG,MAAMT,SAAS,CAACO,KAAD,EAAQT,KAAR,EAAeQ,IAAf,CAA9B;AAEA,YAAMI,OAAO,GAAGD,MAAH,aAAGA,MAAH,uBAAGA,MAAM,CAAEJ,IAAxB;;AACA,UAAI,CAACI,MAAM,CAACE,MAAR,IAAkBD,OAAtB,EAA+B;AAC3B,cAAMpB,GAAG,CAACJ,SAAS,CAACiB,EAAD,EAAKE,IAAL,CAAV,CAAT;AACH,OAFD,MAEO;AACH,cAAM,IAAIO,KAAJ,CAAU,mCAAV,CAAN;AACH;AACJ,KAfD,CAeE,OAAOC,CAAP,EAAU;AACR,YAAMvB,GAAG,CAACH,aAAa,CAACY,MAAM,CAACK,aAAP,CAAqBU,KAAtB,EAA6BD,CAAC,CAACE,OAA/B,CAAd,CAAT;AACH;AAEJ;AAEJ","sourcesContent":["\r\nimport { ACTIONS, updateRec, updateRecFail } from \"../../actions\";\r\nimport { takeEvery, select, put, } from \"redux-saga/effects\";\r\nimport { getApi } from \"./../../apis/apiProvider\";\r\n\r\nexport default function* requestRecordUpdate() {\r\n\r\n    yield takeEvery(ACTIONS.RECS_REQ_UPDATE, handel)\r\n}\r\n\r\nconst getToken = state => state.user.token\r\n//recordId,  recordChanges\r\nfunction* handel(action) {\r\n    const token = yield select(getToken);\r\n\r\n    if (token) {\r\n        try {\r\n            const { callQuery, queries } = getApi(\"UserAssets\");\r\n            const {recordId: id, recordChanges:data} = action;\r\n            const vars = data;\r\n            vars.id = id;\r\n\r\n            const query = queries.updateRecordMetaQl;\r\n            const result = yield callQuery(query, token, vars);\r\n\r\n            const success = result?.data;\r\n            if (!result.errors && success) {\r\n                yield put(updateRec(id, data))\r\n            } else {\r\n                throw new Error(\"Can't load reacords from database\")\r\n            }\r\n        } catch (e) {\r\n            yield put(updateRecFail(action.recordChanges.title, e.message))\r\n        }\r\n\r\n    }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}