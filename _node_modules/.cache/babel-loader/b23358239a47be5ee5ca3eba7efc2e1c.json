{"ast":null,"code":"import { analyze, guess } from \"web-audio-beat-detector\";\nexport function calcBpm(url) {\n  return fetch(url).then(response => response.arrayBuffer()).then(arrayBuffer => {\n    const audioCtx = new AudioContext();\n    return audioCtx.decodeAudioData(arrayBuffer);\n  }).then(audioBuffer => analyze(audioBuffer)).catch(error => 0);\n}\nexport function calcBpmAndOffset(url) {\n  return fetch(url).then(response => response.arrayBuffer()).then(arrayBuffer => {\n    const audioCtx = new AudioContext();\n    return audioCtx.decodeAudioData(arrayBuffer);\n  }).then(audioBuffer => guess(audioBuffer)).catch(error => ({\n    bpm: 0,\n    offset: 0\n  }));\n}\nexport function calcAccurateBpmAndOffset(url) {\n  return fetch(url).then(response => response.arrayBuffer()).then(arrayBuffer => new AudioContext().decodeAudioData(arrayBuffer)).then(audioBuffer => Promise.all([guess(audioBuffer), analyze(audioBuffer)])).then(results => ({\n    bpmRounded: results[0].bpm,\n    offset: results[0].offset,\n    bpm: results[1]\n  })).catch(error => ({\n    bpm: 0,\n    offset: 0,\n    bpmRounded: 0,\n    err: error\n  }));\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/utils/bpm/analyzer.js"],"names":["analyze","guess","calcBpm","url","fetch","then","response","arrayBuffer","audioCtx","AudioContext","decodeAudioData","audioBuffer","catch","error","calcBpmAndOffset","bpm","offset","calcAccurateBpmAndOffset","Promise","all","results","bpmRounded","err"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,KAAlB,QAA+B,yBAA/B;AAEA,OAAO,SAASC,OAAT,CAAiBC,GAAjB,EAAsB;AAC3B,SAAOC,KAAK,CAACD,GAAD,CAAL,CACJE,IADI,CACCC,QAAQ,IAAIA,QAAQ,CAACC,WAAT,EADb,EAEJF,IAFI,CAECE,WAAW,IAAI;AACnB,UAAMC,QAAQ,GAAG,IAAIC,YAAJ,EAAjB;AACA,WAAOD,QAAQ,CAACE,eAAT,CAAyBH,WAAzB,CAAP;AACD,GALI,EAMJF,IANI,CAMCM,WAAW,IAAIX,OAAO,CAACW,WAAD,CANvB,EAOJC,KAPI,CAOEC,KAAK,IAAI,CAPX,CAAP;AAQD;AAED,OAAO,SAASC,gBAAT,CAA0BX,GAA1B,EAA+B;AACpC,SAAOC,KAAK,CAACD,GAAD,CAAL,CACJE,IADI,CACCC,QAAQ,IAAIA,QAAQ,CAACC,WAAT,EADb,EAEJF,IAFI,CAECE,WAAW,IAAI;AACnB,UAAMC,QAAQ,GAAG,IAAIC,YAAJ,EAAjB;AACA,WAAOD,QAAQ,CAACE,eAAT,CAAyBH,WAAzB,CAAP;AACD,GALI,EAMJF,IANI,CAMCM,WAAW,IAAIV,KAAK,CAACU,WAAD,CANrB,EAOJC,KAPI,CAOEC,KAAK,KAAK;AAAEE,IAAAA,GAAG,EAAE,CAAP;AAAUC,IAAAA,MAAM,EAAE;AAAlB,GAAL,CAPP,CAAP;AAQD;AAED,OAAO,SAASC,wBAAT,CAAkCd,GAAlC,EAAuC;AAC5C,SAAOC,KAAK,CAACD,GAAD,CAAL,CACJE,IADI,CACCC,QAAQ,IAAIA,QAAQ,CAACC,WAAT,EADb,EAEJF,IAFI,CAECE,WAAW,IAAI,IAAIE,YAAJ,GAAmBC,eAAnB,CAAmCH,WAAnC,CAFhB,EAGJF,IAHI,CAGCM,WAAW,IAAIO,OAAO,CAACC,GAAR,CACjB,CAAClB,KAAK,CAACU,WAAD,CAAN,EACCX,OAAO,CAACW,WAAD,CADR,CADiB,CAHhB,EAOJN,IAPI,CAOEe,OAAO,KAAK;AACfC,IAAAA,UAAU,EAAED,OAAO,CAAC,CAAD,CAAP,CAAWL,GADR;AAEfC,IAAAA,MAAM,EAAEI,OAAO,CAAC,CAAD,CAAP,CAAWJ,MAFJ;AAGfD,IAAAA,GAAG,EAAEK,OAAO,CAAC,CAAD;AAHG,GAAL,CAPT,EAYJR,KAZI,CAYEC,KAAK,KAAK;AACfE,IAAAA,GAAG,EAAE,CADU;AAEfC,IAAAA,MAAM,EAAE,CAFO;AAGfK,IAAAA,UAAU,EAAE,CAHG;AAIfC,IAAAA,GAAG,EAAET;AAJU,GAAL,CAZP,CAAP;AAkBD","sourcesContent":["import { analyze, guess } from \"web-audio-beat-detector\";\r\n\r\nexport function calcBpm(url) {\r\n  return fetch(url)\r\n    .then(response => response.arrayBuffer())\r\n    .then(arrayBuffer => {\r\n      const audioCtx = new AudioContext();\r\n      return audioCtx.decodeAudioData(arrayBuffer);\r\n    })\r\n    .then(audioBuffer => analyze(audioBuffer))\r\n    .catch(error => 0);\r\n}\r\n\r\nexport function calcBpmAndOffset(url) {\r\n  return fetch(url)\r\n    .then(response => response.arrayBuffer())\r\n    .then(arrayBuffer => {\r\n      const audioCtx = new AudioContext();\r\n      return audioCtx.decodeAudioData(arrayBuffer);\r\n    })\r\n    .then(audioBuffer => guess(audioBuffer))\r\n    .catch(error => ({ bpm: 0, offset: 0 }));\r\n}\r\n\r\nexport function calcAccurateBpmAndOffset(url) {\r\n  return fetch(url)\r\n    .then(response => response.arrayBuffer())\r\n    .then(arrayBuffer => new AudioContext().decodeAudioData(arrayBuffer))\r\n    .then(audioBuffer => Promise.all(\r\n        [guess(audioBuffer), \r\n         analyze(audioBuffer)]\r\n        ))\r\n    .then( results => ({\r\n        bpmRounded: results[0].bpm,\r\n        offset: results[0].offset,\r\n        bpm: results[1]\r\n      }))\r\n    .catch(error => ({\r\n      bpm: 0,\r\n      offset: 0,\r\n      bpmRounded: 0, \r\n      err: error\r\n    }));\r\n}\r\n"]},"metadata":{},"sourceType":"module"}