{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJEKTY\\\\APKI\\\\DjTruck\\\\djtruck\\\\src\\\\pages\\\\app\\\\components\\\\Console\\\\Mixer\\\\Channel\\\\PeakLevelMeter\\\\PeakLevelMeter.js\";\nimport React from \"react\";\nimport Console from \"./../../../../../core/console/console\";\nimport \"./peak-level-meter.scss\"; // there is 20 leds indicators\n// 15 is blue and calc from bottom last 15 is zero dB.\n// scale range is between -40 dB and + 10 dB\n// this means that on led is 2.5 dB\n\nclass PeakLevelMater extends React.PureComponent {\n  constructor(...args) {\n    super(...args);\n    this.size = 30;\n    this.rightChannel = [];\n    this.leftChannel = [];\n    this.leftRefs = new Array(this.size);\n    this.rightRefs = new Array(this.size);\n\n    for (let i = 0; i < this.size; i++) {\n      this.leftRefs[i] = React.createRef();\n      this.rightRefs[i] = React.createRef();\n      this.rightChannel.push(React.createElement(\"div\", {\n        ref: this.rightRefs[i],\n        key: 'right-' + i,\n        className: \"level-meter-led right-bar led-\" + i,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      }));\n      this.leftChannel.push(React.createElement(\"div\", {\n        ref: this.leftRefs[i],\n        key: 'left-' + i,\n        className: \"level-meter-led left-bar led-\" + i,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }));\n    }\n\n    this.mixerChannelInterface = Console.Get().getMixerChannelInterface(this.props.name);\n    this.breakFlag = false;\n  }\n\n  componentDidMount() {\n    let lastCall = null;\n\n    const updateLedStates = () => {\n      requestAnimationFrame(updateLedStates); //throtell to 50ms\n\n      const now = new Date().getTime();\n\n      if (now - lastCall < 50) {\n        return;\n      }\n\n      lastCall = now; //drawing ...\n\n      if (this.breakFlag) {\n        return;\n      }\n\n      for (let i = 0; i < this.size; i++) {\n        this.leftRefs[i].current.classList.remove(\"led--on\");\n        this.rightRefs[i].current.classList.remove(\"led--on\");\n      }\n\n      let peakMeter = this.mixerChannelInterface.getPeakMeter();\n      let ledOn = 25 + peakMeter.peakdB / 2;\n\n      for (let i = 0; i < ledOn && i < this.size; i++) {\n        this.leftRefs[i].current.classList.add(\"led--on\");\n        this.rightRefs[i].current.classList.add(\"led--on\");\n      }\n    };\n\n    updateLedStates();\n  }\n\n  componentWillUnmount() {\n    this.breakFlag = true;\n  }\n\n  render() {\n    console.log(\"i'm render peak level meter\");\n    return React.createElement(\"div\", {\n      className: \"peak-level-meter\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"meter-channel\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, this.leftChannel), React.createElement(\"div\", {\n      className: \"meter-channel\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, this.rightChannel));\n  }\n\n}\n\nexport default PeakLevelMater;","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/pages/app/components/Console/Mixer/Channel/PeakLevelMeter/PeakLevelMeter.js"],"names":["React","Console","PeakLevelMater","PureComponent","constructor","args","size","rightChannel","leftChannel","leftRefs","Array","rightRefs","i","createRef","push","mixerChannelInterface","Get","getMixerChannelInterface","props","name","breakFlag","componentDidMount","lastCall","updateLedStates","requestAnimationFrame","now","Date","getTime","current","classList","remove","peakMeter","getPeakMeter","ledOn","peakdB","add","componentWillUnmount","render","console","log"],"mappings":"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","sourcesContent":["import React from \"react\"\r\nimport Console from \"./../../../../../core/console/console\";\r\nimport \"./peak-level-meter.scss\";\r\n// there is 20 leds indicators\r\n// 15 is blue and calc from bottom last 15 is zero dB.\r\n// scale range is between -40 dB and + 10 dB\r\n// this means that on led is 2.5 dB\r\n\r\nclass PeakLevelMater extends React.PureComponent {\r\n    constructor(...args) {\r\n        super(...args);\r\n        this.size = 30;\r\n\r\n\r\n        this.rightChannel = [];\r\n        this.leftChannel = [];\r\n\r\n        this.leftRefs = new Array(this.size);\r\n        this.rightRefs = new Array(this.size);\r\n\r\n        for (let i = 0; i < this.size; i++) {\r\n            this.leftRefs[i] = React.createRef();\r\n            this.rightRefs[i] = React.createRef();\r\n\r\n            this.rightChannel.push(\r\n                <div\r\n                    ref={this.rightRefs[i]}\r\n                    key={'right-' + i}\r\n                    className={\"level-meter-led right-bar led-\" + i} />\r\n            )\r\n            this.leftChannel.push(\r\n                <div\r\n                    ref={this.leftRefs[i]}\r\n                    key={'left-' + i}\r\n                    className={\"level-meter-led left-bar led-\" + i} />\r\n            )\r\n        }\r\n\r\n        this.mixerChannelInterface =  Console.Get().getMixerChannelInterface(this.props.name);\r\n        this.breakFlag = false;\r\n    }\r\n\r\n\r\n\r\n    componentDidMount() {\r\n        let lastCall = null;\r\n        const updateLedStates = () => {\r\n\r\n            requestAnimationFrame(updateLedStates);\r\n            //throtell to 50ms\r\n            const now = new Date().getTime();\r\n            if(now - lastCall < 50){\r\n                return;\r\n            }\r\n            lastCall = now; \r\n            //drawing ...\r\n            if(this.breakFlag){\r\n                return;\r\n            }\r\n            \r\n            for(let i = 0 ; i < this.size ; i++){\r\n                this.leftRefs[i].current.classList.remove(\"led--on\");\r\n                this.rightRefs[i].current.classList.remove(\"led--on\");\r\n            }\r\n\r\n            let peakMeter = this.mixerChannelInterface.getPeakMeter();\r\n            let ledOn = 25 + peakMeter.peakdB / 2;\r\n\r\n            for (let i = 0; (i < ledOn && i < this.size); i++) {\r\n                this.leftRefs[i].current.classList.add(\"led--on\")\r\n                this.rightRefs[i].current.classList.add(\"led--on\")\r\n            }\r\n\r\n\r\n        }\r\n\r\n        updateLedStates();\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        this.breakFlag = true;   \r\n    }\r\n\r\n    render() {\r\n\r\n        console.log(\"i'm render peak level meter\")\r\n        return (\r\n            <div className=\"peak-level-meter\">\r\n                <div className=\"meter-channel\">\r\n                    {this.leftChannel}\r\n                </div>\r\n                <div className=\"meter-channel\">\r\n                    {this.rightChannel}          \r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default PeakLevelMater;"]},"metadata":{},"sourceType":"module"}