{"ast":null,"code":"import { get } from \"lodash/object\";\nimport { hideLoading, showLoading } from 'react-redux-loading-bar';\nimport { call, put, select, takeEvery } from \"redux-saga/effects\";\nimport UUID from \"uuidjs\";\nimport { ACTIONS, pushTrackToList, startCalcBpm } from \"../../actions\";\nimport { getApi } from \"./../../apis/apiProvider\";\nimport Log from \"./../../utils/logger/logger\";\nimport { formater } from \"./../../utils/time/timeFromater\";\nimport { handle as createNewPlaylist } from \"./reqCreatePlaylistSaga\";\nexport default function* pushTrackToListSaga() {\n  yield takeEvery(ACTIONS.PL_PUSH_TRACK_REQUEST, handle);\n}\n\nconst getToken = state => state.user.token;\n\nconst getPlaylistPath = state => state.playList.currentPlaylist;\n\nconst getCurrent = (state, path) => get(state.playList, state.playList.currentPlaylist);\n\nfunction* handle(action) {\n  const path = ['saga', 'playlist', 'request add track to playlist'];\n  const token = yield select(getToken);\n\n  if (!token) {\n    action.track.id = UUID.genV1().toString();\n    yield put(pushTrackToList(action.track, action.playlist));\n    yield put(startCalcBpm(action.track, action.playlist));\n    return;\n  }\n\n  try {\n    var _currentPlaylist$_con;\n\n    yield put(showLoading());\n    const {\n      callQuery,\n      queries\n    } = getApi(\"UserAssets\");\n    const currentPlaylist = yield select(getCurrent);\n    let playlistId = currentPlaylist === null || currentPlaylist === void 0 ? void 0 : currentPlaylist._id;\n    let playlistLength = currentPlaylist === null || currentPlaylist === void 0 ? void 0 : (_currentPlaylist$_con = currentPlaylist._content) === null || _currentPlaylist$_con === void 0 ? void 0 : _currentPlaylist$_con.length;\n\n    if (!playlistId) {\n      playlistId = yield call(createNewPlaylist, {\n        setCurrent: true,\n        renameMode: false\n      });\n      playlistLength = 0;\n    }\n\n    const response = yield callQuery(queries.createTrackQl, token, {\n      playlist: playlistId,\n      title: action.track.title,\n      source: action.track.source,\n      sourceId: action.track.sourceId,\n      quality: action.track.quality,\n      duration: typeof action.track.duration === \"string\" ? formater.ytToSeconds(action.track.duration) : action.track.duration,\n      thumbnails: action.track.thumbnails,\n      position: playlistLength\n    });\n\n    if (response.errors) {\n      throw new Error(\"Server response contains errrors: \", JSON.stringify(response.errors));\n    }\n\n    const trackId = response.data.createTrack.id;\n    yield put(pushTrackToList({ ...action.track,\n      id: trackId\n    }, action.playlist));\n    const currentPlaylistPath = yield select(getPlaylistPath);\n    action.track.id = trackId;\n    yield put(startCalcBpm(action.track, currentPlaylistPath));\n    yield put(pushLog(new Log(`Added track id:${action.track.id}to playlist id:${playlistId} successful`, path)));\n  } catch (error) {\n    yield put(pushLog(Log.Error(path, \"Can't track to playlist \" + error.message, \"Sorry. During process of coping track to playlist occurred a problem\", error)));\n  } finally {\n    yield put(hideLoading());\n  }\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/sagas/playlists/reqAddTrackSaga.js"],"names":["get","hideLoading","showLoading","call","put","select","takeEvery","UUID","ACTIONS","pushTrackToList","startCalcBpm","getApi","Log","formater","handle","createNewPlaylist","pushTrackToListSaga","PL_PUSH_TRACK_REQUEST","getToken","state","user","token","getPlaylistPath","playList","currentPlaylist","getCurrent","path","action","track","id","genV1","toString","playlist","callQuery","queries","playlistId","_id","playlistLength","_content","length","setCurrent","renameMode","response","createTrackQl","title","source","sourceId","quality","duration","ytToSeconds","thumbnails","position","errors","Error","JSON","stringify","trackId","data","createTrack","currentPlaylistPath","pushLog","error","message"],"mappings":"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","sourcesContent":["import { get } from \"lodash/object\";\r\nimport { hideLoading, showLoading } from 'react-redux-loading-bar';\r\nimport { call, put, select, takeEvery } from \"redux-saga/effects\";\r\nimport UUID from \"uuidjs\";\r\nimport { ACTIONS, pushTrackToList, startCalcBpm } from \"../../actions\";\r\nimport { getApi } from \"./../../apis/apiProvider\";\r\nimport Log from \"./../../utils/logger/logger\";\r\nimport { formater } from \"./../../utils/time/timeFromater\";\r\nimport { handle as createNewPlaylist } from \"./reqCreatePlaylistSaga\";\r\n\r\nexport default function* pushTrackToListSaga() {\r\n    yield takeEvery(ACTIONS.PL_PUSH_TRACK_REQUEST, handle)\r\n}\r\n\r\nconst getToken = state => state.user.token;\r\n\r\nconst getPlaylistPath = state => state.playList.currentPlaylist;\r\n\r\nconst getCurrent = (state, path) => get(state.playList, state.playList.currentPlaylist);\r\n\r\nfunction* handle(action) {\r\n    const path = ['saga', 'playlist', 'request add track to playlist'];\r\n    const token = yield select(getToken);\r\n\r\n    if (!token) {\r\n        action.track.id = UUID.genV1().toString();\r\n        yield put(pushTrackToList(action.track, action.playlist));\r\n        yield put(startCalcBpm(action.track, action.playlist));\r\n        return;\r\n    }\r\n\r\n    try {\r\n        yield put(showLoading());\r\n        const { callQuery, queries } = getApi(\"UserAssets\");\r\n        const currentPlaylist = yield select(getCurrent);\r\n        let playlistId = currentPlaylist?._id;\r\n        let playlistLength = currentPlaylist?._content?.length;\r\n\r\n        if (!playlistId) {\r\n            playlistId = yield call(createNewPlaylist, { setCurrent: true, renameMode: false });\r\n            playlistLength = 0;\r\n        }\r\n\r\n        const response = yield callQuery(queries.createTrackQl, token, {\r\n            playlist: playlistId,\r\n            title: action.track.title,\r\n            source: action.track.source,\r\n            sourceId: action.track.sourceId,\r\n            quality: action.track.quality,\r\n            duration: (typeof action.track.duration === \"string\") ?\r\n                formater.ytToSeconds(action.track.duration) :\r\n                action.track.duration,\r\n            thumbnails: action.track.thumbnails,\r\n            position: playlistLength,\r\n        });\r\n\r\n        if (response.errors) {\r\n            throw new Error(\"Server response contains errrors: \", JSON.stringify(response.errors))\r\n        }\r\n\r\n        const trackId = response.data.createTrack.id;\r\n        yield put(pushTrackToList({\r\n            ...action.track,\r\n            id: trackId\r\n        }, action.playlist));\r\n\r\n        const currentPlaylistPath = yield select(getPlaylistPath);\r\n        action.track.id = trackId;\r\n        yield put(startCalcBpm(action.track, currentPlaylistPath));\r\n\r\n\r\n        yield put(pushLog(\r\n            new Log(`Added track id:${action.track.id}to playlist id:${playlistId} successful`, path)\r\n        ))\r\n    } catch (error) {\r\n        yield put(pushLog(Log.Error(\r\n            path,\r\n            \"Can't track to playlist \" + error.message,\r\n            \"Sorry. During process of coping track to playlist occurred a problem\",\r\n            error\r\n        )))\r\n    } finally {\r\n        yield put(hideLoading())\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}