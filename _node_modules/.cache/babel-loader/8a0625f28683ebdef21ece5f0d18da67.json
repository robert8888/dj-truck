{"ast":null,"code":"import { ACTIONS } from \"../../actions\";\nimport { produce } from \"imer\";\nimport { unset, set, get } from \"lodash/object\";\nconst initState = {\n  list: [],\n  currentPlaylist: [],\n  // path to play list \n  currentSelection: ['root'],\n  // path to dir or playlist current selected\n  root: {},\n  // root dir for play list \n  //mock\n  root: {\n    \"Techno\": {\n      _open: true,\n      \"ZetTempo\": [],\n      \"empty dir\": {},\n      \"HardCore\": [],\n      \"Special\": {\n        _open: true,\n        \"DubTechno\": [],\n        \"Clasic 90\": []\n      }\n    },\n    \"Mini mal\": {\n      \"HighTech\": [],\n      \"Classic\": [],\n      \"EmptyFolder\": {}\n    }\n  }\n};\n\nfunction playListReducer(state = initState, action) {\n  switch (action.type) {\n    case ACTIONS.PL_PUSH_ROOT:\n      {\n        console.log(action.dirContent);\n        return state;\n      }\n\n    case ACTIONS.PUSH_TRACK:\n      {\n        if (state.currentPlaylist.length === 0) {\n          //if is not seelect any play list - create new\n          let pathToDir = [\"root\"];\n\n          if (state.currentSelection.length > 1) {\n            pathToDir = findClosesDir(state, state.currentSelection);\n          }\n\n          const name = generateTemplateName(state, pathToDir, \"New Playlist\");\n          const fullPath = [...pathToDir, name];\n          return produce(state, draftState => {\n            set(draftState, fullPath, []);\n            set(draftState, [...pathToDir, \"_open\"], true);\n            draftState.currentSelection = fullPath;\n            draftState.currentPlaylist = fullPath;\n            const playlist = Array.from(get(draftState, fullPath));\n            playlist.push(action.track);\n            draftState.list = playlist;\n            set(draftState, fullPath, playlist);\n          });\n        }\n\n        return produce(state, draftState => {\n          const list = Array.from(draftState.list);\n          list.push(action.track);\n          draftState.list = list;\n          set(draftState, state.currentPlaylist, Array.from(draftState.list));\n        });\n      }\n\n    case ACTIONS.SET_BPM_AND_OFFSET:\n      {\n        let {\n          id,\n          playlist,\n          bpm,\n          offset\n        } = action;\n        let isCurrent = false;\n\n        if (playlist === undefined || playlist.length === 0) {\n          isCurrent = true;\n          playlist = state.currentPlaylist;\n        }\n\n        const list = Array.from(get(state, playlist));\n        const index = list.findIndex(element => element._id === id);\n\n        if (index === -1) {\n          return state;\n        }\n\n        list[index].bpm = bpm;\n\n        if (offset) {\n          list[index].offset = offset;\n        }\n\n        return produce(state, draftState => {\n          set(draftState, playlist, list);\n\n          if (isCurrent) {\n            draftState.list = list;\n          }\n\n          draftState.refreshFalg = Math.random();\n        });\n      }\n\n    case ACTIONS.PL_TOGGLE_DIR:\n      {\n        const open = get(state, [...action.path, \"_open\"]);\n        return produce(state, draftState => set(draftState, [...action.path, \"_open\"], !open));\n      }\n\n    case ACTIONS.PL_SET_SELECTION:\n      {\n        return produce(state, draftState => draftState.currentSelection = action.path);\n      }\n\n    case ACTIONS.PL_SET_CURRENT_PLAYLIST:\n      {\n        return produce(state, draftState => {\n          draftState.currentPlayList = action.path;\n          draftState.list = Array.from(get(state, [action.path]));\n        });\n      }\n\n    case ACTIONS.PL_RENAME_SELECTED:\n      {\n        const content = get(state, state.currentSelection);\n        return produce(state, draftState => {\n          unset(draftState, state.currentSelection);\n          const newCurrent = draftState.currentSelection;\n          newCurrent.pop();\n          newCurrent.push(action.name);\n          draftState.currentSelection = newCurrent;\n          set(draftState, newCurrent, content);\n        });\n      }\n\n    case ACTIONS.PL_DELETE_SELECTED:\n      {\n        return produce(state, draftState => {\n          unset(draftState, state.currentSelection);\n          draftState.currentSelection = [];\n        });\n      }\n\n    case ACTIONS.PL_MOVE_TO:\n      {\n        const {\n          pathFrom,\n          pathTo\n        } = action;\n        const content = get(state, pathFrom);\n        const name = pathFrom.pop(); //if target and source are the same don't do anything\n\n        if (pathFrom.length === pathTo.length && pathFrom.every((e, i) => e === pathTo[i])) {\n          return state;\n        }\n\n        return produce(state, draftState => {\n          set(draftState, [...pathTo, name], content);\n          unset(draftState, [...pathFrom, name]);\n        });\n      }\n\n    case ACTIONS.PL_DELETE_TRACK:\n      {\n        return produce(state, draftState => {\n          const newList = [...state.list];\n          newList.splice(action.index, 1);\n          draftState.list = newList;\n          set(draftState, draftState.currentPlaylist, newList);\n        });\n      }\n\n    case ACTIONS.PL_SWAP_TRACK_ON_CURRENT:\n      {\n        return produce(state, draftState => {\n          const newList = [...state.list];\n          let trackFrom = newList[action.from];\n          newList[action.from] = newList[action.to];\n          newList[action.to] = trackFrom;\n          draftState.list = newList;\n          set(draftState, draftState.currentPlaylist, newList);\n        });\n      }\n\n    case ACTIONS.PL_ADD_TRACK_TO_LIST:\n      {\n        const list = get(state, action.path);\n        if (!list) return state;\n        return produce(state, draftState => {\n          list.push(action.track);\n          set(draftState, action.fullPath, list);\n        });\n      }\n\n    case ACTIONS.PL_CREATE_DIR:\n      {\n        console.log(action.name);\n        let name = action.name;\n        const pathToDir = findClosesDir(state, state.currentSelection);\n\n        if (!name) {\n          name = generateTemplateName(state, pathToDir, \"New Folder\");\n          console.log(\"new name\", name);\n        }\n\n        return produce(state, draftState => {\n          set(draftState, [...pathToDir, name], {});\n          set(draftState, [...pathToDir, \"_open\"], true);\n          draftState.currentSelection = [...pathToDir, name];\n        });\n      }\n\n    case ACTIONS.PL_CREATE_PLAYLIST:\n      {\n        let name = action.name;\n        const pathToDir = findClosesDir(state, state.currentSelection);\n\n        if (!name) {\n          name = generateTemplateName(state, pathToDir, \"New Playlist\");\n        }\n\n        return produce(state, draftState => {\n          set(draftState, [...pathToDir, name], []);\n          set(draftState, [...pathToDir, \"_open\"], true);\n          draftState.currentSelection = [...pathToDir, name];\n        });\n      }\n\n    case ACTIONS.PL_OPEN_CURRENT_PLAY_LIST:\n      {\n        return produce(state, draftState => {\n          draftState.list = Array.from(get(state, state.currentSelection));\n          draftState.currentPlaylist = state.currentSelection;\n        });\n      }\n\n    default:\n      return state;\n  }\n}\n\nexport default playListReducer;\n\nfunction findClosesDir(state, path) {\n  if (get(state, path) instanceof Array) {\n    path.pop();\n    return findClosesDir(state, path);\n  } else return path;\n}\n\nfunction generateTemplateName(state, path, base) {\n  let i = 0;\n\n  while (true) {\n    const number = i || \"\";\n    let name = base + \" \" + number;\n    const notExist = !get(state, [...path, name]);\n\n    if (notExist) {\n      return name;\n    } else {\n      i++;\n    }\n  }\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/reducers/console/playListReducer.js"],"names":["ACTIONS","produce","unset","set","get","initState","list","currentPlaylist","currentSelection","root","_open","playListReducer","state","action","type","PL_PUSH_ROOT","console","log","dirContent","PUSH_TRACK","length","pathToDir","findClosesDir","name","generateTemplateName","fullPath","draftState","playlist","Array","from","push","track","SET_BPM_AND_OFFSET","id","bpm","offset","isCurrent","undefined","index","findIndex","element","_id","refreshFalg","Math","random","PL_TOGGLE_DIR","open","path","PL_SET_SELECTION","PL_SET_CURRENT_PLAYLIST","currentPlayList","PL_RENAME_SELECTED","content","newCurrent","pop","PL_DELETE_SELECTED","PL_MOVE_TO","pathFrom","pathTo","every","e","i","PL_DELETE_TRACK","newList","splice","PL_SWAP_TRACK_ON_CURRENT","trackFrom","to","PL_ADD_TRACK_TO_LIST","PL_CREATE_DIR","PL_CREATE_PLAYLIST","PL_OPEN_CURRENT_PLAY_LIST","base","number","notExist"],"mappings":"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","sourcesContent":["import { ACTIONS } from \"../../actions\";\r\nimport { produce } from \"imer\";\r\nimport { unset, set, get } from \"lodash/object\"\r\n\r\nconst initState = {\r\n    list: [],\r\n\r\n    currentPlaylist: [],// path to play list \r\n    currentSelection: ['root'], // path to dir or playlist current selected\r\n    root: {}, // root dir for play list \r\n\r\n    //mock\r\n    root: {\r\n        \"Techno\": {\r\n            _open: true,\r\n            \"ZetTempo\": [],\r\n            \"empty dir\": {},\r\n            \"HardCore\": [],\r\n            \"Special\": {\r\n                _open: true,\r\n                \"DubTechno\": [],\r\n                \"Clasic 90\": []\r\n            }\r\n        },\r\n        \"Mini mal\": {\r\n            \"HighTech\": [],\r\n            \"Classic\": [],\r\n            \"EmptyFolder\": {}\r\n        }\r\n    }\r\n}\r\n\r\nfunction playListReducer(state = initState, action) {\r\n    switch (action.type) {\r\n        case ACTIONS.PL_PUSH_ROOT:{\r\n            console.log(action.dirContent)\r\n            return state;\r\n        }\r\n\r\n        case ACTIONS.PUSH_TRACK: {\r\n            if (state.currentPlaylist.length === 0) {\r\n                //if is not seelect any play list - create new\r\n                let pathToDir = [\"root\"]\r\n                if (state.currentSelection.length > 1) {\r\n                    pathToDir = findClosesDir(state, state.currentSelection);\r\n                }\r\n                const name = generateTemplateName(state, pathToDir, \"New Playlist\");\r\n                const fullPath = [...pathToDir, name];\r\n                return produce(state, draftState => {\r\n                    set(draftState, fullPath, [])\r\n                    set(draftState, [...pathToDir, \"_open\"], true);\r\n                    draftState.currentSelection = fullPath\r\n                    draftState.currentPlaylist = fullPath;\r\n                    const playlist = Array.from(get(draftState, fullPath));\r\n                    playlist.push(action.track);\r\n                    draftState.list = playlist;\r\n                    set(draftState, fullPath, playlist);\r\n                })\r\n            }\r\n            return produce(state, draftState => {\r\n                const list = Array.from(draftState.list);\r\n                list.push(action.track)\r\n                draftState.list = list;\r\n                set(draftState, state.currentPlaylist, Array.from(draftState.list));\r\n            })\r\n        }\r\n\r\n        case ACTIONS.SET_BPM_AND_OFFSET: {\r\n            let { id, playlist, bpm, offset } = action;\r\n            let isCurrent = false;\r\n            if (playlist === undefined || playlist.length === 0){\r\n                isCurrent = true;\r\n                playlist = state.currentPlaylist;\r\n            }\r\n            const list = Array.from(get(state, playlist));\r\n            const index = list.findIndex(element => element._id === id);\r\n            if(index === -1){\r\n                return state;\r\n            }\r\n            list[index].bpm = bpm;\r\n            if(offset){\r\n                list[index].offset = offset;\r\n            }\r\n            return produce(state, draftState => {\r\n                set(draftState, playlist, list);\r\n                if(isCurrent){\r\n                    draftState.list = list;\r\n                }\r\n                draftState.refreshFalg = Math.random();\r\n            })\r\n        }\r\n        case ACTIONS.PL_TOGGLE_DIR: {\r\n            const open = get(state, [...action.path, \"_open\"])\r\n            return produce(state, draftState => set(draftState, [...action.path, \"_open\"], !open))\r\n        }\r\n        case ACTIONS.PL_SET_SELECTION: {\r\n            return produce(state, draftState => draftState.currentSelection = action.path)\r\n        }\r\n\r\n        case ACTIONS.PL_SET_CURRENT_PLAYLIST: {\r\n            return produce(state, draftState => {\r\n                draftState.currentPlayList = action.path;\r\n                draftState.list = Array.from(get(state, [action.path]));\r\n            })\r\n        }\r\n\r\n        case ACTIONS.PL_RENAME_SELECTED: {\r\n            const content = get(state, state.currentSelection);\r\n            return produce(state, draftState => {\r\n                unset(draftState, state.currentSelection);\r\n                const newCurrent = draftState.currentSelection;\r\n                newCurrent.pop();\r\n                newCurrent.push(action.name);\r\n                draftState.currentSelection = newCurrent;\r\n                set(draftState, newCurrent, content)\r\n            })\r\n        }\r\n\r\n        case ACTIONS.PL_DELETE_SELECTED: {\r\n            return produce(state, draftState => {\r\n                unset(draftState, state.currentSelection);\r\n                draftState.currentSelection = [];\r\n            })\r\n        }\r\n\r\n        case ACTIONS.PL_MOVE_TO: {\r\n            const { pathFrom, pathTo } = action;\r\n            const content = get(state, pathFrom);\r\n            const name = pathFrom.pop();\r\n            //if target and source are the same don't do anything\r\n            if (pathFrom.length === pathTo.length &&\r\n                pathFrom.every((e, i) => e === pathTo[i])) {\r\n                return state;\r\n            }\r\n            return produce(state, draftState => {\r\n                set(draftState, [...pathTo, name], content);\r\n                unset(draftState, [...pathFrom, name]);\r\n            })\r\n        }\r\n\r\n        case ACTIONS.PL_DELETE_TRACK: {\r\n            return produce(state, draftState => {\r\n                const newList = [...state.list];\r\n                newList.splice(action.index, 1);\r\n                draftState.list = newList\r\n                set(draftState, draftState.currentPlaylist, newList)\r\n            })\r\n        }\r\n\r\n        case ACTIONS.PL_SWAP_TRACK_ON_CURRENT: {\r\n            return produce(state, draftState => {\r\n                const newList = [...state.list];\r\n                let trackFrom = newList[action.from];\r\n                newList[action.from] = newList[action.to];\r\n                newList[action.to] = trackFrom;\r\n                draftState.list = newList;\r\n                set(draftState, draftState.currentPlaylist, newList)\r\n            })\r\n        }\r\n\r\n        case ACTIONS.PL_ADD_TRACK_TO_LIST: {\r\n            const list = get(state, action.path);\r\n            if (!list) return state;\r\n            return produce(state, draftState => {\r\n                list.push(action.track);\r\n                set(draftState, action.fullPath, list);\r\n            })\r\n        }\r\n\r\n        case ACTIONS.PL_CREATE_DIR: {\r\n            console.log(action.name)\r\n            let name = action.name;\r\n            const pathToDir = findClosesDir(state, state.currentSelection);\r\n            if (!name) {\r\n                name = generateTemplateName(state, pathToDir, \"New Folder\");\r\n                console.log(\"new name\", name)\r\n            }\r\n            return produce(state, draftState => {\r\n                set(draftState, [...pathToDir, name], {})\r\n                set(draftState, [...pathToDir, \"_open\"], true);\r\n                draftState.currentSelection = [...pathToDir, name];\r\n            })\r\n        }\r\n\r\n        case ACTIONS.PL_CREATE_PLAYLIST: {\r\n            let name = action.name;\r\n            const pathToDir = findClosesDir(state, state.currentSelection);\r\n            if (!name) {\r\n                name = generateTemplateName(state, pathToDir, \"New Playlist\");\r\n            }\r\n            return produce(state, draftState => {\r\n                set(draftState, [...pathToDir, name], [])\r\n                set(draftState, [...pathToDir, \"_open\"], true);\r\n                draftState.currentSelection = [...pathToDir, name];\r\n            })\r\n        }\r\n\r\n        case ACTIONS.PL_OPEN_CURRENT_PLAY_LIST: {\r\n            return produce(state, draftState => {\r\n                draftState.list = Array.from(get(state, state.currentSelection))\r\n                draftState.currentPlaylist = state.currentSelection;\r\n            })\r\n        }\r\n\r\n\r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport default playListReducer;\r\n\r\n\r\nfunction findClosesDir(state, path) {\r\n    if (get(state, path) instanceof Array) {\r\n        path.pop();\r\n        return findClosesDir(state, path)\r\n    } else return path;\r\n}\r\n\r\nfunction generateTemplateName(state, path, base) {\r\n    let i = 0;\r\n    while (true) {\r\n        const number = i || \"\";\r\n        let name = base + \" \" + number;\r\n        const notExist = !(get(state, [...path, name]));\r\n        if (notExist) {\r\n            return name;\r\n        } else {\r\n            i++;\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}