{"ast":null,"code":"import { renameSelected, ACTIONS } from \"../../actions\";\nimport { takeEvery, select, put } from \"redux-saga/effects\";\nimport { getApi } from \"./../../apis/apiProvider\";\nimport { renameDir, renamePlaylist } from \"./../../qlQueries/rename\";\nimport { get } from \"lodash/object\";\nimport { generateTemplateName as generateName, findClosesDir } from \"./../../reducers/console/playlist/utils\";\nexport default function* renameSelectedRequestSaga() {\n  yield takeEvery(ACTIONS.PL_RENAME_SELECTED_REQUEST, callApi);\n}\n\nconst getToken = state => state.user.token;\n\nconst getCurrentSelection = state => state.playList.currentSelection;\n\nconst getCurrent = (state, path) => get(state.playList, path);\n\nconst parentDirPath = (state, path) => findClosesDir(state, path);\n\nconst parseName = (state, path, name) => generateName(state, path, name);\n\nfunction* callApi(action) {\n  const {\n    callQuery\n  } = getApi(\"UserAssets\");\n  const token = yield select(getToken);\n  const currentSelection = yield select(getCurrentSelection);\n  const current = yield select(getCurrent, currentSelection);\n  const parentPath = yield select(parentDirPath, currentSelection);\n  const id = current._id;\n  const isPlaylist = current instanceof Array;\n  const name = yield select(parseName, currentSelection, action.name);\n  console.log(\"new name\", name);\n  let query;\n\n  if (isPlaylist) {\n    query = renamePlaylist(id, name);\n  } else {\n    // dir\n    query = renameDir(id, name);\n  }\n\n  let res = yield callQuery(query, token);\n\n  if (res.data.renameDir || res.data.renamePlaylist) {\n    yield put(renameSelected(name));\n  }\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/sagas/playlists/renameSelectedSaga.js"],"names":["renameSelected","ACTIONS","takeEvery","select","put","getApi","renameDir","renamePlaylist","get","generateTemplateName","generateName","findClosesDir","renameSelectedRequestSaga","PL_RENAME_SELECTED_REQUEST","callApi","getToken","state","user","token","getCurrentSelection","playList","currentSelection","getCurrent","path","parentDirPath","parseName","name","action","callQuery","current","parentPath","id","_id","isPlaylist","Array","console","log","query","res","data"],"mappings":"AAAA,SAASA,cAAT,EAAyBC,OAAzB,QAAwC,eAAxC;AACA,SAASC,SAAT,EAAoBC,MAApB,EAA4BC,GAA5B,QAAuC,oBAAvC;AACA,SAASC,MAAT,QAAuB,0BAAvB;AACA,SAASC,SAAT,EAAoBC,cAApB,QAA0C,0BAA1C;AACA,SAASC,GAAT,QAAoB,eAApB;AACA,SACIC,oBAAoB,IAAIC,YAD5B,EAEIC,aAFJ,QAGW,yCAHX;AAKA,eAAe,UAAUC,yBAAV,GAAsC;AACjD,QAAMV,SAAS,CAACD,OAAO,CAACY,0BAAT,EAAqCC,OAArC,CAAf;AACH;;AAED,MAAMC,QAAQ,GAAGC,KAAK,IAAIA,KAAK,CAACC,IAAN,CAAWC,KAArC;;AAEA,MAAMC,mBAAmB,GAAGH,KAAK,IAAIA,KAAK,CAACI,QAAN,CAAeC,gBAApD;;AAEA,MAAMC,UAAU,GAAG,CAACN,KAAD,EAAQO,IAAR,KAAiBf,GAAG,CAACQ,KAAK,CAACI,QAAP,EAAiBG,IAAjB,CAAvC;;AAEA,MAAMC,aAAa,GAAG,CAACR,KAAD,EAASO,IAAT,KAAkBZ,aAAa,CAACK,KAAD,EAAQO,IAAR,CAArD;;AAEA,MAAME,SAAS,GAAG,CAACT,KAAD,EAAQO,IAAR,EAAcG,IAAd,KAAuBhB,YAAY,CAACM,KAAD,EAAQO,IAAR,EAAcG,IAAd,CAArD;;AAEA,UAAUZ,OAAV,CAAkBa,MAAlB,EAA0B;AACtB,QAAM;AAAEC,IAAAA;AAAF,MAAgBvB,MAAM,CAAC,YAAD,CAA5B;AACA,QAAMa,KAAK,GAAG,MAAMf,MAAM,CAACY,QAAD,CAA1B;AACA,QAAMM,gBAAgB,GAAG,MAAMlB,MAAM,CAACgB,mBAAD,CAArC;AACA,QAAMU,OAAO,GAAG,MAAM1B,MAAM,CAACmB,UAAD,EAAaD,gBAAb,CAA5B;AAEA,QAAMS,UAAU,GAAG,MAAM3B,MAAM,CAACqB,aAAD,EAAgBH,gBAAhB,CAA/B;AAEA,QAAMU,EAAE,GAAGF,OAAO,CAACG,GAAnB;AACA,QAAMC,UAAU,GAAGJ,OAAO,YAAYK,KAAtC;AAEA,QAAMR,IAAI,GAAG,MAAMvB,MAAM,CAACsB,SAAD,EAAYJ,gBAAZ,EAA8BM,MAAM,CAACD,IAArC,CAAzB;AACAS,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBV,IAAxB;AAEA,MAAIW,KAAJ;;AACA,MAAIJ,UAAJ,EAAgB;AACZI,IAAAA,KAAK,GAAG9B,cAAc,CAACwB,EAAD,EAAKL,IAAL,CAAtB;AACH,GAFD,MAEO;AAAE;AACLW,IAAAA,KAAK,GAAG/B,SAAS,CAACyB,EAAD,EAAKL,IAAL,CAAjB;AACH;;AAED,MAAIY,GAAG,GAAG,MAAMV,SAAS,CAACS,KAAD,EAAQnB,KAAR,CAAzB;;AACA,MAAIoB,GAAG,CAACC,IAAJ,CAASjC,SAAT,IAAsBgC,GAAG,CAACC,IAAJ,CAAShC,cAAnC,EAAmD;AAC/C,UAAMH,GAAG,CAACJ,cAAc,CAAC0B,IAAD,CAAf,CAAT;AACH;AACJ","sourcesContent":["import { renameSelected, ACTIONS } from \"../../actions\";\r\nimport { takeEvery, select, put } from \"redux-saga/effects\"\r\nimport { getApi } from \"./../../apis/apiProvider\";\r\nimport { renameDir, renamePlaylist } from \"./../../qlQueries/rename\";\r\nimport { get } from \"lodash/object\";\r\nimport { \r\n    generateTemplateName as generateName, \r\n    findClosesDir    \r\n    } from \"./../../reducers/console/playlist/utils\"\r\n\r\nexport default function* renameSelectedRequestSaga() {\r\n    yield takeEvery(ACTIONS.PL_RENAME_SELECTED_REQUEST, callApi)\r\n}\r\n\r\nconst getToken = state => state.user.token;\r\n\r\nconst getCurrentSelection = state => state.playList.currentSelection;\r\n\r\nconst getCurrent = (state, path) => get(state.playList, path);\r\n\r\nconst parentDirPath = (state , path) => findClosesDir(state, path);\r\n\r\nconst parseName = (state, path, name) => generateName(state, path, name);\r\n\r\nfunction* callApi(action) {\r\n    const { callQuery } = getApi(\"UserAssets\");\r\n    const token = yield select(getToken);\r\n    const currentSelection = yield select(getCurrentSelection);\r\n    const current = yield select(getCurrent, currentSelection);\r\n\r\n    const parentPath = yield select(parentDirPath, currentSelection);\r\n\r\n    const id = current._id;\r\n    const isPlaylist = current instanceof Array;\r\n\r\n    const name = yield select(parseName, currentSelection, action.name)\r\n    console.log(\"new name\", name);\r\n\r\n    let query;\r\n    if (isPlaylist) {\r\n        query = renamePlaylist(id, name)\r\n    } else { // dir\r\n        query = renameDir(id, name)\r\n    }\r\n\r\n    let res = yield callQuery(query, token);\r\n    if (res.data.renameDir || res.data.renamePlaylist) {\r\n        yield put(renameSelected(name));\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}