{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJEKTY\\\\APKI\\\\DjTruck\\\\djtruck\\\\src\\\\components\\\\common\\\\Slider\\\\Slider.js\";\nimport React from \"react\";\nimport \"./slider.scss\";\n\nclass Slider extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      //from get derived stated from props\n      sliderCurrnetPositionFromProps: null,\n      sliderRange: null,\n      sliderCurrnetPosition: null,\n      sliderPrevPosition: null,\n      isDragged: false,\n      thumbHeight: 0,\n      thumbWidth: 0,\n      sliderAreaTopOffset: 0,\n      sliderAreaLeftOffset: 0\n    };\n\n    this.evalValue = () => {\n      const {\n        from,\n        range\n      } = Slider.getRange(this.props.from, this.props.to);\n      const progress = (this.state.sliderCurrnetPosition - this.state.thumbHeight / 2) / this.state.sliderRange;\n      let value = range * progress + from;\n      return value;\n    };\n\n    this.setValue = value => {\n      const {\n        from,\n        range\n      } = Slider.getRange(this.props.from, this.props.to);\n      const progress = (value - from) / range;\n      const position = progress * this.state.sliderRange;\n      this.setPosition(position + this.state.thumbHeight / 2);\n    };\n\n    this.setPosition = (currentPosition, prevPosition) => {\n      this.setState({ ...this.state,\n        sliderCurrnetPosition: this.positionNormalize(currentPosition),\n        sliderPrevPosition: prevPosition || this.state.sliderPrevPosition\n      }, () => {\n        if (this.props.onChange) {\n          this.props.onChange(this.evalValue());\n        }\n      });\n    };\n\n    this.mouseDownHandle = event => {\n      if (event.target === this.sliderAreaElement.current || event.target === this.sliderRangeElement.current) {\n        //temporary\n        let clickY = event.clientY - this.sliderAreaElement.current.getBoundingClientRect().top;\n        this.setPosition(clickY, this.state.sliderCurrnetPositionFromProps);\n      } else // dragging \n        if (event.target === this.sliderThumbElement.current) {\n          this.setState({ ...this.state,\n            isDragged: true\n          });\n          const shiftY = event.clientY - this.sliderThumbElement.current.getBoundingClientRect().top;\n          document.addEventListener('mousemove', e => this.mouseMoveHandler.call(this, e, shiftY));\n          document.addEventListener('dragstart', e => e.preventDefault());\n        }\n\n      document.addEventListener('mouseup', this.mouseUpHandler);\n      document.addEventListener('dragend', this.mouseUpHandler);\n    };\n\n    this.mouseUpHandler = event => {\n      if (this.state.isDragged) {\n        this.setState({ ...this.state,\n          isDragged: false\n        });\n      } else {\n        this.setPosition(this.state.sliderPrevPosition);\n      }\n\n      document.removeEventListener('mousemove', this.mouseMoveHandler.bind(this));\n      document.removeEventListener('mouseup', this.mouseUpHandler);\n      document.removeEventListener('dragend', this.mouseUpHandler);\n    };\n\n    this.mouseMoveHandler = (event, shiftY) => {\n      if (!this.state.isDragged) return;\n      let position = event.clientY - this.state.sliderAreaTopOffset - shiftY + this.state.thumbHeight / 2;\n      this.setPosition(position);\n    };\n\n    this.sliderRangeElement = React.createRef();\n    this.sliderThumbElement = React.createRef();\n    this.sliderAreaElement = React.createRef();\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (!state.sliderRange || !state.thumbHeight) return null;\n\n    const getPostion = value => {\n      const {\n        from,\n        range\n      } = Slider.getRange(props.from, props.to);\n      const progress = (value - from) / range;\n      const position = progress * state.sliderRange;\n      return position + state.thumbHeight / 2;\n    };\n\n    if (props.value > props.to || props.value < props.from) {\n      return null;\n    }\n\n    let currentPosition = getPostion(props.value);\n    return { ...state,\n      sliderCurrnetPositionFromProps: currentPosition\n    };\n  }\n\n  positionNormalize(position) {\n    return Math.min(Math.max(position, this.state.thumbHeight / 2), this.state.sliderRange + this.state.thumbHeight / 2);\n  }\n\n  componentDidMount() {\n    const thumbHeight = this.sliderThumbElement.current.getBoundingClientRect().height;\n    const thumbWidth = this.sliderThumbElement.current.getBoundingClientRect().width;\n    const topOffset = this.sliderAreaElement.current.getBoundingClientRect().top;\n    const leftOffset = this.sliderAreaElement.current.getBoundingClientRect().left;\n    const top = parseInt(window.getComputedStyle(this.sliderThumbElement.current).top);\n    const range = parseInt(window.getComputedStyle(this.sliderRangeElement.current).height);\n    this.setState(state => {\n      const _state = { ...state\n      };\n      _state.sliderCurrnetPosition = top;\n      _state.sliderRange = range;\n      _state.thumbHeight = thumbHeight;\n      _state.thumbHeight = thumbHeight;\n      _state.sliderAreaTopOffset = topOffset;\n      _state.sliderAreaLeftOffset = leftOffset;\n      return _state;\n    }, () => {\n      if (this.props.value !== undefined) {\n        this.setValue(this.props.value);\n      }\n    });\n    this.sliderAreaElement.current.addEventListener('mousedown', this.mouseDownHandle.bind(this));\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"slider\" + (this.props.className ? \" \" + this.props.className : \"\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      ref: this.sliderAreaElement,\n      className: \"slider-area\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      ref: this.sliderRangeElement,\n      className: \"slider-range\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"slider-thumb\",\n      ref: this.sliderThumbElement,\n      style: (this.state.sliderCurrnetPosition !== null || this.state.sliderCurrnetPosition !== undefined) && {\n        top: this.state.sliderCurrnetPositionFromProps\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    })));\n  }\n\n}\n\nSlider.getRange = (from, to) => {\n  return {\n    from,\n    to,\n    range: from * to < 0 ? Math.abs(to) + Math.abs(from) : to - from\n  };\n};\n\nexport default Slider;","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/components/common/Slider/Slider.js"],"names":["React","Slider","Component","constructor","state","sliderCurrnetPositionFromProps","sliderRange","sliderCurrnetPosition","sliderPrevPosition","isDragged","thumbHeight","thumbWidth","sliderAreaTopOffset","sliderAreaLeftOffset","evalValue","from","range","getRange","props","to","progress","value","setValue","position","setPosition","currentPosition","prevPosition","setState","positionNormalize","onChange","mouseDownHandle","event","target","sliderAreaElement","current","sliderRangeElement","clickY","clientY","getBoundingClientRect","top","sliderThumbElement","shiftY","document","addEventListener","e","mouseMoveHandler","call","preventDefault","mouseUpHandler","removeEventListener","bind","createRef","getDerivedStateFromProps","getPostion","Math","min","max","componentDidMount","height","width","topOffset","leftOffset","left","parseInt","window","getComputedStyle","_state","undefined","render","className","abs"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,eAAP;;AAEA,MAAMC,MAAN,SAAqBD,KAAK,CAACE,SAA3B,CAAoC;AAChCC,EAAAA,WAAW,GAAG;AACV;AADU,SAQdC,KARc,GAQN;AACJ;AACAC,MAAAA,8BAA8B,EAAE,IAF5B;AAIJC,MAAAA,WAAW,EAAE,IAJT;AAKJC,MAAAA,qBAAqB,EAAE,IALnB;AAMJC,MAAAA,kBAAkB,EAAE,IANhB;AAOJC,MAAAA,SAAS,EAAG,KAPR;AASJC,MAAAA,WAAW,EAAE,CATT;AAUJC,MAAAA,UAAU,EAAE,CAVR;AAWJC,MAAAA,mBAAmB,EAAG,CAXlB;AAYJC,MAAAA,oBAAoB,EAAE;AAZlB,KARM;;AAAA,SAsDdC,SAtDc,GAsDF,MAAM;AACd,YAAM;AAACC,QAAAA,IAAD;AAAQC,QAAAA;AAAR,UAAiBf,MAAM,CAACgB,QAAP,CAAgB,KAAKC,KAAL,CAAWH,IAA3B,EAAiC,KAAKG,KAAL,CAAWC,EAA5C,CAAvB;AACA,YAAMC,QAAQ,GAAG,CAAC,KAAKhB,KAAL,CAAWG,qBAAX,GAAmC,KAAKH,KAAL,CAAWM,WAAX,GAAyB,CAA7D,IACE,KAAKN,KAAL,CAAWE,WAD9B;AAGA,UAAIe,KAAK,GAAIL,KAAK,GAAGI,QAAR,GAAmBL,IAAhC;AACA,aAAOM,KAAP;AACH,KA7Da;;AAAA,SA+DdC,QA/Dc,GA+DFD,KAAD,IAAW;AAClB,YAAM;AAAEN,QAAAA,IAAF;AAASC,QAAAA;AAAT,UAAmBf,MAAM,CAACgB,QAAP,CAAgB,KAAKC,KAAL,CAAWH,IAA3B,EAAiC,KAAKG,KAAL,CAAWC,EAA5C,CAAzB;AACA,YAAMC,QAAQ,GAAG,CAACC,KAAK,GAAGN,IAAT,IAAgBC,KAAjC;AACA,YAAMO,QAAQ,GAAGH,QAAQ,GAAI,KAAKhB,KAAL,CAAWE,WAAxC;AACA,WAAKkB,WAAL,CAAiBD,QAAQ,GAAG,KAAKnB,KAAL,CAAWM,WAAX,GAAyB,CAArD;AACH,KApEa;;AAAA,SA4Edc,WA5Ec,GA4EA,CAACC,eAAD,EAAkBC,YAAlB,KAAmC;AAC7C,WAAKC,QAAL,CAAc,EAAC,GAAG,KAAKvB,KAAT;AACVG,QAAAA,qBAAqB,EAAG,KAAKqB,iBAAL,CAAuBH,eAAvB,CADd;AAEVjB,QAAAA,kBAAkB,EAAGkB,YAAY,IAAI,KAAKtB,KAAL,CAAWI;AAFtC,OAAd,EAGG,MAAI;AACH,YAAG,KAAKU,KAAL,CAAWW,QAAd,EAAuB;AACnB,eAAKX,KAAL,CAAWW,QAAX,CAAoB,KAAKf,SAAL,EAApB;AACH;AACJ,OAPD;AAQH,KArFa;;AAAA,SAuFdgB,eAvFc,GAuFKC,KAAD,IAAU;AACxB,UAAGA,KAAK,CAACC,MAAN,KAAiB,KAAKC,iBAAL,CAAuBC,OAAxC,IAAmDH,KAAK,CAACC,MAAN,KAAiB,KAAKG,kBAAL,CAAwBD,OAA/F,EAAuG;AAAE;AACrG,YAAIE,MAAM,GAAGL,KAAK,CAACM,OAAN,GAAgB,KAAKJ,iBAAL,CAAuBC,OAAvB,CAA+BI,qBAA/B,GAAuDC,GAApF;AACA,aAAKf,WAAL,CAAiBY,MAAjB,EAAyB,KAAKhC,KAAL,CAAWC,8BAApC;AACH,OAHD,MAGO;AACH,YAAG0B,KAAK,CAACC,MAAN,KAAiB,KAAKQ,kBAAL,CAAwBN,OAA5C,EAAoD;AACpD,eAAKP,QAAL,CAAc,EAAC,GAAG,KAAKvB,KAAT;AAAgBK,YAAAA,SAAS,EAAE;AAA3B,WAAd;AACA,gBAAMgC,MAAM,GAAGV,KAAK,CAACM,OAAN,GAAgB,KAAKG,kBAAL,CAAwBN,OAAxB,CAAgCI,qBAAhC,GAAwDC,GAAvF;AACAG,UAAAA,QAAQ,CAACC,gBAAT,CAA0B,WAA1B,EAAuCC,CAAC,IAAK,KAAKC,gBAAL,CAAsBC,IAAtB,CAA2B,IAA3B,EAAiCF,CAAjC,EAAoCH,MAApC,CAA7C;AACAC,UAAAA,QAAQ,CAACC,gBAAT,CAA0B,WAA1B,EAAuCC,CAAC,IAAIA,CAAC,CAACG,cAAF,EAA5C;AACH;;AAEDL,MAAAA,QAAQ,CAACC,gBAAT,CAA0B,SAA1B,EAAqC,KAAKK,cAA1C;AACAN,MAAAA,QAAQ,CAACC,gBAAT,CAA0B,SAA1B,EAAqC,KAAKK,cAA1C;AACH,KArGa;;AAAA,SAuGdA,cAvGc,GAuGGjB,KAAK,IAAI;AACtB,UAAG,KAAK3B,KAAL,CAAWK,SAAd,EAAwB;AACpB,aAAKkB,QAAL,CAAc,EAAC,GAAG,KAAKvB,KAAT;AAAgBK,UAAAA,SAAS,EAAE;AAA3B,SAAd;AACH,OAFD,MAEO;AACH,aAAKe,WAAL,CAAiB,KAAKpB,KAAL,CAAWI,kBAA5B;AACH;;AAEDkC,MAAAA,QAAQ,CAACO,mBAAT,CAA6B,WAA7B,EAA0C,KAAKJ,gBAAL,CAAsBK,IAAtB,CAA2B,IAA3B,CAA1C;AACAR,MAAAA,QAAQ,CAACO,mBAAT,CAA6B,SAA7B,EAAwC,KAAKD,cAA7C;AACAN,MAAAA,QAAQ,CAACO,mBAAT,CAA6B,SAA7B,EAAwC,KAAKD,cAA7C;AACH,KAjHa;;AAAA,SAmHdH,gBAnHc,GAmHK,CAACd,KAAD,EAAQU,MAAR,KAAkB;AACjC,UAAG,CAAC,KAAKrC,KAAL,CAAWK,SAAf,EAA0B;AAC1B,UAAIc,QAAQ,GAAGQ,KAAK,CAACM,OAAN,GACG,KAAKjC,KAAL,CAAWQ,mBADd,GAEG6B,MAFH,GAGI,KAAKrC,KAAL,CAAWM,WAAX,GAAuB,CAH1C;AAKA,WAAKc,WAAL,CAAiBD,QAAjB;AACH,KA3Ha;;AAGV,SAAKY,kBAAL,GAA0BnC,KAAK,CAACmD,SAAN,EAA1B;AACA,SAAKX,kBAAL,GAA0BxC,KAAK,CAACmD,SAAN,EAA1B;AACA,SAAKlB,iBAAL,GAAyBjC,KAAK,CAACmD,SAAN,EAAzB;AACH;;AAyBD,SAAOC,wBAAP,CAAgClC,KAAhC,EAAuCd,KAAvC,EAA8C;AAC1C,QAAG,CAACA,KAAK,CAACE,WAAP,IAAsB,CAACF,KAAK,CAACM,WAAhC,EAA6C,OAAO,IAAP;;AAE7C,UAAM2C,UAAU,GAAIhC,KAAD,IAAW;AAC1B,YAAM;AAAEN,QAAAA,IAAF;AAASC,QAAAA;AAAT,UAAmBf,MAAM,CAACgB,QAAP,CAAgBC,KAAK,CAACH,IAAtB,EAA4BG,KAAK,CAACC,EAAlC,CAAzB;AACA,YAAMC,QAAQ,GAAG,CAACC,KAAK,GAAGN,IAAT,IAAgBC,KAAjC;AACA,YAAMO,QAAQ,GAAGH,QAAQ,GAAIhB,KAAK,CAACE,WAAnC;AACA,aAAQiB,QAAQ,GAAGnB,KAAK,CAACM,WAAN,GAAoB,CAAvC;AACH,KALD;;AAOA,QAAGQ,KAAK,CAACG,KAAN,GAAcH,KAAK,CAACC,EAApB,IAA0BD,KAAK,CAACG,KAAN,GAAcH,KAAK,CAACH,IAAjD,EAAsD;AAClD,aAAO,IAAP;AACH;;AAED,QAAIU,eAAe,GAAG4B,UAAU,CAACnC,KAAK,CAACG,KAAP,CAAhC;AACA,WAAO,EACH,GAAGjB,KADA;AAEHC,MAAAA,8BAA8B,EAAEoB;AAF7B,KAAP;AAIH;;AAoBDG,EAAAA,iBAAiB,CAACL,QAAD,EAAU;AACvB,WAAO+B,IAAI,CAACC,GAAL,CAAUD,IAAI,CAACE,GAAL,CAASjC,QAAT,EAAmB,KAAKnB,KAAL,CAAWM,WAAX,GAAyB,CAA5C,CAAV,EACS,KAAKN,KAAL,CAAWE,WAAX,GAAyB,KAAKF,KAAL,CAAWM,WAAX,GAAyB,CAD3D,CAAP;AAEH;;AAoDD+C,EAAAA,iBAAiB,GAAE;AACf,UAAM/C,WAAW,GAAG,KAAK8B,kBAAL,CAAwBN,OAAxB,CAAgCI,qBAAhC,GAAwDoB,MAA5E;AACA,UAAM/C,UAAU,GAAG,KAAK6B,kBAAL,CAAwBN,OAAxB,CAAgCI,qBAAhC,GAAwDqB,KAA3E;AACA,UAAMC,SAAS,GAAG,KAAK3B,iBAAL,CAAuBC,OAAvB,CAA+BI,qBAA/B,GAAuDC,GAAzE;AACA,UAAMsB,UAAU,GAAG,KAAK5B,iBAAL,CAAuBC,OAAvB,CAA+BI,qBAA/B,GAAuDwB,IAA1E;AACA,UAAMvB,GAAG,GAAGwB,QAAQ,CAACC,MAAM,CAACC,gBAAP,CAAwB,KAAKzB,kBAAL,CAAwBN,OAAhD,EAAyDK,GAA1D,CAApB;AACA,UAAMvB,KAAK,GAAG+C,QAAQ,CAACC,MAAM,CAACC,gBAAP,CAAwB,KAAK9B,kBAAL,CAAwBD,OAAhD,EAAyDwB,MAA1D,CAAtB;AAEA,SAAK/B,QAAL,CAAevB,KAAK,IAAI;AACpB,YAAM8D,MAAM,GAAG,EAAC,GAAG9D;AAAJ,OAAf;AACA8D,MAAAA,MAAM,CAAC3D,qBAAP,GAA+BgC,GAA/B;AACA2B,MAAAA,MAAM,CAAC5D,WAAP,GAAqBU,KAArB;AACAkD,MAAAA,MAAM,CAACxD,WAAP,GAAqBA,WAArB;AACAwD,MAAAA,MAAM,CAACxD,WAAP,GAAqBA,WAArB;AACAwD,MAAAA,MAAM,CAACtD,mBAAP,GAA6BgD,SAA7B;AACAM,MAAAA,MAAM,CAACrD,oBAAP,GAA8BgD,UAA9B;AACA,aAAOK,MAAP;AACH,KATD,EASG,MAAM;AACL,UAAG,KAAKhD,KAAL,CAAWG,KAAX,KAAqB8C,SAAxB,EAAkC;AAC9B,aAAK7C,QAAL,CAAc,KAAKJ,KAAL,CAAWG,KAAzB;AACH;AACJ,KAbD;AAeA,SAAKY,iBAAL,CAAuBC,OAAvB,CAA+BS,gBAA/B,CAAgD,WAAhD,EAA8D,KAAKb,eAAL,CAAqBoB,IAArB,CAA0B,IAA1B,CAA9D;AACH;;AAGDkB,EAAAA,MAAM,GAAG;AACD,WACI;AAAM,MAAA,SAAS,EAAE,YAAa,KAAKlD,KAAL,CAAWmD,SAAZ,GAAyB,MAAM,KAAKnD,KAAL,CAAWmD,SAA1C,GAAuD,EAAnE,CAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,GAAG,EAAE,KAAKpC,iBAAf;AAAkC,MAAA,SAAS,EAAC,aAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,GAAG,EAAE,KAAKE,kBAAf;AAAmC,MAAA,SAAS,EAAC,cAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEI;AAAK,MAAA,SAAS,EAAC,cAAf;AACK,MAAA,GAAG,EAAE,KAAKK,kBADf;AAEK,MAAA,KAAK,EAAG,CAAC,KAAKpC,KAAL,CAAWG,qBAAX,KAAqC,IAArC,IAA6C,KAAKH,KAAL,CAAWG,qBAAX,KAAqC4D,SAAnF,KACG;AAAC5B,QAAAA,GAAG,EAAE,KAAKnC,KAAL,CAAWC;AAAjB,OAHhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CADJ,CADJ;AAWH;;AArK2B;;AAA9BJ,M,CAwBKgB,Q,GAAW,CAACF,IAAD,EAAQI,EAAR,KAAe;AAC7B,SAAM;AACFJ,IAAAA,IADE;AAEFI,IAAAA,EAFE;AAGFH,IAAAA,KAAK,EAAID,IAAI,GAAGI,EAAP,GAAY,CAAb,GAAmBmC,IAAI,CAACgB,GAAL,CAASnD,EAAT,IAAemC,IAAI,CAACgB,GAAL,CAASvD,IAAT,CAAlC,GAAmDI,EAAE,GAAGJ;AAH9D,GAAN;AAKH,C;;AA0IL,eAAed,MAAf","sourcesContent":["import React from \"react\";\r\nimport \"./slider.scss\";\r\n\r\nclass Slider extends React.Component{\r\n    constructor() {\r\n        super();\r\n\r\n        this.sliderRangeElement = React.createRef();\r\n        this.sliderThumbElement = React.createRef();\r\n        this.sliderAreaElement = React.createRef();\r\n    }\r\n\r\n    state = {\r\n        //from get derived stated from props\r\n        sliderCurrnetPositionFromProps: null,\r\n\r\n        sliderRange: null,\r\n        sliderCurrnetPosition: null,\r\n        sliderPrevPosition: null,\r\n        isDragged : false,\r\n\r\n        thumbHeight: 0,\r\n        thumbWidth: 0,\r\n        sliderAreaTopOffset : 0,\r\n        sliderAreaLeftOffset: 0,\r\n    }\r\n\r\n    static getRange = (from , to) => {\r\n        return{\r\n            from,\r\n            to,\r\n            range : (from * to < 0) ?  Math.abs(to) + Math.abs(from) : to - from,\r\n        }\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        if(!state.sliderRange || !state.thumbHeight) return null;\r\n\r\n        const getPostion = (value) => {\r\n            const { from , range } = Slider.getRange(props.from, props.to);\r\n            const progress = (value - from)/ range;  \r\n            const position = progress * (state.sliderRange);\r\n            return (position + state.thumbHeight / 2 )\r\n        }\r\n\r\n        if(props.value > props.to || props.value < props.from){\r\n            return null;\r\n        }\r\n\r\n        let currentPosition = getPostion(props.value);\r\n        return {\r\n            ...state,\r\n            sliderCurrnetPositionFromProps: currentPosition,\r\n        }\r\n    }\r\n\r\n\r\n\r\n    evalValue = () => {\r\n        const {from , range} = Slider.getRange(this.props.from, this.props.to);\r\n        const progress = (this.state.sliderCurrnetPosition - this.state.thumbHeight / 2)\r\n                         / this.state.sliderRange;\r\n\r\n        let value =  range * progress + from;\r\n        return value;\r\n    }\r\n\r\n    setValue = (value) => {\r\n        const { from , range } = Slider.getRange(this.props.from, this.props.to);\r\n        const progress = (value - from)/ range;  \r\n        const position = progress * (this.state.sliderRange);\r\n        this.setPosition(position + this.state.thumbHeight / 2 )\r\n    }\r\n\r\n    positionNormalize(position){\r\n        return Math.min( Math.max(position, this.state.thumbHeight / 2), \r\n                        this.state.sliderRange + this.state.thumbHeight / 2 );\r\n    }\r\n\r\n\r\n    setPosition = (currentPosition, prevPosition) => {\r\n        this.setState({...this.state, \r\n            sliderCurrnetPosition : this.positionNormalize(currentPosition),\r\n            sliderPrevPosition : prevPosition || this.state.sliderPrevPosition,\r\n        }, ()=>{\r\n            if(this.props.onChange){\r\n                this.props.onChange(this.evalValue());\r\n            }\r\n        });\r\n    }\r\n\r\n    mouseDownHandle = (event) =>{\r\n        if(event.target === this.sliderAreaElement.current || event.target === this.sliderRangeElement.current){ //temporary\r\n            let clickY = event.clientY - this.sliderAreaElement.current.getBoundingClientRect().top;\r\n            this.setPosition(clickY, this.state.sliderCurrnetPositionFromProps);\r\n        } else // dragging \r\n            if(event.target === this.sliderThumbElement.current){ \r\n            this.setState({...this.state, isDragged: true});\r\n            const shiftY = event.clientY - this.sliderThumbElement.current.getBoundingClientRect().top;\r\n            document.addEventListener('mousemove', e =>  this.mouseMoveHandler.call(this, e, shiftY))\r\n            document.addEventListener('dragstart', e => e.preventDefault())\r\n        }\r\n\r\n        document.addEventListener('mouseup', this.mouseUpHandler);\r\n        document.addEventListener('dragend', this.mouseUpHandler);\r\n    }\r\n\r\n    mouseUpHandler = event => {\r\n        if(this.state.isDragged){\r\n            this.setState({...this.state, isDragged: false});\r\n        } else {\r\n            this.setPosition(this.state.sliderPrevPosition);\r\n        }\r\n\r\n        document.removeEventListener('mousemove', this.mouseMoveHandler.bind(this));\r\n        document.removeEventListener('mouseup', this.mouseUpHandler);\r\n        document.removeEventListener('dragend', this.mouseUpHandler);\r\n    }\r\n\r\n    mouseMoveHandler = (event, shiftY) =>{\r\n        if(!this.state.isDragged) return;\r\n        let position = event.clientY \r\n                        - this.state.sliderAreaTopOffset \r\n                        - shiftY \r\n                        + (this.state.thumbHeight/2);\r\n       \r\n        this.setPosition(position);\r\n    }\r\n\r\n    componentDidMount(){\r\n        const thumbHeight = this.sliderThumbElement.current.getBoundingClientRect().height;\r\n        const thumbWidth = this.sliderThumbElement.current.getBoundingClientRect().width;\r\n        const topOffset = this.sliderAreaElement.current.getBoundingClientRect().top;\r\n        const leftOffset = this.sliderAreaElement.current.getBoundingClientRect().left;\r\n        const top = parseInt(window.getComputedStyle(this.sliderThumbElement.current).top) ;\r\n        const range = parseInt(window.getComputedStyle(this.sliderRangeElement.current).height)\r\n\r\n        this.setState( state => {\r\n            const _state = {...state};\r\n            _state.sliderCurrnetPosition = top;\r\n            _state.sliderRange = range;\r\n            _state.thumbHeight = thumbHeight;\r\n            _state.thumbHeight = thumbHeight;\r\n            _state.sliderAreaTopOffset = topOffset;\r\n            _state.sliderAreaLeftOffset = leftOffset;\r\n            return _state;\r\n        }, () => {\r\n            if(this.props.value !== undefined){\r\n                this.setValue(this.props.value);\r\n            }\r\n        })\r\n\r\n        this.sliderAreaElement.current.addEventListener('mousedown',  this.mouseDownHandle.bind(this));\r\n    }\r\n\r\n\r\n    render() {\r\n            return (\r\n                <div  className={\"slider\" + ((this.props.className) ? \" \" + this.props.className  : \"\") } >\r\n                    <div ref={this.sliderAreaElement} className=\"slider-area\">\r\n                        <div ref={this.sliderRangeElement} className=\"slider-range\"/>\r\n                        <div className=\"slider-thumb\" \r\n                             ref={this.sliderThumbElement} \r\n                             style={ (this.state.sliderCurrnetPosition !== null || this.state.sliderCurrnetPosition !== undefined)\r\n                                     && {top: this.state.sliderCurrnetPositionFromProps}} />\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n}\r\n\r\nexport default Slider;"]},"metadata":{},"sourceType":"module"}