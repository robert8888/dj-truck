{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJEKTY\\\\APKI\\\\DjTruck\\\\djtruck\\\\src\\\\components\\\\common\\\\Slider\\\\Slider.js\";\nimport React from \"react\";\nimport \"./slider.scss\";\n\nclass Slider extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      //from get derived stated from props\n      sliderCurrnetPositionFromProps: null,\n      sliderRange: null,\n      sliderCurrnetPosition: null,\n      sliderPrevPosition: null,\n      isDragged: false,\n      isTemp: false,\n      // is temporary value return as second arguemnt onChange callback\n      thumbSize: 0,\n      sliderAreaOffset: 0\n    };\n\n    this.evalValue = position => {\n      const {\n        from,\n        range\n      } = Slider.getRange(this.props.from, this.props.to);\n      const progress = (position - this.state.thumbSize / 2) / this.state.sliderRange;\n      let value = range * progress + from;\n      return value;\n    };\n\n    this.setValue = value => {\n      const {\n        from,\n        range\n      } = Slider.getRange(this.props.from, this.props.to);\n      const progress = (value - from) / range;\n      const position = progress * this.state.sliderRange;\n      this.setPosition(position + this.state.thumbSize / 2);\n    };\n\n    this.setPosition = (currentPosition, prevPosition) => {\n      let position = this.boundPosition(currentPosition);\n      this.setState({ ...this.state,\n        sliderCurrnetPosition: position,\n        sliderPrevPosition: prevPosition || this.state.sliderPrevPosition\n      }, () => {\n        if (this.props.onChange) {\n          this.props.onChange(this.evalValue(this.state.sliderCurrnetPosition), this.state.isTemp);\n        }\n      });\n    };\n\n    this.mouseDownHandle = event => {\n      if (event.target === this.sliderAreaElement.current || event.target === this.sliderRangeElement.current) {\n        //temporary jummp\n        this.setState({ ...this.state,\n          isTemp: true\n        });\n        const rect = this.sliderAreaElement.current.getBoundingClientRect();\n        const position = this.props.horizontal ? event.clientX - rect.left : event.clientY - rect.top;\n        this.setPosition(position, this.state.sliderCurrnetPositionFromProps);\n      } else // dragging \n        if (event.target === this.sliderThumbElement.current) {\n          this.setState({ ...this.state,\n            isDragged: true\n          });\n          const rect = this.sliderThumbElement.current.getBoundingClientRect();\n          const shiftY = event.clientY - rect.top;\n          const shiftX = event.clientX - rect.left;\n          document.addEventListener('mousemove', e => this.mouseMoveHandler.call(this, e, shiftY, shiftX));\n          document.addEventListener('dragstart', e => e.preventDefault());\n        }\n\n      document.addEventListener('mouseup', this.mouseUpHandler);\n      document.addEventListener('dragend', this.mouseUpHandler);\n    };\n\n    this.mouseUpHandler = event => {\n      if (this.state.isDragged) {\n        this.setState({ ...this.state,\n          isDragged: false\n        });\n      } else {\n        this.setState({ ...this.state,\n          isTemp: false\n        });\n\n        if (this.props.step) {\n          const step = this.props.step;\n          let prevVal = this.evalValue(this.state.sliderPrevPosition);\n\n          if (this.state.sliderCurrnetPosition > this.state.sliderPrevPosition) {\n            prevVal += step;\n          } else {\n            prevVal -= step;\n          }\n\n          this.setPosition(Slider.getPostion(prevVal, this.state, this.props));\n        } else {\n          this.setPosition(this.state.sliderPrevPosition);\n        }\n      }\n\n      document.removeEventListener('mousemove', this.mouseMoveHandler.bind(this));\n      document.removeEventListener('mouseup', this.mouseUpHandler);\n      document.removeEventListener('dragend', this.mouseUpHandler);\n    };\n\n    this.mouseMoveHandler = (event, shiftY, shiftX) => {\n      if (!this.state.isDragged) return;\n      let position;\n\n      if (this.props.horizontal) {\n        position = event.clientX - this.state.sliderAreaOffset - shiftX + this.state.thumbSize / 2;\n      } else {\n        position = event.clientY - this.state.sliderAreaOffset - shiftY + this.state.thumbSize / 2;\n      }\n\n      this.setPosition(position);\n    };\n\n    this.sliderRangeElement = React.createRef();\n    this.sliderThumbElement = React.createRef();\n    this.sliderAreaElement = React.createRef();\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (!state.sliderRange || !state.thumbSize) return null;\n\n    if (props.value === undefined) {\n      return { ...state,\n        sliderCurrnetPositionFromProps: state.sliderCurrnetPosition\n      };\n    }\n\n    if (props.value > props.to || props.value < props.from) {\n      return null; //dont modify state\n    }\n\n    let currentPosition = Slider.getPostion(props.value, state, props);\n    return { ...state,\n      sliderCurrnetPositionFromProps: currentPosition\n    };\n  }\n\n  boundPosition(position) {\n    return Math.min(Math.max(position, this.state.thumbSize / 2), this.state.sliderRange + this.state.thumbSize / 2);\n  }\n\n  stickiPostion(position) {\n    if (this.props.stickiZero && this.props.from * this.props.to > -0) {\n      let valueFromPostion = this.evalValue(position);\n\n      if (Math.abs(valueFromPostion) - this.props.stickiZero < 0) {\n        return Slider.getPostion(0, this.state, this.props);\n      }\n    }\n\n    return position;\n  }\n\n  componentDidMount() {\n    const thumbRect = this.sliderThumbElement.current.getBoundingClientRect();\n    const areaRect = this.sliderAreaElement.current.getBoundingClientRect();\n    const computedStyleThumbElement = window.getComputedStyle(this.sliderThumbElement.current);\n    const computedStyleRangeElement = window.getComputedStyle(this.sliderRangeElement.current);\n    this.setState(state => {\n      const _state = { ...state\n      };\n\n      if (this.props.horizontal) {\n        _state.sliderCurrnetPosition = parseInt(computedStyleThumbElement.left);\n        _state.sliderRange = parseInt(computedStyleRangeElement.width);\n        _state.sliderAreaOffset = areaRect.left;\n        _state.thumbSize = thumbRect.width;\n      } else {\n        _state.sliderCurrnetPosition = parseInt(computedStyleThumbElement.top);\n        _state.sliderRange = parseInt(computedStyleRangeElement.height);\n        _state.sliderAreaOffset = areaRect.top;\n        _state.thumbSize = thumbRect.height;\n      }\n\n      return _state;\n    }, () => {\n      if (this.props.value !== undefined) {\n        this.setValue(this.props.value);\n      }\n    });\n    this.sliderAreaElement.current.addEventListener('mousedown', this.mouseDownHandle.bind(this));\n  }\n\n  render() {\n    const thumbStyle = {};\n\n    if (this.state.sliderCurrnetPosition !== undefined && !isNaN(this.state.sliderCurrnetPositionFromProps)) {\n      let position = this.stickiPostion(this.state.sliderCurrnetPositionFromProps);\n\n      if (this.props.horizontal) {\n        thumbStyle.left = position;\n      } else {\n        thumbStyle.top = position;\n      }\n    }\n\n    return React.createElement(\"div\", {\n      className: \"slider\" + (this.props.className ? \" \" + this.props.className : \"\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      ref: this.sliderAreaElement,\n      className: \"slider-area\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      ref: this.sliderRangeElement,\n      className: \"slider-range\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"slider-thumb\",\n      ref: this.sliderThumbElement,\n      style: thumbStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    })));\n  }\n\n}\n\nSlider.getRange = (from, to) => {\n  return {\n    from,\n    to,\n    range: from * to < 0 ? Math.abs(to) + Math.abs(from) : to - from\n  };\n};\n\nSlider.getPostion = (value, state, props) => {\n  const {\n    from,\n    range\n  } = Slider.getRange(props.from, props.to);\n  const progress = (value - from) / range;\n  const position = progress * state.sliderRange;\n  return position + state.thumbSize / 2;\n};\n\nexport default Slider;","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/components/common/Slider/Slider.js"],"names":["React","Slider","Component","constructor","state","sliderCurrnetPositionFromProps","sliderRange","sliderCurrnetPosition","sliderPrevPosition","isDragged","isTemp","thumbSize","sliderAreaOffset","evalValue","position","from","range","getRange","props","to","progress","value","setValue","setPosition","currentPosition","prevPosition","boundPosition","setState","onChange","mouseDownHandle","event","target","sliderAreaElement","current","sliderRangeElement","rect","getBoundingClientRect","horizontal","clientX","left","clientY","top","sliderThumbElement","shiftY","shiftX","document","addEventListener","e","mouseMoveHandler","call","preventDefault","mouseUpHandler","step","prevVal","getPostion","removeEventListener","bind","createRef","getDerivedStateFromProps","undefined","Math","min","max","stickiPostion","stickiZero","valueFromPostion","abs","componentDidMount","thumbRect","areaRect","computedStyleThumbElement","window","getComputedStyle","computedStyleRangeElement","_state","parseInt","width","height","render","thumbStyle","isNaN","className"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport \"./slider.scss\";\r\n\r\nclass Slider extends React.Component{\r\n    constructor() {\r\n        super();\r\n\r\n        this.sliderRangeElement = React.createRef();\r\n        this.sliderThumbElement = React.createRef();\r\n        this.sliderAreaElement = React.createRef();\r\n    }\r\n\r\n    state = {\r\n        //from get derived stated from props\r\n        sliderCurrnetPositionFromProps: null,\r\n\r\n        sliderRange: null,\r\n        sliderCurrnetPosition: null,\r\n        sliderPrevPosition: null,\r\n        isDragged : false,\r\n        isTemp : false, // is temporary value return as second arguemnt onChange callback\r\n\r\n        thumbSize: 0,\r\n        sliderAreaOffset : 0,\r\n    }\r\n\r\n    static getRange = (from , to) => {\r\n        return{\r\n            from,\r\n            to,\r\n            range : (from * to < 0) ?  Math.abs(to) + Math.abs(from) : to - from,\r\n        }\r\n    }\r\n\r\n    static getPostion = (value, state, props) => {\r\n        const { from , range } = Slider.getRange(props.from, props.to);\r\n        const progress = (value - from)/ range;  \r\n        const position = progress * (state.sliderRange);\r\n        return (position + state.thumbSize / 2 )\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        if(!state.sliderRange || !state.thumbSize) return null;\r\n        if(props.value === undefined){\r\n            return {\r\n                ...state,\r\n                sliderCurrnetPositionFromProps: state.sliderCurrnetPosition,\r\n            }\r\n        }\r\n        \r\n        if(props.value > props.to || props.value < props.from){\r\n            return null; //dont modify state\r\n        }\r\n    \r\n        let currentPosition = Slider.getPostion(props.value, state, props);\r\n\r\n        return {\r\n            ...state,\r\n            sliderCurrnetPositionFromProps: currentPosition,\r\n        }\r\n    }\r\n\r\n\r\n\r\n    evalValue = (position) => {\r\n        const {from , range} = Slider.getRange(this.props.from, this.props.to);\r\n        const progress = (position - this.state.thumbSize / 2)\r\n                         / this.state.sliderRange;\r\n\r\n        let value =  range * progress + from;\r\n        return value;\r\n    }\r\n\r\n    setValue = (value) => {\r\n        const { from , range } = Slider.getRange(this.props.from, this.props.to);\r\n        const progress = (value - from)/ range;  \r\n        const position = progress * (this.state.sliderRange);\r\n        this.setPosition(position + this.state.thumbSize / 2 )\r\n    }\r\n\r\n    boundPosition(position){\r\n        return  Math.min( Math.max(position, this.state.thumbSize / 2), \r\n                        this.state.sliderRange + this.state.thumbSize / 2 );\r\n    }\r\n\r\n    stickiPostion(position){\r\n        if(this.props.stickiZero && (this.props.from * this.props.to > -0) ){\r\n            let valueFromPostion = this.evalValue(position)\r\n            if(Math.abs(valueFromPostion) - this.props.stickiZero < 0 ){\r\n                return Slider.getPostion(0, this.state, this.props);\r\n            }\r\n        }\r\n        return position\r\n    }\r\n    \r\n\r\n    setPosition = (currentPosition, prevPosition) => {\r\n        let position = this.boundPosition(currentPosition);\r\n\r\n        this.setState({...this.state, \r\n            sliderCurrnetPosition : position,\r\n            sliderPrevPosition : prevPosition || this.state.sliderPrevPosition,\r\n        }, ()=>{\r\n            if(this.props.onChange){\r\n                this.props.onChange(this.evalValue(this.state.sliderCurrnetPosition), this.state.isTemp);\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n\r\n\r\n    mouseDownHandle = (event) =>{\r\n       \r\n        if(event.target === this.sliderAreaElement.current || event.target === this.sliderRangeElement.current){ //temporary jummp\r\n            this.setState({...this.state, isTemp : true})\r\n            const rect = this.sliderAreaElement.current.getBoundingClientRect();\r\n            const position = (this.props.horizontal) ? event.clientX  - rect.left : event.clientY - rect.top;\r\n            this.setPosition(position, this.state.sliderCurrnetPositionFromProps);\r\n        } else // dragging \r\n            if(event.target === this.sliderThumbElement.current){ \r\n            this.setState({...this.state, isDragged: true});\r\n            const rect = this.sliderThumbElement.current.getBoundingClientRect();\r\n            const shiftY = event.clientY - rect.top;\r\n            const shiftX = event.clientX - rect.left;\r\n            document.addEventListener('mousemove', e =>  this.mouseMoveHandler.call(this, e, shiftY, shiftX))\r\n            document.addEventListener('dragstart', e => e.preventDefault())\r\n        }\r\n\r\n        document.addEventListener('mouseup', this.mouseUpHandler);\r\n        document.addEventListener('dragend', this.mouseUpHandler);\r\n    }\r\n\r\n    mouseUpHandler = event => {\r\n        if(this.state.isDragged){\r\n            this.setState({...this.state, isDragged: false});\r\n        } else {\r\n            this.setState({...this.state, isTemp:false})\r\n            if(this.props.step){\r\n                const step = this.props.step;\r\n                let prevVal = this.evalValue(this.state.sliderPrevPosition);\r\n                if(this.state.sliderCurrnetPosition > this.state.sliderPrevPosition) {\r\n                    prevVal += step;\r\n                } else {\r\n                    prevVal -= step;\r\n                }\r\n                this.setPosition(Slider.getPostion(prevVal, this.state, this.props));\r\n            } else{\r\n                this.setPosition(this.state.sliderPrevPosition);\r\n            }\r\n        }\r\n\r\n        document.removeEventListener('mousemove', this.mouseMoveHandler.bind(this));\r\n        document.removeEventListener('mouseup', this.mouseUpHandler);\r\n        document.removeEventListener('dragend', this.mouseUpHandler);\r\n    }\r\n\r\n    mouseMoveHandler = (event, shiftY, shiftX) =>{\r\n        if(!this.state.isDragged) return;\r\n        let position;\r\n        if(this.props.horizontal){\r\n            position = event.clientX \r\n                     - this.state.sliderAreaOffset\r\n                     - shiftX\r\n                     + (this.state.thumbSize/2);\r\n        }else {\r\n            position = event.clientY \r\n                     - this.state.sliderAreaOffset \r\n                     - shiftY \r\n                     + (this.state.thumbSize/2);\r\n        }\r\n        this.setPosition(position);\r\n    }\r\n\r\n    componentDidMount(){\r\n        const thumbRect = this.sliderThumbElement.current.getBoundingClientRect();\r\n        const areaRect = this.sliderAreaElement.current.getBoundingClientRect();\r\n        const computedStyleThumbElement = window.getComputedStyle(this.sliderThumbElement.current);\r\n        const computedStyleRangeElement = window.getComputedStyle(this.sliderRangeElement.current);\r\n\r\n        this.setState( state => {\r\n            const _state = {...state};\r\n            if(this.props.horizontal){\r\n                _state.sliderCurrnetPosition = parseInt(computedStyleThumbElement.left);\r\n                _state.sliderRange = parseInt(computedStyleRangeElement.width);\r\n                _state.sliderAreaOffset = areaRect.left;\r\n                _state.thumbSize = thumbRect.width;\r\n            } else{\r\n                _state.sliderCurrnetPosition = parseInt(computedStyleThumbElement.top);\r\n                _state.sliderRange = parseInt(computedStyleRangeElement.height);\r\n                _state.sliderAreaOffset = areaRect.top;\r\n                _state.thumbSize = thumbRect.height;\r\n            }\r\n            return _state;\r\n        }, () => {\r\n            if(this.props.value !== undefined){\r\n                this.setValue(this.props.value);\r\n            }\r\n        })\r\n\r\n        this.sliderAreaElement.current.addEventListener('mousedown',  this.mouseDownHandle.bind(this));\r\n    }\r\n\r\n\r\n\r\n\r\n    render() {\r\n            const thumbStyle = {}\r\n            if(this.state.sliderCurrnetPosition !== undefined && !isNaN(this.state.sliderCurrnetPositionFromProps)){\r\n                let position = this.stickiPostion(this.state.sliderCurrnetPositionFromProps)\r\n                if(this.props.horizontal){\r\n                    thumbStyle.left = position;\r\n                } else {\r\n                    thumbStyle.top = position;\r\n                }\r\n            }\r\n\r\n            return (\r\n                <div  className={\"slider\" + ((this.props.className) ? \" \" + this.props.className  : \"\") } >\r\n                    <div ref={this.sliderAreaElement} className=\"slider-area\">\r\n                        <div ref={this.sliderRangeElement} className=\"slider-range\"/>\r\n                        <div className=\"slider-thumb\" \r\n                             ref={this.sliderThumbElement} \r\n                             style={ thumbStyle } />\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n}\r\n\r\nexport default Slider;"]},"metadata":{},"sourceType":"module"}