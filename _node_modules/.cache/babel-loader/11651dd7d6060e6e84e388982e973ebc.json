{"ast":null,"code":"import { put, select, takeEvery } from \"redux-saga/effects\";\nimport { ACTIONS, deleteComment, pushLog } from \"../../../actions\";\nimport { getApi } from \"./../../../apis/apiProvider\";\nimport { Log } from \"./../../../utils/logger/logger\";\nexport default function* requestDeleteComment() {\n  yield takeEvery(ACTIONS.RECS_REQ_DELETE_COMMENT, handel);\n}\n\nconst getToken = state => state.user.token;\n\nfunction* handel(action) {\n  const token = yield select(getToken);\n  if (!token) return;\n\n  try {\n    const {\n      callQuery,\n      queries\n    } = getApi(\"UserAssets\");\n    const query = queries.deleteCommentQl;\n    const result = yield callQuery(query, token, {\n      id: action.commentId\n    });\n    console.log(result);\n    const success = result === null || result === void 0 ? void 0 : result.data;\n\n    if (!result.errors && success) {\n      yield put(deleteComment(action.commentId));\n    } else {\n      throw new Error(\"Can't delete comment from database\");\n    }\n\n    yield put(pushLog(new Log(`comment id: ${action.commentId} deleted from database`)));\n  } catch (error) {\n    yield pushLog(Log.Error(['saga', 'record', 'comments', 'request delete comment'], error.message, \"Sorry. During process of deleting comment in database occurred problem\", error));\n  }\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/sagas/records/comments/reqDeleteComment.js"],"names":["put","select","takeEvery","ACTIONS","deleteComment","pushLog","getApi","Log","requestDeleteComment","RECS_REQ_DELETE_COMMENT","handel","getToken","state","user","token","action","callQuery","queries","query","deleteCommentQl","result","id","commentId","console","log","success","data","errors","Error","error","message"],"mappings":"AAAA,SAASA,GAAT,EAAcC,MAAd,EAAsBC,SAAtB,QAAuC,oBAAvC;AACA,SAASC,OAAT,EAAkBC,aAAlB,EAAiCC,OAAjC,QAAgD,kBAAhD;AACA,SAASC,MAAT,QAAuB,6BAAvB;AACA,SAASC,GAAT,QAAoB,gCAApB;AAEA,eAAe,UAAUC,oBAAV,GAAiC;AAC5C,QAAMN,SAAS,CAACC,OAAO,CAACM,uBAAT,EAAkCC,MAAlC,CAAf;AACH;;AAED,MAAMC,QAAQ,GAAGC,KAAK,IAAIA,KAAK,CAACC,IAAN,CAAWC,KAArC;;AAEA,UAAUJ,MAAV,CAAiBK,MAAjB,EAAyB;AACrB,QAAMD,KAAK,GAAG,MAAMb,MAAM,CAACU,QAAD,CAA1B;AACA,MAAG,CAACG,KAAJ,EAAW;;AAEX,MAAI;AACA,UAAM;AAAEE,MAAAA,SAAF;AAAaC,MAAAA;AAAb,QAAyBX,MAAM,CAAC,YAAD,CAArC;AAEA,UAAMY,KAAK,GAAGD,OAAO,CAACE,eAAtB;AACA,UAAMC,MAAM,GAAG,MAAMJ,SAAS,CAACE,KAAD,EAAQJ,KAAR,EAAe;AAACO,MAAAA,EAAE,EAAGN,MAAM,CAACO;AAAb,KAAf,CAA9B;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAZ;AACA,UAAMK,OAAO,GAAGL,MAAH,aAAGA,MAAH,uBAAGA,MAAM,CAAEM,IAAxB;;AAEA,QAAI,CAACN,MAAM,CAACO,MAAR,IAAkBF,OAAtB,EAA+B;AAC3B,YAAMzB,GAAG,CAACI,aAAa,CAACW,MAAM,CAACO,SAAR,CAAd,CAAT;AACH,KAFD,MAEO;AACH,YAAM,IAAIM,KAAJ,CAAU,oCAAV,CAAN;AACH;;AAED,UAAM5B,GAAG,CAACK,OAAO,CAAC,IAAIE,GAAJ,CAAS,eAAcQ,MAAM,CAACO,SAAU,wBAAxC,CAAD,CAAR,CAAT;AACH,GAfD,CAeE,OAAOO,KAAP,EAAc;AACZ,UAAMxB,OAAO,CAACE,GAAG,CAACqB,KAAJ,CACV,CAAC,MAAD,EAAS,QAAT,EAAmB,UAAnB,EAA+B,wBAA/B,CADU,EAEVC,KAAK,CAACC,OAFI,EAGV,wEAHU,EAIVD,KAJU,CAAD,CAAb;AAMH;AACJ","sourcesContent":["import { put, select, takeEvery } from \"redux-saga/effects\";\r\nimport { ACTIONS, deleteComment, pushLog } from \"../../../actions\";\r\nimport { getApi } from \"./../../../apis/apiProvider\";\r\nimport { Log } from \"./../../../utils/logger/logger\";\r\n\r\nexport default function* requestDeleteComment() {\r\n    yield takeEvery(ACTIONS.RECS_REQ_DELETE_COMMENT, handel)\r\n}\r\n\r\nconst getToken = state => state.user.token\r\n\r\nfunction* handel(action) {\r\n    const token = yield select(getToken);\r\n    if(!token) return;\r\n\r\n    try {\r\n        const { callQuery, queries } = getApi(\"UserAssets\");\r\n\r\n        const query = queries.deleteCommentQl;\r\n        const result = yield callQuery(query, token, {id : action.commentId});\r\n        console.log(result)\r\n        const success = result?.data;\r\n        \r\n        if (!result.errors && success) {\r\n            yield put(deleteComment(action.commentId))\r\n        } else {\r\n            throw new Error(\"Can't delete comment from database\")\r\n        }\r\n\r\n        yield put(pushLog(new Log(`comment id: ${action.commentId} deleted from database`)))\r\n    } catch (error) {\r\n        yield pushLog(Log.Error(\r\n            ['saga', 'record', 'comments', 'request delete comment'],\r\n            error.message,\r\n            \"Sorry. During process of deleting comment in database occurred problem\",\r\n            error\r\n        ))\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}