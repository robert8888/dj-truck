{"ast":null,"code":"import { ACTIONS } from \"./../actions\";\nimport { produce } from \"imer\";\nconst channelNumber = 2;\n\nconst initState = () => {\n  const channel = {\n    dryWet: 0,\n    currentEffect: undefined,\n    effects: {\n      /*reverb: {\r\n          decay: 5\r\n      },\r\n      echo: {\r\n          time: 4\r\n      }*/\n    }\n  };\n  const state = {\n    lastChange: {},\n    effects: {},\n    channels: {}\n  };\n\n  for (let i = 1; i <= channelNumber; i++) {\n    state.channels[i] = channel;\n  }\n\n  return state;\n};\n\nconst nextParameterState = (state, channel, effect, param) => {\n  return produce(state, nextState => {\n    var _state$channels$chann;\n\n    nextState.lastChange = {\n      sygnature: \"#\" + channel + \"/\" + effect + \"/\" + Object.keys(param).join(\"/\"),\n      channel,\n      effect,\n      param: [...Object.keys(param)]\n    };\n    const effectParam = (state === null || state === void 0 ? void 0 : (_state$channels$chann = state.channels[channel]) === null || _state$channels$chann === void 0 ? void 0 : _state$channels$chann.effects[effect]) || {};\n    nextState.channels[channel].effects[effect] = { ...effectParam,\n      ...param\n    };\n  });\n};\n\nexport default function effectorReducer(state = initState(), action) {\n  switch (action.type) {\n    case ACTIONS.SET_AVAILABLE_EFFECTS:\n      {\n        return produce(state, nextState => nextState.effects = action.effects);\n      }\n\n    case ACTIONS.SET_EFFECT_PARAMETER:\n      {\n        return nextParameterState(state, action.channel, action.effect, {\n          [action.name]: action.value\n        });\n      }\n\n    case ACTIONS.SET_CURRENT_EFFECT:\n      {\n        return produce(state, nextState => {\n          nextState.channels[action.channel].currentEffect = action.effect;\n          nextState.lastChange = {\n            sygnature: \"#effectChange/\" + action.channel,\n            channel: action.channel,\n            effect: action.effect\n          };\n        });\n      }\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/reducers/effectorReducer.js"],"names":["ACTIONS","produce","channelNumber","initState","channel","dryWet","currentEffect","undefined","effects","state","lastChange","channels","i","nextParameterState","effect","param","nextState","sygnature","Object","keys","join","effectParam","effectorReducer","action","type","SET_AVAILABLE_EFFECTS","SET_EFFECT_PARAMETER","name","value","SET_CURRENT_EFFECT"],"mappings":"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","sourcesContent":["import { ACTIONS } from \"./../actions\";\r\nimport { produce } from \"imer\";\r\n\r\n\r\n\r\nconst channelNumber = 2;\r\nconst initState = () => {\r\n    const channel = {\r\n        dryWet: 0,\r\n        currentEffect: undefined,\r\n        effects: {\r\n            /*reverb: {\r\n                decay: 5\r\n            },\r\n            echo: {\r\n                time: 4\r\n            }*/\r\n        }\r\n    };\r\n\r\n    const state = {\r\n        lastChange: {},\r\n        effects: {},\r\n        channels: {},\r\n    }\r\n\r\n    for(let i = 1; i <= channelNumber; i++){\r\n        state.channels[i] = channel;\r\n    }\r\n\r\n    return state;\r\n}\r\n\r\nconst nextParameterState = (state, channel, effect, param) => {\r\n    return produce(state, nextState => {\r\n        nextState.lastChange = {\r\n            sygnature : \"#\" + channel + \"/\" + effect + \"/\" + Object.keys(param).join(\"/\"),\r\n            channel,\r\n            effect, \r\n            param : [...Object.keys(param)]\r\n        }\r\n\r\n        const effectParam = state?.channels[channel]?.effects[effect] || {};\r\n        nextState.channels[channel].effects[effect] = { ...effectParam, ...param };\r\n    })\r\n}\r\n\r\nexport default function effectorReducer(state = initState(), action) {\r\n    switch (action.type) {\r\n        case ACTIONS.SET_AVAILABLE_EFFECTS: {\r\n            return produce(state, nextState => nextState.effects = action.effects)\r\n        }\r\n\r\n        case ACTIONS.SET_EFFECT_PARAMETER: {\r\n            return nextParameterState(state, action.channel, action.effect, { [action.name]: action.value })\r\n        }\r\n\r\n        case ACTIONS.SET_CURRENT_EFFECT : {\r\n            return produce(state, nextState =>{\r\n                nextState.channels[action.channel].currentEffect = action.effect;\r\n\r\n                nextState.lastChange = {\r\n                    sygnature : \"#effectChange/\"+action.channel,\r\n                    channel : action.channel,\r\n                    effect : action.effect,\r\n                }\r\n            })\r\n        }\r\n\r\n        default: return state;\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}