{"ast":null,"code":"import { analyze, guess } from \"web-audio-beat-detector\";\nexport function calcBpm(url) {\n  return fetch(url).then(response => response.arrayBuffer()).then(arrayBuffer => {\n    const audioCtx = new AudioContext();\n    return audioCtx.decodeAudioData(arrayBuffer);\n  }).then(audioBuffer => analyze(audioBuffer)).catch(error => 0);\n}\nexport function calcBpmAndOffset(url) {\n  return fetch(url).then(response => response.arrayBuffer()).then(arrayBuffer => {\n    const audioCtx = new AudioContext();\n    return audioCtx.decodeAudioData(arrayBuffer);\n  }).then(audioBuffer => guess(audioBuffer)).catch(error => ({\n    bpm: 0,\n    offset: 0\n  }));\n}\nexport function calcAccurateBpmAndOffset(url) {\n  return fetch(url).then(response => response.arrayBuffer()).then(arrayBuffer => new AudioContext().decodeAudioData(arrayBuffer)).then(async audioBuffer => {\n    console.log(\"tutaj tak \");\n    let guess = await guess(audioBuffer);\n    console.log(\"tutaj tez \", guess);\n    let accurateBpm = await analyze(audioBuffer);\n    console.log(guess, accurateBpm);\n    return Promise.all(guess, accurateBpm);\n  }).then((guess, accBpm) => {\n    console.log(guess, accBpm);\n    return {\n      bpmRounded: guess.bpm,\n      offset: guess.offset,\n      bpm: accBpm\n    };\n  }).catch(error => ({\n    bpm: 0,\n    offset: 0,\n    bpmRounded: 0\n  }));\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/utils/bpm/analyzer.js"],"names":["analyze","guess","calcBpm","url","fetch","then","response","arrayBuffer","audioCtx","AudioContext","decodeAudioData","audioBuffer","catch","error","calcBpmAndOffset","bpm","offset","calcAccurateBpmAndOffset","console","log","accurateBpm","Promise","all","accBpm","bpmRounded"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,KAAlB,QAA+B,yBAA/B;AAEA,OAAO,SAASC,OAAT,CAAiBC,GAAjB,EAAsB;AAC3B,SAAOC,KAAK,CAACD,GAAD,CAAL,CACJE,IADI,CACCC,QAAQ,IAAIA,QAAQ,CAACC,WAAT,EADb,EAEJF,IAFI,CAECE,WAAW,IAAI;AACnB,UAAMC,QAAQ,GAAG,IAAIC,YAAJ,EAAjB;AACA,WAAOD,QAAQ,CAACE,eAAT,CAAyBH,WAAzB,CAAP;AACD,GALI,EAMJF,IANI,CAMCM,WAAW,IAAIX,OAAO,CAACW,WAAD,CANvB,EAOJC,KAPI,CAOEC,KAAK,IAAI,CAPX,CAAP;AAQD;AAED,OAAO,SAASC,gBAAT,CAA0BX,GAA1B,EAA+B;AACpC,SAAOC,KAAK,CAACD,GAAD,CAAL,CACJE,IADI,CACCC,QAAQ,IAAIA,QAAQ,CAACC,WAAT,EADb,EAEJF,IAFI,CAECE,WAAW,IAAI;AACnB,UAAMC,QAAQ,GAAG,IAAIC,YAAJ,EAAjB;AACA,WAAOD,QAAQ,CAACE,eAAT,CAAyBH,WAAzB,CAAP;AACD,GALI,EAMJF,IANI,CAMCM,WAAW,IAAIV,KAAK,CAACU,WAAD,CANrB,EAOJC,KAPI,CAOEC,KAAK,KAAK;AAAEE,IAAAA,GAAG,EAAE,CAAP;AAAUC,IAAAA,MAAM,EAAE;AAAlB,GAAL,CAPP,CAAP;AAQD;AAED,OAAO,SAASC,wBAAT,CAAkCd,GAAlC,EAAuC;AAC5C,SAAOC,KAAK,CAACD,GAAD,CAAL,CACJE,IADI,CACCC,QAAQ,IAAIA,QAAQ,CAACC,WAAT,EADb,EAEJF,IAFI,CAECE,WAAW,IAAI,IAAIE,YAAJ,GAAmBC,eAAnB,CAAmCH,WAAnC,CAFhB,EAGJF,IAHI,CAGC,MAAMM,WAAN,IAAqB;AACzBO,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACA,QAAIlB,KAAK,GAAG,MAAMA,KAAK,CAACU,WAAD,CAAvB;AACAO,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BlB,KAA1B;AACA,QAAImB,WAAW,GAAG,MAAMpB,OAAO,CAACW,WAAD,CAA/B;AACAO,IAAAA,OAAO,CAACC,GAAR,CAAYlB,KAAZ,EAAmBmB,WAAnB;AACA,WAAOC,OAAO,CAACC,GAAR,CAAYrB,KAAZ,EAAmBmB,WAAnB,CAAP;AACD,GAVI,EAWJf,IAXI,CAWC,CAACJ,KAAD,EAAQsB,MAAR,KAAmB;AACrBL,IAAAA,OAAO,CAACC,GAAR,CAAYlB,KAAZ,EAAmBsB,MAAnB;AACF,WAAO;AACLC,MAAAA,UAAU,EAAEvB,KAAK,CAACc,GADb;AAELC,MAAAA,MAAM,EAAEf,KAAK,CAACe,MAFT;AAGLD,MAAAA,GAAG,EAAEQ;AAHA,KAAP;AAKD,GAlBI,EAmBJX,KAnBI,CAmBEC,KAAK,KAAK;AACfE,IAAAA,GAAG,EAAE,CADU;AAEfC,IAAAA,MAAM,EAAE,CAFO;AAGfQ,IAAAA,UAAU,EAAE;AAHG,GAAL,CAnBP,CAAP;AAwBD","sourcesContent":["import { analyze, guess } from \"web-audio-beat-detector\";\r\n\r\nexport function calcBpm(url) {\r\n  return fetch(url)\r\n    .then(response => response.arrayBuffer())\r\n    .then(arrayBuffer => {\r\n      const audioCtx = new AudioContext();\r\n      return audioCtx.decodeAudioData(arrayBuffer);\r\n    })\r\n    .then(audioBuffer => analyze(audioBuffer))\r\n    .catch(error => 0);\r\n}\r\n\r\nexport function calcBpmAndOffset(url) {\r\n  return fetch(url)\r\n    .then(response => response.arrayBuffer())\r\n    .then(arrayBuffer => {\r\n      const audioCtx = new AudioContext();\r\n      return audioCtx.decodeAudioData(arrayBuffer);\r\n    })\r\n    .then(audioBuffer => guess(audioBuffer))\r\n    .catch(error => ({ bpm: 0, offset: 0 }));\r\n}\r\n\r\nexport function calcAccurateBpmAndOffset(url) {\r\n  return fetch(url)\r\n    .then(response => response.arrayBuffer())\r\n    .then(arrayBuffer => new AudioContext().decodeAudioData(arrayBuffer))\r\n    .then(async audioBuffer => {\r\n      console.log(\"tutaj tak \")\r\n      let guess = await guess(audioBuffer);\r\n      console.log(\"tutaj tez \", guess);\r\n      let accurateBpm = await analyze(audioBuffer);\r\n      console.log(guess, accurateBpm)\r\n      return Promise.all(guess, accurateBpm);\r\n    })\r\n    .then((guess, accBpm) => {\r\n        console.log(guess, accBpm)\r\n      return {\r\n        bpmRounded: guess.bpm,\r\n        offset: guess.offset,\r\n        bpm: accBpm\r\n      };\r\n    })\r\n    .catch(error => ({\r\n      bpm: 0,\r\n      offset: 0,\r\n      bpmRounded: 0\r\n    }));\r\n}\r\n"]},"metadata":{},"sourceType":"module"}