{"ast":null,"code":"import { call, put, takeEvery } from 'redux-saga/effects';\nimport { ACTIONS, pushLog, setBpmAndOffset } from \"../actions\";\nimport { getApi } from \"./../apis/apiProvider\";\nimport { calcAccurateBpmAndOffset } from './../utils/bpm/analyzer';\nimport { Log } from \"./../utils/logger/logger\";\nexport default function* watcher() {\n  yield takeEvery(ACTIONS.PL_INIT_CALC_BPM, calcBpmAsync);\n  yield takeEvery(ACTIONS.PUSH_TRACK, calcBpmAsync);\n}\n\nfunction* calcBpmAsync(action) {\n  const path = ['saga', 'calcBpm', 'calculatin bpm'];\n\n  try {\n    const {\n      sourceId: id,\n      source,\n      duration\n    } = action.track.source;\n    console.log(\"duration is\", duration);\n\n    if (duration > 60 * 20) // 20 min;\n      {\n        yield put(pushLog(Log.Error({\n          path,\n          private: \"Can't calculating bpm track duration is to big: \" + duration,\n          public: \"Sorry. Bpm calculation is possible only for track which duration is up to 20 minutes\"\n        })));\n        return;\n      }\n\n    const api = getApi(source);\n    const url = api.getUrl(id); // console.log(action)\n\n    yield put(setBpmAndOffset(action.track.id, action.playlist, \"calculating\", null));\n    let {\n      offset,\n      bpm\n    } = yield call(calcAccurateBpmAndOffset, url);\n    yield put(setBpmAndOffset(action.track.id, action.playlist, bpm, offset));\n    yield put(pushLog(new Log(`Track id: ${id} bpm and offset successful updated`, path)));\n  } catch (error) {\n    yield put(pushLog(Log.Error(path, \"Can't calculating bpm. \" + error.message, \"Sorry. During calculating bpm occured problem\", error)));\n  }\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/sagas/calcBpmSaga.js"],"names":["call","put","takeEvery","ACTIONS","pushLog","setBpmAndOffset","getApi","calcAccurateBpmAndOffset","Log","watcher","PL_INIT_CALC_BPM","calcBpmAsync","PUSH_TRACK","action","path","sourceId","id","source","duration","track","console","log","Error","private","public","api","url","getUrl","playlist","offset","bpm","error","message"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,SAApB,QAAqC,oBAArC;AACA,SAASC,OAAT,EAAkBC,OAAlB,EAA2BC,eAA3B,QAAkD,YAAlD;AACA,SAASC,MAAT,QAAuB,uBAAvB;AACA,SAASC,wBAAT,QAAyC,yBAAzC;AACA,SAASC,GAAT,QAAoB,0BAApB;AAEA,eAAe,UAAUC,OAAV,GAAoB;AAC/B,QAAMP,SAAS,CAACC,OAAO,CAACO,gBAAT,EAA2BC,YAA3B,CAAf;AACA,QAAMT,SAAS,CAACC,OAAO,CAACS,UAAT,EAAqBD,YAArB,CAAf;AACH;;AAID,UAAUA,YAAV,CAAuBE,MAAvB,EAA+B;AAC3B,QAAMC,IAAI,GAAG,CAAC,MAAD,EAAS,SAAT,EAAoB,gBAApB,CAAb;;AACA,MAAG;AACC,UAAM;AAACC,MAAAA,QAAQ,EAAEC,EAAX;AAAeC,MAAAA,MAAf;AAAuBC,MAAAA;AAAvB,QAAmCL,MAAM,CAACM,KAAP,CAAaF,MAAtD;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BH,QAA3B;;AACA,QAAGA,QAAQ,GAAG,KAAK,EAAnB,EAAuB;AACvB;AACI,cAAMjB,GAAG,CAACG,OAAO,CAACI,GAAG,CAACc,KAAJ,CAAU;AACxBR,UAAAA,IADwB;AAExBS,UAAAA,OAAO,EAAE,qDAAqDL,QAFtC;AAGxBM,UAAAA,MAAM,EAAE;AAHgB,SAAV,CAAD,CAAR,CAAT;AAKA;AACH;;AACD,UAAMC,GAAG,GAAGnB,MAAM,CAACW,MAAD,CAAlB;AACA,UAAMS,GAAG,GAAGD,GAAG,CAACE,MAAJ,CAAWX,EAAX,CAAZ,CAbD,CAeC;;AACA,UAAMf,GAAG,CAACI,eAAe,CAACQ,MAAM,CAACM,KAAP,CAAaH,EAAd,EAAkBH,MAAM,CAACe,QAAzB,EAAmC,aAAnC,EAAkD,IAAlD,CAAhB,CAAT;AACA,QAAI;AAAEC,MAAAA,MAAF;AAAUC,MAAAA;AAAV,QAAkB,MAAM9B,IAAI,CAACO,wBAAD,EAA2BmB,GAA3B,CAAhC;AACA,UAAMzB,GAAG,CAACI,eAAe,CAACQ,MAAM,CAACM,KAAP,CAAaH,EAAd,EAAkBH,MAAM,CAACe,QAAzB,EAAmCE,GAAnC,EAAwCD,MAAxC,CAAhB,CAAT;AAEA,UAAM5B,GAAG,CAACG,OAAO,CAAC,IAAII,GAAJ,CAAS,aAAYQ,EAAG,oCAAxB,EAA6DF,IAA7D,CAAD,CAAR,CAAT;AACH,GArBD,CAqBE,OAAOiB,KAAP,EAAa;AACX,UAAM9B,GAAG,CAACG,OAAO,CAACI,GAAG,CAACc,KAAJ,CACdR,IADc,EAEd,4BAA4BiB,KAAK,CAACC,OAFpB,EAGd,+CAHc,EAIdD,KAJc,CAAD,CAAR,CAAT;AAMH;AAEJ","sourcesContent":["import { call, put, takeEvery } from 'redux-saga/effects';\r\nimport { ACTIONS, pushLog, setBpmAndOffset } from \"../actions\";\r\nimport { getApi } from \"./../apis/apiProvider\";\r\nimport { calcAccurateBpmAndOffset } from './../utils/bpm/analyzer';\r\nimport { Log } from \"./../utils/logger/logger\";\r\n\r\nexport default function* watcher() {\r\n    yield takeEvery(ACTIONS.PL_INIT_CALC_BPM, calcBpmAsync);\r\n    yield takeEvery(ACTIONS.PUSH_TRACK, calcBpmAsync);\r\n}\r\n\r\n\r\n\r\nfunction* calcBpmAsync(action) {\r\n    const path = ['saga', 'calcBpm', 'calculatin bpm']\r\n    try{\r\n        const {sourceId: id, source, duration} = action.track.source;\r\n        console.log(\"duration is\", duration)\r\n        if(duration > 60 * 20) // 20 min;\r\n        {\r\n            yield put(pushLog(Log.Error({\r\n                path,\r\n                private: \"Can't calculating bpm track duration is to big: \" + duration,\r\n                public: \"Sorry. Bpm calculation is possible only for track which duration is up to 20 minutes\",\r\n            })))\r\n            return;\r\n        }\r\n        const api = getApi(source);\r\n        const url = api.getUrl(id);\r\n\r\n        // console.log(action)\r\n        yield put(setBpmAndOffset(action.track.id, action.playlist, \"calculating\", null))\r\n        let { offset, bpm } = yield call(calcAccurateBpmAndOffset, url);\r\n        yield put(setBpmAndOffset(action.track.id, action.playlist, bpm, offset))\r\n        \r\n        yield put(pushLog(new Log(`Track id: ${id} bpm and offset successful updated`, path)))\r\n    } catch (error){\r\n        yield put(pushLog(Log.Error(\r\n            path,\r\n            \"Can't calculating bpm. \" + error.message,\r\n            \"Sorry. During calculating bpm occured problem\",\r\n            error\r\n        )))\r\n    }  \r\n\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}