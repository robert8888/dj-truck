{"ast":null,"code":"import store from \"./../../../../store\";\nimport { setChannelReady, setLoadingProgress, setTimeLeft, togglePlay } from \"./../../../../actions\";\nexport default class EventHandler {\n  constructor() {\n    this.startSync = channel => {\n      channel.syncHandle = setInterval(() => {\n        channel.slave.drawer.progress(channel.master.getCurrentTime() / channel.currentDuration);\n      }, 100);\n    };\n\n    this.dispatch = store.dispatch;\n  }\n\n  CreateEventHandling(channel) {\n    this.onLoad(channel);\n    this.onLoading(channel);\n    this.onReady(channel);\n    this.onProcess(channel);\n    this.onSlaveSeek(channel);\n    this.onMasterSeek(channel);\n    this.onFinish(channel);\n  } // --- events below\n\n\n  onLoad(channel) {\n    channel.master.on(\"load\", () => {\n      this.clearState(channel);\n    });\n  }\n\n  onLoading(channel) {\n    channel.master.on(\"loading\", progress => {\n      this.dispatch(setLoadingProgress(channel.channelName, progress));\n    });\n  }\n\n  onReady(channel) {\n    channel.master.on(\"ready\", () => {\n      channel.currentDuration = channel.master.getDuration();\n      let resolution = 430;\n      channel.slave.load(null, channel.master.backend.getPeaks(resolution, 0, resolution));\n      this.dispatch(setLoadingProgress(channel.channelName, 100));\n      this.dispatch(setChannelReady(true, channel.channelName));\n      this.startSync(channel);\n    });\n  }\n\n  onProcess(channel) {\n    let lastUpdate = new Date().getTime();\n    channel.master.on(\"audioprocess\", () => {\n      const currentTime = new Date().getTime();\n\n      if (currentTime - lastUpdate >= 500) {\n        lastUpdate = currentTime;\n        const timeLeft = parseInt(channel.master.getDuration() - channel.master.getCurrentTime());\n        this.dispatch(setTimeLeft(channel.channelName, timeLeft));\n      }\n    });\n  }\n\n  onSlaveSeek(channel) {\n    channel.slave.on(\"seek\", progress => {\n      const wasPlaying = channel.master.isPlaying();\n      channel.master.backend.seekTo(progress * channel.currentDuration);\n      channel.master.drawer.progress(progress);\n      channel.master.fireEvent(\"seek\", progress);\n      channel.slave.drawer.progress(progress);\n      const timeLeft = parseInt(channel.master.getDuration() - channel.master.getDuration() * progress);\n      this.dispatch(setTimeLeft(channel.channelName, timeLeft));\n\n      if (wasPlaying) {\n        channel.master.play();\n      }\n    });\n  }\n\n  onMasterSeek(channel) {\n    // updating time Left value\n    ///Because on seek event is called a 1000 time per second, is created watcher witch update\n    // value after 500 ms with last progress value\n    let lastCall = {\n      time: new Date().getTime(),\n      value: null\n    };\n    let watcher = null;\n    channel.master.on(\"seek\", progress => {\n      lastCall.time = new Date().getTime();\n      lastCall.value = progress;\n\n      if (!watcher) {\n        watcher = setTimeout(() => {\n          if (new Date().getTime() - lastCall.time >= 100) {\n            this.dispatch(setTimeLeft(channel.channelName, parseInt(channel.master.getDuration() * lastCall.value)));\n            clearTimeout(watcher);\n            watcher = null;\n          }\n        }, 500);\n      }\n    });\n  }\n\n  onFinish(channel) {\n    channel.master.on(\"finish\", () => {\n      this.dispatch(togglePlay(channel.channelName));\n    });\n  } //---helpers\n\n\n  clearState(channel) {\n    channel.slave.load(null, []);\n\n    if (channel.barsElements) {\n      channel.barsElements.forEach(htmlElement => htmlElement.remove());\n    }\n  }\n\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/core/console/channels/channelEvnetHandler/channelEvnetHandler.js"],"names":["store","setChannelReady","setLoadingProgress","setTimeLeft","togglePlay","EventHandler","constructor","startSync","channel","syncHandle","setInterval","slave","drawer","progress","master","getCurrentTime","currentDuration","dispatch","CreateEventHandling","onLoad","onLoading","onReady","onProcess","onSlaveSeek","onMasterSeek","onFinish","on","clearState","channelName","getDuration","resolution","load","backend","getPeaks","lastUpdate","Date","getTime","currentTime","timeLeft","parseInt","wasPlaying","isPlaying","seekTo","fireEvent","play","lastCall","time","value","watcher","setTimeout","clearTimeout","barsElements","forEach","htmlElement","remove"],"mappings":"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","sourcesContent":["import store from \"./../../../../store\";\r\n\r\nimport {\r\n  setChannelReady,\r\n  setLoadingProgress,\r\n  setTimeLeft,\r\n  togglePlay\r\n} from \"./../../../../actions\";\r\n\r\nexport default class EventHandler {\r\n  constructor() {\r\n    this.dispatch = store.dispatch;\r\n  }\r\n\r\n  CreateEventHandling(channel) {\r\n    this.onLoad(channel);\r\n    this.onLoading(channel);\r\n    this.onReady(channel);\r\n    this.onProcess(channel);\r\n    this.onSlaveSeek(channel);\r\n    this.onMasterSeek(channel);\r\n    this.onFinish(channel);\r\n  }\r\n  // --- events below\r\n\r\n  onLoad(channel) {\r\n    channel.master.on(\"load\", () => {\r\n      this.clearState(channel);\r\n    });\r\n  }\r\n\r\n  onLoading(channel) {\r\n    channel.master.on(\"loading\", progress => {\r\n      this.dispatch(setLoadingProgress(channel.channelName, progress));\r\n    });\r\n  }\r\n\r\n  onReady(channel) {\r\n    channel.master.on(\"ready\", () => {\r\n      channel.currentDuration = channel.master.getDuration();\r\n      let resolution = 430;\r\n      channel.slave.load(\r\n        null,\r\n        channel.master.backend.getPeaks(resolution, 0, resolution)\r\n      );\r\n      this.dispatch(setLoadingProgress(channel.channelName, 100));\r\n\r\n      this.dispatch(setChannelReady(true, channel.channelName));\r\n      this.startSync(channel);\r\n    });\r\n  }\r\n\r\n  onProcess(channel) {\r\n    let lastUpdate = new Date().getTime();\r\n    channel.master.on(\"audioprocess\", () => {\r\n      const currentTime = new Date().getTime();\r\n      if (currentTime - lastUpdate >= 500) {\r\n        lastUpdate = currentTime;\r\n        const timeLeft = parseInt(channel.master.getDuration() - channel.master.getCurrentTime());\r\n        this.dispatch(setTimeLeft(channel.channelName, timeLeft));\r\n      }\r\n    });\r\n  }\r\n\r\n  onSlaveSeek(channel) {\r\n    channel.slave.on(\"seek\", progress => {\r\n      const wasPlaying = channel.master.isPlaying();\r\n\r\n      channel.master.backend.seekTo(progress * channel.currentDuration);\r\n      channel.master.drawer.progress(progress);\r\n      channel.master.fireEvent(\"seek\", progress);\r\n\r\n      channel.slave.drawer.progress(progress);\r\n\r\n      const timeLeft = parseInt(channel.master.getDuration() - (channel.master.getDuration() * progress));\r\n      this.dispatch(setTimeLeft(channel.channelName, timeLeft));\r\n      \r\n      if (wasPlaying) {\r\n        channel.master.play();\r\n      }\r\n    });\r\n  }\r\n\r\n  onMasterSeek(channel) {\r\n    // updating time Left value\r\n    ///Because on seek event is called a 1000 time per second, is created watcher witch update\r\n    // value after 500 ms with last progress value\r\n    let lastCall = {\r\n      time: new Date().getTime(),\r\n      value: null\r\n    };\r\n    let watcher = null;\r\n    channel.master.on(\"seek\", progress => {\r\n      lastCall.time = new Date().getTime();\r\n      lastCall.value = progress;\r\n      if (!watcher) {\r\n        watcher = setTimeout(() => {\r\n          if (new Date().getTime() - lastCall.time >= 100) {\r\n            this.dispatch(\r\n              setTimeLeft(\r\n                channel.channelName,\r\n                parseInt(channel.master.getDuration() * lastCall.value)\r\n              )\r\n            );\r\n            clearTimeout(watcher);\r\n            watcher = null;\r\n          }\r\n        }, 500);\r\n      }\r\n    });\r\n  }\r\n\r\n  onFinish(channel) {\r\n    channel.master.on(\"finish\", () => {\r\n      this.dispatch(togglePlay(channel.channelName));\r\n    });\r\n  }\r\n\r\n  //---helpers\r\n  clearState(channel) {\r\n    channel.slave.load(null, []);\r\n    if (channel.barsElements) {\r\n      channel.barsElements.forEach(htmlElement => htmlElement.remove());\r\n    }\r\n  }\r\n\r\n  startSync = channel => {\r\n    channel.syncHandle = setInterval(() => {\r\n      channel.slave.drawer.progress(\r\n        channel.master.getCurrentTime() / channel.currentDuration\r\n      );\r\n    }, 100);\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}