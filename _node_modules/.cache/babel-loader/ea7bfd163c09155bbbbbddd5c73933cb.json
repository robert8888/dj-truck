{"ast":null,"code":"/**\r\n * Adapted from https://github.com/web-audio-components/simple-reverb\r\n */\nimport Effect from \"./../effect\";\nimport worker from \"./buildImpulseWebWorker\";\nimport WebWorker from \"./workerSetup\";\nexport default class Reverb extends Effect {\n  static defaultParams() {\n    return {\n      params: {\n        seconds: {\n          min: 1,\n          max: 50,\n          defaultValue: 3,\n          type: \"float\",\n          description: \"time\"\n        },\n        decay: {\n          min: 0,\n          max: 100,\n          defaultValue: 2,\n          type: \"float\",\n          description: \"decay\"\n        },\n        reverse: {\n          min: 0,\n          max: 1,\n          defaultValue: 0,\n          type: \"bool\",\n          description: \"rev\"\n        }\n      }\n    };\n  }\n\n  constructor(context, opt = {}) {\n    super();\n    this.input = this.output = context.createConvolver();\n    this._context = context;\n    const defaultParams = Reverb.defaultParams().params;\n    this._seconds = opt.seconds || defaultParams.seconds.defaultValue;\n    this._decay = opt.decay || defaultParams.decay.defaultValue;\n    this._reverse = opt.reverse || defaultParams.reverse.defaultValue;\n    this.configWorker();\n\n    this._buildImpulse();\n  }\n\n  configWorker() {\n    this._buildImpulseWorker = new WebWorker(worker);\n\n    this._buildImpulseWorker.addEventListener(\"message\", e => {\n      if (e.data[0].type === \"IMPLUSE\") {\n        const impulseL = e.data[1];\n        const impulseR = e.data[2];\n        const lenght = e.data[0].lenght;\n\n        const impulse = this._context.createBuffer(2, lenght, this._context.sampleRate);\n\n        this.input.buffer = e.data.impulse;\n      }\n    });\n  }\n\n  connect(input, dest) {\n    input.connect(this.input);\n    this.output.connect(dest);\n\n    if (!this._buildImpulseWorker) {\n      this.configWorker();\n    }\n  }\n\n  disconnect() {\n    this.output.disconnect();\n\n    this._buildImpulseWorker.terminate();\n\n    delete this._buildImpulseWorker;\n  }\n\n  _buildImpulse() {\n    let rate = this._context.sampleRate;\n    const length = rate * this.seconds;\n\n    const impulse = this._context.createBuffer(2, length, rate);\n\n    const impulseR = new Float32Array(length);\n    const impulseL = new Float32Array(length);\n    impulse.copyFromChannel(impulseL, 0, 0);\n    impulse.copyFromChannel(impulseR, 1, 0);\n\n    this._buildImpulseWorker.postMessage([{\n      type: \"BUILD_IMPULSE\",\n      length: length,\n      decay: this._decay,\n      reverse: this._reverse\n    }, impulseL, impulseR]);\n  }\n  /* _buildImpulse() {\r\n       let rate = this._context.sampleRate,\r\n           length = rate * this.seconds,\r\n           decay = this.decay,\r\n           impulse = this._context.createBuffer(2, length, rate),\r\n           impulseL = impulse.getChannelData(0),\r\n           impulseR = impulse.getChannelData(1),\r\n           n,\r\n           i;\r\n         for (i = 0; i < length; i++) {\r\n           n = this.reverse ? length - i : i;\r\n           impulseL[i] = (Math.random() * 2 - 1) * Math.pow(1 - n / length, decay);\r\n           impulseR[i] = (Math.random() * 2 - 1) * Math.pow(1 - n / length, decay);\r\n       }\r\n         this.input.buffer = impulse;\r\n   }*/\n\n\n  get seconds() {\n    return this._seconds;\n  }\n\n  set seconds(value) {\n    let params = Reverb.defaultParams().params;\n    value = Math.min(params.seconds.min, value);\n    value = Math.max(params.seconds.max, value);\n    this._seconds = value;\n\n    this._buildImpulse();\n  }\n\n  get decay() {\n    return this._decay;\n  }\n\n  set decay(value) {\n    let params = Reverb.defaultParams().params;\n    value = Math.min(params.decay.min, value);\n    value = Math.max(params.decay.max, value);\n    this._decay = value;\n\n    this._buildImpulse();\n  }\n\n  get reverse() {\n    return this._reverse;\n  }\n\n  set reverse(value) {\n    this._reverse = value === 1 || value === \"true\";\n\n    this._buildImpulse();\n  }\n\n  get name() {\n    return \"reverb\";\n  }\n\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/pages/app/core/console/effector/effects/reverb/reverb.js"],"names":["Effect","worker","WebWorker","Reverb","defaultParams","params","seconds","min","max","defaultValue","type","description","decay","reverse","constructor","context","opt","input","output","createConvolver","_context","_seconds","_decay","_reverse","configWorker","_buildImpulse","_buildImpulseWorker","addEventListener","e","data","impulseL","impulseR","lenght","impulse","createBuffer","sampleRate","buffer","connect","dest","disconnect","terminate","rate","length","Float32Array","copyFromChannel","postMessage","value","Math","name"],"mappings":"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","sourcesContent":["/**\r\n * Adapted from https://github.com/web-audio-components/simple-reverb\r\n */\r\nimport Effect from \"./../effect\";\r\nimport worker from \"./buildImpulseWebWorker\";\r\nimport WebWorker from \"./workerSetup\";\r\n\r\nexport default class Reverb extends Effect {\r\n    static defaultParams() {\r\n        return {\r\n            params: {\r\n                seconds: {\r\n                    min: 1,\r\n                    max: 50,\r\n                    defaultValue: 3,\r\n                    type: \"float\",\r\n                    description: \"time\"\r\n                },\r\n                decay: {\r\n                    min: 0,\r\n                    max: 100,\r\n                    defaultValue: 2,\r\n                    type: \"float\",\r\n                    description: \"decay\"\r\n                },\r\n                reverse: {\r\n                    min: 0,\r\n                    max: 1,\r\n                    defaultValue: 0,\r\n                    type: \"bool\",\r\n                    description : \"rev\"\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    constructor(context, opt = {}) {\r\n        super();\r\n        this.input = this.output = context.createConvolver()\r\n        this._context = context;\r\n\r\n        const defaultParams = Reverb.defaultParams().params;\r\n        this._seconds = opt.seconds || defaultParams.seconds.defaultValue;\r\n        this._decay = opt.decay || defaultParams.decay.defaultValue;\r\n        this._reverse = opt.reverse || defaultParams.reverse.defaultValue;\r\n\r\n        this.configWorker();\r\n        this._buildImpulse();\r\n    }\r\n\r\n    configWorker(){\r\n        this._buildImpulseWorker = new WebWorker(worker);\r\n        this._buildImpulseWorker.addEventListener(\"message\", e =>{\r\n            if(e.data[0].type === \"IMPLUSE\"){\r\n                const impulseL = e.data[1];\r\n                const impulseR = e.data[2];\r\n                const lenght = e.data[0].lenght;\r\n                const impulse = this._context.createBuffer(2, lenght, this._context.sampleRate)\r\n                this.input.buffer = e.data.impulse;\r\n            }\r\n        })\r\n    }\r\n\r\n    connect(input, dest) {\r\n        input.connect(this.input);\r\n        this.output.connect(dest);\r\n        if(!this._buildImpulseWorker){\r\n            this.configWorker();\r\n        }\r\n    }\r\n\r\n    disconnect() {\r\n        this.output.disconnect();\r\n        this._buildImpulseWorker.terminate();\r\n        delete this._buildImpulseWorker;\r\n    }\r\n\r\n    _buildImpulse(){\r\n        let rate = this._context.sampleRate;\r\n        const length = rate * this.seconds;\r\n\r\n        const impulse = this._context.createBuffer(2, length, rate);\r\n        const impulseR = new Float32Array(length);\r\n        const impulseL = new Float32Array(length);\r\n        impulse.copyFromChannel(impulseL, 0, 0);\r\n        impulse.copyFromChannel(impulseR, 1, 0);\r\n\r\n        this._buildImpulseWorker.postMessage([{\r\n            type: \"BUILD_IMPULSE\",\r\n            length : length,\r\n            decay : this._decay,\r\n            reverse : this._reverse\r\n        }, impulseL, impulseR])\r\n    }\r\n\r\n    \r\n\r\n   /* _buildImpulse() {\r\n        let rate = this._context.sampleRate,\r\n            length = rate * this.seconds,\r\n            decay = this.decay,\r\n            impulse = this._context.createBuffer(2, length, rate),\r\n            impulseL = impulse.getChannelData(0),\r\n            impulseR = impulse.getChannelData(1),\r\n            n,\r\n            i;\r\n\r\n        for (i = 0; i < length; i++) {\r\n            n = this.reverse ? length - i : i;\r\n            impulseL[i] = (Math.random() * 2 - 1) * Math.pow(1 - n / length, decay);\r\n            impulseR[i] = (Math.random() * 2 - 1) * Math.pow(1 - n / length, decay);\r\n        }\r\n\r\n        this.input.buffer = impulse;\r\n    }*/\r\n\r\n    get seconds() {\r\n        return this._seconds;\r\n    }\r\n\r\n    set seconds(value) {\r\n        let params = Reverb.defaultParams().params;\r\n        value = Math.min(params.seconds.min, value);\r\n        value = Math.max(params.seconds.max, value);\r\n        this._seconds = value;\r\n        this._buildImpulse();\r\n    }\r\n\r\n    get decay() {\r\n        return this._decay;\r\n    }\r\n\r\n    set decay(value) {\r\n        let params = Reverb.defaultParams().params;\r\n        value = Math.min(params.decay.min, value);\r\n        value = Math.max(params.decay.max, value);\r\n        this._decay = value;\r\n        this._buildImpulse();\r\n    }\r\n\r\n    get reverse() {\r\n        return this._reverse;\r\n    };\r\n\r\n    set reverse(value) {\r\n        this._reverse = (value === 1 || value === \"true\");\r\n        this._buildImpulse();\r\n    }\r\n\r\n    get name(){\r\n        return \"reverb\";\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}