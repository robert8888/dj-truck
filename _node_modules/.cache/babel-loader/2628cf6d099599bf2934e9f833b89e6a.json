{"ast":null,"code":"import { ACTIONS, openCurrentPlaylist, setPlaylistContent } from \"../../actions\";\nimport { takeEvery, select, put, call } from \"redux-saga/effects\";\nimport { getApi } from \"./../../apis/apiProvider\";\nimport { showLoading, hideLoading } from 'react-redux-loading-bar';\nimport { get } from \"lodash/object\";\nexport default function* loadPlaylistRequest() {\n  yield takeEvery(ACTIONS.PL_LOAD_PLAYLIST_REQUEST, handel);\n}\n\nconst getToken = state => state.user.token;\n\nconst getCurrentPlaylist = state => {\n  const path = state.playList.currentSelection;\n  return get(state.playList, path);\n};\n\nexport function* handel(action) {\n  const token = yield select(getToken);\n  const playlist = yield select(getCurrentPlaylist);\n\n  if (playlist._loaded || !token) {\n    return yield put(openCurrentPlaylist(action.path));\n  } else {\n    try {\n      var _result$data, _result$data$playlist, _result$data$playlist2;\n\n      yield put(showLoading());\n      const {\n        callQuery,\n        queries\n      } = getApi(\"UserAssets\");\n      const result = yield call(function* fetch() {\n        return yield callQuery(queries.loadPlaylistQl(playlist._id), token);\n      });\n\n      if (!result.errors && (result === null || result === void 0 ? void 0 : (_result$data = result.data) === null || _result$data === void 0 ? void 0 : (_result$data$playlist = _result$data.playlist) === null || _result$data$playlist === void 0 ? void 0 : (_result$data$playlist2 = _result$data$playlist.tracks) === null || _result$data$playlist2 === void 0 ? void 0 : _result$data$playlist2.length)) {\n        yield put(setPlaylistContent(result.data.playlist, action.path));\n      } else if (result.errors) {\n        throw new Error(JSON.stringify(result.errors));\n      }\n\n      yield put(openCurrentPlaylist(action.path));\n    } catch (err) {\n      console.log(\"connectin to api problem\");\n      console.log(err.message);\n    } finally {\n      yield put(hideLoading());\n    }\n  }\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/sagas/playlists/reqReadPlaylistSaga.js"],"names":["ACTIONS","openCurrentPlaylist","setPlaylistContent","takeEvery","select","put","call","getApi","showLoading","hideLoading","get","loadPlaylistRequest","PL_LOAD_PLAYLIST_REQUEST","handel","getToken","state","user","token","getCurrentPlaylist","path","playList","currentSelection","action","playlist","_loaded","callQuery","queries","result","fetch","loadPlaylistQl","_id","errors","data","tracks","length","Error","JSON","stringify","err","console","log","message"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,mBAAlB,EAAuCC,kBAAvC,QAAiE,eAAjE;AACA,SAASC,SAAT,EAAoBC,MAApB,EAA4BC,GAA5B,EAAiCC,IAAjC,QAA6C,oBAA7C;AACA,SAASC,MAAT,QAAuB,0BAAvB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,yBAAzC;AACA,SAASC,GAAT,QAAoB,eAApB;AAEA,eAAe,UAAUC,mBAAV,GAAgC;AAC3C,QAAMR,SAAS,CAACH,OAAO,CAACY,wBAAT,EAAmCC,MAAnC,CAAf;AACH;;AAED,MAAMC,QAAQ,GAAGC,KAAK,IAAIA,KAAK,CAACC,IAAN,CAAWC,KAArC;;AAEA,MAAMC,kBAAkB,GAAGH,KAAK,IAAI;AAChC,QAAMI,IAAI,GAAGJ,KAAK,CAACK,QAAN,CAAeC,gBAA5B;AACA,SAAOX,GAAG,CAACK,KAAK,CAACK,QAAP,EAAiBD,IAAjB,CAAV;AACH,CAHD;;AAKA,OAAO,UAAUN,MAAV,CAAiBS,MAAjB,EAAyB;AAC5B,QAAML,KAAK,GAAG,MAAMb,MAAM,CAACU,QAAD,CAA1B;AACA,QAAMS,QAAQ,GAAG,MAAMnB,MAAM,CAACc,kBAAD,CAA7B;;AAEA,MAAIK,QAAQ,CAACC,OAAT,IAAoB,CAACP,KAAzB,EAAgC;AAC5B,WAAO,MAAMZ,GAAG,CAACJ,mBAAmB,CAACqB,MAAM,CAACH,IAAR,CAApB,CAAhB;AACH,GAFD,MAEO;AACH,QAAI;AAAA;;AACA,YAAMd,GAAG,CAACG,WAAW,EAAZ,CAAT;AACA,YAAM;AAAEiB,QAAAA,SAAF;AAAaC,QAAAA;AAAb,UAAyBnB,MAAM,CAAC,YAAD,CAArC;AACA,YAAMoB,MAAM,GAAG,MAAMrB,IAAI,CAAC,UAAUsB,KAAV,GAAkB;AACxC,eAAO,MAAMH,SAAS,CAACC,OAAO,CAACG,cAAR,CAAuBN,QAAQ,CAACO,GAAhC,CAAD,EAAuCb,KAAvC,CAAtB;AACH,OAFwB,CAAzB;;AAIA,UAAI,CAACU,MAAM,CAACI,MAAR,KAAkBJ,MAAlB,aAAkBA,MAAlB,uCAAkBA,MAAM,CAAEK,IAA1B,0EAAkB,aAAcT,QAAhC,oFAAkB,sBAAwBU,MAA1C,2DAAkB,uBAAgCC,MAAlD,CAAJ,EAA8D;AAC1D,cAAM7B,GAAG,CAACH,kBAAkB,CAACyB,MAAM,CAACK,IAAP,CAAYT,QAAb,EAAuBD,MAAM,CAACH,IAA9B,CAAnB,CAAT;AACH,OAFD,MAEO,IAAIQ,MAAM,CAACI,MAAX,EAAmB;AACtB,cAAM,IAAII,KAAJ,CAAUC,IAAI,CAACC,SAAL,CAAeV,MAAM,CAACI,MAAtB,CAAV,CAAN;AACH;;AACD,YAAM1B,GAAG,CAACJ,mBAAmB,CAACqB,MAAM,CAACH,IAAR,CAApB,CAAT;AACH,KAbD,CAaE,OAAOmB,GAAP,EAAY;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,OAAhB;AACH,KAhBD,SAgBU;AACN,YAAMpC,GAAG,CAACI,WAAW,EAAZ,CAAT;AACH;AACJ;AACJ","sourcesContent":["import { ACTIONS, openCurrentPlaylist, setPlaylistContent } from \"../../actions\";\r\nimport { takeEvery, select, put, call } from \"redux-saga/effects\"\r\nimport { getApi } from \"./../../apis/apiProvider\";\r\nimport { showLoading, hideLoading } from 'react-redux-loading-bar'\r\nimport { get } from \"lodash/object\";\r\n\r\nexport default function* loadPlaylistRequest() {\r\n    yield takeEvery(ACTIONS.PL_LOAD_PLAYLIST_REQUEST, handel)\r\n}\r\n\r\nconst getToken = state => state.user.token;\r\n\r\nconst getCurrentPlaylist = state => {\r\n    const path = state.playList.currentSelection;\r\n    return get(state.playList, path);\r\n}\r\n\r\nexport function* handel(action) {\r\n    const token = yield select(getToken);\r\n    const playlist = yield select(getCurrentPlaylist);\r\n\r\n    if (playlist._loaded || !token) {\r\n        return yield put(openCurrentPlaylist(action.path))\r\n    } else {\r\n        try {\r\n            yield put(showLoading());\r\n            const { callQuery, queries } = getApi(\"UserAssets\");\r\n            const result = yield call(function* fetch() {\r\n                return yield callQuery(queries.loadPlaylistQl(playlist._id), token)\r\n            });\r\n\r\n            if (!result.errors && result?.data?.playlist?.tracks?.length) {\r\n                yield put(setPlaylistContent(result.data.playlist, action.path));\r\n            } else if (result.errors) {\r\n                throw new Error(JSON.stringify(result.errors));\r\n            }\r\n            yield put(openCurrentPlaylist(action.path));\r\n        } catch (err) {\r\n            console.log(\"connectin to api problem\");\r\n            console.log(err.message);\r\n        } finally {\r\n            yield put(hideLoading())\r\n        }\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}