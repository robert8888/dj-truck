{"ast":null,"code":"import { get } from \"lodash/object\";\nimport { hideLoading, showLoading } from 'react-redux-loading-bar';\nimport { put, select, takeEvery } from \"redux-saga/effects\";\nimport { ACTIONS, deleteSelected, pushLog } from \"../../actions\";\nimport { getApi } from \"./../../apis/apiProvider\";\nimport { Log } from \"./../../utils/logger/logger\";\nexport default function* deleteSelectedRequestSaga() {\n  yield takeEvery(ACTIONS.PL_DELETE_SELECTED_REQUEST, handel);\n}\n\nconst getToken = state => state.user.token;\n\nconst getCurrentSelection = state => state.playList.currentSelection;\n\nconst getCurrent = (state, path) => get(state.playList, path);\n\nfunction* handel(action) {\n  const path = ['saga', 'playlist', 'request delete selected'];\n  const token = yield select(getToken);\n\n  if (!token) {\n    return yield put(deleteSelected());\n  }\n\n  try {\n    yield put(showLoading());\n    const {\n      callQuery,\n      queries\n    } = getApi(\"UserAssets\");\n    const currentSelection = yield select(getCurrentSelection);\n    const current = yield select(getCurrent, currentSelection);\n    const id = current._id;\n    let query;\n\n    if (current._type === \"playlist\") {\n      query = queries.deleteQl.deletePlaylist([id], action.name);\n    } else {\n      // dir\n      query = queries.deleteQl.deleteDir([id], action.name);\n    }\n\n    let response = yield callQuery(query, token);\n\n    if (response.errors) {\n      throw new Error(`Can't deleted ${current._type} element. server response containse errors` + JSON.stringify(response.errors));\n    }\n\n    let deletedRows = 0;\n    deletedRows = current._type === \"playlist\" ? response.data.deletePlaylist : response.data.deleteDir;\n\n    if (deletedRows) {\n      yield put(deleteSelected());\n    }\n\n    yield put(pushLog(new Log(`Current seleted ${current._type} deleted from database.`, path)));\n  } catch (error) {\n    yield put(pushLog(Log.Error(path, \"Can't delete current seleted element\" + error.message, \"Sorry. During process deleting element occurred a problem\", error)));\n  } finally {\n    yield put(hideLoading());\n  }\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/sagas/playlists/reqDeleteSelectedSaga.js"],"names":["get","hideLoading","showLoading","put","select","takeEvery","ACTIONS","deleteSelected","pushLog","getApi","Log","deleteSelectedRequestSaga","PL_DELETE_SELECTED_REQUEST","handel","getToken","state","user","token","getCurrentSelection","playList","currentSelection","getCurrent","path","action","callQuery","queries","current","id","_id","query","_type","deleteQl","deletePlaylist","name","deleteDir","response","errors","Error","JSON","stringify","deletedRows","data","error","message"],"mappings":"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","sourcesContent":["import { get } from \"lodash/object\";\r\nimport { hideLoading, showLoading } from 'react-redux-loading-bar';\r\nimport { put, select, takeEvery } from \"redux-saga/effects\";\r\nimport { ACTIONS, deleteSelected, pushLog } from \"../../actions\";\r\nimport { getApi } from \"./../../apis/apiProvider\";\r\nimport { Log } from \"./../../utils/logger/logger\";\r\n\r\nexport default function* deleteSelectedRequestSaga() {\r\n    yield takeEvery(ACTIONS.PL_DELETE_SELECTED_REQUEST, handel)\r\n}\r\n\r\nconst getToken = state => state.user.token;\r\n\r\nconst getCurrentSelection = state => state.playList.currentSelection;\r\n\r\nconst getCurrent = (state, path) => get(state.playList, path);\r\n\r\nfunction* handel(action) {\r\n    const path = ['saga', 'playlist', 'request delete selected'];\r\n    const token = yield select(getToken);\r\n\r\n    if (!token) {\r\n        return yield put(deleteSelected());\r\n    }\r\n    try {\r\n        yield put(showLoading());\r\n        const { callQuery, queries } = getApi(\"UserAssets\");\r\n        const currentSelection = yield select(getCurrentSelection);\r\n        const current = yield select(getCurrent, currentSelection);\r\n\r\n        const id = current._id;\r\n\r\n        let query;\r\n        if (current._type === \"playlist\") {\r\n            query = queries.deleteQl.deletePlaylist([id], action.name)\r\n        } else { // dir\r\n            query = queries.deleteQl.deleteDir([id], action.name)\r\n        }\r\n\r\n        let response = yield callQuery(query, token);\r\n        if(response.errors){\r\n            throw new Error(`Can't deleted ${current._type} element. server response containse errors` + JSON.stringify(response.errors));\r\n        }\r\n\r\n        let deletedRows = 0;\r\n        deletedRows = (current._type === \"playlist\")  ? \r\n                      response.data.deletePlaylist : \r\n                      response.data.deleteDir;\r\n\r\n        if (deletedRows) {\r\n            yield put(deleteSelected());\r\n        }\r\n\r\n        yield put(pushLog(new Log(`Current seleted ${current._type} deleted from database.`, path)))\r\n    } catch (error) {\r\n        yield put(pushLog(Log.Error(\r\n            path,\r\n            \"Can't delete current seleted element\" + error.message,\r\n            \"Sorry. During process deleting element occurred a problem\",\r\n            error\r\n        )))\r\n    } finally {\r\n        yield put(hideLoading())\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}