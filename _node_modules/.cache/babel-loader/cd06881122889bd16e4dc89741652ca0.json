{"ast":null,"code":"import store from \"./../../store\";\nimport Observer from \"./observer/observer\";\nimport STATUS from \"./observer/STATUS\";\nimport { togglePlay, setTimeLeft } from \"./../../actions\";\nimport Channels from \"./channels/channels\";\nimport Mixer from \"./mixer/mixer\";\nlet mixConsole;\nexport default class Console {\n  constructor() {\n    store.subscribe(this.handleChange.bind(this));\n    this.dispatch = store.dispatch;\n    this.observer = new Observer(store);\n    this.channels = new Channels();\n    this.mixer = new Mixer(this.channels);\n  }\n\n  static Create() {\n    mixConsole = new Console();\n  }\n\n  static Get() {\n    if (!mixConsole) {\n      mixConsole = new Console();\n      return mixConsole;\n    } else {\n      return mixConsole;\n    }\n  }\n\n  getMixer() {\n    return this.mixer;\n  }\n\n  setPlayer(channelName, player) {\n    this.channels.setChannel(channelName, player);\n    this.mixer.setUpAudioNodes(channelName);\n    this.attachEvents(channelName);\n  }\n\n  attachEvents(channel) {\n    const player = this.channels.getChannel(channel);\n    player.on('finish', () => {\n      this.dispatch(togglePlay(channel));\n    });\n    let lastUpdate = new Date().getTime();\n    player.on('audioprocess', () => {\n      const currentTime = new Date().getTime();\n\n      if (currentTime - lastUpdate >= 999) {\n        lastUpdate = currentTime;\n        this.dispatch(setTimeLeft(channel, parseInt(player.getDuration() - player.getCurrentTime())));\n      }\n    }); // updating time Left value\n    ///Because on seek event is called a 1000 time per second, is created watcher witch update \n    // value after 500 ms with last progress value \n\n    let lastCall = {\n      time: new Date().getTime(),\n      value: null\n    };\n    let watcher = null;\n    player.on('seek', progress => {\n      lastCall.time = new Date().getTime();\n      lastCall.value = progress;\n\n      if (!watcher) {\n        watcher = setTimeout(() => {\n          if (new Date().getTime() - lastCall.time >= 100) {\n            this.dispatch(setTimeLeft(channel, parseInt(player.getDuration() * lastCall.value)));\n            clearTimeout(watcher);\n            watcher = null;\n          }\n        }, 500);\n      }\n    });\n  }\n\n  handleChange() {\n    const storeChanges = this.observer.check();\n\n    for (let diff of storeChanges) {\n      this.callAction(diff);\n    }\n  }\n\n  callAction(diff) {\n    switch (diff.status) {\n      case STATUS.TOGGLE_PLAY:\n        {\n          this.channels.togglePlay(diff.channel, diff.currentValue);\n          break;\n        }\n\n      case STATUS.TOGGLE_CUE:\n        {\n          this.channels.toggleCue(diff.channel, diff.currentValue);\n          break;\n        }\n\n      case STATUS.PITCH_CHANGE:\n        {\n          this.channels.adjustPitch(diff.channel, diff.currentValue);\n          break;\n        }\n\n      case STATUS.GAIN_CHANGE:\n        {\n          this.mixer.setGain(diff.channel, diff.currentValue);\n          break;\n        }\n\n      case STATUS.EQ_LOW_CHANGE:\n        {\n          this.mixer.setEqLow(diff.channel, diff.currentValue);\n          break;\n        }\n\n      case STATUS.EQ_MID_CHANGE:\n        {\n          this.mixer.setEqMid(diff.channel, diff.currentValue);\n          break;\n        }\n\n      case STATUS.EQ_HI_CHANGE:\n        {\n          this.mixer.setEqHigh(diff.channel, diff.currentValue);\n          break;\n        }\n\n      case STATUS.FADER_CHANGE:\n        {\n          this.mixer.setFader(diff.currentValue);\n          break;\n        }\n\n      default:\n        return;\n    }\n  }\n\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/core/console/console.js"],"names":["store","Observer","STATUS","togglePlay","setTimeLeft","Channels","Mixer","mixConsole","Console","constructor","subscribe","handleChange","bind","dispatch","observer","channels","mixer","Create","Get","getMixer","setPlayer","channelName","player","setChannel","setUpAudioNodes","attachEvents","channel","getChannel","on","lastUpdate","Date","getTime","currentTime","parseInt","getDuration","getCurrentTime","lastCall","time","value","watcher","progress","setTimeout","clearTimeout","storeChanges","check","diff","callAction","status","TOGGLE_PLAY","currentValue","TOGGLE_CUE","toggleCue","PITCH_CHANGE","adjustPitch","GAIN_CHANGE","setGain","EQ_LOW_CHANGE","setEqLow","EQ_MID_CHANGE","setEqMid","EQ_HI_CHANGE","setEqHigh","FADER_CHANGE","setFader"],"mappings":"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","sourcesContent":["import store from \"./../../store\";\r\nimport Observer from \"./observer/observer\";\r\nimport STATUS from \"./observer/STATUS\";\r\nimport { togglePlay,\r\n         setTimeLeft }\r\n         from \"./../../actions\";\r\nimport Channels from \"./channels/channels\";\r\nimport Mixer from \"./mixer/mixer\";\r\n\r\nlet mixConsole;\r\n\r\nexport default class Console{\r\n    constructor(){\r\n        store.subscribe(this.handleChange.bind(this));\r\n        this.dispatch = store.dispatch;\r\n        this.observer = new Observer(store);\r\n\r\n        this.channels = new Channels();\r\n        this.mixer = new Mixer(this.channels);\r\n\r\n    }\r\n\r\n    static Create(){\r\n        mixConsole = new Console();\r\n    }\r\n\r\n    static Get(){\r\n        if(!mixConsole){\r\n            mixConsole = new Console();\r\n            return mixConsole;\r\n        } else {\r\n            return mixConsole;\r\n        }\r\n    }\r\n\r\n    getMixer(){\r\n        return this.mixer;\r\n    }\r\n\r\n    setPlayer(channelName, player){\r\n        this.channels.setChannel(channelName, player);\r\n        this.mixer.setUpAudioNodes(channelName);\r\n        this.attachEvents(channelName);\r\n    }\r\n\r\n    attachEvents(channel){\r\n        const player = this.channels.getChannel(channel);\r\n        player.on('finish', ()=>{\r\n            this.dispatch(togglePlay(channel))\r\n        })\r\n\r\n        let lastUpdate = (new Date()).getTime();\r\n        player.on('audioprocess', ()=>{\r\n            const currentTime = (new Date()).getTime();\r\n            if((currentTime - lastUpdate) >= 999){\r\n                lastUpdate = currentTime;\r\n                this.dispatch(setTimeLeft(channel, parseInt(player.getDuration() - player.getCurrentTime())))\r\n            }\r\n        })\r\n        // updating time Left value\r\n        ///Because on seek event is called a 1000 time per second, is created watcher witch update \r\n        // value after 500 ms with last progress value \r\n        let lastCall = {\r\n            time :(new Date()).getTime(),\r\n            value : null\r\n        };\r\n        let watcher = null;\r\n        player.on('seek', progress => {\r\n            lastCall.time = (new Date()).getTime();\r\n            lastCall.value = progress;\r\n            if(!watcher){\r\n                watcher = setTimeout(()=>{\r\n                        if(((new Date()).getTime() - lastCall.time) >= 100)\r\n                        {\r\n                            this.dispatch(setTimeLeft(channel, parseInt(player.getDuration() * lastCall.value)))\r\n                            clearTimeout(watcher);\r\n                            watcher = null\r\n                        }\r\n                    }, 500)\r\n            }\r\n        })\r\n    }\r\n\r\n    handleChange(){\r\n        const storeChanges = this.observer.check();\r\n        for(let diff of storeChanges){\r\n            this.callAction(diff);\r\n        }\r\n    }\r\n\r\n    callAction(diff){\r\n        switch(diff.status){\r\n            case STATUS.TOGGLE_PLAY : {\r\n                this.channels.togglePlay(diff.channel, diff.currentValue);\r\n                break;\r\n            }\r\n            case STATUS.TOGGLE_CUE : {\r\n                this.channels.toggleCue(diff.channel, diff.currentValue)\r\n                break;\r\n            }\r\n            case STATUS.PITCH_CHANGE : {\r\n                this.channels.adjustPitch(diff.channel, diff.currentValue)\r\n                break;\r\n            }\r\n            case STATUS.GAIN_CHANGE : {\r\n                this.mixer.setGain(diff.channel, diff.currentValue);\r\n                break;\r\n            }\r\n            case STATUS.EQ_LOW_CHANGE : {\r\n                this.mixer.setEqLow(diff.channel, diff.currentValue);\r\n                break;\r\n            }\r\n            case STATUS.EQ_MID_CHANGE : {\r\n                this.mixer.setEqMid(diff.channel, diff.currentValue);\r\n                break;\r\n            }\r\n            case STATUS.EQ_HI_CHANGE : {\r\n                this.mixer.setEqHigh(diff.channel, diff.currentValue);\r\n                break;\r\n            }\r\n            case STATUS.FADER_CHANGE : {\r\n                this.mixer.setFader(diff.currentValue);\r\n                break;\r\n            }\r\n            default : return; \r\n        }\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}