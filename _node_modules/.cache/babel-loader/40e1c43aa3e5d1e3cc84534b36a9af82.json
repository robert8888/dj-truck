{"ast":null,"code":"import _slicedToArray from\"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import _classCallCheck from\"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"D:\\\\PROJEKTY\\\\APKI\\\\dj-truck\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import STATUS from\"./../observer/STATUS\";var Mastering=/*#__PURE__*/function(){function Mastering(mixer){_classCallCheck(this,Mastering);this.mixer=mixer;this.defaultCompressor={threshold:0,ratio:1,attack:.003,release:0.25};}_createClass(Mastering,[{key:\"getMain\",value:function getMain(){return this.mixer.audioNodes.channels['main'];}},{key:\"setMasterParam\",value:function setMasterParam(status,value){var main=this.getMain();switch(status){case STATUS.MASTER_PRE_GAIN_CHANGE:{this.setAudioParam(main.preGainNode,\"gain\",1+value/100);return;}case STATUS.MASTER_POST_GAIN_CHANGE:{this.setAudioParam(main.postGainNode,\"gain\",1+value/100);return;}case STATUS.MASTER_THRESHOLD_CHANGE:{this.setAudioParam(main.compressorNode,\"threshold\",value);return;}case STATUS.MASTER_RATIO_CHANGE:{this.setAudioParam(main.compressorNode,\"ratio\",value);return;}case STATUS.MASTER_ATTACK_CHANGE:{this.setAudioParam(main.compressorNode,\"attack\",value);return;}case STATUS.MASTER_RELEASE_CHANGE:{this.setAudioParam(main.compressorNode,\"release\",value);return;}default:return;}}},{key:\"configCompressor\",value:function configCompressor(){var _this=this;var compressorNode=this.getMain().compressorNode;Object.entries(this.defaultCompressor).forEach(function(_ref){var _ref2=_slicedToArray(_ref,2),variable=_ref2[0],value=_ref2[1];_this.setAudioParam(compressorNode,variable,value);});}},{key:\"setAudioParam\",value:function setAudioParam(audioNode,variable,value){audioNode[variable].setTargetAtTime(value,this.mixer.mainAudioContext.currentTime,0.01);}}]);return Mastering;}();export{Mastering as default};","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/pages/console/core/console/mixer/mastering.js"],"names":["STATUS","Mastering","mixer","defaultCompressor","threshold","ratio","attack","release","audioNodes","channels","status","value","main","getMain","MASTER_PRE_GAIN_CHANGE","setAudioParam","preGainNode","MASTER_POST_GAIN_CHANGE","postGainNode","MASTER_THRESHOLD_CHANGE","compressorNode","MASTER_RATIO_CHANGE","MASTER_ATTACK_CHANGE","MASTER_RELEASE_CHANGE","Object","entries","forEach","variable","audioNode","setTargetAtTime","mainAudioContext","currentTime"],"mappings":"oVAAA,MAAOA,CAAAA,MAAP,KAAmB,sBAAnB,C,GAGqBC,CAAAA,S,yBACjB,mBAAYC,KAAZ,CAAmB,iCACf,KAAKA,KAAL,CAAaA,KAAb,CAGA,KAAKC,iBAAL,CAAyB,CACrBC,SAAS,CAAE,CADU,CAErBC,KAAK,CAAE,CAFc,CAGrBC,MAAM,CAAE,IAHa,CAIrBC,OAAO,CAAE,IAJY,CAAzB,CAMH,C,+DAES,CACN,MAAO,MAAKL,KAAL,CAAWM,UAAX,CAAsBC,QAAtB,CAA+B,MAA/B,CAAP,CACH,C,sDAEcC,M,CAAQC,K,CAAO,CAC1B,GAAMC,CAAAA,IAAI,CAAI,KAAKC,OAAL,EAAd,CACA,OAAOH,MAAP,EACI,IAAKV,CAAAA,MAAM,CAACc,sBAAZ,CAAqC,CACjC,KAAKC,aAAL,CAAmBH,IAAI,CAACI,WAAxB,CAAqC,MAArC,CAA8C,EAAIL,KAAK,CAAC,GAAxD,EACA,OACH,CACD,IAAKX,CAAAA,MAAM,CAACiB,uBAAZ,CAAqC,CACjC,KAAKF,aAAL,CAAmBH,IAAI,CAACM,YAAxB,CAAsC,MAAtC,CAA+C,EAAIP,KAAK,CAAC,GAAzD,EACA,OACH,CACD,IAAKX,CAAAA,MAAM,CAACmB,uBAAZ,CAAqC,CACjC,KAAKJ,aAAL,CAAmBH,IAAI,CAACQ,cAAxB,CAAwC,WAAxC,CAAqDT,KAArD,EACA,OACH,CACD,IAAKX,CAAAA,MAAM,CAACqB,mBAAZ,CAAkC,CAC9B,KAAKN,aAAL,CAAmBH,IAAI,CAACQ,cAAxB,CAAwC,OAAxC,CAAiDT,KAAjD,EACA,OACH,CACD,IAAKX,CAAAA,MAAM,CAACsB,oBAAZ,CAAiC,CAC7B,KAAKP,aAAL,CAAmBH,IAAI,CAACQ,cAAxB,CAAwC,QAAxC,CAAkDT,KAAlD,EACA,OACH,CACD,IAAKX,CAAAA,MAAM,CAACuB,qBAAZ,CAAkC,CAC9B,KAAKR,aAAL,CAAmBH,IAAI,CAACQ,cAAxB,CAAwC,SAAxC,CAAmDT,KAAnD,EACA,OACH,CACD,QAAS,OAzBb,CA2BH,C,2DAEkB,gBACf,GAAMS,CAAAA,cAAc,CAAG,KAAKP,OAAL,GAAeO,cAAtC,CACAI,MAAM,CAACC,OAAP,CAAe,KAAKtB,iBAApB,EAAuCuB,OAAvC,CAA+C,cAAuB,kCAArBC,QAAqB,UAAXhB,KAAW,UAClE,KAAI,CAACI,aAAL,CAAmBK,cAAnB,CAAmCO,QAAnC,CAA6ChB,KAA7C,EACH,CAFD,EAGH,C,oDAEaiB,S,CAAWD,Q,CAAUhB,K,CAAO,CACtCiB,SAAS,CAACD,QAAD,CAAT,CAAoBE,eAApB,CAAoClB,KAApC,CAA2C,KAAKT,KAAL,CAAW4B,gBAAX,CAA4BC,WAAvE,CAAoF,IAApF,EACH,C,gCAzDgB9B,S","sourcesContent":["import STATUS from \"./../observer/STATUS\";\r\n\r\n\r\nexport default class Mastering {\r\n    constructor(mixer) {\r\n        this.mixer = mixer;\r\n\r\n\r\n        this.defaultCompressor = {\r\n            threshold: 0,\r\n            ratio: 1,\r\n            attack: .003,\r\n            release: 0.25,\r\n        }\r\n    }\r\n\r\n    getMain() {\r\n        return this.mixer.audioNodes.channels['main'];\r\n    }\r\n\r\n    setMasterParam(status, value) {\r\n        const main =  this.getMain();\r\n        switch(status){\r\n            case STATUS.MASTER_PRE_GAIN_CHANGE : {\r\n                this.setAudioParam(main.preGainNode, \"gain\", (1 + value/100))\r\n                return;\r\n            }\r\n            case STATUS.MASTER_POST_GAIN_CHANGE: {\r\n                this.setAudioParam(main.postGainNode, \"gain\", (1 + value/100))\r\n                return;\r\n            }\r\n            case STATUS.MASTER_THRESHOLD_CHANGE: {\r\n                this.setAudioParam(main.compressorNode, \"threshold\", value);\r\n                return;\r\n            }\r\n            case STATUS.MASTER_RATIO_CHANGE : {\r\n                this.setAudioParam(main.compressorNode, \"ratio\", value);\r\n                return;\r\n            }\r\n            case STATUS.MASTER_ATTACK_CHANGE:{\r\n                this.setAudioParam(main.compressorNode, \"attack\", value);\r\n                return;\r\n            }\r\n            case STATUS.MASTER_RELEASE_CHANGE:{\r\n                this.setAudioParam(main.compressorNode, \"release\", value);\r\n                return;\r\n            }\r\n            default: return;\r\n        }\r\n    }\r\n\r\n    configCompressor() {\r\n        const compressorNode = this.getMain().compressorNode ;\r\n        Object.entries(this.defaultCompressor).forEach(([variable, value]) => {\r\n            this.setAudioParam(compressorNode, variable, value)\r\n        });\r\n    }\r\n\r\n    setAudioParam(audioNode, variable, value) {\r\n        audioNode[variable].setTargetAtTime(value, this.mixer.mainAudioContext.currentTime, 0.01)\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}