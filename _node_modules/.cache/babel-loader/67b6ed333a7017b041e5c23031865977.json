{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJEKTY\\\\APKI\\\\DjTruck\\\\djtruck\\\\src\\\\pages\\\\app\\\\components\\\\PlayListExplorer\\\\Explorer\\\\ExplorerTree\\\\ExplorerTree.js\";\nimport React, { useCallback } from \"react\";\nimport { connect } from \"react-redux\";\nimport \"./explorer-tree.scss\";\nimport { isEmpty } from \"./../../../../../../utils/objects/helpers\";\nimport UUID from \"uuidjs\";\n\nconst ExplorerTree = props => {\n  const getCloseDirElement = useCallback((name, path) => {\n    return React.createElement(\"li\", {\n      \"data-path\": path.join(\"/\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 10\n      },\n      __self: this\n    }, name);\n  });\n  const getFileElement = useCallback((name, path) => {\n    return;\n    React.createElement(\"li\", {\n      \"data-path\": path.join(\"/\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14\n      },\n      __self: this\n    }, name);\n  });\n  console.log(props.root);\n\n  const renderDirElements = (name, content, path) => {\n    switch (typeof content) {\n      case Object:\n        {\n          if (content._open === true) {\n            renderDir(content, path.push(name));\n          } else {\n            return getCloseDirElement(name, path);\n          }\n\n          break;\n        }\n\n      case Array:\n        {\n          return getFileElement(name, path);\n          break;\n        }\n    }\n  };\n\n  const renderDir = (dir, path) => {\n    Object.entries(dir).map(([name, content]) => {\n      if (name === \"_open\") {\n        return null;\n      }\n\n      return React.createElement(\"ul\", {\n        className: \"dir-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, renderDirElements(name, content, path));\n    });\n  };\n\n  return React.createElement(\"div\", {\n    className: \"explorer-tree\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, renderDir(props.root, []));\n};\n\nconst mapStateToProps = state => ({\n  root: state.playList.root\n});\n\nexport default connect(mapStateToProps)(ExplorerTree);","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/pages/app/components/PlayListExplorer/Explorer/ExplorerTree/ExplorerTree.js"],"names":["React","useCallback","connect","isEmpty","UUID","ExplorerTree","props","getCloseDirElement","name","path","join","getFileElement","console","log","root","renderDirElements","content","Object","_open","renderDir","push","Array","dir","entries","map","mapStateToProps","state","playList"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,WAAhB,QAAmC,OAAnC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAO,sBAAP;AACA,SAASC,OAAT,QAAwB,2CAAxB;AACA,OAAOC,IAAP,MAAiB,QAAjB;;AAEA,MAAMC,YAAY,GAAGC,KAAK,IAAI;AAE1B,QAAMC,kBAAkB,GAAGN,WAAW,CAAC,CAACO,IAAD,EAAOC,IAAP,KAAgB;AACnD,WAAO;AAAI,mBAAWA,IAAI,CAACC,IAAL,CAAU,GAAV,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAgCF,IAAhC,CAAP;AACH,GAFqC,CAAtC;AAGA,QAAMG,cAAc,GAAGV,WAAW,CAAC,CAACO,IAAD,EAAOC,IAAP,KAAgB;AAC/C;AACI;AACI,mBAAWA,IAAI,CAACC,IAAL,CAAU,GAAV,CADf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAESF,IAFT;AAIP,GANiC,CAAlC;AAOAI,EAAAA,OAAO,CAACC,GAAR,CAAYP,KAAK,CAACQ,IAAlB;;AAEA,QAAMC,iBAAiB,GAAG,CAACP,IAAD,EAAOQ,OAAP,EAAgBP,IAAhB,KAAyB;AAC/C,YAAQ,OAAOO,OAAf;AACI,WAAKC,MAAL;AAAa;AACT,cAAID,OAAO,CAACE,KAAR,KAAkB,IAAtB,EAA4B;AACxBC,YAAAA,SAAS,CAACH,OAAD,EAAUP,IAAI,CAACW,IAAL,CAAUZ,IAAV,CAAV,CAAT;AACH,WAFD,MAEO;AACH,mBAAOD,kBAAkB,CAACC,IAAD,EAAOC,IAAP,CAAzB;AACH;;AACD;AACH;;AACD,WAAKY,KAAL;AAAY;AACR,iBAAOV,cAAc,CAACH,IAAD,EAAOC,IAAP,CAArB;AACA;AACH;AAZL;AAcH,GAfD;;AAiBA,QAAMU,SAAS,GAAG,CAACG,GAAD,EAAMb,IAAN,KAAe;AAC7BQ,IAAAA,MAAM,CAACM,OAAP,CAAeD,GAAf,EAAoBE,GAApB,CAAwB,CAAC,CAAChB,IAAD,EAAOQ,OAAP,CAAD,KAAqB;AACzC,UAAIR,IAAI,KAAK,OAAb,EAAsB;AAClB,eAAO,IAAP;AACH;;AACD,aACI;AAAI,QAAA,SAAS,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKO,iBAAiB,CAACP,IAAD,EAAOQ,OAAP,EAAgBP,IAAhB,CADtB,CADJ;AAKH,KATD;AAUH,GAXD;;AAaA,SACI;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKU,SAAS,CAACb,KAAK,CAACQ,IAAP,EAAa,EAAb,CADd,CADJ;AAKH,CAjDD;;AAmDA,MAAMW,eAAe,GAAGC,KAAK,KAAK;AAC9BZ,EAAAA,IAAI,EAAEY,KAAK,CAACC,QAAN,CAAeb;AADS,CAAL,CAA7B;;AAIA,eAAeZ,OAAO,CAACuB,eAAD,CAAP,CAAyBpB,YAAzB,CAAf","sourcesContent":["import React, { useCallback } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport \"./explorer-tree.scss\";\r\nimport { isEmpty } from \"./../../../../../../utils/objects/helpers\";\r\nimport UUID from \"uuidjs\";\r\n\r\nconst ExplorerTree = props => {\r\n\r\n    const getCloseDirElement = useCallback((name, path) => {\r\n        return <li data-path={path.join(\"/\")}>{name}</li>\r\n    })\r\n    const getFileElement = useCallback((name, path) => {\r\n        return \r\n            <li \r\n                data-path={path.join(\"/\")}>\r\n                    {name}\r\n            </li>\r\n    })\r\n    console.log(props.root)\r\n\r\n    const renderDirElements = (name, content, path) => {\r\n        switch (typeof content) {\r\n            case Object: {\r\n                if (content._open === true) {\r\n                    renderDir(content, path.push(name))\r\n                } else {\r\n                    return getCloseDirElement(name, path)\r\n                }\r\n                break;\r\n            }\r\n            case Array: {\r\n                return getFileElement(name, path)\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    const renderDir = (dir, path) => {\r\n        Object.entries(dir).map(([name, content]) => {\r\n            if (name === \"_open\") {\r\n                return null;\r\n            }\r\n            return (\r\n                <ul className=\"dir-content\">\r\n                    {renderDirElements(name, content, path)}\r\n                </ul>\r\n            )\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"explorer-tree\">\r\n            {renderDir(props.root, [])}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    root: state.playList.root,\r\n})\r\n\r\nexport default connect(mapStateToProps)(ExplorerTree);"]},"metadata":{},"sourceType":"module"}