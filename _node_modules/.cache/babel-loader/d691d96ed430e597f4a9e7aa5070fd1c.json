{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJEKTY\\\\APKI\\\\DjTruck\\\\djtruck\\\\src\\\\pages\\\\app\\\\components\\\\Console\\\\Effector\\\\Effector.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport \"./effector-channel.scss\";\nimport DryWetKnob from \"./DryWetKnob/DryWetKnob\";\nimport EffectorButton from \"./EffectorButton/EffectorButton\";\nimport EffectorKnob from \"./EffectorKnob/EffectorKnob\";\nimport { Dropdown, DropdownButton } from \"react-bootstrap\";\n\nconst Effector = props => {\n  const [currentEffect, setCurrentEffect] = useState('none');\n  const [effectorParams, setEffectorParams] = useState([]);\n\n  const paramChangeHandle = (param, value) => {};\n\n  useEffect(() => {\n    let currentEffectParams = props.effects[currentEffect];\n\n    if (!currentEffectParams) {\n      return;\n    }\n\n    console.log('params', currentEffectParams);\n    setEffectorParams(Object.entries(currentEffectParams).map(([name, params]) => {\n      console.log(name, params);\n\n      if (params.type === \"float\") {\n        return React.createElement(EffectorKnob, {\n          key: name + params.description,\n          scale: params.max - params.min,\n          initValue: params.defaultValue,\n          alt: params.description,\n          showValue: true,\n          onChange: paramChangeHandle.bind(null, name),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 28\n          },\n          __self: this\n        });\n      } else if (params.type === \"bool\") {\n        return React.createElement(EffectorButton, {\n          onClick: () => {},\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 36\n          },\n          __self: this\n        }, params.description);\n      }\n    }));\n  }, [currentEffect, props.effects]);\n  const availableEffects = Object.keys(props.effects).map((effect, index) => {\n    return React.createElement(Dropdown.Item, {\n      key: effect + \"-\" + index,\n      onClick: setCurrentEffect.bind(null, effect),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, effect);\n  });\n  console.log(effectorParams);\n  return React.createElement(\"div\", {\n    className: \"effector-channel\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"dra-wet-knob\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, React.createElement(DryWetKnob, {\n    alt: \"D/W\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"effect-selector\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(DropdownButton, {\n    title: currentEffect,\n    className: \"btn-effect-select\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(Dropdown.Item, {\n    key: \"none\",\n    onClick: setCurrentEffect.bind(null, null),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, none), availableEffects)), React.createElement(\"div\", {\n    className: \"effector-param\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, effectorParams));\n};\n\nconst mapStateToProps = (state, ownProps) => ({\n  effects: state.effector.effects\n});\n\nexport default connect(mapStateToProps)(Effector);","map":{"version":3,"sources":["D:/PROJEKTY/APKI/DjTruck/djtruck/src/pages/app/components/Console/Effector/Effector.js"],"names":["React","useState","useEffect","connect","DryWetKnob","EffectorButton","EffectorKnob","Dropdown","DropdownButton","Effector","props","currentEffect","setCurrentEffect","effectorParams","setEffectorParams","paramChangeHandle","param","value","currentEffectParams","effects","console","log","Object","entries","map","name","params","type","description","max","min","defaultValue","bind","availableEffects","keys","effect","index","none","mapStateToProps","state","ownProps","effector"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport \"./effector-channel.scss\";\r\nimport DryWetKnob from \"./DryWetKnob/DryWetKnob\";\r\nimport EffectorButton from \"./EffectorButton/EffectorButton\";\r\nimport EffectorKnob from \"./EffectorKnob/EffectorKnob\";\r\nimport { Dropdown, DropdownButton } from \"react-bootstrap\";\r\nconst Effector = props => {\r\n\r\n    const [currentEffect, setCurrentEffect] = useState('none');\r\n    const [effectorParams, setEffectorParams] = useState([]);\r\n\r\n\r\n    const paramChangeHandle = (param, value) => {\r\n\r\n\r\n    } \r\n\r\n    useEffect(() => {\r\n        let currentEffectParams = props.effects[currentEffect];\r\n        if(!currentEffectParams){\r\n            return;\r\n        }\r\n        console.log('params', currentEffectParams)\r\n        setEffectorParams(Object.entries(currentEffectParams).map(([name, params]) => {\r\n            console.log(name, params)\r\n            if (params.type === \"float\") {\r\n                return (<EffectorKnob key={name + params.description}\r\n                          scale={params.max - params.min}\r\n                          initValue = {params.defaultValue}\r\n                          alt={params.description}\r\n                          showValue\r\n                          onChange={paramChangeHandle.bind(null, name)}\r\n                       />)\r\n            } else if (params.type === \"bool\"){\r\n                return (<EffectorButton \r\n                            onClick={()=>{\r\n\r\n                            }}\r\n                        >\r\n                            {params.description}\r\n                        </EffectorButton>);\r\n            }\r\n        }))\r\n    }, [currentEffect, props.effects])\r\n\r\n\r\n    const availableEffects = Object.keys(props.effects).map((effect, index) => {\r\n        return (<Dropdown.Item key={effect + \"-\" + index} onClick={setCurrentEffect.bind(null, effect)}>{effect}</Dropdown.Item>)\r\n    })\r\n\r\n    console.log(effectorParams)\r\n\r\n    return (\r\n        <div className=\"effector-channel\">\r\n            <div className=\"dra-wet-knob\">\r\n                <DryWetKnob alt=\"D/W\" />\r\n            </div>\r\n            <div className=\"effect-selector\">\r\n                <DropdownButton title={currentEffect} className=\"btn-effect-select\">\r\n                    <Dropdown.Item key={\"none\"} onClick={setCurrentEffect.bind(null, null)}>{none}</Dropdown.Item>\r\n                    {availableEffects}\r\n                </DropdownButton>\r\n            </div>\r\n            <div className=\"effector-param\">\r\n                {effectorParams}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => ({\r\n    effects: state.effector.effects,\r\n})\r\n\r\nexport default connect(mapStateToProps)(Effector);\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}