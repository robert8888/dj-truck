{"ast":null,"code":"import Effect from \"./../effect\";\nexport default class Distortion extends Effect {\n  static defaultParams() {\n    return {\n      params: {\n        gain: {\n          min: 0,\n          max: 100,\n          defaultValue: 10,\n          type: \"float\",\n          description: \"gain\"\n        }\n      }\n    };\n  }\n\n  constructor(context, params) {\n    super();\n    this._context = context;\n    this._default = Distortion.defaultParams().params;\n\n    this._buildNodes(context);\n\n    this._initParams(params);\n  }\n\n  _buildNodes() {\n    this.waveShaperNode = this._context.createWaveShaper();\n    this.inputNode = this.outputNode = this.waveShaperNode;\n  }\n\n  get name() {\n    return \"Distortion\";\n  }\n\n  get gain() {\n    return this._gain;\n  }\n\n  set gain(value) {\n    value = this._valueToRange(value, \"gain\");\n    this._gain = value;\n\n    this._adjustGain();\n  }\n\n  _adjustGain() {\n    let gain = this.gain;\n    let n_samples = 44100;\n    let curve = new Float32Array(n_samples);\n    let deg = Math.PI / 180;\n    let x;\n\n    for (let i = 0; i < n_samples; ++i) {\n      x = i * 2 / n_samples - 1;\n      curve[i] = (3 + gain) * x * 20 * deg / (Math.PI + gain * Math.abs(x));\n    }\n\n    this.waveShaperNode.curve = curve;\n  }\n\n}","map":{"version":3,"sources":["D:/PROJEKTY/APKI/dj-truck/src/pages/app/core/console/effector/effects/distortion/distortion.js"],"names":["Effect","Distortion","defaultParams","params","gain","min","max","defaultValue","type","description","constructor","context","_context","_default","_buildNodes","_initParams","waveShaperNode","createWaveShaper","inputNode","outputNode","name","_gain","value","_valueToRange","_adjustGain","n_samples","curve","Float32Array","deg","Math","PI","x","i","abs"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,aAAnB;AAEA,eAAe,MAAMC,UAAN,SAAyBD,MAAzB,CAAgC;AAE3C,SAAOE,aAAP,GAAsB;AAClB,WAAO;AACHC,MAAAA,MAAM,EAAG;AACLC,QAAAA,IAAI,EAAE;AACFC,UAAAA,GAAG,EAAE,CADH;AAEFC,UAAAA,GAAG,EAAE,GAFH;AAGFC,UAAAA,YAAY,EAAE,EAHZ;AAIFC,UAAAA,IAAI,EAAE,OAJJ;AAKFC,UAAAA,WAAW,EAAG;AALZ;AADD;AADN,KAAP;AAWH;;AAEDC,EAAAA,WAAW,CAACC,OAAD,EAAUR,MAAV,EAAiB;AACxB;AACA,SAAKS,QAAL,GAAgBD,OAAhB;AACA,SAAKE,QAAL,GAAgBZ,UAAU,CAACC,aAAX,GAA2BC,MAA3C;;AAEA,SAAKW,WAAL,CAAiBH,OAAjB;;AACA,SAAKI,WAAL,CAAiBZ,MAAjB;AACH;;AAEDW,EAAAA,WAAW,GAAE;AACT,SAAKE,cAAL,GAAsB,KAAKJ,QAAL,CAAcK,gBAAd,EAAtB;AACA,SAAKC,SAAL,GAAiB,KAAKC,UAAL,GAAkB,KAAKH,cAAxC;AACH;;AAED,MAAII,IAAJ,GAAU;AACN,WAAO,YAAP;AACH;;AAED,MAAIhB,IAAJ,GAAU;AACN,WAAO,KAAKiB,KAAZ;AACH;;AAED,MAAIjB,IAAJ,CAASkB,KAAT,EAAe;AACXA,IAAAA,KAAK,GAAG,KAAKC,aAAL,CAAmBD,KAAnB,EAA0B,MAA1B,CAAR;AACA,SAAKD,KAAL,GAAaC,KAAb;;AACA,SAAKE,WAAL;AACH;;AAEDA,EAAAA,WAAW,GAAG;AACV,QAAIpB,IAAI,GAAG,KAAKA,IAAhB;AACA,QAAIqB,SAAS,GAAG,KAAhB;AACA,QAAIC,KAAK,GAAG,IAAIC,YAAJ,CAAiBF,SAAjB,CAAZ;AACA,QAAIG,GAAG,GAAGC,IAAI,CAACC,EAAL,GAAU,GAApB;AACA,QAAIC,CAAJ;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,SAApB,EAA+B,EAAEO,CAAjC,EAAqC;AACjCD,MAAAA,CAAC,GAAGC,CAAC,GAAG,CAAJ,GAAQP,SAAR,GAAoB,CAAxB;AACAC,MAAAA,KAAK,CAACM,CAAD,CAAL,GAAW,CAAC,IAAI5B,IAAL,IAAa2B,CAAb,GAAiB,EAAjB,GAAsBH,GAAtB,IAA6BC,IAAI,CAACC,EAAL,GAAU1B,IAAI,GAAGyB,IAAI,CAACI,GAAL,CAASF,CAAT,CAA9C,CAAX;AACH;;AAED,SAAKf,cAAL,CAAoBU,KAApB,GAA4BA,KAA5B;AACH;;AAzD0C","sourcesContent":["import Effect from \"./../effect\";\r\n\r\nexport default class Distortion extends Effect {\r\n\r\n    static defaultParams(){\r\n        return {\r\n            params : {\r\n                gain: {\r\n                    min: 0,\r\n                    max: 100,\r\n                    defaultValue: 10,\r\n                    type: \"float\",\r\n                    description : \"gain\"\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    constructor(context, params){\r\n        super();\r\n        this._context = context;\r\n        this._default = Distortion.defaultParams().params;\r\n\r\n        this._buildNodes(context);\r\n        this._initParams(params);\r\n    }\r\n\r\n    _buildNodes(){\r\n        this.waveShaperNode = this._context.createWaveShaper();\r\n        this.inputNode = this.outputNode = this.waveShaperNode;\r\n    }\r\n\r\n    get name(){\r\n        return \"Distortion\"\r\n    }\r\n\r\n    get gain(){\r\n        return this._gain;\r\n    }\r\n\r\n    set gain(value){\r\n        value = this._valueToRange(value, \"gain\");\r\n        this._gain = value;\r\n        this._adjustGain();\r\n    }\r\n\r\n    _adjustGain() {\r\n        let gain = this.gain;\r\n        let n_samples = 44100;\r\n        let curve = new Float32Array(n_samples);\r\n        let deg = Math.PI / 180;\r\n        let x;\r\n\r\n        for (let i = 0; i < n_samples; ++i ) {\r\n            x = i * 2 / n_samples - 1;\r\n            curve[i] = (3 + gain) * x * 20 * deg / (Math.PI + gain * Math.abs(x));\r\n        }\r\n\r\n        this.waveShaperNode.curve = curve;\r\n    }\r\n\t\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}